{"version":3,"sources":["../../../../../usr/lib/node_modules/canvas-sketch-cli/node_modules/browser-pack/_prelude.js","app.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/object-assign/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/right-now/browser.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/is-promise/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/is-dom/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/util.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/repeat-string/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/deep-equal/lib/keys.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/deep-equal/lib/is_arguments.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/deep-equal/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/dateformat/lib/dateformat.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/pad-left/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/save.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/accessibility.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/paper-sizes.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/defined/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/convert-length/convert-length.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/distances.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/resizeCanvas.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/node_modules/get-canvas-context/index.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/createCanvas.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/SketchManager.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/core/keyboardShortcuts.js","node_modules/canvas-sketch/dist/node_modules/canvas-sketch/lib/canvas-sketch.js","node_modules/three/build/three.js","node_modules/three/examples/js/controls/OrbitControls.js","shaders/fragment.glsl","shaders/vertex.glsl","canvas-sketch-cli/injected/storage-key.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_fragment","_interopRequireDefault","_vertex","canvasSketch","global","THREE","context","renderer","WebGLRenderer","setClearColor","camera","PerspectiveCamera","position","set","lookAt","Vector3","scene","Scene","material","ShaderMaterial","uniforms","time","type","value","vertexShader","default","fragmentShader","geometry","BoxGeometry","mesh","InstancedMesh","count","random","Float32Array","depth","pos","transform","Object3D","ii","jj","j","k","updateMatrix","Math","setMatrixAt","matrix","setAttribute","InstancedBufferAttribute","add","AmbientLight","light","PointLight","multiplyScalar","[object Object]","pixelRatio","viewportWidth","viewportHeight","setPixelRatio","setSize","aspect","updateProjectionMatrix","render","dispose","animate","attributes","antialias","getOwnPropertySymbols","Object","hasOwnProperty","prototype","propIsEnumerable","propertyIsEnumerable","objectAssign","assign","test1","String","getOwnPropertyNames","test2","fromCharCode","map","join","test3","split","forEach","letter","keys","err","shouldUseNative","target","source","from","symbols","to","val","TypeError","toObject","s","arguments","key","browser","commonjsGlobal","performance","now","Date","isPromise_1","obj","then","isDom","window","Node","nodeType","nodeName","getClientAPI","defined","arguments$1","isBrowser","document","cache","shim","push","supportsArgumentsClass","toString","supported","object","unsupported","pSlice","Array","slice","deepEqual","actual","expected","opts","getTime","strict","b","isUndefinedOrNull","is_arguments","isBuffer","ka","kb","sort","objEquiv","x","copy","token","timezone","timezoneClip","dateFormat","date","mask","utc","gmt","undefined","isArray","toLowerCase","test","isNaN","maskSlice","masks","_","d","D","m","y","H","M","L","getTimezoneOffset","W","targetThursday","getFullYear","getMonth","getDate","setDate","getDay","firstThursday","ds","setHours","getHours","floor","getWeek","N","dow","getDayOfWeek","flags","dd","pad","ddd","i18n","dayNames","dddd","mm","mmm","monthNames","mmmm","yy","yyyy","h","hh","HH","MM","ss","l","round","timeNames","tt","T","TT","Z","match","pop","replace","abs","S","len","shortDate","mediumDate","longDate","fullDate","shortTime","mediumTime","longTime","isoDate","isoTime","isoDateTime","isoUtcDateTime","expiresHeaderFormat","res","repeatString","str","num","max","substr","link","padLeft","ch","noop","defaultExts","extension","prefix","suffix","supportedEncodings","stream","isStart","Promise","resolve","reject","filename","resolveFilename","frame","func","client","output","ev","saveDataURL","dataURL","splitIndex","indexOf","base64","byteString","atob","mimeMatch","exec","mime","ab","ArrayBuffer","ia","Uint8Array","charCodeAt","Blob","createBlobFromDataURL","blob","saveBlob","createElement","style","visibility","download","href","URL","createObjectURL","body","appendChild","onclick","setTimeout","revokeObjectURL","parentElement","removeChild","removeAttribute","click","opt","file","totalFrames","layerStr","isFinite","totalLayers","layer","filter","Boolean","name","timeStamp","hash","commonTypos","dimension","animated","animating","unit","P5","pixellated","looping","pixelPerInch","allKeys","checkSettings","settings","console","warn","includes","paperSizes","reduce","dict","preset","item","units","dimensions","defined$1","conversions","system","factor","cm","pt","pc","in","ft","anchors","metric","ratio","imperial","convertLength","fromUnit","toUnit","pixelsPerInch","precision","roundPixel","toFactor","fromFactor","isToPixel","fromUnitData","toUnitData","anchor","result","decimals","Number","convertDistance$1","unitsFrom","unitsTo","resizeCanvas","props","width","height","styleWidth","styleHeight","canvasWidth","canvasHeight","hasDimensions","checkIfHasDimensions","exporting","scaleToFit","scaleToView","exportPixelRatio","bleed","devicePixelRatio","basePixelRatio","maxPixelRatio","min","trimWidth","trimHeight","ref","element","parent","innerWidth","innerHeight","getBoundingClientRect","getParentSize","parentWidth","parentHeight","getDimensionsFromPreset","highest","lowest","orientation","landscape","realWidth","realHeight","windowAspect","scaleToFitPadding","maxWidth","maxHeight","getCanvasContext_1","canvas","gl","attribs","names","getContext","createCanvas","ownsCanvas","newCanvas","createCanvasElement","pixelated","imageSmoothingEnabled","mozImageSmoothingEnabled","oImageSmoothingEnabled","webkitImageSmoothingEnabled","msImageSmoothingEnabled","SketchManager","_settings","_props","_sketch","_raf","_recordTimeout","_lastRedrawResult","_isP5Resizing","_keyboardShortcuts","handler","enabled","keyCode","altKey","metaKey","ctrlKey","togglePlay","preventDefault","commit","save","addEventListener","removeEventListener","keyboardShortcuts","this$1","hotkeys","shiftKey","recording","endRecord","run","record","exportFrame","playing","pause","play","_animateHandler","_resizeHandler","resize","sketch","get","this","_computePlayhead","currentTime","duration","_computeFrame","playhead","fps","_computeCurrentFrame","_getSizeProps","started","_signalBegin","tick","_cancelTimeouts","cancelAnimationFrame","_lastTime","requestAnimationFrame","error","stop","deltaTime","exportOpts","_createExportOptions","frameInterval","log","_signalEnd","beginRecord","_wrapContextScale","catch","response","begin","end","wasRecording","sequence","encoding","encodingQuality","dateformat","all","preExport","commitOpts","_doExportFrame","drawResult","concat","hasDataObject","data","toDataURL","exportCanvas","layerList","curOpt","saveParam","savePromise","parts","saveFile","saveResult","savedEvents","eventWithOutput","find","outputName","isClient","some","isStreaming","ofSeq","postExport","cb","_preRender","_postRender","p5","scale","scaleX","scaleY","scaleContext","restore","flush","redraw","submitDrawCall","update","notYetSupported","oldCanvas","oldContext","timeOpts","timeProps","getTimeProps","_setupGLKey","_appendCanvasIfNeeded","draw","oldSizes","newProps","pixelDensity","styleCanvas","newSizes","changed","deepEqual_1","_sizeChanged","frameIntervalMS","deltaTimeMS","hasDuration","isNewFrame","playbackRate","newTime","timeScale","isFinished","isLoopStart","loop","lastFrame","dispatch","mount","unmount","detach","ctx","clear","clearColor","bufferData","hasTotalFrames","totalFramesFromDuration","durationFromTotalFrames","Infinity","startTime","startFrame","hasStartTime","hasStartFrame","setup","loadAndRun","newSettings","load","unload","destroy","createSketch","preload","P5Constructor","p5Sketch","isGL","WEBGL","P2D","noLoop","setAttributes","_renderer","drawingContext","loader","attach","message","CACHE","runtimeCollisions","hotID","isHot","hot","id","isInjecting","previousData","cacheGet","next","oldManager","manager","PaperSizes","factory","runtime","undefined$1","Op","hasOwn","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","defineProperty","enumerable","configurable","writable","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","Context","_invoke","state","GenStateSuspendedStart","method","arg","GenStateExecuting","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","tryCatch","done","GenStateSuspendedYield","makeInvokeMethod","fn","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","invoke","__await","unwrapped","info","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","constructor","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","iter","reverse","skipTempReset","prev","charAt","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function","CullFaceNone","CullFaceBack","CullFaceFront","PCFShadowMap","PCFSoftShadowMap","VSMShadowMap","FrontSide","BackSide","DoubleSide","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","CineonToneMapping","ACESFilmicToneMapping","CustomToneMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipmapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","UnsignedInt248Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","DepthStencilFormat","RedFormat","RedIntegerFormat","RGFormat","RGIntegerFormat","RGBIntegerFormat","RGBAIntegerFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","RGB_ETC2_Format","RGBA_ETC2_EAC_Format","RGBA_ASTC_4x4_Format","RGBA_ASTC_5x4_Format","RGBA_ASTC_5x5_Format","RGBA_ASTC_6x5_Format","RGBA_ASTC_6x6_Format","RGBA_ASTC_8x5_Format","RGBA_ASTC_8x6_Format","RGBA_ASTC_8x8_Format","RGBA_ASTC_10x5_Format","RGBA_ASTC_10x6_Format","RGBA_ASTC_10x8_Format","RGBA_ASTC_10x10_Format","RGBA_ASTC_12x10_Format","RGBA_ASTC_12x12_Format","RGBA_BPTC_Format","SRGB8_ALPHA8_ASTC_4x4_Format","SRGB8_ALPHA8_ASTC_5x4_Format","SRGB8_ALPHA8_ASTC_5x5_Format","SRGB8_ALPHA8_ASTC_6x5_Format","SRGB8_ALPHA8_ASTC_6x6_Format","SRGB8_ALPHA8_ASTC_8x5_Format","SRGB8_ALPHA8_ASTC_8x6_Format","SRGB8_ALPHA8_ASTC_8x8_Format","SRGB8_ALPHA8_ASTC_10x5_Format","SRGB8_ALPHA8_ASTC_10x6_Format","SRGB8_ALPHA8_ASTC_10x8_Format","SRGB8_ALPHA8_ASTC_10x10_Format","SRGB8_ALPHA8_ASTC_12x10_Format","SRGB8_ALPHA8_ASTC_12x12_Format","LoopRepeat","ZeroCurvatureEnding","NormalAnimationBlendMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","TangentSpaceNormalMap","ObjectSpaceNormalMap","KeepStencilOp","AlwaysStencilFunc","StaticDrawUsage","DynamicDrawUsage","GLSL3","asyncGeneratorStep","gen","_next","_throw","_defineProperties","descriptor","_createClass","Constructor","protoProps","staticProps","_inheritsLoose","subClass","superClass","_setPrototypeOf","_assertThisInitialized","ReferenceError","_arrayLikeToArray","arr","arr2","_createForOfIteratorHelperLoose","allowArrayLike","it","minLen","_unsupportedIterableToArray","bind","EventDispatcher","listener","_listeners","listeners","hasEventListener","listenerArray","index","splice","dispatchEvent","event","array","_lut","_seed","MathUtils","DEG2RAD","PI","RAD2DEG","generateUUID","d0","d1","d2","d3","toUpperCase","clamp","euclideanModulo","mapLinear","a1","a2","b1","b2","lerp","damp","lambda","dt","exp","pingpong","smoothstep","smootherstep","randInt","low","high","randFloat","randFloatSpread","range","seededRandom","degToRad","degrees","radToDeg","radians","isPowerOfTwo","ceilPowerOfTwo","pow","ceil","LN2","floorPowerOfTwo","setQuaternionFromProperEuler","q","order","cos","sin","c2","s2","c13","s13","c1_3","s1_3","c3_1","s3_1","Vector2","_proto","setScalar","scalar","setX","setY","setComponent","getComponent","clone","v","w","addVectors","addScalar","addScaledVector","sub","subVectors","subScalar","multiply","divide","divideScalar","applyMatrix3","elements","clampScalar","minVal","maxVal","clampLength","roundToZero","negate","dot","cross","lengthSq","sqrt","manhattanLength","normalize","angle","atan2","distanceTo","distanceToSquared","dx","dy","manhattanDistanceTo","setLength","alpha","lerpVectors","v1","v2","equals","fromArray","offset","toArray","fromBufferAttribute","attribute","getX","getY","rotateAround","center","isVector2","_canvas","Matrix3","n11","n12","n13","n21","n22","n23","n31","n32","n33","te","identity","me","extractBasis","xAxis","yAxis","zAxis","setFromMatrix3Column","setFromMatrix4","multiplyMatrices","premultiply","ae","be","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","determinant","g","invert","t11","t12","t13","det","detInv","transpose","tmp","getNormalMatrix","matrix4","transposeIntoArray","setUvTransform","tx","ty","sx","sy","rotation","cx","cy","rotate","theta","translate","isMatrix3","ImageUtils","getDataURL","image","src","HTMLCanvasElement","createElementNS","ImageData","putImageData","drawImage","textureId","Texture","_EventDispatcher","mapping","wrapS","wrapT","magFilter","minFilter","format","anisotropy","_this","DEFAULT_IMAGE","DEFAULT_MAPPING","uuid","mipmaps","internalFormat","repeat","matrixAutoUpdate","generateMipmaps","premultiplyAlpha","flipY","unpackAlignment","version","onUpdate","toJSON","meta","isRootObject","textures","metadata","images","url","serializeImage","isDataTexture","transformUv","uv","HTMLImageElement","ImageBitmap","isTexture","Vector4","z","setZ","setW","applyMatrix4","setAxisAngleFromQuaternion","acos","setAxisAngleFromRotationMatrix","m11","m12","m13","m21","m22","m23","m31","m32","m33","xx","zz","xy","xz","yz","getZ","getW","isVector4","WebGLRenderTarget","options","scissor","scissorTest","viewport","texture","depthBuffer","stencilBuffer","depthTexture","setTexture","isWebGLRenderTarget","WebGLMultisampleRenderTarget","_WebGLRenderTarget","samples","isWebGLMultisampleRenderTarget","Quaternion","_x","_y","_z","_w","slerp","qa","qb","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","EPSILON","tDir","multiplyQuaternionsFlat","_onChangeCallback","quaternion","setFromEuler","euler","isEuler","_order","c1","c3","s1","s3","setFromAxisAngle","axis","halfAngle","setFromRotationMatrix","trace","_s","_s2","_s3","setFromUnitVectors","vFrom","vTo","angleTo","rotateTowards","step","conjugate","multiplyQuaternions","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","_onChange","callback","isQuaternion","multiplyVectors","applyEuler","applyQuaternion","_quaternion","applyAxisAngle","applyNormalMatrix","qx","qy","qz","qw","ix","iy","iz","iw","project","matrixWorldInverse","projectionMatrix","unproject","projectionMatrixInverse","matrixWorld","transformDirection","crossVectors","ax","ay","az","bx","by","bz","projectOnVector","denominator","projectOnPlane","planeNormal","_vector","reflect","normal","dz","setFromSpherical","setFromSphericalCoords","radius","phi","sinPhiRadius","setFromCylindrical","setFromCylindricalCoords","setFromMatrixPosition","setFromMatrixScale","setFromMatrixColumn","sz","isVector3","Box3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromBufferAttribute","setFromPoints","points","makeEmpty","il","expandByPoint","setFromCenterAndSize","size","halfSize","_vector$1","setFromObject","expandByObject","box","isEmpty","getCenter","getSize","point","expandByVector","vector","expandByScalar","updateWorldMatrix","boundingBox","computeBoundingBox","_box","union","children","containsPoint","containsBox","getParameter","intersectsBox","intersectsSphere","sphere","clampPoint","intersectsPlane","plane","constant","intersectsTriangle","triangle","_center","_extents","_v0","_v1","_v2","_f0","_f1","_f2","axes","satForAxes","_triangleNormal","distanceToPoint","getBoundingSphere","intersect","_points","isBox3","_testAxis","v0","extents","p0","p1","p2","_box$1","Sphere","optionalCenter","maxRadiusSq","radiusSum","deltaLengthSq","getBoundingBox","getMaxScaleOnAxis","_vector$2","_segCenter","_segDir","_diff","_edge1","_edge2","_normal","Ray","origin","direction","ray","at","recast","closestPointToPoint","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","invDet","intersectSphere","tca","radius2","thc","t0","t1","distanceToPlane","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","backfaceCulling","sign","DdN","DdQxE2","DdE1xQ","QdN","Matrix4","n14","n24","n34","n41","n42","n43","n44","copyPosition","setFromMatrix3","makeBasis","extractRotation","_v1$1","scaleZ","makeRotationFromEuler","af","bf","ce","cf","de","df","_ce","_cf","_de","_df","_ae","_af","_be","_bf","ac","ad","bc","bd","_ac","_ad","_bc","_bd","makeRotationFromQuaternion","compose","_zero","_one","eye","up","a14","a24","a34","a41","a42","a43","a44","b14","b24","b34","b41","b42","b43","b44","setPosition","t14","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","makeScale","makeShear","x2","y2","z2","wx","wy","wz","decompose","_m1","invSX","invSY","invSZ","makePerspective","left","right","top","bottom","near","far","makeOrthographic","isMatrix4","_matrix","_quaternion$1","Euler","DefaultOrder","asin","setFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","RotationOrders","Layers","channel","enable","enableAll","toggle","disable","disableAll","layers","_object3DId","_v1$2","_q1","_m1$1","_target","_position","_scale","_quaternion$2","_xAxis","_yAxis","_zAxis","_addedEvent","_removedEvent","DefaultUp","defineProperties","modelViewMatrix","normalMatrix","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","visible","castShadow","receiveShadow","frustumCulled","renderOrder","animations","userData","isObject3D","onBeforeRender","onAfterRender","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateOnWorldAxis","rotateX","rotateY","rotateZ","translateOnAxis","distance","translateX","translateY","translateZ","localToWorld","worldToLocal","isCamera","isLight","remove","getObjectById","getObjectByProperty","getObjectByName","getWorldPosition","getWorldQuaternion","getWorldScale","getWorldDirection","raycast","traverse","traverseVisible","traverseAncestors","updateMatrixWorld","force","updateParents","updateChildren","geometries","materials","shapes","skeletons","serialize","library","JSON","stringify","isInstancedMesh","instanceMatrix","isMesh","isLine","isPoints","parameters","isSkinnedMesh","bindMode","bindMatrix","skeleton","uuids","_i","_l","_i2","_i3","extractFromCache","_shapes","recursive","parse","_vector1","_vector2","_normalMatrix","Plane","setComponents","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","intersectLine","line","delta","start","intersectsLine","startSign","endSign","coplanarPoint","optionalNormalMatrix","referencePoint","isPlane","_v0$1","_v1$3","_v2$1","_v3","_vab","_vac","_vbc","_vap","_vbp","_vcp","Triangle","getNormal","targetLengthSq","getBarycoord","dot00","dot01","dot02","dot11","dot12","denom","invDenom","getUV","p3","uv1","uv2","uv3","isFrontFacing","setFromPointsAndIndices","i0","i1","i2","getArea","getMidpoint","getPlane","d4","vc","d5","d6","vb","va","materialId","Material","fog","blending","side","vertexColors","opacity","transparent","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","depthTest","depthWrite","stencilWriteMask","stencilFunc","stencilRef","stencilFuncMask","stencilFail","stencilZFail","stencilZPass","stencilWrite","clippingPlanes","clipIntersection","clipShadows","shadowSide","colorWrite","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","dithering","alphaTest","premultipliedAlpha","toneMapped","isMaterial","onBeforeCompile","customProgramCacheKey","setValues","newValue","currentValue","isColor","flatShading","isRoot","_data","color","getHex","roughness","metalness","sheen","emissive","emissiveIntensity","specular","shininess","clearcoat","clearcoatRoughness","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","clearcoatNormalScale","matcap","alphaMap","lightMap","lightMapIntensity","aoMap","aoMapIntensity","bumpMap","bumpScale","normalMap","normalMapType","normalScale","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","specularMap","envMap","reflectivity","refractionRatio","combine","envMapIntensity","gradientMap","sizeAttenuation","linewidth","dashSize","gapSize","wireframe","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","morphTargets","morphNormals","skinning","srcPlanes","dstPlanes","_colorKeywords","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","_hslA","_hslB","hue2rgb","SRGBToLinear","LinearToSRGB","Color","setRGB","setHex","setStyle","hex","setHSL","handleAlpha","string","parseFloat","components","parseInt","setColorName","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","copySRGBToLinear","copyLinearToSRGB","convertSRGBToLinear","convertLinearToSRGB","getHexString","getHSL","hue","saturation","lightness","getStyle","offsetHSL","addColors","color1","color2","lerpColors","lerpHSL","normalized","NAMES","MeshBasicMaterial","_Material","isMeshBasicMaterial","_vector$3","_vector2$1","BufferAttribute","itemSize","usage","updateRange","Int8BufferAttribute","Int8Array","Uint8BufferAttribute","Uint8ClampedBufferAttribute","Uint8ClampedArray","Int16BufferAttribute","Int16Array","Uint16BufferAttribute","Uint16Array","Int32BufferAttribute","Int32Array","Uint32BufferAttribute","Uint32Array","Float16BufferAttribute","Float32BufferAttribute","Float64BufferAttribute","Float64Array","arrayMax","isBufferAttribute","onUploadCallback","setUsage","copyAt","index1","index2","copyArray","copyColorsArray","colors","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","setXY","setXYZ","setXYZW","onUpload","isFloat16BufferAttribute","TYPED_ARRAYS","getTypedArray","buffer","_id","_m1$2","_obj","_offset","_box$2","_boxMorphTargets","_vector$4","BufferGeometry","morphAttributes","morphTargetsRelative","groups","boundingSphere","drawRange","isBufferGeometry","getIndex","setIndex","getAttribute","deleteAttribute","hasAttribute","addGroup","materialIndex","clearGroups","setDrawRange","needsUpdate","tangent","computeBoundingSphere","morphAttributesPosition","isGLBufferAttribute","_il","_il2","_morphAttribute","jl","computeFaceNormals","computeTangents","indices","positions","normals","uvs","nVertices","tangents","tan1","tan2","vA","vB","vC","uvA","uvB","uvC","sdir","tdir","group","handleTriangle","tmp2","n2","_i4","_il3","_group","_start","_j","_jl","handleVertex","computeVertexNormals","positionAttribute","normalAttribute","pA","pB","pC","nA","nB","nC","_i5","_il4","_i6","_il5","normalizeNormals","merge","attributeArray1","attribute2","attributeArray2","attributeOffset","toNonIndexed","convertBufferAttribute","array2","geometry2","newAttribute","_name","morphArray","morphAttribute","_newAttribute","_i7","_key","attributeData","hasMorphAttributes","_key2","attributeArray","_attribute2","_attributeData","_name2","_i8","_inverseMatrix","_ray","_sphere","_vA","_vB","_vC","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_uvA","_uvB","_uvC","_intersectionPoint","_intersectionPointWorld","Mesh","updateMorphTargets","checkBufferGeometryIntersection","raycaster","morphPosition","morphInfluences","morphTargetInfluences","influence","boneTransform","intersection","checkIntersection","face","morphTargetDictionary","ml","intersects","groupMaterial","faceIndex","_a","_b","_c","_groupMaterial","isGeometry","_BufferGeometry","widthSegments","heightSegments","depthSegments","scope","vertices","numberOfVertices","groupStart","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","groupCount","_iy","_ix","cloneUniforms","property","mergeUniforms","merged","UniformsUtils","default_vertex","default_fragment","defines","lights","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","uniformsNeedUpdate","glslVersion","Camera","fov","zoom","focus","view","filmGauge","filmOffset","isShaderMaterial","isPerspectiveCamera","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","skew","CubeCamera","_Object3D","renderTarget","isWebGLCubeRenderTarget","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","_this$children","currentXrEnabled","xr","currentRenderTarget","getRenderTarget","setRenderTarget","CubeTexture","_Texture","_needsFlipEnvMap","isCubeTexture","WebGLCubeRenderTarget","dummy","isInteger","fromEquirectangularTexture","shader","tEquirect","currentMinFilter","stencil","DataTexture","_sphere$1","_vector$5","Frustum","p4","planes","frustum","setFromProjectionMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","intersectsObject","intersectsSprite","sprite","negRadius","WebGLAnimation","isAnimating","animationLoop","requestId","onAnimationFrame","setAnimationLoop","setContext","WebGLAttributes","capabilities","isWebGL2","buffers","WeakMap","isInterleavedBufferAttribute","deleteBuffer","delete","bufferType","cached","bytesPerElement","elementSize","createBuffer","bindBuffer","BYTES_PER_ELEMENT","bufferSubData","subarray","updateBuffer","PlaneGeometry","width_half","height_half","segment_width","segment_height","ShaderChunk","alphamap_fragment","alphamap_pars_fragment","alphatest_fragment","aomap_fragment","aomap_pars_fragment","begin_vertex","beginnormal_vertex","bsdfs","bumpmap_pars_fragment","clipping_planes_fragment","clipping_planes_pars_fragment","clipping_planes_pars_vertex","clipping_planes_vertex","color_fragment","color_pars_fragment","color_pars_vertex","color_vertex","common","cube_uv_reflection_fragment","defaultnormal_vertex","displacementmap_pars_vertex","displacementmap_vertex","emissivemap_fragment","emissivemap_pars_fragment","encodings_fragment","encodings_pars_fragment","envmap_fragment","envmap_common_pars_fragment","envmap_pars_fragment","envmap_pars_vertex","envmap_physical_pars_fragment","envmap_vertex","fog_vertex","fog_pars_vertex","fog_fragment","fog_pars_fragment","gradientmap_pars_fragment","lightmap_fragment","lightmap_pars_fragment","lights_lambert_vertex","lights_pars_begin","lights_toon_fragment","lights_toon_pars_fragment","lights_phong_fragment","lights_phong_pars_fragment","lights_physical_fragment","lights_physical_pars_fragment","lights_fragment_begin","lights_fragment_maps","lights_fragment_end","logdepthbuf_fragment","logdepthbuf_pars_fragment","logdepthbuf_pars_vertex","logdepthbuf_vertex","map_fragment","map_pars_fragment","map_particle_fragment","map_particle_pars_fragment","metalnessmap_fragment","metalnessmap_pars_fragment","morphnormal_vertex","morphtarget_pars_vertex","morphtarget_vertex","normal_fragment_begin","normal_fragment_maps","normalmap_pars_fragment","clearcoat_normal_fragment_begin","clearcoat_normal_fragment_maps","clearcoat_pars_fragment","packing","premultiplied_alpha_fragment","project_vertex","dithering_fragment","dithering_pars_fragment","roughnessmap_fragment","roughnessmap_pars_fragment","shadowmap_pars_fragment","shadowmap_pars_vertex","shadowmap_vertex","shadowmask_pars_fragment","skinbase_vertex","skinning_pars_vertex","skinning_vertex","skinnormal_vertex","specularmap_fragment","specularmap_pars_fragment","tonemapping_fragment","tonemapping_pars_fragment","transmissionmap_fragment","transmissionmap_pars_fragment","uv_pars_fragment","uv_pars_vertex","uv_vertex","uv2_pars_fragment","uv2_pars_vertex","uv2_vertex","worldpos_vertex","background_frag","background_vert","cube_frag","cube_vert","depth_frag","depth_vert","distanceRGBA_frag","distanceRGBA_vert","equirect_frag","equirect_vert","linedashed_frag","linedashed_vert","meshbasic_frag","meshbasic_vert","meshlambert_frag","meshlambert_vert","meshmatcap_frag","meshmatcap_vert","meshtoon_frag","meshtoon_vert","meshphong_frag","meshphong_vert","meshphysical_frag","meshphysical_vert","normal_frag","normal_vert","points_frag","points_vert","shadow_frag","shadow_vert","sprite_frag","sprite_vert","UniformsLib","diffuse","uvTransform","uv2Transform","specularmap","envmap","flipEnvMap","maxMipLevel","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","gradientmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","lightProbe","directionalLights","properties","directionalLightShadows","shadowBias","shadowNormalBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","decay","spotLightShadows","spotShadowMap","spotShadowMatrix","pointLights","pointLightShadows","shadowCameraNear","shadowCameraFar","pointShadowMap","pointShadowMatrix","hemisphereLights","skyColor","groundColor","rectAreaLights","ltc_1","ltc_2","ShaderLib","basic","lambert","phong","standard","toon","dashed","totalSize","background","t2D","cube","equirect","distanceRGBA","referencePosition","nearDistance","farDistance","shadow","WebGLBackground","cubemaps","objects","planeMesh","boxMesh","clearAlpha","currentBackground","currentBackgroundVersion","currentTonemapping","setClear","getClearColor","getClearAlpha","setClearAlpha","renderList","forceClear","isScene","session","getSession","environmentBlendMode","autoClear","autoClearColor","autoClearDepth","autoClearStencil","toneMapping","unshift","WebGLBindingStates","maxVertexAttributes","vaoAvailable","bindingStates","defaultState","createBindingState","currentState","bindVertexArrayObject","vao","bindVertexArray","bindVertexArrayOES","deleteVertexArrayObject","deleteVertexArray","deleteVertexArrayOES","newAttributes","enabledAttributes","attributeDivisors","program","initAttributes","enableAttribute","enableAttributeAndDivisor","meshPerAttribute","enableVertexAttribArray","disableUnusedAttributes","disableVertexAttribArray","vertexAttribPointer","stride","vertexAttribIPointer","resetDefaultState","updateBuffers","programMap","stateMap","createVertexArray","createVertexArrayOES","getBindingState","cachedAttributes","geometryAttributes","attributesNum","cachedAttribute","geometryAttribute","saveCache","isInstancedBufferGeometry","programAttributes","getAttributes","materialDefaultAttributeValues","programAttribute","isInstancedInterleavedBuffer","_maxInstanceCount","isInstancedBufferAttribute","_attribute","_buffer","_type","instanceColor","_buffer2","_type2","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","geometryId","programId","releaseStatesOfGeometry","releaseStatesOfProgram","WebGLBufferRenderer","mode","setMode","drawArrays","renderInstances","primcount","methodName","WebGLCapabilities","maxAnisotropy","getMaxPrecision","getShaderPrecisionFormat","WebGL2RenderingContext","WebGL2ComputeRenderingContext","maxPrecision","logarithmicDepthBuffer","maxTextures","maxVertexTextures","maxTextureSize","maxCubemapSize","maxAttributes","maxVertexUniforms","maxVaryings","maxFragmentUniforms","vertexTextures","floatFragmentTextures","has","getMaxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","floatVertexTextures","maxSamples","WebGLClipping","globalState","numGlobalPlanes","localClippingEnabled","renderingShadows","viewNormalMatrix","uniform","resetGlobalState","numPlanes","numIntersection","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","viewMatrix","i4","init","enableLocalClipping","beginShadows","endShadows","setState","useCache","materialProperties","nGlobal","lGlobal","clippingState","WebGLCubeMaps","mapTextureMapping","onTextureDispose","cubemap","WebGLExtensions","getExtension","WebGLGeometries","wireframeAttributes","onGeometryDispose","memory","updateWireframeAttribute","geometryIndex","geometryPosition","previousAttribute","getWireframeAttribute","currentAttribute","WebGLIndexedBufferRenderer","drawElements","WebGLInfo","calls","triangles","lines","programs","autoReset","instanceCount","numericalSort","absNumericalSort","WebGLMorphtargets","influencesList","workInfluences","objectInfluences","influences","MAX_SAFE_INTEGER","morphInfluencesSum","_influence","morphBaseInfluence","getUniforms","setValue","WebGLObjects","updateMap","onInstancedMeshDispose","instancedMesh","buffergeometry","physical","transmission","transmissionMap","DataTexture2DArray","wrapR","isDataTexture2DArray","DataTexture3D","isDataTexture3D","emptyTexture","emptyTexture2dArray","emptyTexture3d","emptyCubeTexture","arrayCacheF32","arrayCacheI32","mat4array","mat3array","mat2array","flatten","nBlocks","blockSize","firstElem","arraysEqual","allocTexUnits","allocateTextureUnit","setValueV1f","uniform1f","addr","setValueV2f","uniform2f","uniform2fv","setValueV3f","uniform3f","uniform3fv","setValueV4f","uniform4f","uniform4fv","setValueM2","uniformMatrix2fv","setValueM3","uniformMatrix3fv","setValueM4","uniformMatrix4fv","setValueT1","uniform1i","safeSetTexture2D","setValueT2DArray1","setTexture2DArray","setValueT3D1","setTexture3D","setValueT6","safeSetTextureCube","setValueV1i","setValueV2i","uniform2iv","setValueV3i","uniform3iv","setValueV4i","uniform4iv","setValueV1ui","uniform1ui","setValueV1fArray","uniform1fv","setValueV1iArray","uniform1iv","setValueV2iArray","setValueV3iArray","setValueV4iArray","setValueV2fArray","setValueV3fArray","setValueV4fArray","setValueM2Array","setValueM3Array","setValueM4Array","setValueT1Array","setValueT6Array","SingleUniform","activeInfo","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","seq","updateCache","RePathPart","addUniform","container","uniformObject","parseUniform","path","pathLength","lastIndex","subscript","WebGLUniforms","getProgramParameter","getActiveUniform","getUniformLocation","WebGLShader","createShader","shaderSource","compileShader","setOptional","upload","seqWithValue","programIdCount","getEncodingComponents","getShaderErrors","status","getShaderParameter","getShaderInfoLog","trim","addLineNumbers","getShaderSource","getTexelDecodingFunction","functionName","getToneMappingFunction","toneMappingName","filterEmptyLine","replaceLightNums","numDirLights","numSpotLights","numRectAreaLights","numPointLights","numHemiLights","numDirLightShadows","numSpotLightShadows","numPointLightShadows","replaceClippingPlaneNums","numClippingPlanes","numClipIntersection","includePattern","resolveIncludes","includeReplacer","include","deprecatedUnrollLoopPattern","unrollLoopPattern","unrollLoops","loopReplacer","deprecatedLoopReplacer","snippet","generatePrecision","precisionstring","WebGLProgram","cacheKey","prefixVertex","prefixFragment","shadowMapTypeDefine","shadowMapType","generateShadowMapTypeDefine","envMapTypeDefine","envMapMode","generateEnvMapTypeDefine","envMapModeDefine","generateEnvMapModeDefine","envMapBlendingDefine","generateEnvMapBlendingDefine","gammaFactorDefine","customExtensions","extensionDerivatives","envMapCubeUV","tangentSpaceNormalMap","shaderID","extensionFragDepth","rendererExtensionFragDepth","extensionDrawBuffers","rendererExtensionDrawBuffers","extensionShaderTextureLOD","rendererExtensionShaderTextureLod","generateExtensions","customDefines","chunks","generateDefines","createProgram","versionString","isRawShaderMaterial","shaderName","instancing","instancingColor","supportsVertexTextures","maxBones","useFog","fogExp2","objectSpaceNormalMap","vertexTangents","vertexUvs","uvsVertexOnly","useVertexTexture","doubleSided","flipSided","shadowMapEnabled","physicallyCorrectLights","mapEncoding","matcapEncoding","envMapEncoding","emissiveMapEncoding","lightMapEncoding","outputEncoding","depthPacking","cachedUniforms","fragmentGlsl","glVertexShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","debug","checkShaderErrors","programLog","getProgramInfoLog","vertexLog","fragmentLog","runnable","haveDiagnostics","vertexErrors","fragmentErrors","getError","diagnostics","deleteShader","getActiveAttrib","getAttribLocation","fetchAttributeLocations","deleteProgram","usedTimes","WebGLPrograms","shaderIDs","MeshDepthMaterial","MeshDistanceMaterial","MeshNormalMaterial","MeshLambertMaterial","MeshPhongMaterial","MeshToonMaterial","MeshStandardMaterial","MeshPhysicalMaterial","MeshMatcapMaterial","LineBasicMaterial","LineDashedMaterial","PointsMaterial","ShadowMaterial","SpriteMaterial","parameterNames","getTextureEncodingFromMap","getParameters","shadows","isMeshStandardMaterial","environment","bones","nVertexMatrices","getMaxBones","isFogExp2","maxMorphTargets","maxMorphNormals","directional","spot","rectArea","hemi","shadowMap","getProgramCacheKey","acquireProgram","pl","preexistingProgram","releaseProgram","WebGLProperties","painterSortStable","groupOrder","reversePainterSortStable","WebGLRenderList","renderItems","renderItemsIndex","opaque","defaultProgram","getNextRenderItem","renderItem","customOpaqueSort","customTransparentSort","WebGLRenderLists","lists","renderCallDepth","list","UniformsCache","halfWidth","halfHeight","nextVersion","shadowCastingLightsFirst","lightA","lightB","WebGLLights","shadowCache","directionalLength","pointLength","spotLength","rectAreaLength","hemiLength","numDirectionalShadows","numPointShadows","numSpotShadows","ambient","probe","directionalShadow","spotShadow","rectAreaLTC1","rectAreaLTC2","pointShadow","vector3","matrix42","intensity","isAmbientLight","isLightProbe","sh","coefficients","isDirectionalLight","shadowUniforms","bias","normalBias","mapSize","isSpotLight","_uniforms","penumbra","_shadow","_shadowUniforms","isRectAreaLight","_uniforms2","isPointLight","_uniforms3","_shadow2","_shadowUniforms2","isHemisphereLight","_uniforms4","LTC_FLOAT_1","LTC_FLOAT_2","LTC_HALF_1","LTC_HALF_2","setupView","_uniforms5","_uniforms6","_uniforms7","_uniforms8","WebGLRenderState","lightsArray","shadowsArray","setupLights","setupLightsView","pushLight","pushShadow","shadowLight","WebGLRenderStates","renderStates","renderState","isMeshDepthMaterial","isMeshDistanceMaterial","vsm_frag","vsm_vert","WebGLShadowMap","_objects","_frustum","_shadowMapSize","_viewportSize","_viewport","_depthMaterials","_distanceMaterials","_materialCache","0","2","shadowMaterialVertical","SAMPLE_RATE","HALF_SAMPLE_RATE","shadow_pass","resolution","shadowMaterialHorizontal","HORIZONTAL_PASS","fullScreenTri","fullScreenMesh","VSMPass","mapPass","renderBufferDirect","getDepthMaterialVariant","useMorphing","useSkinning","useInstancing","getDistanceMaterialVariant","getDepthMaterial","getMaterialVariant","customMaterial","customDepthMaterial","customDistanceMaterial","keyA","keyB","materialsForVariant","cachedMaterial","renderObject","shadowCamera","kl","depthMaterial","_depthMaterial","autoUpdate","activeCubeFace","getActiveCubeFace","activeMipmapLevel","getActiveMipmapLevel","_state","setBlending","setTest","setScissorTest","shadowFrameExtents","getFrameExtents","isPointLightShadow","pars","viewportCount","getViewportCount","vp","getViewport","updateMatrices","getFrustum","WebGLState","_equationToGL","_factorToGL","colorBuffer","locked","currentColorMask","currentColorClear","setMask","colorMask","setLocked","lock","currentDepthMask","currentDepthFunc","currentDepthClear","depthMask","setFunc","clearDepth","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","stencilTest","stencilMask","setOp","stencilOp","clearStencil","enabledCapabilities","currentProgram","currentBlendingEnabled","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","lineWidthAvailable","glVersion","currentTextureSlot","currentBoundTextures","currentScissor","currentViewport","createTexture","bindTexture","texParameteri","texImage2D","emptyTextures","setFlipSided","setCullFace","equationToGL","MIN_EXT","MAX_EXT","factorToGL","blendEquationSeparate","blendFuncSeparate","blendFunc","frontFace","cullFace","setPolygonOffset","activeTexture","webglSlot","useProgram","setMaterial","frontFaceCW","setLineWidth","lineWidth","webglType","webglTexture","boundTexture","unbindTexture","compressedTexImage2D","apply","texImage3D","WebGLTextures","_gl","utils","_wrappingToGL","_filterToGL","_videoTextures","useOffscreenCanvas","OffscreenCanvas","resizeImage","needsPowerOfTwo","needsNewCanvas","maxSize","textureNeedsGenerateMipmaps","supportsMips","generateMipmap","__maxMipLevel","log2","getInternalFormat","internalFormatName","glFormat","glType","filterFallback","textureProperties","__webglInit","deleteTexture","__webglTexture","deallocateTexture","isVideoTexture","onRenderTargetDispose","renderTargetProperties","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","__webglMultisampledFramebuffer","__webglColorRenderbuffer","__webglDepthRenderbuffer","deallocateRenderTarget","textureUnits","setTexture2D","slot","updateVideoTexture","__version","uploadTexture","setTextureCube","initTexture","pixelStorei","isCompressed","isCompressedTexture","cubeImage","convert","glInternalFormat","setTextureParameters","mipmap","_mipmap","mipmapImage","_j2","_mipmap2","uploadCubeTexture","wrappingToGL","filterToGL","textureType","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","textureNeedsPowerOfTwo","isDepthTexture","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","isMultisample","bindRenderbuffer","getRenderTargetSamples","renderbufferStorageMultisample","renderbufferStorage","framebufferRenderbuffer","_samples","_glInternalFormat","_samples2","setupDepthRenderbuffer","isCube","webglDepthTexture","setupDepthTexture","createRenderbuffer","warnedTexture2D","warnedTextureCube","textureUnit","resetTextureUnits","setupRenderTarget","isRenderTarget3D","createFramebuffer","glTextureType","updateRenderTargetMipmap","updateMultisampleRenderTarget","blitFramebuffer","WebGLUtils","HALF_FLOAT_OES","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","COMPRESSED_RGB8_ETC2","COMPRESSED_RGBA8_ETC2_EAC","UNSIGNED_INT_24_8_WEBGL","ArrayCamera","cameras","isArrayCamera","Group","WebXRController","_targetRay","_grip","_hand","WebXRManager","framebufferScaleFactor","referenceSpace","referenceSpaceType","pose","controllers","inputSourcesMap","Map","cameraL","cameraR","cameraVR","_currentDepthNear","_currentDepthFar","onSessionEvent","controller","inputSource","onSessionEnd","disconnect","setFramebuffer","animation","isPresenting","onInputSourcesChange","inputSources","removed","added","_inputSource","_controller","getController","getTargetRaySpace","getControllerGrip","getGripSpace","getHand","getHandSpace","setFramebufferScaleFactor","setReferenceSpaceType","getReferenceSpace","setSession","_ref","_callee","baseLayer","_context","getContextAttributes","xrCompatible","makeXRCompatible","XRWebGLLayer","updateRenderState","requestReferenceSpace","args","cameraLPos","cameraRPos","updateCamera","getCamera","depthNear","depthFar","ipd","projL","projR","topFov","bottomFov","leftFov","rightFov","zOffset","xOffset","near2","far2","setProjectionFromUnion","onAnimationFrameCallback","getViewerPose","views","cameraVRNeedsUpdate","WebGLMaterials","refreshUniformsCommon","uvScaleMap","uv2ScaleMap","refreshUniformsStandard","refreshFogUniforms","isFog","density","refreshMaterialUniforms","isMeshLambertMaterial","refreshUniformsLambert","isMeshToonMaterial","refreshUniformsToon","isMeshPhongMaterial","refreshUniformsPhong","isMeshPhysicalMaterial","refreshUniformsPhysical","isMeshMatcapMaterial","refreshUniformsMatcap","refreshUniformsDepth","refreshUniformsDistance","isMeshNormalMaterial","refreshUniformsNormal","isLineBasicMaterial","refreshUniformsLine","isLineDashedMaterial","refreshUniformsDash","isPointsMaterial","refreshUniformsPoints","isSpriteMaterial","refreshUniformsSprites","isShadowMaterial","display","_alpha","_depth","_stencil","_antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","_powerPreference","powerPreference","_failIfMajorPerformanceCaveat","failIfMajorPerformanceCaveat","currentRenderList","currentRenderState","renderListStack","renderStateStack","domElement","sortObjects","toneMappingExposure","_isContextLost","_framebuffer","_currentActiveCubeFace","_currentActiveMipmapLevel","_currentRenderTarget","_currentFramebuffer","_currentMaterialId","_currentCamera","_currentViewport","_currentScissor","_currentScissorTest","_width","_height","_pixelRatio","_opaqueSort","_transparentSort","_scissor","_scissorTest","_clippingEnabled","_localClippingEnabled","_projScreenMatrix","_vector3","_emptyScene","overrideMaterial","getTargetPixelRatio","programCache","renderLists","morphtargets","bufferRenderer","indexedBufferRenderer","contextNames","contextAttributes","onContextLost","onContextRestore","isWebGL1Renderer","shift","rangeMin","rangeMax","initGLContext","onMaterialDispose","releaseMaterialProgramReference","deallocateMaterial","programInfo","forceContextLoss","loseContext","forceContextRestore","restoreContext","getPixelRatio","updateStyle","setViewport","getDrawingBufferSize","setDrawingBufferSize","getCurrentViewport","getScissor","setScissor","getScissorTest","boolean","setOpaqueSort","setTransparentSort","bits","renderBufferImmediate","hasPositions","hasNormals","hasUvs","hasColors","positionArray","normalArray","uvArray","colorArray","setProgram","rangeFactor","dataCount","rangeStart","rangeCount","drawStart","drawEnd","drawCount","isLineSegments","isLineLoop","isSprite","compile","compiled","material2","initMaterial","renderObjects","camera2","isImmediateRenderObject","renderObjectImmediate","lightsStateVersion","programCacheKey","programChange","needsLights","materialNeedsLights","progUniforms","uniformsList","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","uCamPos","cameraPosition","isOrthographicCamera","boneTexture","boneMatrices","boneTextureSize","projectObject","isGroup","isLOD","_geometry","_material","opaqueObjects","transparentObjects","_textureProperties","framebufferTextureLayer","readRenderTargetPixels","activeCubeFaceIndex","textureFormat","halfFloatSupportedByExt","checkFramebufferStatus","readPixels","copyFramebufferToTexture","level","levelScale","copyTexImage2D","copyTextureToTexture","srcTexture","dstTexture","texSubImage2D","compressedTexSubImage2D","copyTextureToTexture3D","sourceBox","glTarget","_srcTexture$image","unpackRowLen","unpackImageHeight","unpackSkipPixels","unpackSkipRows","unpackSkipImages","texSubImage3D","resetState","__THREE_DEVTOOLS__","CustomEvent","detail","joints","inputState","pinching","inputPose","gripPose","handPose","targetRay","grip","hand","visibilityState","_step","_iterator","inputjoint","jointPose","getJointPose","jointName","_joint","joint","jointRadius","distanceToPinch","handedness","getPose","targetRaySpace","gripSpace","WebGL1Renderer","_WebGLRenderer","FogExp2","Fog","InterleavedBuffer","isInterleavedBuffer","arrayBuffers","_uuid","ib","_vector$6","InterleavedBufferAttribute","interleavedBuffer","interleavedBuffers","_intersectPoint","_worldScale","_mvPosition","_alignedPosition","_rotatedPosition","_viewWorldMatrix","_vA$1","_vB$1","_vC$1","_uvA$1","_uvB$1","_uvC$1","Sprite","transformVertex","vertexPosition","mvPosition","_v1$4","_v2$2","LOD","_currentLevel","levels","addLevel","getCurrentLevel","getObjectForDistance","_basePosition","_skinIndex","_skinWeight","_vector$7","_matrix$1","SkinnedMesh","bindMatrixInverse","Bone","calculateInverses","normalizeSkinWeights","skinWeight","skinIndex","weight","boneIndex","boneInverses","isBone","_offsetMatrix","_identityMatrix","Skeleton","inverse","bone","_bone","getBoneByName","fromJSON","json","_instanceLocalMatrix","_instanceWorldMatrix","_instanceIntersects","_mesh","getColorAt","getMatrixAt","raycastTimes","instanceId","setColorAt","linecap","linejoin","_end","_inverseMatrix$1","_ray$1","_sphere$2","Line","computeLineDistances","lineDistances","threshold","params","localThreshold","localThresholdSq","vStart","vEnd","interSegment","interRay","_distance","_start$1","_end$1","LineSegments","LineLoop","_Line","_inverseMatrix$2","_ray$2","_sphere$3","_position$1","Points","testPoint","rayPointDistanceSq","intersectPoint","distanceToRay","VideoTexture","video","requestVideoFrameCallback","updateVideo","readyState","HAVE_CURRENT_DATA","CompressedTexture","CanvasTexture","isCanvasTexture","DepthTexture","CircleGeometry","segments","thetaStart","thetaLength","vertex","segment","CylinderGeometry","radiusTop","radiusBottom","radialSegments","openEnded","indexArray","generateCap","centerIndexStart","centerIndexEnd","_x2","cosTheta","sinTheta","_x3","slope","indexRow","generateTorso","ConeGeometry","_CylinderGeometry","PolyhedronGeometry","vertexBuffer","uvBuffer","subdivideFace","cols","aj","bj","rows","pushVertex","getVertexByIndex","correctUV","azimuth","subdivide","applyRadius","centroid","azi","correctUVs","correctSeam","generateUVs","DodecahedronGeometry","_PolyhedronGeometry","_v0$2","_v1$5","_normal$1","_triangle","EdgesGeometry","thresholdAngle","thresholdDot","indexAttr","positionAttr","indexCount","indexArr","vertKeys","hashes","edgeData","jNext","vecHash0","vecHash1","reverseHash","index0","_edgeData$key","Earcut","holeIndices","dim","invSize","hasHoles","outerLen","outerNode","linkedList","queue","steiner","getLeftmost","compareX","eliminateHole","filterPoints","eliminateHoles","earcutLinked","clockwise","last","sum","signedArea","insertNode","removeNode","again","area","ear","pass","zOrder","prevZ","nextZ","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","maxTX","maxTY","locallyInside","isValidDiagonal","splitPolygon","hole","hx","hy","mx","my","tanMin","sectorContainsSector","findHoleBridge","leftmost","px","py","intersectsPolygon","inside","middleInside","q1","q2","o1","o2","o3","o4","onSegment","an","bp","ShapeUtils","contour","isClockWise","pts","triangulateShape","holes","faces","removeDupEndPts","addContour","holeIndex","ExtrudeGeometry","verticesArray","addShape","shape","placeholder","curveSegments","steps","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","extrudePath","uvgen","UVGenerator","WorldUVGenerator","amount","extrudePts","splineTube","binormal","position2","extrudeByPath","getSpacedPoints","computeFrenetFrames","shapePoints","extractPoints","hl","ahole","_h","_hl","scalePt2","vec","vlen","flen","getBevelVec","inPt","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","sf","v_trans_lensq","direction_eq","contourMovements","oneHoleMovements","holesMovements","verticesMovements","_h2","_hl2","_ahole2","_k","_bs","vert","_h3","_hl3","_ahole3","_vert","bs","_vert2","binormals","_vert3","_t","_bs2","_vert4","_h4","_hl4","_ahole4","_vert5","sidewalls","layeroffset","_k2","sl","slen1","slen2","f4","f3","addVertex","nextIndex","generateTopUV","addUV","generateSideWallUV","vector2","_i9","_i10","_face","_i11","_face2","_i12","_face3","buildLidFaces","_h5","_hl5","_ahole5","buildSideFaces","_toJSON","indexA","indexB","indexC","b_x","b_y","c_x","c_y","indexD","a_x","a_y","a_z","b_z","c_z","d_x","d_y","d_z","IcosahedronGeometry","LatheGeometry","phiStart","phiLength","inverseSegments","base","n1","_base","OctahedronGeometry","ParametricGeometry","slices","stacks","pu","pv","sliceCount","RingGeometry","innerRadius","outerRadius","thetaSegments","phiSegments","radiusStep","thetaSegmentLevel","_segment","ShapeGeometry","indexOffset","shapeVertices","shapeHoles","shapeHole","_l2","_l3","_toJSON$1","SphereGeometry","thetaEnd","grid","verticesRow","uOffset","TetrahedronGeometry","TextGeometry","_ExtrudeGeometry","text","font","isFont","generateShapes","TorusGeometry","tube","tubularSegments","arc","TorusKnotGeometry","P1","P2","B","calculatePositionOnCurve","cu","su","quOverP","cs","TubeGeometry","closed","frames","P","generateSegment","getPointAt","generateIndices","generateBufferData","WireframeGeometry","edge","edges","ol","edge1","edge2","Geometries","freeze","BoxBufferGeometry","CircleBufferGeometry","ConeBufferGeometry","CylinderBufferGeometry","DodecahedronBufferGeometry","ExtrudeBufferGeometry","IcosahedronBufferGeometry","LatheBufferGeometry","OctahedronBufferGeometry","ParametricBufferGeometry","PlaneBufferGeometry","PolyhedronBufferGeometry","RingBufferGeometry","ShapeBufferGeometry","SphereBufferGeometry","TetrahedronBufferGeometry","TextBufferGeometry","TorusBufferGeometry","TorusKnotBufferGeometry","TubeBufferGeometry","RawShaderMaterial","_ShaderMaterial","STANDARD","PHYSICAL","ior","TOON","MATCAP","_LineBasicMaterial","Materials","AnimationUtils","arraySlice","isTypedArray","convertArray","forceClone","isView","DataView","getKeyframeOrder","times","sortedArray","nValues","srcOffset","flattenJSON","jsonKeys","valuePropertyName","subclip","sourceClip","endFrame","clip","tracks","track","valueSize","getValueSize","minStartTime","resetDuration","makeClipAdditive","targetClip","referenceFrame","referenceClip","numTracks","referenceTime","_loop","referenceTrack","referenceTrackType","ValueTypeName","targetTrack","referenceOffset","referenceValueSize","createInterpolant","isInterpolantFactoryMethodGLTFCubicSpline","targetOffset","targetValueSize","referenceValue","_startIndex","interpolant","_startIndex2","_endIndex2","evaluate","resultBuffer","numTimes","valueStart","valueEnd","blendMode","Interpolant","parameterPositions","sampleValues","sampleSize","_cachedIndex","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","LinearInterpolant","DiscreteInterpolant","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","_giveUpAt","beforeStart_","mid","intervalChanged_","interpolate_","DefaultSettings_","getSettings_","copySampleValue_","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o0","oP","oN","wP","wN","ppp","sP","sN","offset1","offset0","weight1","weight0","KeyframeTrack","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","trackType","getInterpolation","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","timeOffset","endTime","nKeys","validate","valid","prevTime","currTime","optimize","smoothInterpolation","writeIndex","keep","offsetP","offsetN","readOffset","writeOffset","_readOffset","_writeOffset","TypedKeyframeTrack","BooleanKeyframeTrack","_KeyframeTrack","ColorKeyframeTrack","NumberKeyframeTrack","QuaternionLinearInterpolant","QuaternionKeyframeTrack","StringKeyframeTrack","VectorKeyframeTrack","AnimationClip","jsonTracks","frameTime","parseKeyframeTrack","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","numMorphTargets","findByName","objectOrClipArray","clipArray","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","morphTarget","animationMorphTargets","clips","parseAnimation","addNonemptyTrack","trackName","animationKeys","propertyName","destTracks","clipName","hierarchyTracks","hierarchy","morphTargetNames","morphTargetName","_m","animationKey","boneName","typeName","getTrackTypeForValueTypeName","Cache","files","LoadingManager","onLoad","onProgress","onError","isLoading","itemsLoaded","itemsTotal","urlModifier","handlers","onStart","itemStart","itemEnd","itemError","resolveURL","setURLModifier","addHandler","regex","removeHandler","getHandler","DefaultLoadingManager","Loader","crossOrigin","withCredentials","resourcePath","requestHeader","loadAsync","setCrossOrigin","setWithCredentials","setPath","setResourcePath","setRequestHeader","loading","FileLoader","request","dataUriRegexResult","mimeType","isBase64","decodeURIComponent","responseType","parser","DOMParser","parseFromString","header","XMLHttpRequest","open","callbacks","_callback","overrideMimeType","send","setResponseType","setMimeType","AnimationLoader","_Loader","CompressedTextureLoader","loaded","loadTexture","texDatas","mipmapCount","isCubemap","ImageLoader","onImageLoad","onImageError","CubeTextureLoader","urls","DataTextureLoader","TextureLoader","Curve","arcLengthDivisions","texData","isJPEG","search","getPoint","optionalTarget","getUtoTmapping","getPoints","divisions","getLength","lengths","getLengths","cacheArcLengths","current","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","getTangent","t2","pt1","pt2","getTangentAt","mat","MAX_VALUE","tz","_theta","EllipseCurve","_Curve","aX","aY","xRadius","yRadius","aStartAngle","aEndAngle","aClockwise","aRotation","twoPi","deltaAngle","samePoints","isEllipseCurve","ArcCurve","_EllipseCurve","aRadius","CubicPoly","c0","initCatmullRom","x3","tension","initNonuniformCatmullRom","dt0","dt1","dt2","calc","isArcCurve","pz","CatmullRomCurve3","curveType","intPoint","CatmullRom","QuadraticBezier","QuadraticBezierP0","QuadraticBezierP1","QuadraticBezierP2","CubicBezier","CubicBezierP0","CubicBezierP1","CubicBezierP2","CubicBezierP3","isCatmullRomCurve3","CubicBezierCurve","v3","isCubicBezierCurve","CubicBezierCurve3","isCubicBezierCurve3","LineCurve","isLineCurve","LineCurve3","isLineCurve3","QuadraticBezierCurve","isQuadraticBezierCurve","QuadraticBezierCurve3","isQuadraticBezierCurve3","SplineCurve","isSplineCurve","Curves","CurvePath","curves","autoClose","curve","closePath","startPoint","endPoint","curveLengths","getCurveLengths","diff","segmentLength","lens","cacheLengths","sums","Path","_CurvePath","currentPoint","moveTo","lineTo","quadraticCurveTo","aCPx","aCPy","bezierCurveTo","aCP1x","aCP1y","aCP2x","aCP2y","splineThru","npts","absarc","absellipse","ellipse","firstPoint","lastPoint","Shape","_Path","getPointsHoles","holesPts","Light","HemisphereLight","_Light","_lightPositionWorld","_lookTarget","LightShadow","_frameExtents","_viewportCount","_viewports","shadowMatrix","viewportIndex","SpotLightShadow","_LightShadow","isSpotLightShadow","SpotLight","power","_projScreenMatrix$1","_lightPositionWorld$1","_lookTarget$1","PointLightShadow","_cubeDirections","_cubeUps","OrthographicCamera","_Camera","scaleW","scaleH","DirectionalLightShadow","isDirectionalLightShadow","DirectionalLight","RectAreaLight","SphericalHarmonics3","zero","getAt","coeff","getIrradianceAt","addScaledSH","getBasisAt","shBasis","isSphericalHarmonics3","LightProbe","MaterialLoader","getTexture","shading","setTextures","LoaderUtils","decodeText","TextDecoder","decode","escape","extractUrlBase","lastIndexOf","InstancedBufferGeometry","BufferGeometryLoader","interleavedBufferMap","arrayBufferMap","getInterleavedBuffer","getArrayBuffer","typedArray","bufferAttribute","_typedArray","_bufferAttribute","drawcalls","offsets","ObjectLoader","parseAnimations","parseShapes","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","parseSkeletons","bindSkeletons","hasImages","child","geometryShapes","bufferGeometryLoader","details","deserializeImage","loadImage","deserializedImage","_deserializedImage","parseConstant","TEXTURE_MAPPING","TEXTURE_WRAPPING","TEXTURE_FILTER","getGeometry","getMaterial","objectAnimations","setTexturePath","UVMapping","ImageBitmapLoader","createImageBitmap","fetch","isImageBitmapLoader","setOptions","fetchOptions","credentials","headers","colorSpaceConversion","imageBitmap","ShapePath","subPaths","currentPath","toShapes","isCCW","noHoles","toShapesNoHoles","inSubpaths","_tmpPath","_tmpShape","isPointInsidePolygon","inPolygon","polyLen","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","tmpPath","tmpShape","holesFirst","tmpPoints","tmpHoles","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sIdx","sLen","_sIdx","_sLen","sho","hIdx","ho","hole_unassigned","s2Idx","froms","tos","Font","paths","chars","line_height","yMax","yMin","underlineThickness","char","ret","createPath","createPaths","glyph","glyphs","cpx","cpy","cpx1","cpy1","cpx2","cpy2","outline","_cachedOutline","ha","familyName","FontLoader","substring","AudioContext","webkitAudioContext","AudioLoader","bufferCopy","decodeAudioData","audioBuffer","HemisphereLightProbe","_LightProbe","sky","ground","isHemisphereLightProbe","AmbientLightProbe","isAmbientLightProbe","_eyeRight","_eyeLeft","StereoCamera","eyeSep","_cache","xmin","xmax","eyeSepHalf","eyeSepOnProjection","ymax","Clock","autoStart","oldTime","elapsedTime","running","getElapsedTime","getDelta","_position$2","_quaternion$3","_scale$1","_orientation","AudioListener","gain","createGain","connect","destination","timeDelta","_clock","getInput","removeFilter","getFilter","setFilter","getMasterVolume","setMasterVolume","setTargetAtTime","positionX","linearRampToValueAtTime","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","Audio","autoplay","detune","loopStart","loopEnd","isPlaying","hasPlaybackControl","sourceType","_startedAt","_progress","_connected","filters","getOutput","setNodeSource","audioNode","setMediaElementSource","mediaElement","createMediaElementSource","setMediaStreamSource","mediaStream","createMediaStreamSource","setBuffer","delay","createBufferSource","onended","onEnded","setDetune","setPlaybackRate","getFilters","setFilters","getDetune","getPlaybackRate","getLoop","setLoop","setLoopStart","setLoopEnd","getVolume","setVolume","_position$3","_quaternion$4","_scale$2","_orientation$1","PositionalAudio","_Audio","panner","createPanner","panningModel","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","setDirectionalCone","coneInnerAngle","coneOuterAngle","coneOuterGain","orientationX","orientationY","orientationZ","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getFrequencyData","getByteFrequencyData","getAverageFrequency","PropertyMixer","binding","mixFunction","mixFunctionAdditive","setIdentity","_slerp","_slerpAdditive","_setAdditiveIdentityQuaternion","_workIndex","_select","_setAdditiveIdentityOther","_lerp","_lerpAdditive","_setAdditiveIdentityNumeric","_mixBufferRegion","_mixBufferRegionAdditive","_setIdentity","_origIndex","_addIndex","cumulativeWeight","cumulativeWeightAdditive","useCount","referenceCount","accumulate","accuIndex","currentWeight","accumulateAdditive","weightAdditive","saveOriginalState","originalValueOffset","getValue","restoreOriginalState","startIndex","endIndex","targetIndex","workOffset","_reservedRe","RegExp","_wordCharOrDot","_directoryRe","_nodeRe","_objectRe","_propertyRe","_trackRe","_supportedObjectNames","Composite","targetGroup","optionalParsedPath","parsedPath","PropertyBinding","parseTrackName","_targetGroup","_bindings","subscribe_","rootNode","node","findNode","nCachedObjects_","bindings","unbind","root","isAnimationObjectGroup","sanitizeNodeName","matches","results","objectName","objectIndex","propertyIndex","lastDot","subTreeNode","searchNodeSubtree","childNode","_getValue_unavailable","_setValue_unavailable","BindingType","Direct","EntireArray","ArrayElement","HasFromToArray","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","GetterByBindingType","resolvedProperty","SetterByBindingTypeAndVersioning","targetObject","dest","targetArray","sourceArray","nodeProperty","versioning","bindingType","_getValue_unbound","_setValue_unbound","AnimationObjectGroup","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","stats","total","inUse","bindingsPerObject","indicesByUUID","parsedPaths","nBindings","knownObject","nObjects","nCachedObjects","firstActiveIndex","lastCachedObject","bindingsForPath","lastCachedIndex","firstActiveObject","uncache","lastObject","_lastIndex","_lastObject","_m2","_bindingsForPath","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","AnimationAction","mixer","localRoot","_mixer","_clip","_localRoot","nTracks","interpolants","interpolantSettings","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","_loopCount","_startTime","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","_activateAction","_deactivateAction","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setEffectiveWeight","getEffectiveWeight","fadeIn","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","action","halt","startTimeScale","endTimeScale","_lendControlInterpolant","timeScaleInterpolant","getMixer","getClip","getRoot","_root","_update","timeDirection","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","interpolantValue","loopCount","pingPong","_setEndings","handle_stop","loopDelta","pending","atStart","atEnd","weightNow","weightThen","AnimationMixer","_initMemoryManager","_accuIndex","_bindAction","prototypeAction","rootUuid","bindingsByRoot","_bindingsByRootAndName","bindingsByName","_addInactiveBinding","clipUuid","actionsForClip","_actionsByClip","knownActions","_addInactiveAction","_lendBinding","_lendAction","_takeBackBinding","_takeBackAction","_actions","_nActiveActions","_nActiveBindings","_controlInterpolants","_nActiveControlInterpolants","actions","controlInterpolants","actionsByClip","actionByRoot","_removeInactiveAction","lastInactiveAction","cacheIndex","knownActionsForClip","lastKnownAction","byClipCacheIndex","_removeInactiveBindingsForAction","_removeInactiveBinding","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","bindingByName","propBinding","lastInactiveBinding","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","clipAction","optionalRoot","clipObject","existingAction","newAction","stopAllAction","nActions","setTime","timeInSeconds","uncacheClip","actionsToRemove","uncacheRoot","uncacheAction","Uniform","InstancedInterleavedBuffer","GLBufferAttribute","Raycaster","PointCloud","ascSort","_intersectObject","setType","setItemSize","setCount","setFromCamera","coords","intersectObject","intersectObjects","Spherical","other","makeSafe","setFromCartesianCoords","Cylindrical","_vector$8","Box2","isBox2","_startP","_startEnd","Line3","distanceSq","closestPointToPointParameter","clampToLine","startEnd2","ImmediateRenderObject","_vector$9","SpotLightHelper","cone","coneLength","coneWidth","_vector$a","_boneMatrix","_matrixWorldInv","SkeletonHelper","_LineSegments","getBoneList","boneList","isSkeletonHelper","PointLightHelper","_Mesh","sphereSize","_vector$b","_color1","_color2","HemisphereLightHelper","GridHelper","PolarGridHelper","radials","circles","_color","_v","_v1$6","_v2$3","_v3$1","DirectionalLightHelper","lightPlane","targetLine","_vector$c","_camera","CameraHelper","pointMap","colorFrustum","colorCone","colorUp","colorTarget","colorCross","addLine","addPoint","setPoint","_lineGeometry","_coneGeometry","_ENCODINGS","_box$3","BoxHelper","Box3Helper","PlaneHelper","_axis","ArrowHelper","headLength","headWidth","setDirection","setColor","AxesHelper","_floatView","_int32View","DataUtils","toHalfFloat","LOD_MIN","LOD_MAX","SIZE_MAX","EXTRA_LOD_SIGMA","TOTAL_LODS","MAX_SAMPLES","ENCODINGS","backgroundMaterial","backgroundBox","_flatCamera","_createPlanes2","_createPlanes","_lodPlanes","_sizeLods","_sigmas","_clearColor","_oldTarget","PHI","INV_PHI","_axisDirections","convertLinearToRGBE","maxComponent","fExp","PMREMGenerator","weights","poleAxis","_pingPongRenderTarget","_blurMaterial","latitudinal","dTheta","mipInt","inputEncoding","_equirectShader","_cubemapShader","_compileMaterial","fromScene","sigma","cubeUVRenderTarget","_allocateTargets","_sceneToCubeUV","_blur","_applyPMREM","_cleanup","fromEquirectangular","equirectangular","_fromTexture","fromCubemap","compileCubemapShader","_getCubemapShader","compileEquirectangularShader","_getEquirectShader","outputTarget","_setViewport","_textureToCubeUV","_isLDR","_createRenderTarget","tmpMesh","cubeCamera","upSign","forwardSign","originalAutoClear","useSolidColor","col","lodIn","lodOut","pingPongRenderTarget","_halfBlur","targetIn","targetOut","sigmaRadians","blurMaterial","blurMesh","blurUniforms","pixels","radiansPerPixel","sigmaPixels","outputSize","lod","sizeLod","texelSize","positionSize","uvSize","faceIndexSize","construct","fromPoints","setColors","Handlers","empty","isIntersectionBox","isIntersectionSphere","setFromMatrix","random16","nearestPowerOfTwo","nextPowerOfTwo","flattenToArrayOffset","multiplyVector3","multiplyVector3Array","applyToBufferAttribute","applyToVector3Array","getInverse","extractPosition","getPosition","multiplyToArray","multiplyVector4","rotateAxis","crossVector","rotateByAxis","makeFrustum","isIntersectionLine","isIntersectionPlane","barycoordFromPoint","midpoint","prototypenormal","extractAllPoints","extrude","makeGeometry","fromAttribute","distanceToManhattan","lengthManhattan","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","applyProjection","getChildByName","renderDepth","getWorldRotation","applyMatrix","eulerOrder","useQuaternion","setDrawMode","drawMode","initBones","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","dynamic","setDynamic","copyIndicesArray","setArray","addIndex","addAttribute","addDrawCall","clearDrawCalls","computeOffsets","maxInstancedCount","linePrecision","getArrays","addShapeList","wrapAround","overdraw","wrapRGB","metal","transparency","clearTarget","getCurrentRenderTarget","getPrecision","resetGLState","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","setFaceCulling","allocTextureUnit","getActiveMipMapLevel","shadowMapCullFace","vr","gammaInput","gammaOutput","toneMappingWhitePoint","renderReverseSided","renderSingleSided","getData","updateCubeMap","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","SceneUtils","createMultiMaterialObject","revision","__THREE__","AdditiveAnimationBlendMode","AxisHelper","BasicShadowMap","BinaryTextureLoader","BoundingBoxHelper","CanvasRenderer","CullFaceFrontBack","DecrementStencilOp","DecrementWrapStencilOp","DynamicBufferAttribute","DynamicCopyUsage","DynamicReadUsage","EdgesHelper","EqualStencilFunc","FaceColors","FlatShading","Float32Attribute","Float64Attribute","GLSL1","GreaterEqualStencilFunc","GreaterStencilFunc","IncrementStencilOp","IncrementWrapStencilOp","Int16Attribute","Int32Attribute","Int8Attribute","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","InvertStencilOp","JSONLoader","LensFlare","LessEqualStencilFunc","LessStencilFunc","LinePieces","LineStrip","LinearMipMapLinearFilter","LinearMipMapNearestFilter","LoopOnce","LoopPingPong","MOUSE","LEFT","MIDDLE","RIGHT","ROTATE","DOLLY","PAN","MeshFaceMaterial","MultiMaterial","isMultiMaterial","NearestMipMapLinearFilter","NearestMipMapNearestFilter","NeverStencilFunc","NoColors","NotEqualStencilFunc","Particle","ParticleBasicMaterial","ParticleSystem","ParticleSystemMaterial","PointCloudMaterial","REVISION","ReplaceStencilOp","SmoothShading","StaticCopyUsage","StaticReadUsage","StreamCopyUsage","StreamDrawUsage","StreamReadUsage","TOUCH","DOLLY_PAN","DOLLY_ROTATE","TriangleFanDrawMode","TriangleStripDrawMode","TrianglesDrawMode","Uint16Attribute","Uint32Attribute","Uint8Attribute","Uint8ClampedAttribute","Vertex","VertexColors","WebGLRenderTargetCube","WireframeHelper","WrapAroundEnding","XHRLoader","ZeroSlopeEnding","ZeroStencilOp","amd","globalThis","OrbitControls","quat","quatInverse","lastPosition","lastQuaternion","twoPI","minDistance","minZoom","maxZoom","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","autoRotate","autoRotateSpeed","UP","BOTTOM","mouseButtons","touches","ONE","TWO","target0","position0","zoom0","_domElementKeyEvents","getPolarAngle","spherical","getAzimuthalAngle","listenToKeyEvents","onKeyDown","saveState","changeEvent","STATE","NONE","rotateLeft","sphericalDelta","panOffset","zoomChanged","EPS","onContextMenu","onPointerDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","ownerDocument","onPointerMove","onPointerUp","startEvent","endEvent","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","rotateStart","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","rotateUp","panLeft","objectMatrix","panUp","pan","deltaX","deltaY","targetDistance","clientHeight","clientWidth","dollyOut","dollyScale","dollyIn","handleMouseDownRotate","clientX","clientY","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","handleTouchMoveRotate","handleTouchMovePan","handleTouchMoveDolly","pointerType","mouseAction","button","handleMouseDownDolly","onMouseDown","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","onMouseMove","onMouseUp","stopPropagation","handleMouseWheel","handleKeyDown","handleTouchStartDollyPan","handleTouchStartDollyRotate","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","MapControls","CANVAS_SKETCH_DEFAULT_STORAGE_KEY","location"],"mappings":"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","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n * A basic ThreeJS cube scene.\n * @author Matt DesLauriers (@mattdesl)\n */\n\nconst canvasSketch = require('canvas-sketch');\n\n\n// Ensure ThreeJS is in global scope for the 'examples/'\nglobal.THREE = require('three');\n\nimport fragment from './shaders/fragment.glsl';\nimport vertex from './shaders/vertex.glsl';\n\n// Include any additional ThreeJS examples below\nrequire('three/examples/js/controls/OrbitControls');\n\nconst settings = {\n  // Make the loop animated\n  animate: true,\n  // Get a WebGL canvas rather than 2D\n  context: 'webgl',\n  // Turn on MSAA\n  attributes: { antialias: true }\n};\n\nconst sketch = ({ context }) => {\n  // Create a renderer\n  const renderer = new THREE.WebGLRenderer({\n    context\n  });\n\n  // WebGL background color\n  renderer.setClearColor('#000', 1);\n\n  // Setup a camera\n  const camera = new THREE.PerspectiveCamera(45, 1, 0.01, 100);\n  camera.position.set(0, 55, 40);\n  camera.lookAt(new THREE.Vector3(0, 15, 0));\n\n  // Setup camera controller\n  // const controls = new THREE.OrbitControls(camera, context.canvas);\n\n  // Setup your scene\n  const scene = new THREE.Scene();\n\n  let meshes = [];\n\n  let material = new THREE.ShaderMaterial({\n    uniforms: {\n      time: { type: 'f', value: 0 }\n    },\n    vertexShader: vertex,\n    fragmentShader: fragment\n  })\n\n  let count = 3 * 20;\n\n  let geometry = new THREE.BoxGeometry(1, 1, 1);\n\n  const mesh = new THREE.InstancedMesh(\n    geometry,\n    material,\n    count ** 3\n  )\n\n  let random = new Float32Array(count ** 3);\n  let depth = new Float32Array(count ** 3);\n  let pos = new Float32Array(3 * count ** 3);\n\n  let transform = new THREE.Object3D();\n  let ii = 0;\n  let jj = 0;\n  for (let i = 0; i < count; i++) {\n    for (let j = 0; j < count; j++) {\n      for (let k = 0; k < count; k++) {\n        transform.position.set(i - count / 2, j - count / 2, k - count / 2);\n        transform.updateMatrix();\n        random[ii] = Math.random();\n        depth[ii] = j / count;\n\n        pos[jj] = i / count; jj++;\n        pos[jj] = j / count; jj++;\n        pos[jj] = k / count; jj++;\n\n        mesh.setMatrixAt(ii++, transform.matrix);\n      }\n    }\n  }\n\n  geometry.setAttribute('random', new THREE.InstancedBufferAttribute(random, 1))\n  geometry.setAttribute('depth', new THREE.InstancedBufferAttribute(depth, 1))\n  geometry.setAttribute('pos', new THREE.InstancedBufferAttribute(pos, 3))\n\n  scene.add(mesh)\n\n  // Specify an ambient/unlit colour\n  scene.add(new THREE.AmbientLight('#59314f'));\n\n  // Add some light\n  const light = new THREE.PointLight('#45caf7', 1, 15.5);\n  light.position.set(2, 2, -4).multiplyScalar(1.5);\n  scene.add(light);\n\n  // let t1 = gsap.timeline({ repeat: -1, repeatDelay: 0, yoyo: true })\n  // t1.to(meshes, {\n  //   duration: 1,\n  //   x: 1,\n  //   y: 1,\n  //   z: 1,\n  //   stagger: {\n  //     grid: [10, 10],\n  //     from: \"center\",\n  //     amount: 1.5,\n  //   }\n  // })\n\n  // draw each frame\n  return {\n    // Handle resize events here\n    resize({ pixelRatio, viewportWidth, viewportHeight }) {\n      renderer.setPixelRatio(pixelRatio);\n      renderer.setSize(viewportWidth, viewportHeight);\n      camera.aspect = viewportWidth / viewportHeight;\n      camera.updateProjectionMatrix();\n    },\n    // And render events here\n    render({ time, deltaTime }) {\n      // scene.rotation.y = (40 * Math.PI / 180);\n      material.uniforms.time.value = time;\n      // controls.update();\n      renderer.render(scene, camera);\n    },\n    // Dispose of WebGL context (optional)\n    unload() {\n      renderer.dispose();\n    }\n  };\n};\n\ncanvasSketch(sketch, settings);","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","module.exports =\n  global.performance &&\n  global.performance.now ? function now() {\n    return performance.now()\n  } : Date.now || function now() {\n    return +new Date\n  }\n","module.exports = isPromise;\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n","module.exports = isNode\n\nfunction isNode (val) {\n  return (!val || typeof val !== 'object')\n    ? false\n    : (typeof window === 'object' && typeof window.Node === 'object')\n      ? (val instanceof window.Node)\n      : (typeof val.nodeType === 'number') &&\n        (typeof val.nodeName === 'string')\n}\n","// TODO: We can remove a huge chunk of bundle size by using a smaller\n// utility module for converting units.\nimport isDOM from 'is-dom';\n\nexport function getClientAPI () {\n  return typeof window !== 'undefined' && window['canvas-sketch-cli'];\n}\n\nexport function defined () {\n  for (let i = 0; i < arguments.length; i++) {\n    if (arguments[i] != null) {\n      return arguments[i];\n    }\n  }\n  return undefined;\n}\n\nexport function isBrowser () {\n  return typeof document !== 'undefined';\n}\n\nexport function isWebGLContext (ctx) {\n  return typeof ctx.clear === 'function' && typeof ctx.clearColor === 'function' && typeof ctx.bufferData === 'function';\n}\n\nexport function isCanvas (element) {\n  return isDOM(element) && /canvas/i.test(element.nodeName) && typeof element.getContext === 'function';\n}\n","/*!\n * repeat-string <https://github.com/jonschlinkert/repeat-string>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\n/**\n * Results cache\n */\n\nvar res = '';\nvar cache;\n\n/**\n * Expose `repeat`\n */\n\nmodule.exports = repeat;\n\n/**\n * Repeat the given `string` the specified `number`\n * of times.\n *\n * **Example:**\n *\n * ```js\n * var repeat = require('repeat-string');\n * repeat('A', 5);\n * //=> AAAAA\n * ```\n *\n * @param {String} `string` The string to repeat\n * @param {Number} `number` The number of times to repeat the string\n * @return {String} Repeated string\n * @api public\n */\n\nfunction repeat(str, num) {\n  if (typeof str !== 'string') {\n    throw new TypeError('expected a string');\n  }\n\n  // cover common, quick use cases\n  if (num === 1) return str;\n  if (num === 2) return str + str;\n\n  var max = str.length * num;\n  if (cache !== str || typeof cache === 'undefined') {\n    cache = str;\n    res = '';\n  } else if (res.length >= max) {\n    return res.substr(0, max);\n  }\n\n  while (max > res.length && num > 1) {\n    if (num & 1) {\n      res += str;\n    }\n\n    num >>= 1;\n    str += str;\n  }\n\n  res += str;\n  res = res.substr(0, max);\n  return res;\n}\n","exports = module.exports = typeof Object.keys === 'function'\n  ? Object.keys : shim;\n\nexports.shim = shim;\nfunction shim (obj) {\n  var keys = [];\n  for (var key in obj) keys.push(key);\n  return keys;\n}\n","var supportsArgumentsClass = (function(){\n  return Object.prototype.toString.call(arguments)\n})() == '[object Arguments]';\n\nexports = module.exports = supportsArgumentsClass ? supported : unsupported;\n\nexports.supported = supported;\nfunction supported(object) {\n  return Object.prototype.toString.call(object) == '[object Arguments]';\n};\n\nexports.unsupported = unsupported;\nfunction unsupported(object){\n  return object &&\n    typeof object == 'object' &&\n    typeof object.length == 'number' &&\n    Object.prototype.hasOwnProperty.call(object, 'callee') &&\n    !Object.prototype.propertyIsEnumerable.call(object, 'callee') ||\n    false;\n};\n","var pSlice = Array.prototype.slice;\nvar objectKeys = require('./lib/keys.js');\nvar isArguments = require('./lib/is_arguments.js');\n\nvar deepEqual = module.exports = function (actual, expected, opts) {\n  if (!opts) opts = {};\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return true;\n\n  } else if (actual instanceof Date && expected instanceof Date) {\n    return actual.getTime() === expected.getTime();\n\n  // 7.3. Other pairs that do not both pass typeof value == 'object',\n  // equivalence is determined by ==.\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return opts.strict ? actual === expected : actual == expected;\n\n  // 7.4. For all other Object pairs, including Array objects, equivalence is\n  // determined by having the same number of owned properties (as verified\n  // with Object.prototype.hasOwnProperty.call), the same set of keys\n  // (although not necessarily the same order), equivalent values for every\n  // corresponding key, and an identical 'prototype' property. Note: this\n  // accounts for both named and indexed properties on Arrays.\n  } else {\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction isBuffer (x) {\n  if (!x || typeof x !== 'object' || typeof x.length !== 'number') return false;\n  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {\n    return false;\n  }\n  if (x.length > 0 && typeof x[0] !== 'number') return false;\n  return true;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if (isArguments(a)) {\n    if (!isArguments(b)) {\n      return false;\n    }\n    a = pSlice.call(a);\n    b = pSlice.call(b);\n    return deepEqual(a, b, opts);\n  }\n  if (isBuffer(a)) {\n    if (!isBuffer(b)) {\n      return false;\n    }\n    if (a.length !== b.length) return false;\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  try {\n    var ka = objectKeys(a),\n        kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n","/*\n * Date Format 1.2.3\n * (c) 2007-2009 Steven Levithan <stevenlevithan.com>\n * MIT license\n *\n * Includes enhancements by Scott Trenda <scott.trenda.net>\n * and Kris Kowal <cixar.com/~kris.kowal/>\n *\n * Accepts a date, a mask, or a date and a mask.\n * Returns a formatted version of the given date.\n * The date defaults to the current date/time.\n * The mask defaults to dateFormat.masks.default.\n */\n\n(function(global) {\n  'use strict';\n\n  var dateFormat = (function() {\n      var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\\1?|[LloSZWN]|\"[^\"]*\"|'[^']*'/g;\n      var timezone = /\\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\\d{4})?)\\b/g;\n      var timezoneClip = /[^-+\\dA-Z]/g;\n  \n      // Regexes and supporting functions are cached through closure\n      return function (date, mask, utc, gmt) {\n  \n        // You can't provide utc if you skip other args (use the 'UTC:' mask prefix)\n        if (arguments.length === 1 && kindOf(date) === 'string' && !/\\d/.test(date)) {\n          mask = date;\n          date = undefined;\n        }\n  \n        date = date || new Date;\n  \n        if(!(date instanceof Date)) {\n          date = new Date(date);\n        }\n  \n        if (isNaN(date)) {\n          throw TypeError('Invalid date');\n        }\n  \n        mask = String(dateFormat.masks[mask] || mask || dateFormat.masks['default']);\n  \n        // Allow setting the utc/gmt argument via the mask\n        var maskSlice = mask.slice(0, 4);\n        if (maskSlice === 'UTC:' || maskSlice === 'GMT:') {\n          mask = mask.slice(4);\n          utc = true;\n          if (maskSlice === 'GMT:') {\n            gmt = true;\n          }\n        }\n  \n        var _ = utc ? 'getUTC' : 'get';\n        var d = date[_ + 'Date']();\n        var D = date[_ + 'Day']();\n        var m = date[_ + 'Month']();\n        var y = date[_ + 'FullYear']();\n        var H = date[_ + 'Hours']();\n        var M = date[_ + 'Minutes']();\n        var s = date[_ + 'Seconds']();\n        var L = date[_ + 'Milliseconds']();\n        var o = utc ? 0 : date.getTimezoneOffset();\n        var W = getWeek(date);\n        var N = getDayOfWeek(date);\n        var flags = {\n          d:    d,\n          dd:   pad(d),\n          ddd:  dateFormat.i18n.dayNames[D],\n          dddd: dateFormat.i18n.dayNames[D + 7],\n          m:    m + 1,\n          mm:   pad(m + 1),\n          mmm:  dateFormat.i18n.monthNames[m],\n          mmmm: dateFormat.i18n.monthNames[m + 12],\n          yy:   String(y).slice(2),\n          yyyy: y,\n          h:    H % 12 || 12,\n          hh:   pad(H % 12 || 12),\n          H:    H,\n          HH:   pad(H),\n          M:    M,\n          MM:   pad(M),\n          s:    s,\n          ss:   pad(s),\n          l:    pad(L, 3),\n          L:    pad(Math.round(L / 10)),\n          t:    H < 12 ? dateFormat.i18n.timeNames[0] : dateFormat.i18n.timeNames[1],\n          tt:   H < 12 ? dateFormat.i18n.timeNames[2] : dateFormat.i18n.timeNames[3],\n          T:    H < 12 ? dateFormat.i18n.timeNames[4] : dateFormat.i18n.timeNames[5],\n          TT:   H < 12 ? dateFormat.i18n.timeNames[6] : dateFormat.i18n.timeNames[7],\n          Z:    gmt ? 'GMT' : utc ? 'UTC' : (String(date).match(timezone) || ['']).pop().replace(timezoneClip, ''),\n          o:    (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),\n          S:    ['th', 'st', 'nd', 'rd'][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10],\n          W:    W,\n          N:    N\n        };\n  \n        return mask.replace(token, function (match) {\n          if (match in flags) {\n            return flags[match];\n          }\n          return match.slice(1, match.length - 1);\n        });\n      };\n    })();\n\n  dateFormat.masks = {\n    'default':               'ddd mmm dd yyyy HH:MM:ss',\n    'shortDate':             'm/d/yy',\n    'mediumDate':            'mmm d, yyyy',\n    'longDate':              'mmmm d, yyyy',\n    'fullDate':              'dddd, mmmm d, yyyy',\n    'shortTime':             'h:MM TT',\n    'mediumTime':            'h:MM:ss TT',\n    'longTime':              'h:MM:ss TT Z',\n    'isoDate':               'yyyy-mm-dd',\n    'isoTime':               'HH:MM:ss',\n    'isoDateTime':           'yyyy-mm-dd\\'T\\'HH:MM:sso',\n    'isoUtcDateTime':        'UTC:yyyy-mm-dd\\'T\\'HH:MM:ss\\'Z\\'',\n    'expiresHeaderFormat':   'ddd, dd mmm yyyy HH:MM:ss Z'\n  };\n\n  // Internationalization strings\n  dateFormat.i18n = {\n    dayNames: [\n      'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat',\n      'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'\n    ],\n    monthNames: [\n      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec',\n      'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'\n    ],\n    timeNames: [\n      'a', 'p', 'am', 'pm', 'A', 'P', 'AM', 'PM'\n    ]\n  };\n\nfunction pad(val, len) {\n  val = String(val);\n  len = len || 2;\n  while (val.length < len) {\n    val = '0' + val;\n  }\n  return val;\n}\n\n/**\n * Get the ISO 8601 week number\n * Based on comments from\n * http://techblog.procurios.nl/k/n618/news/view/33796/14863/Calculate-ISO-8601-week-and-year-in-javascript.html\n *\n * @param  {Object} `date`\n * @return {Number}\n */\nfunction getWeek(date) {\n  // Remove time components of date\n  var targetThursday = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n\n  // Change date to Thursday same week\n  targetThursday.setDate(targetThursday.getDate() - ((targetThursday.getDay() + 6) % 7) + 3);\n\n  // Take January 4th as it is always in week 1 (see ISO 8601)\n  var firstThursday = new Date(targetThursday.getFullYear(), 0, 4);\n\n  // Change date to Thursday same week\n  firstThursday.setDate(firstThursday.getDate() - ((firstThursday.getDay() + 6) % 7) + 3);\n\n  // Check if daylight-saving-time-switch occurred and correct for it\n  var ds = targetThursday.getTimezoneOffset() - firstThursday.getTimezoneOffset();\n  targetThursday.setHours(targetThursday.getHours() - ds);\n\n  // Number of weeks between target Thursday and first Thursday\n  var weekDiff = (targetThursday - firstThursday) / (86400000*7);\n  return 1 + Math.floor(weekDiff);\n}\n\n/**\n * Get ISO-8601 numeric representation of the day of the week\n * 1 (for Monday) through 7 (for Sunday)\n * \n * @param  {Object} `date`\n * @return {Number}\n */\nfunction getDayOfWeek(date) {\n  var dow = date.getDay();\n  if(dow === 0) {\n    dow = 7;\n  }\n  return dow;\n}\n\n/**\n * kind-of shortcut\n * @param  {*} val\n * @return {String}\n */\nfunction kindOf(val) {\n  if (val === null) {\n    return 'null';\n  }\n\n  if (val === undefined) {\n    return 'undefined';\n  }\n\n  if (typeof val !== 'object') {\n    return typeof val;\n  }\n\n  if (Array.isArray(val)) {\n    return 'array';\n  }\n\n  return {}.toString.call(val)\n    .slice(8, -1).toLowerCase();\n};\n\n\n\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return dateFormat;\n    });\n  } else if (typeof exports === 'object') {\n    module.exports = dateFormat;\n  } else {\n    global.dateFormat = dateFormat;\n  }\n})(this);\n","/*!\n * pad-left <https://github.com/jonschlinkert/pad-left>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar repeat = require('repeat-string');\n\nmodule.exports = function padLeft(str, num, ch) {\n  str = str.toString();\n\n  if (typeof num === 'undefined') {\n    return str;\n  }\n\n  if (ch === 0) {\n    ch = '0';\n  } else if (ch) {\n    ch = ch.toString();\n  } else {\n    ch = ' ';\n  }\n\n  return repeat(ch, num - str.length) + str;\n};\n","import dateformat from 'dateformat';\nimport assign from 'object-assign';\nimport padLeft from 'pad-left';\nimport { getClientAPI } from './util';\n\nconst noop = () => {};\nlet link;\nlet defaultExts = { extension: '', prefix: '', suffix: '' };\n\n// Alternative solution for saving files,\n// a bit slower and does not work in Safari\n// function fetchBlobFromDataURL (dataURL) {\n//   return window.fetch(dataURL).then(res => res.blob());\n// }\n\nconst supportedEncodings = [\n  'image/png',\n  'image/jpeg',\n  'image/webp'\n];\n\nfunction stream (isStart, opts = {}) {\n  return new Promise((resolve, reject) => {\n    opts = assign({}, defaultExts, opts);\n    const filename = resolveFilename(Object.assign({}, opts, {\n      extension: '',\n      frame: undefined\n    }));\n    const func = isStart ? 'streamStart' : 'streamEnd';\n    const client = getClientAPI();\n    if (client && client.output && typeof client[func] === 'function') {\n      return client[func](assign({}, opts, { filename }))\n        .then(ev => resolve(ev));\n    } else {\n      return resolve({ filename, client: false });\n    }\n  });\n}\n\nexport function streamStart (opts = {}) {\n  return stream(true, opts);\n}\n\nexport function streamEnd (opts = {}) {\n  return stream(false, opts);\n}\n\nexport function exportCanvas (canvas, opt = {}) {\n  const encoding = opt.encoding || 'image/png';\n  if (!supportedEncodings.includes(encoding)) throw new Error(`Invalid canvas encoding ${encoding}`);\n  let extension = (encoding.split('/')[1] || '').replace(/jpeg/i, 'jpg');\n  if (extension) extension = `.${extension}`.toLowerCase();\n  return {\n    extension,\n    type: encoding,\n    dataURL: canvas.toDataURL(encoding, opt.encodingQuality)\n  };\n}\n\nfunction createBlobFromDataURL (dataURL) {\n  return new Promise((resolve) => {\n    const splitIndex = dataURL.indexOf(',');\n    if (splitIndex === -1) {\n      resolve(new window.Blob());\n      return;\n    }\n    const base64 = dataURL.slice(splitIndex + 1);\n    const byteString = window.atob(base64);\n    const type = dataURL.slice(0, splitIndex);\n    const mimeMatch = /data:([^;]+)/.exec(type);\n    const mime = (mimeMatch ? mimeMatch[1] : '') || undefined;\n    const ab = new ArrayBuffer(byteString.length);\n    const ia = new Uint8Array(ab);\n    for (var i = 0; i < byteString.length; i++) {\n      ia[i] = byteString.charCodeAt(i);\n    }\n    resolve(new window.Blob([ ab ], { type: mime }));\n  });\n}\n\nexport function saveDataURL (dataURL, opts = {}) {\n  return createBlobFromDataURL(dataURL)\n    .then(blob => saveBlob(blob, opts));\n}\n\nexport function saveBlob (blob, opts = {}) {\n  return new Promise(resolve => {\n    opts = assign({}, defaultExts, opts);\n    const filename = opts.filename;\n\n    const client = getClientAPI();\n    if (client && typeof client.saveBlob === 'function' && client.output) {\n      // native saving using a CLI tool\n      return client.saveBlob(blob, assign({}, opts, { filename }))\n        .then(ev => resolve(ev));\n    } else {\n      // force download\n      if (!link) {\n        link = document.createElement('a');\n        link.style.visibility = 'hidden';\n        link.target = '_blank';\n      }\n      link.download = filename;\n      link.href = window.URL.createObjectURL(blob);\n      document.body.appendChild(link);\n      link.onclick = () => {\n        link.onclick = noop;\n        setTimeout(() => {\n          window.URL.revokeObjectURL(blob);\n          if (link.parentElement) link.parentElement.removeChild(link);\n          link.removeAttribute('href');\n          resolve({ filename, client: false });\n        });\n      };\n      link.click();\n    }\n  });\n}\n\nexport function saveFile (data, opts = {}) {\n  const parts = Array.isArray(data) ? data : [ data ];\n  const blob = new window.Blob(parts, { type: opts.type || '' });\n  return saveBlob(blob, opts);\n}\n\nexport function getTimeStamp () {\n  const dateFormatStr = `yyyy.mm.dd-HH.MM.ss`;\n  return dateformat(new Date(), dateFormatStr);\n}\n\nexport function getDefaultFile (prefix = '', suffix = '', ext) {\n  // const dateFormatStr = `yyyy.mm.dd-HH.MM.ss`;\n  const dateFormatStr = `yyyy-mm-dd 'at' h.MM.ss TT`;\n  return `${prefix}${dateformat(new Date(), dateFormatStr)}${suffix}${ext}`;\n}\n\nexport function resolveFilename (opt = {}) {\n  opt = assign({}, opt);\n\n  // Custom filename function\n  if (typeof opt.file === 'function') {\n    return opt.file(opt);\n  } else if (opt.file) {\n    return opt.file;\n  }\n\n  let frame = null;\n  let extension = '';\n  if (typeof opt.extension === 'string') extension = opt.extension;\n\n  if (typeof opt.frame === 'number') {\n    let totalFrames;\n    if (typeof opt.totalFrames === 'number') {\n      totalFrames = opt.totalFrames;\n    } else {\n      totalFrames = Math.max(10000, opt.frame);\n    }\n    frame = padLeft(String(opt.frame), String(totalFrames).length, '0');\n  }\n\n  const layerStr = isFinite(opt.totalLayers) && isFinite(opt.layer) && opt.totalLayers > 1 ? `${opt.layer}` : '';\n  if (frame != null) {\n    return [ layerStr, frame ].filter(Boolean).join('-') + extension;\n  } else {\n    const defaultFileName = opt.timeStamp;\n    return [ opt.prefix, opt.name || defaultFileName, layerStr, opt.hash, opt.suffix ].filter(Boolean).join('-') + extension;\n  }\n}\n","// Handle some common typos\nconst commonTypos = {\n  dimension: 'dimensions',\n  animated: 'animate',\n  animating: 'animate',\n  unit: 'units',\n  P5: 'p5',\n  pixellated: 'pixelated',\n  looping: 'loop',\n  pixelPerInch: 'pixels'\n};\n\n// Handle all other typos\nconst allKeys = [\n  'dimensions', 'units', 'pixelsPerInch', 'orientation',\n  'scaleToFit', 'scaleToView', 'bleed', 'pixelRatio',\n  'exportPixelRatio', 'maxPixelRatio', 'scaleContext',\n  'resizeCanvas', 'styleCanvas', 'canvas', 'context', 'attributes',\n  'parent', 'file', 'name', 'prefix', 'suffix', 'animate', 'playing',\n  'loop', 'duration', 'totalFrames', 'fps', 'playbackRate', 'timeScale',\n  'frame', 'time', 'flush', 'pixelated', 'hotkeys', 'p5', 'id',\n  'scaleToFitPadding', 'data', 'params', 'encoding', 'encodingQuality'\n];\n\n// This is fairly opinionated and forces users to use the 'data' parameter\n// if they want to pass along non-setting objects...\nexport const checkSettings = (settings) => {\n  const keys = Object.keys(settings);\n  keys.forEach(key => {\n    if (key in commonTypos) {\n      const actual = commonTypos[key];\n      console.warn(`[canvas-sketch] Could not recognize the setting \"${key}\", did you mean \"${actual}\"?`);\n    } else if (!allKeys.includes(key)) {\n      console.warn(`[canvas-sketch] Could not recognize the setting \"${key}\"`);\n    }\n  });\n};\n","const defaultUnits = 'mm';\n\nconst data = [\n  // Common Paper Sizes\n  // (Mostly North-American based)\n  [ 'postcard', 101.6, 152.4 ],\n  [ 'poster-small', 280, 430 ],\n  [ 'poster', 460, 610 ],\n  [ 'poster-large', 610, 910 ],\n  [ 'business-card', 50.8, 88.9 ],\n\n  // Photographic Print Paper Sizes\n  [ '2r', 64, 89 ],\n  [ '3r', 89, 127 ],\n  [ '4r', 102, 152 ],\n  [ '5r', 127, 178 ], // 5″x7″\n  [ '6r', 152, 203 ], // 6″x8″\n  [ '8r', 203, 254 ], // 8″x10″\n  [ '10r', 254, 305 ], // 10″x12″\n  [ '11r', 279, 356 ], // 11″x14″\n  [ '12r', 305, 381 ],\n\n  // Standard Paper Sizes\n  [ 'a0', 841, 1189 ],\n  [ 'a1', 594, 841 ],\n  [ 'a2', 420, 594 ],\n  [ 'a3', 297, 420 ],\n  [ 'a4', 210, 297 ],\n  [ 'a5', 148, 210 ],\n  [ 'a6', 105, 148 ],\n  [ 'a7', 74, 105 ],\n  [ 'a8', 52, 74 ],\n  [ 'a9', 37, 52 ],\n  [ 'a10', 26, 37 ],\n  [ '2a0', 1189, 1682 ],\n  [ '4a0', 1682, 2378 ],\n  [ 'b0', 1000, 1414 ],\n  [ 'b1', 707, 1000 ],\n  [ 'b1+', 720, 1020 ],\n  [ 'b2', 500, 707 ],\n  [ 'b2+', 520, 720 ],\n  [ 'b3', 353, 500 ],\n  [ 'b4', 250, 353 ],\n  [ 'b5', 176, 250 ],\n  [ 'b6', 125, 176 ],\n  [ 'b7', 88, 125 ],\n  [ 'b8', 62, 88 ],\n  [ 'b9', 44, 62 ],\n  [ 'b10', 31, 44 ],\n  [ 'b11', 22, 32 ],\n  [ 'b12', 16, 22 ],\n  [ 'c0', 917, 1297 ],\n  [ 'c1', 648, 917 ],\n  [ 'c2', 458, 648 ],\n  [ 'c3', 324, 458 ],\n  [ 'c4', 229, 324 ],\n  [ 'c5', 162, 229 ],\n  [ 'c6', 114, 162 ],\n  [ 'c7', 81, 114 ],\n  [ 'c8', 57, 81 ],\n  [ 'c9', 40, 57 ],\n  [ 'c10', 28, 40 ],\n  [ 'c11', 22, 32 ],\n  [ 'c12', 16, 22 ],\n\n  // Use inches for North American sizes,\n  // as it produces less float precision errors\n  [ 'half-letter', 5.5, 8.5, 'in' ],\n  [ 'letter', 8.5, 11, 'in' ],\n  [ 'legal', 8.5, 14, 'in' ],\n  [ 'junior-legal', 5, 8, 'in' ],\n  [ 'ledger', 11, 17, 'in' ],\n  [ 'tabloid', 11, 17, 'in' ],\n  [ 'ansi-a', 8.5, 11.0, 'in' ],\n  [ 'ansi-b', 11.0, 17.0, 'in' ],\n  [ 'ansi-c', 17.0, 22.0, 'in' ],\n  [ 'ansi-d', 22.0, 34.0, 'in' ],\n  [ 'ansi-e', 34.0, 44.0, 'in' ],\n  [ 'arch-a', 9, 12, 'in' ],\n  [ 'arch-b', 12, 18, 'in' ],\n  [ 'arch-c', 18, 24, 'in' ],\n  [ 'arch-d', 24, 36, 'in' ],\n  [ 'arch-e', 36, 48, 'in' ],\n  [ 'arch-e1', 30, 42, 'in' ],\n  [ 'arch-e2', 26, 38, 'in' ],\n  [ 'arch-e3', 27, 39, 'in' ]\n];\n\nexport default data.reduce((dict, preset) => {\n  const item = {\n    units: preset[3] || defaultUnits,\n    dimensions: [ preset[1], preset[2] ]\n  };\n  dict[preset[0]] = item;\n  dict[preset[0].replace(/-/g, ' ')] = item;\n  return dict;\n}, {});\n","module.exports = function () {\n    for (var i = 0; i < arguments.length; i++) {\n        if (arguments[i] !== undefined) return arguments[i];\n    }\n};\n","var defined = require('defined');\nvar units = [ 'mm', 'cm', 'm', 'pc', 'pt', 'in', 'ft', 'px' ];\n\nvar conversions = {\n  // metric\n  m: {\n    system: 'metric',\n    factor: 1\n  },\n  cm: {\n    system: 'metric',\n    factor: 1 / 100\n  },\n  mm: {\n    system: 'metric',\n    factor: 1 / 1000\n  },\n  // imperial\n  pt: {\n    system: 'imperial',\n    factor: 1 / 72\n  },\n  pc: {\n    system: 'imperial',\n    factor: 1 / 6\n  },\n  in: {\n    system: 'imperial',\n    factor: 1\n  },\n  ft: {\n    system: 'imperial',\n    factor: 12\n  }\n};\n\nconst anchors = {\n  metric: {\n    unit: 'm',\n    ratio: 1 / 0.0254\n  },\n  imperial: {\n    unit: 'in',\n    ratio: 0.0254\n  }\n};\n\nfunction round (value, decimals) {\n  return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals);\n}\n\nfunction convertDistance (value, fromUnit, toUnit, opts) {\n  if (typeof value !== 'number' || !isFinite(value)) throw new Error('Value must be a finite number');\n  if (!fromUnit || !toUnit) throw new Error('Must specify from and to units');\n\n  opts = opts || {};\n  var pixelsPerInch = defined(opts.pixelsPerInch, 96);\n  var precision = opts.precision;\n  var roundPixel = opts.roundPixel !== false;\n\n  fromUnit = fromUnit.toLowerCase();\n  toUnit = toUnit.toLowerCase();\n\n  if (units.indexOf(fromUnit) === -1) throw new Error('Invalid from unit \"' + fromUnit + '\", must be one of: ' + units.join(', '));\n  if (units.indexOf(toUnit) === -1) throw new Error('Invalid from unit \"' + toUnit + '\", must be one of: ' + units.join(', '));\n\n  if (fromUnit === toUnit) {\n    // We don't need to convert from A to B since they are the same already\n    return value;\n  }\n\n  var toFactor = 1;\n  var fromFactor = 1;\n  var isToPixel = false;\n\n  if (fromUnit === 'px') {\n    fromFactor = 1 / pixelsPerInch;\n    fromUnit = 'in';\n  }\n  if (toUnit === 'px') {\n    isToPixel = true;\n    toFactor = pixelsPerInch;\n    toUnit = 'in';\n  }\n\n  var fromUnitData = conversions[fromUnit];\n  var toUnitData = conversions[toUnit];\n\n  // source to anchor inside source's system\n  var anchor = value * fromUnitData.factor * fromFactor;\n\n  // if systems differ, convert one to another\n  if (fromUnitData.system !== toUnitData.system) {\n    // regular 'm' to 'in' and so forth\n    anchor *= anchors[fromUnitData.system].ratio;\n  }\n\n  var result = anchor / toUnitData.factor * toFactor;\n  if (isToPixel && roundPixel) {\n    result = Math.round(result);\n  } else if (typeof precision === 'number' && isFinite(precision)) {\n    result = round(result, precision);\n  }\n  return result;\n}\n\nmodule.exports = convertDistance;\nmodule.exports.units = units;\n","import paperSizes from './paper-sizes';\nimport convertLength from 'convert-length';\n\nexport function getDimensionsFromPreset (dimensions, unitsTo = 'px', pixelsPerInch = 72) {\n  if (typeof dimensions === 'string') {\n    const key = dimensions.toLowerCase();\n    if (!(key in paperSizes)) {\n      throw new Error(`The dimension preset \"${dimensions}\" is not supported or could not be found; try using a4, a3, postcard, letter, etc.`)\n    }\n    const preset = paperSizes[key];\n    return preset.dimensions.map(d => {\n      return convertDistance(d, preset.units, unitsTo, pixelsPerInch);\n    });\n  } else {\n    return dimensions;\n  }\n}\n\nexport function convertDistance (dimension, unitsFrom = 'px', unitsTo = 'px', pixelsPerInch = 72) {\n  return convertLength(dimension, unitsFrom, unitsTo, {\n    pixelsPerInch,\n    precision: 4,\n    roundPixel: true\n  });\n}\n","import { getDimensionsFromPreset, convertDistance } from '../distances';\nimport { isBrowser, defined } from '../util';\n\nfunction checkIfHasDimensions (settings) {\n  if (!settings.dimensions) return false;\n  if (typeof settings.dimensions === 'string') return true;\n  if (Array.isArray(settings.dimensions) && settings.dimensions.length >= 2) return true;\n  return false;\n}\n\nfunction getParentSize (props, settings) {\n  // When no { dimension } is passed in node, we default to HTML canvas size\n  if (!isBrowser()) {\n    return [ 300, 150 ];\n  }\n\n  let element = settings.parent || window;\n\n  if (element === window ||\n      element === document ||\n      element === document.body) {\n    return [ window.innerWidth, window.innerHeight ];\n  } else {\n    const { width, height } = element.getBoundingClientRect();\n    return [ width, height ];\n  }\n}\n\nexport default function resizeCanvas (props, settings) {\n  let width, height;\n  let styleWidth, styleHeight;\n  let canvasWidth, canvasHeight;\n\n  const browser = isBrowser();\n  const dimensions = settings.dimensions;\n  const hasDimensions = checkIfHasDimensions(settings);\n  const exporting = props.exporting;\n  let scaleToFit = hasDimensions ? settings.scaleToFit !== false : false;\n  let scaleToView = (!exporting && hasDimensions) ? settings.scaleToView : true;\n  // in node, cancel both of these options\n  if (!browser) scaleToFit = scaleToView = false;\n  const units = settings.units;\n  const pixelsPerInch = (typeof settings.pixelsPerInch === 'number' && isFinite(settings.pixelsPerInch)) ? settings.pixelsPerInch : 72;\n  const bleed = defined(settings.bleed, 0);\n\n  const devicePixelRatio = browser ? window.devicePixelRatio : 1;\n  const basePixelRatio = scaleToView ? devicePixelRatio : 1;\n\n  let pixelRatio, exportPixelRatio;\n\n  // If a pixel ratio is specified, we will use it.\n  // Otherwise:\n  //  -> If dimension is specified, use base ratio (i.e. size for export)\n  //  -> If no dimension is specified, use device ratio (i.e. size for screen)\n  if (typeof settings.pixelRatio === 'number' && isFinite(settings.pixelRatio)) {\n    // When { pixelRatio } is specified, it's also used as default exportPixelRatio.\n    pixelRatio = settings.pixelRatio;\n    exportPixelRatio = defined(settings.exportPixelRatio, pixelRatio);\n  } else {\n    if (hasDimensions) {\n      // When a dimension is specified, use the base ratio rather than screen ratio\n      pixelRatio = basePixelRatio;\n      // Default to a pixel ratio of 1 so that you end up with the same dimension\n      // you specified, i.e. [ 500, 500 ] is exported as 500x500 px\n      exportPixelRatio = defined(settings.exportPixelRatio, 1);\n    } else {\n      // No dimension is specified, assume full-screen retina sizing\n      pixelRatio = devicePixelRatio;\n      // Default to screen pixel ratio, so that it's like taking a device screenshot\n      exportPixelRatio = defined(settings.exportPixelRatio, pixelRatio);\n    }\n  }\n\n  // Clamp pixel ratio\n  if (typeof settings.maxPixelRatio === 'number' && isFinite(settings.maxPixelRatio)) {\n    pixelRatio = Math.min(settings.maxPixelRatio, pixelRatio);\n  }\n\n  // Handle export pixel ratio\n  if (exporting) {\n    pixelRatio = exportPixelRatio;\n  }\n\n  // parentWidth = typeof parentWidth === 'undefined' ? defaultNodeSize[0] : parentWidth;\n  // parentHeight = typeof parentHeight === 'undefined' ? defaultNodeSize[1] : parentHeight;\n\n  let [ parentWidth, parentHeight ] = getParentSize(props, settings);\n  let trimWidth, trimHeight;\n\n  // You can specify a dimensions in pixels or cm/m/in/etc\n  if (hasDimensions) {\n    const result = getDimensionsFromPreset(dimensions, units, pixelsPerInch);\n    const highest = Math.max(result[0], result[1]);\n    const lowest = Math.min(result[0], result[1]);\n    if (settings.orientation) {\n      const landscape = settings.orientation === 'landscape';\n      width = landscape ? highest : lowest;\n      height = landscape ? lowest : highest;\n    } else {\n      width = result[0];\n      height = result[1];\n    }\n\n    trimWidth = width;\n    trimHeight = height;\n\n    // Apply bleed which is assumed to be in the same units\n    width += bleed * 2;\n    height += bleed * 2;\n  } else {\n    width = parentWidth;\n    height = parentHeight;\n    trimWidth = width;\n    trimHeight = height;\n  }\n\n  // Real size in pixels after PPI is taken into account\n  let realWidth = width;\n  let realHeight = height;\n  if (hasDimensions && units) {\n    // Convert to digital/pixel units if necessary\n    realWidth = convertDistance(width, units, 'px', pixelsPerInch);\n    realHeight = convertDistance(height, units, 'px', pixelsPerInch);\n  }\n\n  // How big to set the 'view' of the canvas in the browser (i.e. style)\n  styleWidth = Math.round(realWidth);\n  styleHeight = Math.round(realHeight);\n\n  // If we wish to scale the view to the browser window\n  if (scaleToFit && !exporting && hasDimensions) {\n    const aspect = width / height;\n    const windowAspect = parentWidth / parentHeight;\n    const scaleToFitPadding = defined(settings.scaleToFitPadding, 40);\n    const maxWidth = Math.round(parentWidth - scaleToFitPadding * 2);\n    const maxHeight = Math.round(parentHeight - scaleToFitPadding * 2);\n    if (styleWidth > maxWidth || styleHeight > maxHeight) {\n      if (windowAspect > aspect) {\n        styleHeight = maxHeight;\n        styleWidth = Math.round(styleHeight * aspect);\n      } else {\n        styleWidth = maxWidth;\n        styleHeight = Math.round(styleWidth / aspect);\n      }\n    }\n  }\n\n  canvasWidth = scaleToView ? Math.round(pixelRatio * styleWidth) : Math.round(pixelRatio * realWidth);\n  canvasHeight = scaleToView ? Math.round(pixelRatio * styleHeight) : Math.round(pixelRatio * realHeight);\n\n  const viewportWidth = scaleToView ? Math.round(styleWidth) : Math.round(realWidth);\n  const viewportHeight = scaleToView ? Math.round(styleHeight) : Math.round(realHeight);\n\n  const scaleX = canvasWidth / width;\n  const scaleY = canvasHeight / height;\n\n  // Assign to current props\n  return {\n    bleed,\n    pixelRatio,\n    width,\n    height,\n    dimensions: [ width, height ],\n    units: units || 'px',\n    scaleX,\n    scaleY,\n    pixelsPerInch,\n    viewportWidth,\n    viewportHeight,\n    canvasWidth,\n    canvasHeight,\n    trimWidth,\n    trimHeight,\n    styleWidth,\n    styleHeight\n  };\n}\n","module.exports = getCanvasContext\nfunction getCanvasContext (type, opts) {\n  if (typeof type !== 'string') {\n    throw new TypeError('must specify type string')\n  }\n\n  opts = opts || {}\n\n  if (typeof document === 'undefined' && !opts.canvas) {\n    return null // check for Node\n  }\n\n  var canvas = opts.canvas || document.createElement('canvas')\n  if (typeof opts.width === 'number') {\n    canvas.width = opts.width\n  }\n  if (typeof opts.height === 'number') {\n    canvas.height = opts.height\n  }\n\n  var attribs = opts\n  var gl\n  try {\n    var names = [ type ]\n    // prefix GL contexts\n    if (type.indexOf('webgl') === 0) {\n      names.push('experimental-' + type)\n    }\n\n    for (var i = 0; i < names.length; i++) {\n      gl = canvas.getContext(names[i], attribs)\n      if (gl) return gl\n    }\n  } catch (e) {\n    gl = null\n  }\n  return (gl || null) // ensure null on fail\n}\n","import assign from 'object-assign';\nimport getCanvasContext from 'get-canvas-context';\nimport { isBrowser } from '../util';\n\nfunction createCanvasElement () {\n  if (!isBrowser()) {\n    throw new Error('It appears you are runing from Node.js or a non-browser environment. Try passing in an existing { canvas } interface instead.');\n  }\n  return document.createElement('canvas');\n}\n\nexport default function createCanvas (settings = {}) {\n  let context, canvas;\n  let ownsCanvas = false;\n  if (settings.canvas !== false) {\n    // Determine the canvas and context to create\n    context = settings.context;\n    if (!context || typeof context === 'string') {\n      let newCanvas = settings.canvas;\n      if (!newCanvas) {\n        newCanvas = createCanvasElement();\n        ownsCanvas = true;\n      }\n      const type = context || '2d';\n      if (typeof newCanvas.getContext !== 'function') {\n        throw new Error(`The specified { canvas } element does not have a getContext() function, maybe it is not a <canvas> tag?`);\n      }\n      context = getCanvasContext(type, assign({}, settings.attributes, { canvas: newCanvas }));\n      if (!context) {\n        throw new Error(`Failed at canvas.getContext('${type}') - the browser may not support this context, or a different context may already be in use with this canvas.`);\n      }\n    }\n\n    canvas = context.canvas;\n    // Ensure context matches user's canvas expectations\n    if (settings.canvas && canvas !== settings.canvas) {\n      throw new Error('The { canvas } and { context } settings must point to the same underlying canvas element');\n    }\n\n    // Apply pixelation to canvas if necessary, this is mostly a convenience utility\n    if (settings.pixelated) {\n      context.imageSmoothingEnabled = false;\n      context.mozImageSmoothingEnabled = false;\n      context.oImageSmoothingEnabled = false;\n      context.webkitImageSmoothingEnabled = false;\n      context.msImageSmoothingEnabled = false;\n      canvas.style['image-rendering'] = 'pixelated';\n    }\n  }\n  return { canvas, context, ownsCanvas };\n}\n","import assign from 'object-assign';\nimport rightNow from 'right-now';\nimport isPromise from 'is-promise';\nimport { isBrowser, defined, isWebGLContext, isCanvas, getClientAPI } from '../util';\nimport deepEqual from 'deep-equal';\nimport {\n  resolveFilename,\n  saveFile,\n  saveDataURL,\n  getTimeStamp,\n  exportCanvas,\n  streamStart,\n  streamEnd\n} from '../save';\nimport { checkSettings } from '../accessibility';\n\nimport keyboardShortcuts from './keyboardShortcuts';\nimport resizeCanvas from './resizeCanvas';\nimport createCanvas from './createCanvas';\n\nclass SketchManager {\n  constructor () {\n    this._settings = {};\n    this._props = {};\n    this._sketch = undefined;\n    this._raf = null;\n    this._recordTimeout = null;\n\n    // Some hacky things required to get around p5.js structure\n    this._lastRedrawResult = undefined;\n    this._isP5Resizing = false;\n\n    this._keyboardShortcuts = keyboardShortcuts({\n      enabled: () => this.settings.hotkeys !== false,\n      save: (ev) => {\n        if (ev.shiftKey) {\n          if (this.props.recording) {\n            this.endRecord();\n            this.run();\n          } else this.record();\n        } else if (!this.props.recording) {\n          this.exportFrame();\n        }\n      },\n      togglePlay: () => {\n        if (this.props.playing) this.pause();\n        else this.play();\n      },\n      commit: (ev) => {\n        this.exportFrame({ commit: true });\n      }\n    });\n\n    this._animateHandler = () => this.animate();\n\n    this._resizeHandler = () => {\n      const changed = this.resize();\n      // Only re-render when size actually changes\n      if (changed) {\n        this.render();\n      }\n    };\n  }\n\n  get sketch () {\n    return this._sketch;\n  }\n\n  get settings () {\n    return this._settings;\n  }\n\n  get props () {\n    return this._props;\n  }\n\n  _computePlayhead (currentTime, duration) {\n    const hasDuration = typeof duration === 'number' && isFinite(duration);\n    return hasDuration ? currentTime / duration : 0;\n  }\n\n  _computeFrame (playhead, time, totalFrames, fps) {\n    return (isFinite(totalFrames) && totalFrames > 1)\n      ? Math.floor(playhead * (totalFrames - 1))\n      : Math.floor(fps * time);\n  }\n\n  _computeCurrentFrame () {\n    return this._computeFrame(\n      this.props.playhead, this.props.time,\n      this.props.totalFrames, this.props.fps\n    );\n  }\n\n  _getSizeProps () {\n    const props = this.props;\n    return {\n      width: props.width,\n      height: props.height,\n      pixelRatio: props.pixelRatio,\n      canvasWidth: props.canvasWidth,\n      canvasHeight: props.canvasHeight,\n      viewportWidth: props.viewportWidth,\n      viewportHeight: props.viewportHeight\n    };\n  }\n\n  run () {\n    if (!this.sketch) throw new Error('should wait until sketch is loaded before trying to play()');\n\n    // Start an animation frame loop if necessary\n    if (this.settings.playing !== false) {\n      this.play();\n    }\n\n    // Let's let this warning hang around for a few versions...\n    if (typeof this.sketch.dispose === 'function') {\n      console.warn('In canvas-sketch@0.0.23 the dispose() event has been renamed to unload()');\n    }\n\n    // In case we aren't playing or animated, make sure we still trigger begin message...\n    if (!this.props.started) {\n      this._signalBegin();\n      this.props.started = true;\n    }\n\n    // Render an initial frame\n    this.tick();\n    this.render();\n    return this;\n  }\n\n  _cancelTimeouts () {\n    if (this._raf != null && typeof window !== 'undefined' && typeof window.cancelAnimationFrame === 'function') {\n      window.cancelAnimationFrame(this._raf);\n      this._raf = null;\n    }\n    if (this._recordTimeout != null) {\n      clearTimeout(this._recordTimeout);\n      this._recordTimeout = null;\n    }\n  }\n\n  play () {\n    let animate = this.settings.animate;\n    if ('animation' in this.settings) {\n      animate = true;\n      console.warn('[canvas-sketch] { animation } has been renamed to { animate }');\n    }\n    if (!animate) return;\n    if (!isBrowser()) {\n      console.error('[canvas-sketch] WARN: Using { animate } in Node.js is not yet supported');\n      return;\n    }\n    if (this.props.playing) return;\n    if (!this.props.started) {\n      this._signalBegin();\n      this.props.started = true;\n    }\n\n    // console.log('play', this.props.time)\n\n    // Start a render loop\n    this.props.playing = true;\n    this._cancelTimeouts();\n    this._lastTime = rightNow();\n    this._raf = window.requestAnimationFrame(this._animateHandler);\n  }\n\n  pause () {\n    if (this.props.recording) this.endRecord();\n    this.props.playing = false;\n\n    this._cancelTimeouts();\n  }\n\n  togglePlay () {\n    if (this.props.playing) this.pause();\n    else this.play();\n  }\n\n  // Stop and reset to frame zero\n  stop () {\n    this.pause();\n    this.props.frame = 0;\n    this.props.playhead = 0;\n    this.props.time = 0;\n    this.props.deltaTime = 0;\n    this.props.started = false;\n    this.render();\n  }\n\n  record () {\n    if (this.props.recording) return;\n    if (!isBrowser()) {\n      console.error('[canvas-sketch] WARN: Recording from Node.js is not yet supported');\n      return;\n    }\n\n    this.stop();\n    this.props.playing = true;\n    this.props.recording = true;\n\n    const exportOpts = this._createExportOptions({ sequence: true });\n\n    const frameInterval = 1 / this.props.fps;\n    // Render each frame in the sequence\n    this._cancelTimeouts();\n    const tick = () => {\n      if (!this.props.recording) return Promise.resolve();\n      this.props.deltaTime = frameInterval;\n      this.tick();\n      return this.exportFrame(exportOpts)\n        .then(() => {\n          if (!this.props.recording) return; // was cancelled before\n          this.props.deltaTime = 0;\n          this.props.frame++;\n          if (this.props.frame < this.props.totalFrames) {\n            this.props.time += frameInterval;\n            this.props.playhead = this._computePlayhead(this.props.time, this.props.duration);\n            this._recordTimeout = setTimeout(tick, 0);\n          } else {\n            console.log('Finished recording');\n            this._signalEnd();\n            this.endRecord();\n            this.stop();\n            this.run();\n          }\n        });\n    };\n\n    // Trigger a start event before we begin recording\n    if (!this.props.started) {\n      this._signalBegin();\n      this.props.started = true;\n    }\n\n    // Trigger 'begin record' event\n    if (this.sketch && typeof this.sketch.beginRecord === 'function') {\n      this._wrapContextScale(props => this.sketch.beginRecord(props));\n    }\n\n    // Initiate a streaming start if necessary\n    streamStart(exportOpts)\n      .catch(err => {\n        console.error(err);\n      })\n      .then(response => {\n        this._raf = window.requestAnimationFrame(tick);\n      });\n  }\n\n  _signalBegin () {\n    if (this.sketch && typeof this.sketch.begin === 'function') {\n      this._wrapContextScale(props => this.sketch.begin(props));\n    }\n  }\n\n  _signalEnd () {\n    if (this.sketch && typeof this.sketch.end === 'function') {\n      this._wrapContextScale(props => this.sketch.end(props));\n    }\n  }\n\n  endRecord () {\n    const wasRecording = this.props.recording;\n\n    this._cancelTimeouts();\n    this.props.recording = false;\n    this.props.deltaTime = 0;\n    this.props.playing = false;\n\n    // tell CLI that stream has finished\n    return streamEnd()\n      .catch(err => {\n        console.error(err);\n      })\n      .then(() => {\n        // Trigger 'end record' event\n        if (wasRecording && this.sketch && typeof this.sketch.endRecord === 'function') {\n          this._wrapContextScale(props => this.sketch.endRecord(props));\n        }\n      });\n  }\n\n  _createExportOptions (opt = {}) {\n    return {\n      sequence: opt.sequence,\n      save: opt.save,\n      fps: this.props.fps,\n      frame: opt.sequence ? this.props.frame : undefined,\n      file: this.settings.file,\n      name: this.settings.name,\n      prefix: this.settings.prefix,\n      suffix: this.settings.suffix,\n      encoding: this.settings.encoding,\n      encodingQuality: this.settings.encodingQuality,\n      timeStamp: opt.timeStamp || getTimeStamp(),\n      totalFrames: isFinite(this.props.totalFrames) ? Math.max(0, this.props.totalFrames) : 1000\n    };\n  }\n\n  exportFrame (opt = {}) {\n    if (!this.sketch) return Promise.all([]);\n    if (typeof this.sketch.preExport === 'function') {\n      this.sketch.preExport();\n    }\n\n    // Options for export function\n    let exportOpts = this._createExportOptions(opt);\n\n    const client = getClientAPI();\n    let p = Promise.resolve();\n    if (client && opt.commit && typeof client.commit === 'function') {\n      const commitOpts = assign({}, exportOpts);\n      const hash = client.commit(commitOpts);\n      if (isPromise(hash)) p = hash;\n      else p = Promise.resolve(hash);\n    }\n\n    return p.then(hash => {\n      return this._doExportFrame(assign({}, exportOpts, { hash: hash || '' }));\n    }).then(result => {\n      // Most common usecase is to export a single layer,\n      // so let's optimize the user experience for that.\n      if (result.length === 1) return result[0];\n      else return result;\n    });\n  }\n\n  _doExportFrame (exportOpts = {}) {\n    this._props.exporting = true;\n\n    // Resize to output resolution\n    this.resize();\n\n    // Draw at this output resolution\n    let drawResult = this.render();\n\n    // The self owned canvas (may be undefined...!)\n    const canvas = this.props.canvas;\n\n    // Get list of results from render\n    if (typeof drawResult === 'undefined') {\n      drawResult = [ canvas ];\n    }\n    drawResult = [].concat(drawResult).filter(Boolean);\n\n    // Transform the canvas/file descriptors into a consistent format,\n    // and pull out any data URLs from canvas elements\n    drawResult = drawResult.map(result => {\n      const hasDataObject = typeof result === 'object' && result && ('data' in result || 'dataURL' in result);\n      const data = hasDataObject ? result.data : result;\n      const opts = hasDataObject ? assign({}, result, { data }) : { data };\n      if (isCanvas(data)) {\n        const encoding = opts.encoding || exportOpts.encoding;\n        const encodingQuality = defined(opts.encodingQuality, exportOpts.encodingQuality, 0.95);\n        const { dataURL, extension, type } = exportCanvas(data, { encoding, encodingQuality });\n        return Object.assign(opts, { dataURL, extension, type });\n      } else {\n        return opts;\n      }\n    });\n\n    // Now return to regular rendering mode\n    this._props.exporting = false;\n    this.resize();\n    this.render();\n\n    // And now we can save each result\n    return Promise.all(drawResult.map((result, i, layerList) => {\n      // By default, if rendering multiple layers we will give them indices\n      const curOpt = assign({\n        extension: '',\n        prefix: '',\n        suffix: ''\n      }, exportOpts, result, {\n        layer: i,\n        totalLayers: layerList.length\n      });\n\n      // If export is explicitly not saving, make sure nothing saves\n      // Otherwise default to the layer save option, or fallback to true\n      const saveParam = exportOpts.save === false ? false : result.save;\n      curOpt.save = saveParam !== false;\n\n      // Resolve a full filename from all the options\n      curOpt.filename = resolveFilename(curOpt);\n\n      // Clean up some parameters that may be ambiguous to the user\n      delete curOpt.encoding;\n      delete curOpt.encodingQuality;\n\n      // Clean it up further by just removing undefined values\n      for (let k in curOpt) {\n        if (typeof curOpt[k] === 'undefined') delete curOpt[k];\n      }\n\n      let savePromise = Promise.resolve({});\n      if (curOpt.save) {\n        // Whether to actually save (download) this fragment\n        const data = curOpt.data;\n        if (curOpt.dataURL) {\n          const dataURL = curOpt.dataURL;\n          savePromise = saveDataURL(dataURL, curOpt);\n        } else {\n          savePromise = saveFile(data, curOpt);\n        }\n      }\n      return savePromise.then(saveResult => {\n        return Object.assign({}, curOpt, saveResult);\n      });\n    })).then(ev => {\n      const savedEvents = ev.filter(e => e.save);\n      if (savedEvents.length > 0) {\n        // Log the saved exports\n        const eventWithOutput = savedEvents.find(e => e.outputName);\n        const isClient = savedEvents.some(e => e.client);\n        const isStreaming = savedEvents.some(e => e.stream);\n        let item;\n        // many files, just log how many were exported\n        if (savedEvents.length > 1) item = savedEvents.length;\n        // in CLI, we know exact path dirname\n        else if (eventWithOutput) item = `${eventWithOutput.outputName}/${savedEvents[0].filename}`;\n        // in browser, we can only know it went to \"browser download folder\"\n        else item = `${savedEvents[0].filename}`;\n        let ofSeq = '';\n        if (exportOpts.sequence) {\n          const hasTotalFrames = isFinite(this.props.totalFrames);\n          ofSeq = hasTotalFrames ? ` (frame ${exportOpts.frame + 1} / ${this.props.totalFrames})` : ` (frame ${exportOpts.frame})`;\n        } else if (savedEvents.length > 1) {\n          ofSeq = ` files`;\n        }\n        const client = isClient ? 'canvas-sketch-cli' : 'canvas-sketch';\n        const action = isStreaming ? 'Streaming into' : 'Exported';\n        console.log(`%c[${client}]%c ${action} %c${item}%c${ofSeq}`, 'color: #8e8e8e;', 'color: initial;', 'font-weight: bold;', 'font-weight: initial;');\n      }\n      if (typeof this.sketch.postExport === 'function') {\n        this.sketch.postExport();\n      }\n      return ev;\n    });\n  }\n\n  _wrapContextScale (cb) {\n    this._preRender();\n    cb(this.props);\n    this._postRender();\n  }\n\n  _preRender () {\n    const props = this.props;\n\n    // Scale context for unit sizing\n    if (!this.props.gl && props.context && !props.p5) {\n      props.context.save();\n      if (this.settings.scaleContext !== false) {\n        props.context.scale(props.scaleX, props.scaleY);\n      }\n    } else if (props.p5) {\n      props.p5.scale(props.scaleX / props.pixelRatio, props.scaleY / props.pixelRatio);\n    }\n  }\n\n  _postRender () {\n    const props = this.props;\n\n    if (!this.props.gl && props.context && !props.p5) {\n      props.context.restore();\n    }\n\n    // Flush by default, this may be revisited at a later point.\n    // We do this to ensure toDataURL can be called immediately after.\n    // Most likely browsers already handle this, so we may revisit this and\n    // remove it if it improves performance without any usability issues.\n    if (props.gl && this.settings.flush !== false && !props.p5) {\n      props.gl.flush();\n    }\n  }\n\n  tick () {\n    if (this.sketch && typeof this.sketch.tick === 'function') {\n      this._preRender();\n      this.sketch.tick(this.props);\n      this._postRender();\n    }\n  }\n\n  render () {\n    if (this.props.p5) {\n      this._lastRedrawResult = undefined;\n      this.props.p5.redraw();\n      return this._lastRedrawResult;\n    } else {\n      return this.submitDrawCall();\n    }\n  }\n\n  submitDrawCall () {\n    if (!this.sketch) return;\n\n    const props = this.props;\n    this._preRender();\n\n    let drawResult;\n\n    if (typeof this.sketch === 'function') {\n      drawResult = this.sketch(props);\n    } else if (typeof this.sketch.render === 'function') {\n      drawResult = this.sketch.render(props);\n    }\n\n    this._postRender();\n\n    return drawResult;\n  }\n\n  update (opt = {}) {\n    // Currently update() is only focused on resizing,\n    // but later we will support other options like switching\n    // frames and such.\n    const notYetSupported = [\n      'animate'\n    ];\n\n    Object.keys(opt).forEach(key => {\n      if (notYetSupported.indexOf(key) >= 0) {\n        throw new Error(`Sorry, the { ${key} } option is not yet supported with update().`);\n      }\n    });\n\n    const oldCanvas = this._settings.canvas;\n    const oldContext = this._settings.context;\n\n    // Merge new options into settings\n    for (let key in opt) {\n      const value = opt[key];\n      if (typeof value !== 'undefined') { // ignore undefined\n        this._settings[key] = value;\n      }\n    }\n\n    // Merge in time props\n    const timeOpts = Object.assign({}, this._settings, opt);\n    if ('time' in opt && 'frame' in opt) throw new Error('You should specify { time } or { frame } but not both');\n    else if ('time' in opt) delete timeOpts.frame;\n    else if ('frame' in opt) delete timeOpts.time;\n    if ('duration' in opt && 'totalFrames' in opt) throw new Error('You should specify { duration } or { totalFrames } but not both');\n    else if ('duration' in opt) delete timeOpts.totalFrames;\n    else if ('totalFrames' in opt) delete timeOpts.duration;\n\n    // Merge in user data without copying\n    if ('data' in opt) this._props.data = opt.data;\n\n    const timeProps = this.getTimeProps(timeOpts);\n    Object.assign(this._props, timeProps);\n\n    // If either canvas or context is changed, we should re-update\n    if (oldCanvas !== this._settings.canvas || oldContext !== this._settings.context) {\n      const { canvas, context } = createCanvas(this._settings);\n\n      this.props.canvas = canvas;\n      this.props.context = context;\n\n      // Delete or add a 'gl' prop for convenience\n      this._setupGLKey();\n\n      // Re-mount the new canvas if it has no parent\n      this._appendCanvasIfNeeded();\n    }\n\n    // Special case to support P5.js\n    if (opt.p5 && typeof opt.p5 !== 'function') {\n      this.props.p5 = opt.p5;\n      this.props.p5.draw = () => {\n        if (this._isP5Resizing) return;\n        this._lastRedrawResult = this.submitDrawCall();\n      };\n    }\n\n    // Update playing state if necessary\n    if ('playing' in opt) {\n      if (opt.playing) this.play();\n      else this.pause();\n    }\n\n    checkSettings(this._settings);\n\n    // Draw new frame\n    this.resize();\n    this.render();\n    return this.props;\n  }\n\n  resize () {\n    const oldSizes = this._getSizeProps();\n\n    const settings = this.settings;\n    const props = this.props;\n\n    // Recompute new properties based on current setup\n    const newProps = resizeCanvas(props, settings);\n\n    // Assign to current props\n    Object.assign(this._props, newProps);\n\n    // Now we actually update the canvas width/height and style props\n    const {\n      pixelRatio,\n      canvasWidth,\n      canvasHeight,\n      styleWidth,\n      styleHeight\n    } = this.props;\n\n    // Update canvas settings\n    const canvas = this.props.canvas;\n    if (canvas && settings.resizeCanvas !== false) {\n      if (props.p5) {\n        // P5.js specific edge case\n        if (canvas.width !== canvasWidth || canvas.height !== canvasHeight) {\n          this._isP5Resizing = true;\n          // This causes a re-draw :\\ so we ignore draws in the mean time... sorta hacky\n          props.p5.pixelDensity(pixelRatio);\n          props.p5.resizeCanvas(canvasWidth / pixelRatio, canvasHeight / pixelRatio, false);\n          this._isP5Resizing = false;\n        }\n      } else {\n        // Force canvas size\n        if (canvas.width !== canvasWidth) canvas.width = canvasWidth;\n        if (canvas.height !== canvasHeight) canvas.height = canvasHeight;\n      }\n      // Update canvas style\n      if (isBrowser() && settings.styleCanvas !== false) {\n        canvas.style.width = `${styleWidth}px`;\n        canvas.style.height = `${styleHeight}px`;\n      }\n    }\n\n    const newSizes = this._getSizeProps();\n    let changed = !deepEqual(oldSizes, newSizes);\n    if (changed) {\n      this._sizeChanged();\n    }\n    return changed;\n  }\n\n  _sizeChanged () {\n    // Send resize event to sketch\n    if (this.sketch && typeof this.sketch.resize === 'function') {\n      this.sketch.resize(this.props);\n    }\n  }\n\n  animate () {\n    if (!this.props.playing) return;\n    if (!isBrowser()) {\n      console.error('[canvas-sketch] WARN: Animation in Node.js is not yet supported');\n      return;\n    }\n    this._raf = window.requestAnimationFrame(this._animateHandler);\n\n    let now = rightNow();\n\n    const fps = this.props.fps;\n    const frameIntervalMS = 1000 / fps;\n    let deltaTimeMS = now - this._lastTime;\n\n    const duration = this.props.duration;\n    const hasDuration = typeof duration === 'number' && isFinite(duration);\n\n    let isNewFrame = true;\n    const playbackRate = this.settings.playbackRate;\n    if (playbackRate === 'fixed') {\n      deltaTimeMS = frameIntervalMS;\n    } else if (playbackRate === 'throttle') {\n      if (deltaTimeMS > frameIntervalMS) {\n        now = now - (deltaTimeMS % frameIntervalMS);\n        this._lastTime = now;\n      } else {\n        isNewFrame = false;\n      }\n    } else {\n      this._lastTime = now;\n    }\n\n    const deltaTime = deltaTimeMS / 1000;\n    let newTime = this.props.time + deltaTime * this.props.timeScale;\n\n    // Handle reverse time scale\n    if (newTime < 0 && hasDuration) {\n      newTime = duration + newTime;\n    }\n\n    // Re-start animation\n    let isFinished = false;\n    let isLoopStart = false;\n\n    const looping = this.settings.loop !== false;\n\n    if (hasDuration && newTime >= duration) {\n      // Re-start animation\n      if (looping) {\n        isNewFrame = true;\n        newTime = newTime % duration;\n        isLoopStart = true;\n      } else {\n        isNewFrame = false;\n        newTime = duration;\n        isFinished = true;\n      }\n\n      this._signalEnd();\n    }\n\n    if (isNewFrame) {\n      this.props.deltaTime = deltaTime;\n      this.props.time = newTime;\n      this.props.playhead = this._computePlayhead(newTime, duration);\n      const lastFrame = this.props.frame;\n      this.props.frame = this._computeCurrentFrame();\n      if (isLoopStart) this._signalBegin();\n      if (lastFrame !== this.props.frame) this.tick();\n      this.render();\n      this.props.deltaTime = 0;\n    }\n\n    if (isFinished) {\n      this.pause();\n    }\n  }\n\n  dispatch (cb) {\n    if (typeof cb !== 'function') throw new Error('must pass function into dispatch()');\n    cb(this.props);\n    this.render();\n  }\n\n  mount () {\n    this._appendCanvasIfNeeded();\n  }\n\n  unmount () {\n    if (isBrowser()) {\n      window.removeEventListener('resize', this._resizeHandler);\n      this._keyboardShortcuts.detach();\n    }\n    if (this.props.canvas.parentElement) {\n      this.props.canvas.parentElement.removeChild(this.props.canvas);\n    }\n  }\n\n  _appendCanvasIfNeeded () {\n    if (!isBrowser()) return;\n    if (this.settings.parent !== false && (this.props.canvas && !this.props.canvas.parentElement)) {\n      const defaultParent = this.settings.parent || document.body;\n      defaultParent.appendChild(this.props.canvas);\n    }\n  }\n\n  _setupGLKey () {\n    if (this.props.context) {\n      if (isWebGLContext(this.props.context)) {\n        this._props.gl = this.props.context;\n      } else {\n        delete this._props.gl;\n      }\n    }\n  }\n\n  getTimeProps (settings = {}) {\n    // Get timing data\n    let duration = settings.duration;\n    let totalFrames = settings.totalFrames;\n    const timeScale = defined(settings.timeScale, 1);\n    const fps = defined(settings.fps, 24);\n    const hasDuration = typeof duration === 'number' && isFinite(duration);\n    const hasTotalFrames = typeof totalFrames === 'number' && isFinite(totalFrames);\n\n    const totalFramesFromDuration = hasDuration ? Math.floor(fps * duration) : undefined;\n    const durationFromTotalFrames = hasTotalFrames ? (totalFrames / fps) : undefined;\n    if (hasDuration && hasTotalFrames && totalFramesFromDuration !== totalFrames) {\n      throw new Error('You should specify either duration or totalFrames, but not both. Or, they must match exactly.');\n    }\n\n    if (typeof settings.dimensions === 'undefined' && typeof settings.units !== 'undefined') {\n      console.warn(`You've specified a { units } setting but no { dimension }, so the units will be ignored.`);\n    }\n\n    totalFrames = defined(totalFrames, totalFramesFromDuration, Infinity);\n    duration = defined(duration, durationFromTotalFrames, Infinity);\n\n    const startTime = settings.time;\n    const startFrame = settings.frame;\n    const hasStartTime = typeof startTime === 'number' && isFinite(startTime);\n    const hasStartFrame = typeof startFrame === 'number' && isFinite(startFrame);\n\n    // start at zero unless user specifies frame or time (but not both mismatched)\n    let time = 0;\n    let frame = 0;\n    let playhead = 0;\n    if (hasStartTime && hasStartFrame) {\n      throw new Error('You should specify either start frame or time, but not both.');\n    } else if (hasStartTime) {\n      // User specifies time, we infer frames from FPS\n      time = startTime;\n      playhead = this._computePlayhead(time, duration);\n      frame = this._computeFrame(\n        playhead, time,\n        totalFrames, fps\n      );\n    } else if (hasStartFrame) {\n      // User specifies frame number, we infer time from FPS\n      frame = startFrame;\n      time = frame / fps;\n      playhead = this._computePlayhead(time, duration);\n    }\n\n    return {\n      playhead,\n      time,\n      frame,\n      duration,\n      totalFrames,\n      fps,\n      timeScale\n    };\n  }\n\n  setup (settings = {}) {\n    if (this.sketch) throw new Error('Multiple setup() calls not yet supported.');\n\n    this._settings = Object.assign({}, settings, this._settings);\n\n    checkSettings(this._settings);\n\n    // Get initial canvas & context\n    const { context, canvas } = createCanvas(this._settings);\n\n    const timeProps = this.getTimeProps(this._settings);\n\n    // Initial render state features\n    this._props = {\n      ...timeProps,\n      canvas,\n      context,\n      deltaTime: 0,\n      started: false,\n      exporting: false,\n      playing: false,\n      recording: false,\n      settings: this.settings,\n      data: this.settings.data,\n\n      // Export some specific actions to the sketch\n      render: () => this.render(),\n      togglePlay: () => this.togglePlay(),\n      dispatch: (cb) => this.dispatch(cb),\n      tick: () => this.tick(),\n      resize: () => this.resize(),\n      update: (opt) => this.update(opt),\n      exportFrame: opt => this.exportFrame(opt),\n      record: () => this.record(),\n      play: () => this.play(),\n      pause: () => this.pause(),\n      stop: () => this.stop()\n    };\n\n    // For WebGL sketches, a gl variable reads a bit better\n    this._setupGLKey();\n\n    // Trigger initial resize now so that canvas is already sized\n    // by the time we load the sketch\n    this.resize();\n  }\n\n  loadAndRun (canvasSketch, newSettings) {\n    return this.load(canvasSketch, newSettings).then(() => {\n      this.run();\n      return this;\n    });\n  }\n\n  unload () {\n    this.pause();\n    if (!this.sketch) return;\n    if (typeof this.sketch.unload === 'function') {\n      this._wrapContextScale(props => this.sketch.unload(props));\n    }\n    this._sketch = null;\n  }\n\n  destroy () {\n    this.unload();\n    this.unmount();\n  }\n\n  load (createSketch, newSettings) {\n    // User didn't specify a function\n    if (typeof createSketch !== 'function') {\n      throw new Error('The function must take in a function as the first parameter. Example:\\n  canvasSketcher(() => { ... }, settings)');\n    }\n\n    if (this.sketch) {\n      this.unload();\n    }\n\n    if (typeof newSettings !== 'undefined') {\n      this.update(newSettings);\n    }\n\n    // This is a bit of a tricky case; we set up the auto-scaling here\n    // in case the user decides to render anything to the context *before* the\n    // render() function... However, users should instead use begin() function for that.\n    this._preRender();\n\n    let preload = Promise.resolve();\n\n    // Because of P5.js's unusual structure, we have to do a bit of\n    // library-specific changes to support it properly.\n    if (this.settings.p5) {\n      if (!isBrowser()) {\n        throw new Error('[canvas-sketch] ERROR: Using p5.js in Node.js is not supported');\n      }\n      preload = new Promise(resolve => {\n        let P5Constructor = this.settings.p5;\n        let preload;\n        if (P5Constructor.p5) {\n          preload = P5Constructor.preload;\n          P5Constructor = P5Constructor.p5;\n        }\n\n        // The sketch setup; disable loop, set sizing, etc.\n        const p5Sketch = p5 => {\n          // Hook in preload if necessary\n          if (preload) p5.preload = () => preload(p5);\n          p5.setup = () => {\n            const props = this.props;\n            const isGL = this.settings.context === 'webgl';\n            const renderer = isGL ? p5.WEBGL : p5.P2D;\n            p5.noLoop();\n            p5.pixelDensity(props.pixelRatio);\n            p5.createCanvas(props.viewportWidth, props.viewportHeight, renderer);\n            if (isGL && this.settings.attributes) {\n              p5.setAttributes(this.settings.attributes);\n            }\n\n            this.update({ p5, canvas: p5.canvas, context: p5._renderer.drawingContext });\n            resolve();\n          };\n        };\n\n        // Support global and instance P5.js modes\n        if (typeof P5Constructor === 'function') {\n          new P5Constructor(p5Sketch);\n        } else {\n          if (typeof window.createCanvas !== 'function') {\n            throw new Error(\"{ p5 } setting is passed but can't find p5.js in global (window) scope. Maybe you did not create it globally?\\nnew p5(); // <-- attaches to global scope\");\n          }\n          p5Sketch(window);\n        }\n      });\n    }\n\n    return preload.then(() => {\n      // Load the user's sketch\n      let loader = createSketch(this.props);\n      if (!isPromise(loader)) {\n        loader = Promise.resolve(loader);\n      }\n      return loader;\n    }).then(sketch => {\n      if (!sketch) sketch = {};\n      this._sketch = sketch;\n\n      // Once the sketch is loaded we can add the events\n      if (isBrowser()) {\n        this._keyboardShortcuts.attach();\n        window.addEventListener('resize', this._resizeHandler);\n      }\n\n      this._postRender();\n\n      // The initial resize() in the constructor will not have\n      // triggered a resize() event on the sketch, since it was before\n      // the sketch was loaded. So we send the signal here, allowing\n      // users to react to the initial size before first render.\n      this._sizeChanged();\n      return this;\n    }).catch(err => {\n      console.warn('Could not start sketch, the async loading function rejected with an error:\\n    Error: ' + err.message);\n      throw err;\n    });\n  }\n}\n\nexport default SketchManager;\n","import { getClientAPI } from '../util';\n\nexport default function (opt = {}) {\n  const handler = ev => {\n    if (!opt.enabled()) return;\n\n    const client = getClientAPI();\n    if (ev.keyCode === 83 && !ev.altKey && (ev.metaKey || ev.ctrlKey)) {\n      // Cmd + S\n      ev.preventDefault();\n      opt.save(ev);\n    } else if (ev.keyCode === 32) {\n      // Space\n      // TODO: what to do with this? keep it, or remove it?\n      opt.togglePlay(ev);\n    } else if (client && !ev.altKey && ev.keyCode === 75 && (ev.metaKey || ev.ctrlKey)) {\n      // Cmd + K, only when canvas-sketch-cli is used\n      ev.preventDefault();\n      opt.commit(ev);\n    }\n  };\n\n  const attach = () => {\n    window.addEventListener('keydown', handler);\n  };\n\n  const detach = () => {\n    window.removeEventListener('keydown', handler);\n  };\n\n  return {\n    attach,\n    detach\n  };\n}\n","import SketchManager from './core/SketchManager';\nimport PaperSizes from './paper-sizes';\nimport { getClientAPI, defined } from './util';\n\nconst CACHE = 'hot-id-cache';\nconst runtimeCollisions = [];\n\nfunction isHotReload () {\n  const client = getClientAPI();\n  return client && client.hot;\n}\n\nfunction cacheGet (id) {\n  const client = getClientAPI();\n  if (!client) return undefined;\n  client[CACHE] = client[CACHE] || {};\n  return client[CACHE][id];\n}\n\nfunction cachePut (id, data) {\n  const client = getClientAPI();\n  if (!client) return undefined;\n  client[CACHE] = client[CACHE] || {};\n  client[CACHE][id] = data;\n}\n\nfunction getTimeProp (oldManager, newSettings) {\n  // Static sketches ignore the time persistency\n  return newSettings.animate ? { time: oldManager.props.time } : undefined;\n}\n\nfunction canvasSketch (sketch, settings = {}) {\n  if (settings.p5) {\n    if (settings.canvas || (settings.context && typeof settings.context !== 'string')) {\n      throw new Error(`In { p5 } mode, you can't pass your own canvas or context, unless the context is a \"webgl\" or \"2d\" string`);\n    }\n\n    // Do not create a canvas on startup, since P5.js does that for us\n    const context = typeof settings.context === 'string' ? settings.context : false;\n    settings = Object.assign({}, settings, { canvas: false, context });\n  }\n\n  const isHot = isHotReload();\n  let hotID;\n  if (isHot) {\n    // Use a magic name by default, force user to define each sketch if they\n    // require more than one in an application. Open to other ideas on how to tackle\n    // this as well...\n    hotID = defined(settings.id, '$__DEFAULT_CANVAS_SKETCH_ID__$');\n  }\n  let isInjecting = isHot && typeof hotID === 'string';\n\n  if (isInjecting && runtimeCollisions.includes(hotID)) {\n    console.warn(`Warning: You have multiple calls to canvasSketch() in --hot mode. You must pass unique { id } strings in settings to enable hot reload across multiple sketches. `, hotID);\n    isInjecting = false;\n  }\n\n  let preload = Promise.resolve();\n\n  if (isInjecting) {\n    // Mark this as already spotted in this runtime instance\n    runtimeCollisions.push(hotID);\n\n    const previousData = cacheGet(hotID);\n    if (previousData) {\n      const next = () => {\n        // Grab new props from old sketch instance\n        const newProps = getTimeProp(previousData.manager, settings);\n        // Destroy the old instance\n        previousData.manager.destroy();\n        // Pass along new props\n        return newProps;\n      };\n\n      // Move along the next data...\n      preload = previousData.load.then(next).catch(next);\n    }\n  }\n\n  return preload.then(newProps => {\n    const manager = new SketchManager();\n    let result;\n    if (sketch) {\n      // Merge with incoming data\n      settings = Object.assign({}, settings, newProps);\n\n      // Apply settings and create a canvas\n      manager.setup(settings);\n\n      // Mount to DOM\n      manager.mount();\n\n      // load the sketch first\n      result = manager.loadAndRun(sketch);\n    } else {\n      result = Promise.resolve(manager);\n    }\n    if (isInjecting) {\n      cachePut(hotID, { load: result, manager });\n    }\n    return result;\n  });\n}\n\n// TODO: Figure out a nice way to export things.\ncanvasSketch.canvasSketch = canvasSketch;\ncanvasSketch.PaperSizes = PaperSizes;\n\nexport default canvasSketch;\n","// threejs.org/license\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.THREE = {}));\n}(this, (function (exports) { 'use strict';\n\n\t/**\n\t * Copyright (c) 2014-present, Facebook, Inc.\n\t *\n\t * This source code is licensed under the MIT license found in the\n\t * LICENSE file in the root directory of this source tree.\n\t */\n\tvar runtime = function (exports) {\n\n\t\tvar Op = Object.prototype;\n\t\tvar hasOwn = Op.hasOwnProperty;\n\t\tvar undefined$1; // More compressible than void 0.\n\n\t\tvar $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n\t\tvar iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n\t\tvar asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n\t\tvar toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n\t\tfunction define(obj, key, value) {\n\t\t\tObject.defineProperty(obj, key, {\n\t\t\t\tvalue: value,\n\t\t\t\tenumerable: true,\n\t\t\t\tconfigurable: true,\n\t\t\t\twritable: true\n\t\t\t});\n\t\t\treturn obj[key];\n\t\t}\n\n\t\ttry {\n\t\t\t// IE 8 has a broken Object.defineProperty that only works on DOM objects.\n\t\t\tdefine({}, \"\");\n\t\t} catch (err) {\n\t\t\tdefine = function define(obj, key, value) {\n\t\t\t\treturn obj[key] = value;\n\t\t\t};\n\t\t}\n\n\t\tfunction wrap(innerFn, outerFn, self, tryLocsList) {\n\t\t\t// If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n\t\t\tvar protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n\t\t\tvar generator = Object.create(protoGenerator.prototype);\n\t\t\tvar context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n\t\t\t// .throw, and .return methods.\n\n\t\t\tgenerator._invoke = makeInvokeMethod(innerFn, self, context);\n\t\t\treturn generator;\n\t\t}\n\n\t\texports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n\t\t// record like context.tryEntries[i].completion. This interface could\n\t\t// have been (and was previously) designed to take a closure to be\n\t\t// invoked without arguments, but in all the cases we care about we\n\t\t// already have an existing method we want to call, so there's no need\n\t\t// to create a new function object. We can even get away with assuming\n\t\t// the method takes exactly one argument, since that happens to be true\n\t\t// in every case, so we don't have to touch the arguments object. The\n\t\t// only additional allocation required is the completion record, which\n\t\t// has a stable shape and so hopefully should be cheap to allocate.\n\n\t\tfunction tryCatch(fn, obj, arg) {\n\t\t\ttry {\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"normal\",\n\t\t\t\t\targ: fn.call(obj, arg)\n\t\t\t\t};\n\t\t\t} catch (err) {\n\t\t\t\treturn {\n\t\t\t\t\ttype: \"throw\",\n\t\t\t\t\targ: err\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tvar GenStateSuspendedStart = \"suspendedStart\";\n\t\tvar GenStateSuspendedYield = \"suspendedYield\";\n\t\tvar GenStateExecuting = \"executing\";\n\t\tvar GenStateCompleted = \"completed\"; // Returning this object from the innerFn has the same effect as\n\t\t// breaking out of the dispatch switch statement.\n\n\t\tvar ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n\t\t// .constructor.prototype properties for functions that return Generator\n\t\t// objects. For full spec compliance, you may wish to configure your\n\t\t// minifier not to mangle the names of these two functions.\n\n\t\tfunction Generator() {}\n\n\t\tfunction GeneratorFunction() {}\n\n\t\tfunction GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n\t\t// don't natively support it.\n\n\n\t\tvar IteratorPrototype = {};\n\n\t\tIteratorPrototype[iteratorSymbol] = function () {\n\t\t\treturn this;\n\t\t};\n\n\t\tvar getProto = Object.getPrototypeOf;\n\t\tvar NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n\t\tif (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n\t\t\t// This environment has a native %IteratorPrototype%; use it instead\n\t\t\t// of the polyfill.\n\t\t\tIteratorPrototype = NativeIteratorPrototype;\n\t\t}\n\n\t\tvar Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n\t\tGeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n\t\tGeneratorFunctionPrototype.constructor = GeneratorFunction;\n\t\tGeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"); // Helper for defining the .next, .throw, and .return methods of the\n\t\t// Iterator interface in terms of a single ._invoke method.\n\n\t\tfunction defineIteratorMethods(prototype) {\n\t\t\t[\"next\", \"throw\", \"return\"].forEach(function (method) {\n\t\t\t\tdefine(prototype, method, function (arg) {\n\t\t\t\t\treturn this._invoke(method, arg);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\texports.isGeneratorFunction = function (genFun) {\n\t\t\tvar ctor = typeof genFun === \"function\" && genFun.constructor;\n\t\t\treturn ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n\t\t\t// do is to check its .name property.\n\t\t\t(ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n\t\t};\n\n\t\texports.mark = function (genFun) {\n\t\t\tif (Object.setPrototypeOf) {\n\t\t\t\tObject.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n\t\t\t} else {\n\t\t\t\tgenFun.__proto__ = GeneratorFunctionPrototype;\n\t\t\t\tdefine(genFun, toStringTagSymbol, \"GeneratorFunction\");\n\t\t\t}\n\n\t\t\tgenFun.prototype = Object.create(Gp);\n\t\t\treturn genFun;\n\t\t}; // Within the body of any async function, `await x` is transformed to\n\t\t// `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n\t\t// `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n\t\t// meant to be awaited.\n\n\n\t\texports.awrap = function (arg) {\n\t\t\treturn {\n\t\t\t\t__await: arg\n\t\t\t};\n\t\t};\n\n\t\tfunction AsyncIterator(generator, PromiseImpl) {\n\t\t\tfunction invoke(method, arg, resolve, reject) {\n\t\t\t\tvar record = tryCatch(generator[method], generator, arg);\n\n\t\t\t\tif (record.type === \"throw\") {\n\t\t\t\t\treject(record.arg);\n\t\t\t\t} else {\n\t\t\t\t\tvar result = record.arg;\n\t\t\t\t\tvar value = result.value;\n\n\t\t\t\t\tif (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\n\t\t\t\t\t\treturn PromiseImpl.resolve(value.__await).then(function (value) {\n\t\t\t\t\t\t\tinvoke(\"next\", value, resolve, reject);\n\t\t\t\t\t\t}, function (err) {\n\t\t\t\t\t\t\tinvoke(\"throw\", err, resolve, reject);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\treturn PromiseImpl.resolve(value).then(function (unwrapped) {\n\t\t\t\t\t\t// When a yielded Promise is resolved, its final value becomes\n\t\t\t\t\t\t// the .value of the Promise<{value,done}> result for the\n\t\t\t\t\t\t// current iteration.\n\t\t\t\t\t\tresult.value = unwrapped;\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}, function (error) {\n\t\t\t\t\t\t// If a rejected Promise was yielded, throw the rejection back\n\t\t\t\t\t\t// into the async generator function so it can be handled there.\n\t\t\t\t\t\treturn invoke(\"throw\", error, resolve, reject);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar previousPromise;\n\n\t\t\tfunction enqueue(method, arg) {\n\t\t\t\tfunction callInvokeWithMethodAndArg() {\n\t\t\t\t\treturn new PromiseImpl(function (resolve, reject) {\n\t\t\t\t\t\tinvoke(method, arg, resolve, reject);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn previousPromise = // If enqueue has been called before, then we want to wait until\n\t\t\t\t// all previous Promises have been resolved before calling invoke,\n\t\t\t\t// so that results are always delivered in the correct order. If\n\t\t\t\t// enqueue has not been called before, then it is important to\n\t\t\t\t// call invoke immediately, without waiting on a callback to fire,\n\t\t\t\t// so that the async generator function has the opportunity to do\n\t\t\t\t// any necessary setup in a predictable way. This predictability\n\t\t\t\t// is why the Promise constructor synchronously invokes its\n\t\t\t\t// executor callback, and why async functions synchronously\n\t\t\t\t// execute code before the first await. Since we implement simple\n\t\t\t\t// async functions in terms of async generators, it is especially\n\t\t\t\t// important to get this right, even though it requires care.\n\t\t\t\tpreviousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n\t\t\t\t// invocations of the iterator.\n\t\t\t\tcallInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n\t\t\t} // Define the unified helper method that is used to implement .next,\n\t\t\t// .throw, and .return (see defineIteratorMethods).\n\n\n\t\t\tthis._invoke = enqueue;\n\t\t}\n\n\t\tdefineIteratorMethods(AsyncIterator.prototype);\n\n\t\tAsyncIterator.prototype[asyncIteratorSymbol] = function () {\n\t\t\treturn this;\n\t\t};\n\n\t\texports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n\t\t// AsyncIterator objects; they just return a Promise for the value of\n\t\t// the final result produced by the iterator.\n\n\t\texports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n\t\t\tif (PromiseImpl === void 0) PromiseImpl = Promise;\n\t\t\tvar iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n\t\t\treturn exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n\t\t\t: iter.next().then(function (result) {\n\t\t\t\treturn result.done ? result.value : iter.next();\n\t\t\t});\n\t\t};\n\n\t\tfunction makeInvokeMethod(innerFn, self, context) {\n\t\t\tvar state = GenStateSuspendedStart;\n\t\t\treturn function invoke(method, arg) {\n\t\t\t\tif (state === GenStateExecuting) {\n\t\t\t\t\tthrow new Error(\"Generator is already running\");\n\t\t\t\t}\n\n\t\t\t\tif (state === GenStateCompleted) {\n\t\t\t\t\tif (method === \"throw\") {\n\t\t\t\t\t\tthrow arg;\n\t\t\t\t\t} // Be forgiving, per 25.3.3.3.3 of the spec:\n\t\t\t\t\t// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n\t\t\t\t\treturn doneResult();\n\t\t\t\t}\n\n\t\t\t\tcontext.method = method;\n\t\t\t\tcontext.arg = arg;\n\n\t\t\t\twhile (true) {\n\t\t\t\t\tvar delegate = context.delegate;\n\n\t\t\t\t\tif (delegate) {\n\t\t\t\t\t\tvar delegateResult = maybeInvokeDelegate(delegate, context);\n\n\t\t\t\t\t\tif (delegateResult) {\n\t\t\t\t\t\t\tif (delegateResult === ContinueSentinel) continue;\n\t\t\t\t\t\t\treturn delegateResult;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (context.method === \"next\") {\n\t\t\t\t\t\t// Setting context._sent for legacy support of Babel's\n\t\t\t\t\t\t// function.sent implementation.\n\t\t\t\t\t\tcontext.sent = context._sent = context.arg;\n\t\t\t\t\t} else if (context.method === \"throw\") {\n\t\t\t\t\t\tif (state === GenStateSuspendedStart) {\n\t\t\t\t\t\t\tstate = GenStateCompleted;\n\t\t\t\t\t\t\tthrow context.arg;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontext.dispatchException(context.arg);\n\t\t\t\t\t} else if (context.method === \"return\") {\n\t\t\t\t\t\tcontext.abrupt(\"return\", context.arg);\n\t\t\t\t\t}\n\n\t\t\t\t\tstate = GenStateExecuting;\n\t\t\t\t\tvar record = tryCatch(innerFn, self, context);\n\n\t\t\t\t\tif (record.type === \"normal\") {\n\t\t\t\t\t\t// If an exception is thrown from innerFn, we leave state ===\n\t\t\t\t\t\t// GenStateExecuting and loop back for another invocation.\n\t\t\t\t\t\tstate = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n\t\t\t\t\t\tif (record.arg === ContinueSentinel) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tvalue: record.arg,\n\t\t\t\t\t\t\tdone: context.done\n\t\t\t\t\t\t};\n\t\t\t\t\t} else if (record.type === \"throw\") {\n\t\t\t\t\t\tstate = GenStateCompleted; // Dispatch the exception by looping back around to the\n\t\t\t\t\t\t// context.dispatchException(context.arg) call above.\n\n\t\t\t\t\t\tcontext.method = \"throw\";\n\t\t\t\t\t\tcontext.arg = record.arg;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t} // Call delegate.iterator[context.method](context.arg) and handle the\n\t\t// result, either by returning a { value, done } result from the\n\t\t// delegate iterator, or by modifying context.method and context.arg,\n\t\t// setting context.delegate to null, and returning the ContinueSentinel.\n\n\n\t\tfunction maybeInvokeDelegate(delegate, context) {\n\t\t\tvar method = delegate.iterator[context.method];\n\n\t\t\tif (method === undefined$1) {\n\t\t\t\t// A .throw or .return when the delegate iterator has no .throw\n\t\t\t\t// method always terminates the yield* loop.\n\t\t\t\tcontext.delegate = null;\n\n\t\t\t\tif (context.method === \"throw\") {\n\t\t\t\t\t// Note: [\"return\"] must be used for ES3 parsing compatibility.\n\t\t\t\t\tif (delegate.iterator[\"return\"]) {\n\t\t\t\t\t\t// If the delegate iterator has a return method, give it a\n\t\t\t\t\t\t// chance to clean up.\n\t\t\t\t\t\tcontext.method = \"return\";\n\t\t\t\t\t\tcontext.arg = undefined$1;\n\t\t\t\t\t\tmaybeInvokeDelegate(delegate, context);\n\n\t\t\t\t\t\tif (context.method === \"throw\") {\n\t\t\t\t\t\t\t// If maybeInvokeDelegate(context) changed context.method from\n\t\t\t\t\t\t\t// \"return\" to \"throw\", let that override the TypeError below.\n\t\t\t\t\t\t\treturn ContinueSentinel;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcontext.method = \"throw\";\n\t\t\t\t\tcontext.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n\t\t\t\t}\n\n\t\t\t\treturn ContinueSentinel;\n\t\t\t}\n\n\t\t\tvar record = tryCatch(method, delegate.iterator, context.arg);\n\n\t\t\tif (record.type === \"throw\") {\n\t\t\t\tcontext.method = \"throw\";\n\t\t\t\tcontext.arg = record.arg;\n\t\t\t\tcontext.delegate = null;\n\t\t\t\treturn ContinueSentinel;\n\t\t\t}\n\n\t\t\tvar info = record.arg;\n\n\t\t\tif (!info) {\n\t\t\t\tcontext.method = \"throw\";\n\t\t\t\tcontext.arg = new TypeError(\"iterator result is not an object\");\n\t\t\t\tcontext.delegate = null;\n\t\t\t\treturn ContinueSentinel;\n\t\t\t}\n\n\t\t\tif (info.done) {\n\t\t\t\t// Assign the result of the finished delegate to the temporary\n\t\t\t\t// variable specified by delegate.resultName (see delegateYield).\n\t\t\t\tcontext[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n\t\t\t\tcontext.next = delegate.nextLoc; // If context.method was \"throw\" but the delegate handled the\n\t\t\t\t// exception, let the outer generator proceed normally. If\n\t\t\t\t// context.method was \"next\", forget context.arg since it has been\n\t\t\t\t// \"consumed\" by the delegate iterator. If context.method was\n\t\t\t\t// \"return\", allow the original .return call to continue in the\n\t\t\t\t// outer generator.\n\n\t\t\t\tif (context.method !== \"return\") {\n\t\t\t\t\tcontext.method = \"next\";\n\t\t\t\t\tcontext.arg = undefined$1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Re-yield the result returned by the delegate method.\n\t\t\t\treturn info;\n\t\t\t} // The delegate iterator is finished, so forget it and continue with\n\t\t\t// the outer generator.\n\n\n\t\t\tcontext.delegate = null;\n\t\t\treturn ContinueSentinel;\n\t\t} // Define Generator.prototype.{next,throw,return} in terms of the\n\t\t// unified ._invoke helper method.\n\n\n\t\tdefineIteratorMethods(Gp);\n\t\tdefine(Gp, toStringTagSymbol, \"Generator\"); // A Generator should always return itself as the iterator object when the\n\t\t// @@iterator function is called on it. Some browsers' implementations of the\n\t\t// iterator prototype chain incorrectly implement this, causing the Generator\n\t\t// object to not be returned from this call. This ensures that doesn't happen.\n\t\t// See https://github.com/facebook/regenerator/issues/274 for more details.\n\n\t\tGp[iteratorSymbol] = function () {\n\t\t\treturn this;\n\t\t};\n\n\t\tGp.toString = function () {\n\t\t\treturn \"[object Generator]\";\n\t\t};\n\n\t\tfunction pushTryEntry(locs) {\n\t\t\tvar entry = {\n\t\t\t\ttryLoc: locs[0]\n\t\t\t};\n\n\t\t\tif (1 in locs) {\n\t\t\t\tentry.catchLoc = locs[1];\n\t\t\t}\n\n\t\t\tif (2 in locs) {\n\t\t\t\tentry.finallyLoc = locs[2];\n\t\t\t\tentry.afterLoc = locs[3];\n\t\t\t}\n\n\t\t\tthis.tryEntries.push(entry);\n\t\t}\n\n\t\tfunction resetTryEntry(entry) {\n\t\t\tvar record = entry.completion || {};\n\t\t\trecord.type = \"normal\";\n\t\t\tdelete record.arg;\n\t\t\tentry.completion = record;\n\t\t}\n\n\t\tfunction Context(tryLocsList) {\n\t\t\t// The root entry object (effectively a try statement without a catch\n\t\t\t// or a finally block) gives us a place to store values thrown from\n\t\t\t// locations where there is no enclosing try statement.\n\t\t\tthis.tryEntries = [{\n\t\t\t\ttryLoc: \"root\"\n\t\t\t}];\n\t\t\ttryLocsList.forEach(pushTryEntry, this);\n\t\t\tthis.reset(true);\n\t\t}\n\n\t\texports.keys = function (object) {\n\t\t\tvar keys = [];\n\n\t\t\tfor (var key in object) {\n\t\t\t\tkeys.push(key);\n\t\t\t}\n\n\t\t\tkeys.reverse(); // Rather than returning an object with a next method, we keep\n\t\t\t// things simple and return the next function itself.\n\n\t\t\treturn function next() {\n\t\t\t\twhile (keys.length) {\n\t\t\t\t\tvar key = keys.pop();\n\n\t\t\t\t\tif (key in object) {\n\t\t\t\t\t\tnext.value = key;\n\t\t\t\t\t\tnext.done = false;\n\t\t\t\t\t\treturn next;\n\t\t\t\t\t}\n\t\t\t\t} // To avoid creating an additional object, we just hang the .value\n\t\t\t\t// and .done properties off the next function object itself. This\n\t\t\t\t// also ensures that the minifier will not anonymize the function.\n\n\n\t\t\t\tnext.done = true;\n\t\t\t\treturn next;\n\t\t\t};\n\t\t};\n\n\t\tfunction values(iterable) {\n\t\t\tif (iterable) {\n\t\t\t\tvar iteratorMethod = iterable[iteratorSymbol];\n\n\t\t\t\tif (iteratorMethod) {\n\t\t\t\t\treturn iteratorMethod.call(iterable);\n\t\t\t\t}\n\n\t\t\t\tif (typeof iterable.next === \"function\") {\n\t\t\t\t\treturn iterable;\n\t\t\t\t}\n\n\t\t\t\tif (!isNaN(iterable.length)) {\n\t\t\t\t\tvar i = -1,\n\t\t\t\t\t\t\tnext = function next() {\n\t\t\t\t\t\twhile (++i < iterable.length) {\n\t\t\t\t\t\t\tif (hasOwn.call(iterable, i)) {\n\t\t\t\t\t\t\t\tnext.value = iterable[i];\n\t\t\t\t\t\t\t\tnext.done = false;\n\t\t\t\t\t\t\t\treturn next;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnext.value = undefined$1;\n\t\t\t\t\t\tnext.done = true;\n\t\t\t\t\t\treturn next;\n\t\t\t\t\t};\n\n\t\t\t\t\treturn next.next = next;\n\t\t\t\t}\n\t\t\t} // Return an iterator with no values.\n\n\n\t\t\treturn {\n\t\t\t\tnext: doneResult\n\t\t\t};\n\t\t}\n\n\t\texports.values = values;\n\n\t\tfunction doneResult() {\n\t\t\treturn {\n\t\t\t\tvalue: undefined$1,\n\t\t\t\tdone: true\n\t\t\t};\n\t\t}\n\n\t\tContext.prototype = {\n\t\t\tconstructor: Context,\n\t\t\treset: function reset(skipTempReset) {\n\t\t\t\tthis.prev = 0;\n\t\t\t\tthis.next = 0; // Resetting context._sent for legacy support of Babel's\n\t\t\t\t// function.sent implementation.\n\n\t\t\t\tthis.sent = this._sent = undefined$1;\n\t\t\t\tthis.done = false;\n\t\t\t\tthis.delegate = null;\n\t\t\t\tthis.method = \"next\";\n\t\t\t\tthis.arg = undefined$1;\n\t\t\t\tthis.tryEntries.forEach(resetTryEntry);\n\n\t\t\t\tif (!skipTempReset) {\n\t\t\t\t\tfor (var name in this) {\n\t\t\t\t\t\t// Not sure about the optimal order of these conditions:\n\t\t\t\t\t\tif (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n\t\t\t\t\t\t\tthis[name] = undefined$1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tstop: function stop() {\n\t\t\t\tthis.done = true;\n\t\t\t\tvar rootEntry = this.tryEntries[0];\n\t\t\t\tvar rootRecord = rootEntry.completion;\n\n\t\t\t\tif (rootRecord.type === \"throw\") {\n\t\t\t\t\tthrow rootRecord.arg;\n\t\t\t\t}\n\n\t\t\t\treturn this.rval;\n\t\t\t},\n\t\t\tdispatchException: function dispatchException(exception) {\n\t\t\t\tif (this.done) {\n\t\t\t\t\tthrow exception;\n\t\t\t\t}\n\n\t\t\t\tvar context = this;\n\n\t\t\t\tfunction handle(loc, caught) {\n\t\t\t\t\trecord.type = \"throw\";\n\t\t\t\t\trecord.arg = exception;\n\t\t\t\t\tcontext.next = loc;\n\n\t\t\t\t\tif (caught) {\n\t\t\t\t\t\t// If the dispatched exception was caught by a catch block,\n\t\t\t\t\t\t// then let that catch block handle the exception normally.\n\t\t\t\t\t\tcontext.method = \"next\";\n\t\t\t\t\t\tcontext.arg = undefined$1;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn !!caught;\n\t\t\t\t}\n\n\t\t\t\tfor (var i = this.tryEntries.length - 1; i >= 0; --i) {\n\t\t\t\t\tvar entry = this.tryEntries[i];\n\t\t\t\t\tvar record = entry.completion;\n\n\t\t\t\t\tif (entry.tryLoc === \"root\") {\n\t\t\t\t\t\t// Exception thrown outside of any try block that could handle\n\t\t\t\t\t\t// it, so set the completion value of the entire function to\n\t\t\t\t\t\t// throw the exception.\n\t\t\t\t\t\treturn handle(\"end\");\n\t\t\t\t\t}\n\n\t\t\t\t\tif (entry.tryLoc <= this.prev) {\n\t\t\t\t\t\tvar hasCatch = hasOwn.call(entry, \"catchLoc\");\n\t\t\t\t\t\tvar hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n\t\t\t\t\t\tif (hasCatch && hasFinally) {\n\t\t\t\t\t\t\tif (this.prev < entry.catchLoc) {\n\t\t\t\t\t\t\t\treturn handle(entry.catchLoc, true);\n\t\t\t\t\t\t\t} else if (this.prev < entry.finallyLoc) {\n\t\t\t\t\t\t\t\treturn handle(entry.finallyLoc);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (hasCatch) {\n\t\t\t\t\t\t\tif (this.prev < entry.catchLoc) {\n\t\t\t\t\t\t\t\treturn handle(entry.catchLoc, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (hasFinally) {\n\t\t\t\t\t\t\tif (this.prev < entry.finallyLoc) {\n\t\t\t\t\t\t\t\treturn handle(entry.finallyLoc);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new Error(\"try statement without catch or finally\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tabrupt: function abrupt(type, arg) {\n\t\t\t\tfor (var i = this.tryEntries.length - 1; i >= 0; --i) {\n\t\t\t\t\tvar entry = this.tryEntries[i];\n\n\t\t\t\t\tif (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n\t\t\t\t\t\tvar finallyEntry = entry;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n\t\t\t\t\t// Ignore the finally entry if control is not jumping to a\n\t\t\t\t\t// location outside the try/catch block.\n\t\t\t\t\tfinallyEntry = null;\n\t\t\t\t}\n\n\t\t\t\tvar record = finallyEntry ? finallyEntry.completion : {};\n\t\t\t\trecord.type = type;\n\t\t\t\trecord.arg = arg;\n\n\t\t\t\tif (finallyEntry) {\n\t\t\t\t\tthis.method = \"next\";\n\t\t\t\t\tthis.next = finallyEntry.finallyLoc;\n\t\t\t\t\treturn ContinueSentinel;\n\t\t\t\t}\n\n\t\t\t\treturn this.complete(record);\n\t\t\t},\n\t\t\tcomplete: function complete(record, afterLoc) {\n\t\t\t\tif (record.type === \"throw\") {\n\t\t\t\t\tthrow record.arg;\n\t\t\t\t}\n\n\t\t\t\tif (record.type === \"break\" || record.type === \"continue\") {\n\t\t\t\t\tthis.next = record.arg;\n\t\t\t\t} else if (record.type === \"return\") {\n\t\t\t\t\tthis.rval = this.arg = record.arg;\n\t\t\t\t\tthis.method = \"return\";\n\t\t\t\t\tthis.next = \"end\";\n\t\t\t\t} else if (record.type === \"normal\" && afterLoc) {\n\t\t\t\t\tthis.next = afterLoc;\n\t\t\t\t}\n\n\t\t\t\treturn ContinueSentinel;\n\t\t\t},\n\t\t\tfinish: function finish(finallyLoc) {\n\t\t\t\tfor (var i = this.tryEntries.length - 1; i >= 0; --i) {\n\t\t\t\t\tvar entry = this.tryEntries[i];\n\n\t\t\t\t\tif (entry.finallyLoc === finallyLoc) {\n\t\t\t\t\t\tthis.complete(entry.completion, entry.afterLoc);\n\t\t\t\t\t\tresetTryEntry(entry);\n\t\t\t\t\t\treturn ContinueSentinel;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"catch\": function _catch(tryLoc) {\n\t\t\t\tfor (var i = this.tryEntries.length - 1; i >= 0; --i) {\n\t\t\t\t\tvar entry = this.tryEntries[i];\n\n\t\t\t\t\tif (entry.tryLoc === tryLoc) {\n\t\t\t\t\t\tvar record = entry.completion;\n\n\t\t\t\t\t\tif (record.type === \"throw\") {\n\t\t\t\t\t\t\tvar thrown = record.arg;\n\t\t\t\t\t\t\tresetTryEntry(entry);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn thrown;\n\t\t\t\t\t}\n\t\t\t\t} // The context.catch method must only be called with a location\n\t\t\t\t// argument that corresponds to a known catch block.\n\n\n\t\t\t\tthrow new Error(\"illegal catch attempt\");\n\t\t\t},\n\t\t\tdelegateYield: function delegateYield(iterable, resultName, nextLoc) {\n\t\t\t\tthis.delegate = {\n\t\t\t\t\titerator: values(iterable),\n\t\t\t\t\tresultName: resultName,\n\t\t\t\t\tnextLoc: nextLoc\n\t\t\t\t};\n\n\t\t\t\tif (this.method === \"next\") {\n\t\t\t\t\t// Deliberately forget the last sent value so that we don't\n\t\t\t\t\t// accidentally pass it on to the delegate.\n\t\t\t\t\tthis.arg = undefined$1;\n\t\t\t\t}\n\n\t\t\t\treturn ContinueSentinel;\n\t\t\t}\n\t\t}; // Regardless of whether this script is executing as a CommonJS module\n\t\t// or not, return the runtime object so that we can declare the variable\n\t\t// regeneratorRuntime in the outer scope, which allows this module to be\n\t\t// injected easily by `bin/regenerator --include-runtime script.js`.\n\n\t\treturn exports;\n\t}( // If this script is executing as a CommonJS module, use module.exports\n\t// as the regeneratorRuntime namespace. Otherwise create a new empty\n\t// object. Either way, the resulting object will be used to initialize\n\t// the regeneratorRuntime variable at the top of this file.\n\ttypeof module === \"object\" ? module.exports : {});\n\n\ttry {\n\t\tregeneratorRuntime = runtime;\n\t} catch (accidentalStrictMode) {\n\t\t// This module should not be running in strict mode, so the above\n\t\t// assignment should always work unless something is misconfigured. Just\n\t\t// in case runtime.js accidentally runs in strict mode, we can escape\n\t\t// strict mode using a global Function call. This could conceivably fail\n\t\t// if a Content Security Policy forbids using Function, but in that case\n\t\t// the proper solution is to fix the accidental strict mode problem. If\n\t\t// you've misconfigured your bundler to force strict mode and applied a\n\t\t// CSP to forbid Function, and you're not willing to fix either of those\n\t\t// problems, please detail your unique predicament in a GitHub issue.\n\t\tFunction(\"r\", \"regeneratorRuntime = r\")(runtime);\n\t}\n\n\tvar REVISION = '126';\n\tvar MOUSE = {\n\t\tLEFT: 0,\n\t\tMIDDLE: 1,\n\t\tRIGHT: 2,\n\t\tROTATE: 0,\n\t\tDOLLY: 1,\n\t\tPAN: 2\n\t};\n\tvar TOUCH = {\n\t\tROTATE: 0,\n\t\tPAN: 1,\n\t\tDOLLY_PAN: 2,\n\t\tDOLLY_ROTATE: 3\n\t};\n\tvar CullFaceNone = 0;\n\tvar CullFaceBack = 1;\n\tvar CullFaceFront = 2;\n\tvar CullFaceFrontBack = 3;\n\tvar BasicShadowMap = 0;\n\tvar PCFShadowMap = 1;\n\tvar PCFSoftShadowMap = 2;\n\tvar VSMShadowMap = 3;\n\tvar FrontSide = 0;\n\tvar BackSide = 1;\n\tvar DoubleSide = 2;\n\tvar FlatShading = 1;\n\tvar SmoothShading = 2;\n\tvar NoBlending = 0;\n\tvar NormalBlending = 1;\n\tvar AdditiveBlending = 2;\n\tvar SubtractiveBlending = 3;\n\tvar MultiplyBlending = 4;\n\tvar CustomBlending = 5;\n\tvar AddEquation = 100;\n\tvar SubtractEquation = 101;\n\tvar ReverseSubtractEquation = 102;\n\tvar MinEquation = 103;\n\tvar MaxEquation = 104;\n\tvar ZeroFactor = 200;\n\tvar OneFactor = 201;\n\tvar SrcColorFactor = 202;\n\tvar OneMinusSrcColorFactor = 203;\n\tvar SrcAlphaFactor = 204;\n\tvar OneMinusSrcAlphaFactor = 205;\n\tvar DstAlphaFactor = 206;\n\tvar OneMinusDstAlphaFactor = 207;\n\tvar DstColorFactor = 208;\n\tvar OneMinusDstColorFactor = 209;\n\tvar SrcAlphaSaturateFactor = 210;\n\tvar NeverDepth = 0;\n\tvar AlwaysDepth = 1;\n\tvar LessDepth = 2;\n\tvar LessEqualDepth = 3;\n\tvar EqualDepth = 4;\n\tvar GreaterEqualDepth = 5;\n\tvar GreaterDepth = 6;\n\tvar NotEqualDepth = 7;\n\tvar MultiplyOperation = 0;\n\tvar MixOperation = 1;\n\tvar AddOperation = 2;\n\tvar NoToneMapping = 0;\n\tvar LinearToneMapping = 1;\n\tvar ReinhardToneMapping = 2;\n\tvar CineonToneMapping = 3;\n\tvar ACESFilmicToneMapping = 4;\n\tvar CustomToneMapping = 5;\n\tvar UVMapping = 300;\n\tvar CubeReflectionMapping = 301;\n\tvar CubeRefractionMapping = 302;\n\tvar EquirectangularReflectionMapping = 303;\n\tvar EquirectangularRefractionMapping = 304;\n\tvar CubeUVReflectionMapping = 306;\n\tvar CubeUVRefractionMapping = 307;\n\tvar RepeatWrapping = 1000;\n\tvar ClampToEdgeWrapping = 1001;\n\tvar MirroredRepeatWrapping = 1002;\n\tvar NearestFilter = 1003;\n\tvar NearestMipmapNearestFilter = 1004;\n\tvar NearestMipMapNearestFilter = 1004;\n\tvar NearestMipmapLinearFilter = 1005;\n\tvar NearestMipMapLinearFilter = 1005;\n\tvar LinearFilter = 1006;\n\tvar LinearMipmapNearestFilter = 1007;\n\tvar LinearMipMapNearestFilter = 1007;\n\tvar LinearMipmapLinearFilter = 1008;\n\tvar LinearMipMapLinearFilter = 1008;\n\tvar UnsignedByteType = 1009;\n\tvar ByteType = 1010;\n\tvar ShortType = 1011;\n\tvar UnsignedShortType = 1012;\n\tvar IntType = 1013;\n\tvar UnsignedIntType = 1014;\n\tvar FloatType = 1015;\n\tvar HalfFloatType = 1016;\n\tvar UnsignedShort4444Type = 1017;\n\tvar UnsignedShort5551Type = 1018;\n\tvar UnsignedShort565Type = 1019;\n\tvar UnsignedInt248Type = 1020;\n\tvar AlphaFormat = 1021;\n\tvar RGBFormat = 1022;\n\tvar RGBAFormat = 1023;\n\tvar LuminanceFormat = 1024;\n\tvar LuminanceAlphaFormat = 1025;\n\tvar RGBEFormat = RGBAFormat;\n\tvar DepthFormat = 1026;\n\tvar DepthStencilFormat = 1027;\n\tvar RedFormat = 1028;\n\tvar RedIntegerFormat = 1029;\n\tvar RGFormat = 1030;\n\tvar RGIntegerFormat = 1031;\n\tvar RGBIntegerFormat = 1032;\n\tvar RGBAIntegerFormat = 1033;\n\tvar RGB_S3TC_DXT1_Format = 33776;\n\tvar RGBA_S3TC_DXT1_Format = 33777;\n\tvar RGBA_S3TC_DXT3_Format = 33778;\n\tvar RGBA_S3TC_DXT5_Format = 33779;\n\tvar RGB_PVRTC_4BPPV1_Format = 35840;\n\tvar RGB_PVRTC_2BPPV1_Format = 35841;\n\tvar RGBA_PVRTC_4BPPV1_Format = 35842;\n\tvar RGBA_PVRTC_2BPPV1_Format = 35843;\n\tvar RGB_ETC1_Format = 36196;\n\tvar RGB_ETC2_Format = 37492;\n\tvar RGBA_ETC2_EAC_Format = 37496;\n\tvar RGBA_ASTC_4x4_Format = 37808;\n\tvar RGBA_ASTC_5x4_Format = 37809;\n\tvar RGBA_ASTC_5x5_Format = 37810;\n\tvar RGBA_ASTC_6x5_Format = 37811;\n\tvar RGBA_ASTC_6x6_Format = 37812;\n\tvar RGBA_ASTC_8x5_Format = 37813;\n\tvar RGBA_ASTC_8x6_Format = 37814;\n\tvar RGBA_ASTC_8x8_Format = 37815;\n\tvar RGBA_ASTC_10x5_Format = 37816;\n\tvar RGBA_ASTC_10x6_Format = 37817;\n\tvar RGBA_ASTC_10x8_Format = 37818;\n\tvar RGBA_ASTC_10x10_Format = 37819;\n\tvar RGBA_ASTC_12x10_Format = 37820;\n\tvar RGBA_ASTC_12x12_Format = 37821;\n\tvar RGBA_BPTC_Format = 36492;\n\tvar SRGB8_ALPHA8_ASTC_4x4_Format = 37840;\n\tvar SRGB8_ALPHA8_ASTC_5x4_Format = 37841;\n\tvar SRGB8_ALPHA8_ASTC_5x5_Format = 37842;\n\tvar SRGB8_ALPHA8_ASTC_6x5_Format = 37843;\n\tvar SRGB8_ALPHA8_ASTC_6x6_Format = 37844;\n\tvar SRGB8_ALPHA8_ASTC_8x5_Format = 37845;\n\tvar SRGB8_ALPHA8_ASTC_8x6_Format = 37846;\n\tvar SRGB8_ALPHA8_ASTC_8x8_Format = 37847;\n\tvar SRGB8_ALPHA8_ASTC_10x5_Format = 37848;\n\tvar SRGB8_ALPHA8_ASTC_10x6_Format = 37849;\n\tvar SRGB8_ALPHA8_ASTC_10x8_Format = 37850;\n\tvar SRGB8_ALPHA8_ASTC_10x10_Format = 37851;\n\tvar SRGB8_ALPHA8_ASTC_12x10_Format = 37852;\n\tvar SRGB8_ALPHA8_ASTC_12x12_Format = 37853;\n\tvar LoopOnce = 2200;\n\tvar LoopRepeat = 2201;\n\tvar LoopPingPong = 2202;\n\tvar InterpolateDiscrete = 2300;\n\tvar InterpolateLinear = 2301;\n\tvar InterpolateSmooth = 2302;\n\tvar ZeroCurvatureEnding = 2400;\n\tvar ZeroSlopeEnding = 2401;\n\tvar WrapAroundEnding = 2402;\n\tvar NormalAnimationBlendMode = 2500;\n\tvar AdditiveAnimationBlendMode = 2501;\n\tvar TrianglesDrawMode = 0;\n\tvar TriangleStripDrawMode = 1;\n\tvar TriangleFanDrawMode = 2;\n\tvar LinearEncoding = 3000;\n\tvar sRGBEncoding = 3001;\n\tvar GammaEncoding = 3007;\n\tvar RGBEEncoding = 3002;\n\tvar LogLuvEncoding = 3003;\n\tvar RGBM7Encoding = 3004;\n\tvar RGBM16Encoding = 3005;\n\tvar RGBDEncoding = 3006;\n\tvar BasicDepthPacking = 3200;\n\tvar RGBADepthPacking = 3201;\n\tvar TangentSpaceNormalMap = 0;\n\tvar ObjectSpaceNormalMap = 1;\n\tvar ZeroStencilOp = 0;\n\tvar KeepStencilOp = 7680;\n\tvar ReplaceStencilOp = 7681;\n\tvar IncrementStencilOp = 7682;\n\tvar DecrementStencilOp = 7683;\n\tvar IncrementWrapStencilOp = 34055;\n\tvar DecrementWrapStencilOp = 34056;\n\tvar InvertStencilOp = 5386;\n\tvar NeverStencilFunc = 512;\n\tvar LessStencilFunc = 513;\n\tvar EqualStencilFunc = 514;\n\tvar LessEqualStencilFunc = 515;\n\tvar GreaterStencilFunc = 516;\n\tvar NotEqualStencilFunc = 517;\n\tvar GreaterEqualStencilFunc = 518;\n\tvar AlwaysStencilFunc = 519;\n\tvar StaticDrawUsage = 35044;\n\tvar DynamicDrawUsage = 35048;\n\tvar StreamDrawUsage = 35040;\n\tvar StaticReadUsage = 35045;\n\tvar DynamicReadUsage = 35049;\n\tvar StreamReadUsage = 35041;\n\tvar StaticCopyUsage = 35046;\n\tvar DynamicCopyUsage = 35050;\n\tvar StreamCopyUsage = 35042;\n\tvar GLSL1 = '100';\n\tvar GLSL3 = '300 es';\n\n\tfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n\t\ttry {\n\t\t\tvar info = gen[key](arg);\n\t\t\tvar value = info.value;\n\t\t} catch (error) {\n\t\t\treject(error);\n\t\t\treturn;\n\t\t}\n\n\t\tif (info.done) {\n\t\t\tresolve(value);\n\t\t} else {\n\t\t\tPromise.resolve(value).then(_next, _throw);\n\t\t}\n\t}\n\n\tfunction _asyncToGenerator(fn) {\n\t\treturn function () {\n\t\t\tvar self = this,\n\t\t\t\t\targs = arguments;\n\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\tvar gen = fn.apply(self, args);\n\n\t\t\t\tfunction _next(value) {\n\t\t\t\t\tasyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n\t\t\t\t}\n\n\t\t\t\tfunction _throw(err) {\n\t\t\t\t\tasyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n\t\t\t\t}\n\n\t\t\t\t_next(undefined);\n\t\t\t});\n\t\t};\n\t}\n\n\tfunction _defineProperties(target, props) {\n\t\tfor (var i = 0; i < props.length; i++) {\n\t\t\tvar descriptor = props[i];\n\t\t\tdescriptor.enumerable = descriptor.enumerable || false;\n\t\t\tdescriptor.configurable = true;\n\t\t\tif (\"value\" in descriptor) descriptor.writable = true;\n\t\t\tObject.defineProperty(target, descriptor.key, descriptor);\n\t\t}\n\t}\n\n\tfunction _createClass(Constructor, protoProps, staticProps) {\n\t\tif (protoProps) _defineProperties(Constructor.prototype, protoProps);\n\t\tif (staticProps) _defineProperties(Constructor, staticProps);\n\t\treturn Constructor;\n\t}\n\n\tfunction _inheritsLoose(subClass, superClass) {\n\t\tsubClass.prototype = Object.create(superClass.prototype);\n\t\tsubClass.prototype.constructor = subClass;\n\n\t\t_setPrototypeOf(subClass, superClass);\n\t}\n\n\tfunction _setPrototypeOf(o, p) {\n\t\t_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n\t\t\to.__proto__ = p;\n\t\t\treturn o;\n\t\t};\n\n\t\treturn _setPrototypeOf(o, p);\n\t}\n\n\tfunction _assertThisInitialized(self) {\n\t\tif (self === void 0) {\n\t\t\tthrow new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n\t\t}\n\n\t\treturn self;\n\t}\n\n\tfunction _unsupportedIterableToArray(o, minLen) {\n\t\tif (!o) return;\n\t\tif (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n\t\tvar n = Object.prototype.toString.call(o).slice(8, -1);\n\t\tif (n === \"Object\" && o.constructor) n = o.constructor.name;\n\t\tif (n === \"Map\" || n === \"Set\") return Array.from(o);\n\t\tif (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n\t}\n\n\tfunction _arrayLikeToArray(arr, len) {\n\t\tif (len == null || len > arr.length) len = arr.length;\n\n\t\tfor (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n\t\treturn arr2;\n\t}\n\n\tfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n\t\tvar it;\n\n\t\tif (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n\t\t\tif (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n\t\t\t\tif (it) o = it;\n\t\t\t\tvar i = 0;\n\t\t\t\treturn function () {\n\t\t\t\t\tif (i >= o.length) return {\n\t\t\t\t\t\tdone: true\n\t\t\t\t\t};\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue: o[i++]\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthrow new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n\t\t}\n\n\t\tit = o[Symbol.iterator]();\n\t\treturn it.next.bind(it);\n\t}\n\n\t/**\n\t * https://github.com/mrdoob/eventdispatcher.js/\n\t */\n\tfunction EventDispatcher() {}\n\n\tObject.assign(EventDispatcher.prototype, {\n\t\taddEventListener: function addEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) this._listeners = {};\n\t\t\tvar listeners = this._listeners;\n\n\t\t\tif (listeners[type] === undefined) {\n\t\t\t\tlisteners[type] = [];\n\t\t\t}\n\n\t\t\tif (listeners[type].indexOf(listener) === -1) {\n\t\t\t\tlisteners[type].push(listener);\n\t\t\t}\n\t\t},\n\t\thasEventListener: function hasEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) return false;\n\t\t\tvar listeners = this._listeners;\n\t\t\treturn listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1;\n\t\t},\n\t\tremoveEventListener: function removeEventListener(type, listener) {\n\t\t\tif (this._listeners === undefined) return;\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[type];\n\n\t\t\tif (listenerArray !== undefined) {\n\t\t\t\tvar index = listenerArray.indexOf(listener);\n\n\t\t\t\tif (index !== -1) {\n\t\t\t\t\tlistenerArray.splice(index, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tdispatchEvent: function dispatchEvent(event) {\n\t\t\tif (this._listeners === undefined) return;\n\t\t\tvar listeners = this._listeners;\n\t\t\tvar listenerArray = listeners[event.type];\n\n\t\t\tif (listenerArray !== undefined) {\n\t\t\t\tevent.target = this; // Make a copy, in case listeners are removed while iterating.\n\n\t\t\t\tvar array = listenerArray.slice(0);\n\n\t\t\t\tfor (var i = 0, l = array.length; i < l; i++) {\n\t\t\t\t\tarray[i].call(this, event);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tvar _lut = [];\n\n\tfor (var i = 0; i < 256; i++) {\n\t\t_lut[i] = (i < 16 ? '0' : '') + i.toString(16);\n\t}\n\n\tvar _seed = 1234567;\n\tvar MathUtils = {\n\t\tDEG2RAD: Math.PI / 180,\n\t\tRAD2DEG: 180 / Math.PI,\n\t\tgenerateUUID: function generateUUID() {\n\t\t\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\n\t\t\tvar d0 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d1 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d2 = Math.random() * 0xffffffff | 0;\n\t\t\tvar d3 = Math.random() * 0xffffffff | 0;\n\t\t\tvar uuid = _lut[d0 & 0xff] + _lut[d0 >> 8 & 0xff] + _lut[d0 >> 16 & 0xff] + _lut[d0 >> 24 & 0xff] + '-' + _lut[d1 & 0xff] + _lut[d1 >> 8 & 0xff] + '-' + _lut[d1 >> 16 & 0x0f | 0x40] + _lut[d1 >> 24 & 0xff] + '-' + _lut[d2 & 0x3f | 0x80] + _lut[d2 >> 8 & 0xff] + '-' + _lut[d2 >> 16 & 0xff] + _lut[d2 >> 24 & 0xff] + _lut[d3 & 0xff] + _lut[d3 >> 8 & 0xff] + _lut[d3 >> 16 & 0xff] + _lut[d3 >> 24 & 0xff]; // .toUpperCase() here flattens concatenated strings to save heap memory space.\n\n\t\t\treturn uuid.toUpperCase();\n\t\t},\n\t\tclamp: function clamp(value, min, max) {\n\t\t\treturn Math.max(min, Math.min(max, value));\n\t\t},\n\t\t// compute euclidian modulo of m % n\n\t\t// https://en.wikipedia.org/wiki/Modulo_operation\n\t\teuclideanModulo: function euclideanModulo(n, m) {\n\t\t\treturn (n % m + m) % m;\n\t\t},\n\t\t// Linear mapping from range <a1, a2> to range <b1, b2>\n\t\tmapLinear: function mapLinear(x, a1, a2, b1, b2) {\n\t\t\treturn b1 + (x - a1) * (b2 - b1) / (a2 - a1);\n\t\t},\n\t\t// https://en.wikipedia.org/wiki/Linear_interpolation\n\t\tlerp: function lerp(x, y, t) {\n\t\t\treturn (1 - t) * x + t * y;\n\t\t},\n\t\t// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\n\t\tdamp: function damp(x, y, lambda, dt) {\n\t\t\treturn MathUtils.lerp(x, y, 1 - Math.exp(-lambda * dt));\n\t\t},\n\t\t// https://www.desmos.com/calculator/vcsjnyz7x4\n\t\tpingpong: function pingpong(x, length) {\n\t\t\tif (length === void 0) {\n\t\t\t\tlength = 1;\n\t\t\t}\n\n\t\t\treturn length - Math.abs(MathUtils.euclideanModulo(x, length * 2) - length);\n\t\t},\n\t\t// http://en.wikipedia.org/wiki/Smoothstep\n\t\tsmoothstep: function smoothstep(x, min, max) {\n\t\t\tif (x <= min) return 0;\n\t\t\tif (x >= max) return 1;\n\t\t\tx = (x - min) / (max - min);\n\t\t\treturn x * x * (3 - 2 * x);\n\t\t},\n\t\tsmootherstep: function smootherstep(x, min, max) {\n\t\t\tif (x <= min) return 0;\n\t\t\tif (x >= max) return 1;\n\t\t\tx = (x - min) / (max - min);\n\t\t\treturn x * x * x * (x * (x * 6 - 15) + 10);\n\t\t},\n\t\t// Random integer from <low, high> interval\n\t\trandInt: function randInt(low, high) {\n\t\t\treturn low + Math.floor(Math.random() * (high - low + 1));\n\t\t},\n\t\t// Random float from <low, high> interval\n\t\trandFloat: function randFloat(low, high) {\n\t\t\treturn low + Math.random() * (high - low);\n\t\t},\n\t\t// Random float from <-range/2, range/2> interval\n\t\trandFloatSpread: function randFloatSpread(range) {\n\t\t\treturn range * (0.5 - Math.random());\n\t\t},\n\t\t// Deterministic pseudo-random float in the interval [ 0, 1 ]\n\t\tseededRandom: function seededRandom(s) {\n\t\t\tif (s !== undefined) _seed = s % 2147483647; // Park-Miller algorithm\n\n\t\t\t_seed = _seed * 16807 % 2147483647;\n\t\t\treturn (_seed - 1) / 2147483646;\n\t\t},\n\t\tdegToRad: function degToRad(degrees) {\n\t\t\treturn degrees * MathUtils.DEG2RAD;\n\t\t},\n\t\tradToDeg: function radToDeg(radians) {\n\t\t\treturn radians * MathUtils.RAD2DEG;\n\t\t},\n\t\tisPowerOfTwo: function isPowerOfTwo(value) {\n\t\t\treturn (value & value - 1) === 0 && value !== 0;\n\t\t},\n\t\tceilPowerOfTwo: function ceilPowerOfTwo(value) {\n\t\t\treturn Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));\n\t\t},\n\t\tfloorPowerOfTwo: function floorPowerOfTwo(value) {\n\t\t\treturn Math.pow(2, Math.floor(Math.log(value) / Math.LN2));\n\t\t},\n\t\tsetQuaternionFromProperEuler: function setQuaternionFromProperEuler(q, a, b, c, order) {\n\t\t\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\t\t\t// rotations are applied to the axes in the order specified by 'order'\n\t\t\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t\t\t// angles are in radians\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\t\t\tvar c2 = cos(b / 2);\n\t\t\tvar s2 = sin(b / 2);\n\t\t\tvar c13 = cos((a + c) / 2);\n\t\t\tvar s13 = sin((a + c) / 2);\n\t\t\tvar c1_3 = cos((a - c) / 2);\n\t\t\tvar s1_3 = sin((a - c) / 2);\n\t\t\tvar c3_1 = cos((c - a) / 2);\n\t\t\tvar s3_1 = sin((c - a) / 2);\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYX':\n\t\t\t\t\tq.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZY':\n\t\t\t\t\tq.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXZ':\n\t\t\t\t\tq.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZX':\n\t\t\t\t\tq.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXY':\n\t\t\t\t\tq.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYZ':\n\t\t\t\t\tq.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order);\n\t\t\t}\n\t\t}\n\t};\n\n\tvar Vector2 = /*#__PURE__*/function () {\n\t\tfunction Vector2(x, y) {\n\t\t\tif (x === void 0) {\n\t\t\t\tx = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t}\n\n\t\tvar _proto = Vector2.prototype;\n\n\t\t_proto.set = function set(x, y) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setScalar = function setScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setX = function setX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setY = function setY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setComponent = function setComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getComponent = function getComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this.x, this.y);\n\t\t};\n\n\t\t_proto.copy = function copy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.add = function add(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScalar = function addScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addVectors = function addVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScaledVector = function addScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.sub = function sub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subScalar = function subScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subVectors = function subVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(v) {\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.divide = function divide(v) {\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.divideScalar = function divideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t};\n\n\t\t_proto.applyMatrix3 = function applyMatrix3(m) {\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y;\n\t\t\tvar e = m.elements;\n\t\t\tthis.x = e[0] * x + e[3] * y + e[6];\n\t\t\tthis.y = e[1] * x + e[4] * y + e[7];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.min = function min(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.max = function max(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clamp = function clamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampScalar = function clampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampLength = function clampLength(min, max) {\n\t\t\tvar length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t};\n\n\t\t_proto.floor = function floor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.ceil = function ceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.round = function round() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.roundToZero = function roundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.negate = function negate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.dot = function dot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y;\n\t\t};\n\n\t\t_proto.cross = function cross(v) {\n\t\t\treturn this.x * v.y - this.y * v.x;\n\t\t};\n\n\t\t_proto.lengthSq = function lengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y;\n\t\t};\n\n\t\t_proto.length = function length() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y);\n\t\t};\n\n\t\t_proto.manhattanLength = function manhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y);\n\t\t};\n\n\t\t_proto.normalize = function normalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t};\n\n\t\t_proto.angle = function angle() {\n\t\t\t// computes the angle in radians with respect to the positive x-axis\n\t\t\tvar angle = Math.atan2(-this.y, -this.x) + Math.PI;\n\t\t\treturn angle;\n\t\t};\n\n\t\t_proto.distanceTo = function distanceTo(v) {\n\t\t\treturn Math.sqrt(this.distanceToSquared(v));\n\t\t};\n\n\t\t_proto.distanceToSquared = function distanceToSquared(v) {\n\t\t\tvar dx = this.x - v.x,\n\t\t\t\t\tdy = this.y - v.y;\n\t\t\treturn dx * dx + dy * dy;\n\t\t};\n\n\t\t_proto.manhattanDistanceTo = function manhattanDistanceTo(v) {\n\t\t\treturn Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\n\t\t};\n\n\t\t_proto.setLength = function setLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t};\n\n\t\t_proto.lerp = function lerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerpVectors = function lerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.fromBufferAttribute = function fromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector2: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.rotateAround = function rotateAround(center, angle) {\n\t\t\tvar c = Math.cos(angle),\n\t\t\t\t\ts = Math.sin(angle);\n\t\t\tvar x = this.x - center.x;\n\t\t\tvar y = this.y - center.y;\n\t\t\tthis.x = x * c - y * s + center.x;\n\t\t\tthis.y = x * s + y * c + center.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.random = function random() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\treturn this;\n\t\t};\n\n\t\t_createClass(Vector2, [{\n\t\t\tkey: \"width\",\n\t\t\tget: function get() {\n\t\t\t\treturn this.x;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis.x = value;\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"height\",\n\t\t\tget: function get() {\n\t\t\t\treturn this.y;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis.y = value;\n\t\t\t}\n\t\t}]);\n\n\t\treturn Vector2;\n\t}();\n\n\tVector2.prototype.isVector2 = true;\n\n\tvar Matrix3 = /*#__PURE__*/function () {\n\t\tfunction Matrix3() {\n\t\t\tthis.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n\t\t\tif (arguments.length > 0) {\n\t\t\t\tconsole.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');\n\t\t\t}\n\t\t}\n\n\t\tvar _proto = Matrix3.prototype;\n\n\t\t_proto.set = function set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] = n11;\n\t\t\tte[1] = n21;\n\t\t\tte[2] = n31;\n\t\t\tte[3] = n12;\n\t\t\tte[4] = n22;\n\t\t\tte[5] = n32;\n\t\t\tte[6] = n13;\n\t\t\tte[7] = n23;\n\t\t\tte[8] = n33;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.identity = function identity() {\n\t\t\tthis.set(1, 0, 0, 0, 1, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copy = function copy(m) {\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\t\t\tte[0] = me[0];\n\t\t\tte[1] = me[1];\n\t\t\tte[2] = me[2];\n\t\t\tte[3] = me[3];\n\t\t\tte[4] = me[4];\n\t\t\tte[5] = me[5];\n\t\t\tte[6] = me[6];\n\t\t\tte[7] = me[7];\n\t\t\tte[8] = me[8];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.extractBasis = function extractBasis(xAxis, yAxis, zAxis) {\n\t\t\txAxis.setFromMatrix3Column(this, 0);\n\t\t\tyAxis.setFromMatrix3Column(this, 1);\n\t\t\tzAxis.setFromMatrix3Column(this, 2);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromMatrix4 = function setFromMatrix4(m) {\n\t\t\tvar me = m.elements;\n\t\t\tthis.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(m) {\n\t\t\treturn this.multiplyMatrices(this, m);\n\t\t};\n\n\t\t_proto.premultiply = function premultiply(m) {\n\t\t\treturn this.multiplyMatrices(m, this);\n\t\t};\n\n\t\t_proto.multiplyMatrices = function multiplyMatrices(a, b) {\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\t\t\tvar a11 = ae[0],\n\t\t\t\t\ta12 = ae[3],\n\t\t\t\t\ta13 = ae[6];\n\t\t\tvar a21 = ae[1],\n\t\t\t\t\ta22 = ae[4],\n\t\t\t\t\ta23 = ae[7];\n\t\t\tvar a31 = ae[2],\n\t\t\t\t\ta32 = ae[5],\n\t\t\t\t\ta33 = ae[8];\n\t\t\tvar b11 = be[0],\n\t\t\t\t\tb12 = be[3],\n\t\t\t\t\tb13 = be[6];\n\t\t\tvar b21 = be[1],\n\t\t\t\t\tb22 = be[4],\n\t\t\t\t\tb23 = be[7];\n\t\t\tvar b31 = be[2],\n\t\t\t\t\tb32 = be[5],\n\t\t\t\t\tb33 = be[8];\n\t\t\tte[0] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\t\tte[3] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\t\tte[6] = a11 * b13 + a12 * b23 + a13 * b33;\n\t\t\tte[1] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\t\tte[4] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\t\tte[7] = a21 * b13 + a22 * b23 + a23 * b33;\n\t\t\tte[2] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\t\tte[5] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\t\tte[8] = a31 * b13 + a32 * b23 + a33 * b33;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(s) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] *= s;\n\t\t\tte[3] *= s;\n\t\t\tte[6] *= s;\n\t\t\tte[1] *= s;\n\t\t\tte[4] *= s;\n\t\t\tte[7] *= s;\n\t\t\tte[2] *= s;\n\t\t\tte[5] *= s;\n\t\t\tte[8] *= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.determinant = function determinant() {\n\t\t\tvar te = this.elements;\n\t\t\tvar a = te[0],\n\t\t\t\t\tb = te[1],\n\t\t\t\t\tc = te[2],\n\t\t\t\t\td = te[3],\n\t\t\t\t\te = te[4],\n\t\t\t\t\tf = te[5],\n\t\t\t\t\tg = te[6],\n\t\t\t\t\th = te[7],\n\t\t\t\t\ti = te[8];\n\t\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\t\t};\n\n\t\t_proto.invert = function invert() {\n\t\t\tvar te = this.elements,\n\t\t\t\t\tn11 = te[0],\n\t\t\t\t\tn21 = te[1],\n\t\t\t\t\tn31 = te[2],\n\t\t\t\t\tn12 = te[3],\n\t\t\t\t\tn22 = te[4],\n\t\t\t\t\tn32 = te[5],\n\t\t\t\t\tn13 = te[6],\n\t\t\t\t\tn23 = te[7],\n\t\t\t\t\tn33 = te[8],\n\t\t\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\t\t\tt13 = n23 * n12 - n22 * n13,\n\t\t\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\t\t\tif (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);\n\t\t\tvar detInv = 1 / det;\n\t\t\tte[0] = t11 * detInv;\n\t\t\tte[1] = (n31 * n23 - n33 * n21) * detInv;\n\t\t\tte[2] = (n32 * n21 - n31 * n22) * detInv;\n\t\t\tte[3] = t12 * detInv;\n\t\t\tte[4] = (n33 * n11 - n31 * n13) * detInv;\n\t\t\tte[5] = (n31 * n12 - n32 * n11) * detInv;\n\t\t\tte[6] = t13 * detInv;\n\t\t\tte[7] = (n21 * n13 - n23 * n11) * detInv;\n\t\t\tte[8] = (n22 * n11 - n21 * n12) * detInv;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.transpose = function transpose() {\n\t\t\tvar tmp;\n\t\t\tvar m = this.elements;\n\t\t\ttmp = m[1];\n\t\t\tm[1] = m[3];\n\t\t\tm[3] = tmp;\n\t\t\ttmp = m[2];\n\t\t\tm[2] = m[6];\n\t\t\tm[6] = tmp;\n\t\t\ttmp = m[5];\n\t\t\tm[5] = m[7];\n\t\t\tm[7] = tmp;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getNormalMatrix = function getNormalMatrix(matrix4) {\n\t\t\treturn this.setFromMatrix4(matrix4).invert().transpose();\n\t\t};\n\n\t\t_proto.transposeIntoArray = function transposeIntoArray(r) {\n\t\t\tvar m = this.elements;\n\t\t\tr[0] = m[0];\n\t\t\tr[1] = m[3];\n\t\t\tr[2] = m[6];\n\t\t\tr[3] = m[1];\n\t\t\tr[4] = m[4];\n\t\t\tr[5] = m[7];\n\t\t\tr[6] = m[2];\n\t\t\tr[7] = m[5];\n\t\t\tr[8] = m[8];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setUvTransform = function setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {\n\t\t\tvar c = Math.cos(rotation);\n\t\t\tvar s = Math.sin(rotation);\n\t\t\tthis.set(sx * c, sx * s, -sx * (c * cx + s * cy) + cx + tx, -sy * s, sy * c, -sy * (-s * cx + c * cy) + cy + ty, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.scale = function scale(sx, sy) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] *= sx;\n\t\t\tte[3] *= sx;\n\t\t\tte[6] *= sx;\n\t\t\tte[1] *= sy;\n\t\t\tte[4] *= sy;\n\t\t\tte[7] *= sy;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.rotate = function rotate(theta) {\n\t\t\tvar c = Math.cos(theta);\n\t\t\tvar s = Math.sin(theta);\n\t\t\tvar te = this.elements;\n\t\t\tvar a11 = te[0],\n\t\t\t\t\ta12 = te[3],\n\t\t\t\t\ta13 = te[6];\n\t\t\tvar a21 = te[1],\n\t\t\t\t\ta22 = te[4],\n\t\t\t\t\ta23 = te[7];\n\t\t\tte[0] = c * a11 + s * a21;\n\t\t\tte[3] = c * a12 + s * a22;\n\t\t\tte[6] = c * a13 + s * a23;\n\t\t\tte[1] = -s * a11 + c * a21;\n\t\t\tte[4] = -s * a12 + c * a22;\n\t\t\tte[7] = -s * a13 + c * a23;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.translate = function translate(tx, ty) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] += tx * te[2];\n\t\t\tte[3] += tx * te[5];\n\t\t\tte[6] += tx * te[8];\n\t\t\tte[1] += ty * te[2];\n\t\t\tte[4] += ty * te[5];\n\t\t\tte[7] += ty * te[8];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(matrix) {\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tif (te[i] !== me[i]) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.elements[i] = array[i + offset];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tarray[offset] = te[0];\n\t\t\tarray[offset + 1] = te[1];\n\t\t\tarray[offset + 2] = te[2];\n\t\t\tarray[offset + 3] = te[3];\n\t\t\tarray[offset + 4] = te[4];\n\t\t\tarray[offset + 5] = te[5];\n\t\t\tarray[offset + 6] = te[6];\n\t\t\tarray[offset + 7] = te[7];\n\t\t\tarray[offset + 8] = te[8];\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().fromArray(this.elements);\n\t\t};\n\n\t\treturn Matrix3;\n\t}();\n\n\tMatrix3.prototype.isMatrix3 = true;\n\n\tvar _canvas;\n\n\tvar ImageUtils = {\n\t\tgetDataURL: function getDataURL(image) {\n\t\t\tif (/^data:/i.test(image.src)) {\n\t\t\t\treturn image.src;\n\t\t\t}\n\n\t\t\tif (typeof HTMLCanvasElement == 'undefined') {\n\t\t\t\treturn image.src;\n\t\t\t}\n\n\t\t\tvar canvas;\n\n\t\t\tif (image instanceof HTMLCanvasElement) {\n\t\t\t\tcanvas = image;\n\t\t\t} else {\n\t\t\t\tif (_canvas === undefined) _canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\t\t\t_canvas.width = image.width;\n\t\t\t\t_canvas.height = image.height;\n\n\t\t\t\tvar context = _canvas.getContext('2d');\n\n\t\t\t\tif (image instanceof ImageData) {\n\t\t\t\t\tcontext.putImageData(image, 0, 0);\n\t\t\t\t} else {\n\t\t\t\t\tcontext.drawImage(image, 0, 0, image.width, image.height);\n\t\t\t\t}\n\n\t\t\t\tcanvas = _canvas;\n\t\t\t}\n\n\t\t\tif (canvas.width > 2048 || canvas.height > 2048) {\n\t\t\t\treturn canvas.toDataURL('image/jpeg', 0.6);\n\t\t\t} else {\n\t\t\t\treturn canvas.toDataURL('image/png');\n\t\t\t}\n\t\t}\n\t};\n\n\tvar textureId = 0;\n\n\tvar Texture = /*#__PURE__*/function (_EventDispatcher) {\n\t\t_inheritsLoose(Texture, _EventDispatcher);\n\n\t\tfunction Texture(image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {\n\t\t\tvar _this;\n\n\t\t\tif (image === void 0) {\n\t\t\t\timage = Texture.DEFAULT_IMAGE;\n\t\t\t}\n\n\t\t\tif (mapping === void 0) {\n\t\t\t\tmapping = Texture.DEFAULT_MAPPING;\n\t\t\t}\n\n\t\t\tif (wrapS === void 0) {\n\t\t\t\twrapS = ClampToEdgeWrapping;\n\t\t\t}\n\n\t\t\tif (wrapT === void 0) {\n\t\t\t\twrapT = ClampToEdgeWrapping;\n\t\t\t}\n\n\t\t\tif (magFilter === void 0) {\n\t\t\t\tmagFilter = LinearFilter;\n\t\t\t}\n\n\t\t\tif (minFilter === void 0) {\n\t\t\t\tminFilter = LinearMipmapLinearFilter;\n\t\t\t}\n\n\t\t\tif (format === void 0) {\n\t\t\t\tformat = RGBAFormat;\n\t\t\t}\n\n\t\t\tif (type === void 0) {\n\t\t\t\ttype = UnsignedByteType;\n\t\t\t}\n\n\t\t\tif (anisotropy === void 0) {\n\t\t\t\tanisotropy = 1;\n\t\t\t}\n\n\t\t\tif (encoding === void 0) {\n\t\t\t\tencoding = LinearEncoding;\n\t\t\t}\n\n\t\t\t_this = _EventDispatcher.call(this) || this;\n\t\t\tObject.defineProperty(_assertThisInitialized(_this), 'id', {\n\t\t\t\tvalue: textureId++\n\t\t\t});\n\t\t\t_this.uuid = MathUtils.generateUUID();\n\t\t\t_this.name = '';\n\t\t\t_this.image = image;\n\t\t\t_this.mipmaps = [];\n\t\t\t_this.mapping = mapping;\n\t\t\t_this.wrapS = wrapS;\n\t\t\t_this.wrapT = wrapT;\n\t\t\t_this.magFilter = magFilter;\n\t\t\t_this.minFilter = minFilter;\n\t\t\t_this.anisotropy = anisotropy;\n\t\t\t_this.format = format;\n\t\t\t_this.internalFormat = null;\n\t\t\t_this.type = type;\n\t\t\t_this.offset = new Vector2(0, 0);\n\t\t\t_this.repeat = new Vector2(1, 1);\n\t\t\t_this.center = new Vector2(0, 0);\n\t\t\t_this.rotation = 0;\n\t\t\t_this.matrixAutoUpdate = true;\n\t\t\t_this.matrix = new Matrix3();\n\t\t\t_this.generateMipmaps = true;\n\t\t\t_this.premultiplyAlpha = false;\n\t\t\t_this.flipY = true;\n\t\t\t_this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\t\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t\t//\n\t\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\n\t\t\t_this.encoding = encoding;\n\t\t\t_this.version = 0;\n\t\t\t_this.onUpdate = null;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = Texture.prototype;\n\n\t\t_proto.updateMatrix = function updateMatrix() {\n\t\t\tthis.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.image = source.image;\n\t\t\tthis.mipmaps = source.mipmaps.slice(0);\n\t\t\tthis.mapping = source.mapping;\n\t\t\tthis.wrapS = source.wrapS;\n\t\t\tthis.wrapT = source.wrapT;\n\t\t\tthis.magFilter = source.magFilter;\n\t\t\tthis.minFilter = source.minFilter;\n\t\t\tthis.anisotropy = source.anisotropy;\n\t\t\tthis.format = source.format;\n\t\t\tthis.internalFormat = source.internalFormat;\n\t\t\tthis.type = source.type;\n\t\t\tthis.offset.copy(source.offset);\n\t\t\tthis.repeat.copy(source.repeat);\n\t\t\tthis.center.copy(source.center);\n\t\t\tthis.rotation = source.rotation;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrix.copy(source.matrix);\n\t\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\t\tthis.flipY = source.flipY;\n\t\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\t\tthis.encoding = source.encoding;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON(meta) {\n\t\t\tvar isRootObject = meta === undefined || typeof meta === 'string';\n\n\t\t\tif (!isRootObject && meta.textures[this.uuid] !== undefined) {\n\t\t\t\treturn meta.textures[this.uuid];\n\t\t\t}\n\n\t\t\tvar output = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Texture',\n\t\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t\t},\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tname: this.name,\n\t\t\t\tmapping: this.mapping,\n\t\t\t\trepeat: [this.repeat.x, this.repeat.y],\n\t\t\t\toffset: [this.offset.x, this.offset.y],\n\t\t\t\tcenter: [this.center.x, this.center.y],\n\t\t\t\trotation: this.rotation,\n\t\t\t\twrap: [this.wrapS, this.wrapT],\n\t\t\t\tformat: this.format,\n\t\t\t\ttype: this.type,\n\t\t\t\tencoding: this.encoding,\n\t\t\t\tminFilter: this.minFilter,\n\t\t\t\tmagFilter: this.magFilter,\n\t\t\t\tanisotropy: this.anisotropy,\n\t\t\t\tflipY: this.flipY,\n\t\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\t\tunpackAlignment: this.unpackAlignment\n\t\t\t};\n\n\t\t\tif (this.image !== undefined) {\n\t\t\t\t// TODO: Move to THREE.Image\n\t\t\t\tvar image = this.image;\n\n\t\t\t\tif (image.uuid === undefined) {\n\t\t\t\t\timage.uuid = MathUtils.generateUUID(); // UGH\n\t\t\t\t}\n\n\t\t\t\tif (!isRootObject && meta.images[image.uuid] === undefined) {\n\t\t\t\t\tvar url;\n\n\t\t\t\t\tif (Array.isArray(image)) {\n\t\t\t\t\t\t// process array of images e.g. CubeTexture\n\t\t\t\t\t\turl = [];\n\n\t\t\t\t\t\tfor (var i = 0, l = image.length; i < l; i++) {\n\t\t\t\t\t\t\t// check cube texture with data textures\n\t\t\t\t\t\t\tif (image[i].isDataTexture) {\n\t\t\t\t\t\t\t\turl.push(serializeImage(image[i].image));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\turl.push(serializeImage(image[i]));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// process single image\n\t\t\t\t\t\turl = serializeImage(image);\n\t\t\t\t\t}\n\n\t\t\t\t\tmeta.images[image.uuid] = {\n\t\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\t\turl: url\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\toutput.image = image.uuid;\n\t\t\t}\n\n\t\t\tif (!isRootObject) {\n\t\t\t\tmeta.textures[this.uuid] = output;\n\t\t\t}\n\n\t\t\treturn output;\n\t\t};\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t};\n\n\t\t_proto.transformUv = function transformUv(uv) {\n\t\t\tif (this.mapping !== UVMapping) return uv;\n\t\t\tuv.applyMatrix3(this.matrix);\n\n\t\t\tif (uv.x < 0 || uv.x > 1) {\n\t\t\t\tswitch (this.wrapS) {\n\t\t\t\t\tcase RepeatWrapping:\n\t\t\t\t\t\tuv.x = uv.x - Math.floor(uv.x);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\t\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\t\t\t\t\t\tif (Math.abs(Math.floor(uv.x) % 2) === 1) {\n\t\t\t\t\t\t\tuv.x = Math.ceil(uv.x) - uv.x;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuv.x = uv.x - Math.floor(uv.x);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (uv.y < 0 || uv.y > 1) {\n\t\t\t\tswitch (this.wrapT) {\n\t\t\t\t\tcase RepeatWrapping:\n\t\t\t\t\t\tuv.y = uv.y - Math.floor(uv.y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase ClampToEdgeWrapping:\n\t\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MirroredRepeatWrapping:\n\t\t\t\t\t\tif (Math.abs(Math.floor(uv.y) % 2) === 1) {\n\t\t\t\t\t\t\tuv.y = Math.ceil(uv.y) - uv.y;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuv.y = uv.y - Math.floor(uv.y);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.flipY) {\n\t\t\t\tuv.y = 1 - uv.y;\n\t\t\t}\n\n\t\t\treturn uv;\n\t\t};\n\n\t\t_createClass(Texture, [{\n\t\t\tkey: \"needsUpdate\",\n\t\t\tset: function set(value) {\n\t\t\t\tif (value === true) this.version++;\n\t\t\t}\n\t\t}]);\n\n\t\treturn Texture;\n\t}(EventDispatcher);\n\n\tTexture.DEFAULT_IMAGE = undefined;\n\tTexture.DEFAULT_MAPPING = UVMapping;\n\tTexture.prototype.isTexture = true;\n\n\tfunction serializeImage(image) {\n\t\tif (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n\t\t\t// default images\n\t\t\treturn ImageUtils.getDataURL(image);\n\t\t} else {\n\t\t\tif (image.data) {\n\t\t\t\t// images of DataTexture\n\t\t\t\treturn {\n\t\t\t\t\tdata: Array.prototype.slice.call(image.data),\n\t\t\t\t\twidth: image.width,\n\t\t\t\t\theight: image.height,\n\t\t\t\t\ttype: image.data.constructor.name\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.Texture: Unable to serialize Texture.');\n\t\t\t\treturn {};\n\t\t\t}\n\t\t}\n\t}\n\n\tvar Vector4 = /*#__PURE__*/function () {\n\t\tfunction Vector4(x, y, z, w) {\n\t\t\tif (x === void 0) {\n\t\t\t\tx = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tif (z === void 0) {\n\t\t\t\tz = 0;\n\t\t\t}\n\n\t\t\tif (w === void 0) {\n\t\t\t\tw = 1;\n\t\t\t}\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\t\t}\n\n\t\tvar _proto = Vector4.prototype;\n\n\t\t_proto.set = function set(x, y, z, w) {\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\tthis.w = w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setScalar = function setScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\tthis.w = scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setX = function setX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setY = function setY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setZ = function setZ(z) {\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setW = function setW(w) {\n\t\t\tthis.w = w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setComponent = function setComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.z = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\tthis.w = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getComponent = function getComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tcase 2:\n\t\t\t\t\treturn this.z;\n\n\t\t\t\tcase 3:\n\t\t\t\t\treturn this.w;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this.x, this.y, this.z, this.w);\n\t\t};\n\n\t\t_proto.copy = function copy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\tthis.w = v.w !== undefined ? v.w : 1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.add = function add(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\tthis.w += v.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScalar = function addScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\tthis.w += s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addVectors = function addVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\tthis.w = a.w + b.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScaledVector = function addScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\tthis.w += v.w * s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.sub = function sub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\tthis.w -= v.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subScalar = function subScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\tthis.w -= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subVectors = function subVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\tthis.w = a.w - b.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(v) {\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\t\t\tthis.w *= v.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\tthis.w *= scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(m) {\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y,\n\t\t\t\t\tz = this.z,\n\t\t\t\t\tw = this.w;\n\t\t\tvar e = m.elements;\n\t\t\tthis.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;\n\t\t\tthis.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;\n\t\t\tthis.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;\n\t\t\tthis.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.divideScalar = function divideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t};\n\n\t\t_proto.setAxisAngleFromQuaternion = function setAxisAngleFromQuaternion(q) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\t\t\t// q is assumed to be normalized\n\t\t\tthis.w = 2 * Math.acos(q.w);\n\t\t\tvar s = Math.sqrt(1 - q.w * q.w);\n\n\t\t\tif (s < 0.0001) {\n\t\t\t\tthis.x = 1;\n\t\t\t\tthis.y = 0;\n\t\t\t\tthis.z = 0;\n\t\t\t} else {\n\t\t\t\tthis.x = q.x / s;\n\t\t\t\tthis.y = q.y / s;\n\t\t\t\tthis.z = q.z / s;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setAxisAngleFromRotationMatrix = function setAxisAngleFromRotationMatrix(m) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tvar angle, x, y, z; // variables for result\n\n\t\t\tvar epsilon = 0.01,\n\t\t\t\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\n\t\t\t\t\t// margin to distinguish between 0 and 180 degrees\n\t\t\tte = m.elements,\n\t\t\t\t\tm11 = te[0],\n\t\t\t\t\tm12 = te[4],\n\t\t\t\t\tm13 = te[8],\n\t\t\t\t\tm21 = te[1],\n\t\t\t\t\tm22 = te[5],\n\t\t\t\t\tm23 = te[9],\n\t\t\t\t\tm31 = te[2],\n\t\t\t\t\tm32 = te[6],\n\t\t\t\t\tm33 = te[10];\n\n\t\t\tif (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {\n\t\t\t\t// singularity found\n\t\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t\t// in leading diagonal and zero in other terms\n\t\t\t\tif (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {\n\t\t\t\t\t// this singularity is identity matrix so angle = 0\n\t\t\t\t\tthis.set(1, 0, 0, 0);\n\t\t\t\t\treturn this; // zero angle, arbitrary axis\n\t\t\t\t} // otherwise this singularity is angle = 180\n\n\n\t\t\t\tangle = Math.PI;\n\t\t\t\tvar xx = (m11 + 1) / 2;\n\t\t\t\tvar yy = (m22 + 1) / 2;\n\t\t\t\tvar zz = (m33 + 1) / 2;\n\t\t\t\tvar xy = (m12 + m21) / 4;\n\t\t\t\tvar xz = (m13 + m31) / 4;\n\t\t\t\tvar yz = (m23 + m32) / 4;\n\n\t\t\t\tif (xx > yy && xx > zz) {\n\t\t\t\t\t// m11 is the largest diagonal term\n\t\t\t\t\tif (xx < epsilon) {\n\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0.707106781;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tx = Math.sqrt(xx);\n\t\t\t\t\t\ty = xy / x;\n\t\t\t\t\t\tz = xz / x;\n\t\t\t\t\t}\n\t\t\t\t} else if (yy > zz) {\n\t\t\t\t\t// m22 is the largest diagonal term\n\t\t\t\t\tif (yy < epsilon) {\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\tz = 0.707106781;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ty = Math.sqrt(yy);\n\t\t\t\t\t\tx = xy / y;\n\t\t\t\t\t\tz = yz / y;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// m33 is the largest diagonal term so base result on this\n\t\t\t\t\tif (zz < epsilon) {\n\t\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\t\tz = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tz = Math.sqrt(zz);\n\t\t\t\t\t\tx = xz / z;\n\t\t\t\t\t\ty = yz / z;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.set(x, y, z, angle);\n\t\t\t\treturn this; // return 180 deg rotation\n\t\t\t} // as we have reached here there are no singularities so we can handle normally\n\n\n\t\t\tvar s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize\n\n\t\t\tif (Math.abs(s) < 0.001) s = 1; // prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\t\tthis.x = (m32 - m23) / s;\n\t\t\tthis.y = (m13 - m31) / s;\n\t\t\tthis.z = (m21 - m12) / s;\n\t\t\tthis.w = Math.acos((m11 + m22 + m33 - 1) / 2);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.min = function min(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\tthis.z = Math.min(this.z, v.z);\n\t\t\tthis.w = Math.min(this.w, v.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.max = function max(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\tthis.z = Math.max(this.z, v.z);\n\t\t\tthis.w = Math.max(this.w, v.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clamp = function clamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\tthis.z = Math.max(min.z, Math.min(max.z, this.z));\n\t\t\tthis.w = Math.max(min.w, Math.min(max.w, this.w));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampScalar = function clampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\tthis.z = Math.max(minVal, Math.min(maxVal, this.z));\n\t\t\tthis.w = Math.max(minVal, Math.min(maxVal, this.w));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampLength = function clampLength(min, max) {\n\t\t\tvar length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t};\n\n\t\t_proto.floor = function floor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\tthis.z = Math.floor(this.z);\n\t\t\tthis.w = Math.floor(this.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.ceil = function ceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\tthis.z = Math.ceil(this.z);\n\t\t\tthis.w = Math.ceil(this.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.round = function round() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\tthis.z = Math.round(this.z);\n\t\t\tthis.w = Math.round(this.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.roundToZero = function roundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\tthis.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n\t\t\tthis.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.negate = function negate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\tthis.z = -this.z;\n\t\t\tthis.w = -this.w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.dot = function dot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\t\t};\n\n\t\t_proto.lengthSq = function lengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\t\t};\n\n\t\t_proto.length = function length() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n\t\t};\n\n\t\t_proto.manhattanLength = function manhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);\n\t\t};\n\n\t\t_proto.normalize = function normalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t};\n\n\t\t_proto.setLength = function setLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t};\n\n\t\t_proto.lerp = function lerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\tthis.z += (v.z - this.z) * alpha;\n\t\t\tthis.w += (v.w - this.w) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerpVectors = function lerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\tthis.z = v1.z + (v2.z - v1.z) * alpha;\n\t\t\tthis.w = v1.w + (v2.w - v1.w) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\tthis.z = array[offset + 2];\n\t\t\tthis.w = array[offset + 3];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\tarray[offset + 2] = this.z;\n\t\t\tarray[offset + 3] = this.w;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.fromBufferAttribute = function fromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector4: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\tthis.z = attribute.getZ(index);\n\t\t\tthis.w = attribute.getW(index);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.random = function random() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\tthis.z = Math.random();\n\t\t\tthis.w = Math.random();\n\t\t\treturn this;\n\t\t};\n\n\t\t_createClass(Vector4, [{\n\t\t\tkey: \"width\",\n\t\t\tget: function get() {\n\t\t\t\treturn this.z;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis.z = value;\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"height\",\n\t\t\tget: function get() {\n\t\t\t\treturn this.w;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis.w = value;\n\t\t\t}\n\t\t}]);\n\n\t\treturn Vector4;\n\t}();\n\n\tVector4.prototype.isVector4 = true;\n\n\t/*\n\t In options, we can specify:\n\t * Texture parameters for an auto-generated target texture\n\t * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n\t*/\n\n\tvar WebGLRenderTarget = /*#__PURE__*/function (_EventDispatcher) {\n\t\t_inheritsLoose(WebGLRenderTarget, _EventDispatcher);\n\n\t\tfunction WebGLRenderTarget(width, height, options) {\n\t\t\tvar _this;\n\n\t\t\t_this = _EventDispatcher.call(this) || this;\n\t\t\t_this.width = width;\n\t\t\t_this.height = height;\n\t\t\t_this.depth = 1;\n\t\t\t_this.scissor = new Vector4(0, 0, width, height);\n\t\t\t_this.scissorTest = false;\n\t\t\t_this.viewport = new Vector4(0, 0, width, height);\n\t\t\toptions = options || {};\n\t\t\t_this.texture = new Texture(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n\t\t\t_this.texture.image = {};\n\t\t\t_this.texture.image.width = width;\n\t\t\t_this.texture.image.height = height;\n\t\t\t_this.texture.image.depth = 1;\n\t\t\t_this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\t\t_this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\t\t\t_this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\t\t_this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;\n\t\t\t_this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = WebGLRenderTarget.prototype;\n\n\t\t_proto.setTexture = function setTexture(texture) {\n\t\t\ttexture.image = {\n\t\t\t\twidth: this.width,\n\t\t\t\theight: this.height,\n\t\t\t\tdepth: this.depth\n\t\t\t};\n\t\t\tthis.texture = texture;\n\t\t};\n\n\t\t_proto.setSize = function setSize(width, height, depth) {\n\t\t\tif (depth === void 0) {\n\t\t\t\tdepth = 1;\n\t\t\t}\n\n\t\t\tif (this.width !== width || this.height !== height || this.depth !== depth) {\n\t\t\t\tthis.width = width;\n\t\t\t\tthis.height = height;\n\t\t\t\tthis.depth = depth;\n\t\t\t\tthis.texture.image.width = width;\n\t\t\t\tthis.texture.image.height = height;\n\t\t\t\tthis.texture.image.depth = depth;\n\t\t\t\tthis.dispose();\n\t\t\t}\n\n\t\t\tthis.viewport.set(0, 0, width, height);\n\t\t\tthis.scissor.set(0, 0, width, height);\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\tthis.depth = source.depth;\n\t\t\tthis.viewport.copy(source.viewport);\n\t\t\tthis.texture = source.texture.clone();\n\t\t\tthis.depthBuffer = source.depthBuffer;\n\t\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\t\tthis.depthTexture = source.depthTexture;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t};\n\n\t\treturn WebGLRenderTarget;\n\t}(EventDispatcher);\n\n\tWebGLRenderTarget.prototype.isWebGLRenderTarget = true;\n\n\tvar WebGLMultisampleRenderTarget = /*#__PURE__*/function (_WebGLRenderTarget) {\n\t\t_inheritsLoose(WebGLMultisampleRenderTarget, _WebGLRenderTarget);\n\n\t\tfunction WebGLMultisampleRenderTarget(width, height, options) {\n\t\t\tvar _this;\n\n\t\t\t_this = _WebGLRenderTarget.call(this, width, height, options) || this;\n\t\t\t_this.samples = 4;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = WebGLMultisampleRenderTarget.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_WebGLRenderTarget.prototype.copy.call(this, source);\n\n\t\t\tthis.samples = source.samples;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn WebGLMultisampleRenderTarget;\n\t}(WebGLRenderTarget);\n\n\tWebGLMultisampleRenderTarget.prototype.isWebGLMultisampleRenderTarget = true;\n\n\tvar Quaternion = /*#__PURE__*/function () {\n\t\tfunction Quaternion(x, y, z, w) {\n\t\t\tif (x === void 0) {\n\t\t\t\tx = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tif (z === void 0) {\n\t\t\t\tz = 0;\n\t\t\t}\n\n\t\t\tif (w === void 0) {\n\t\t\t\tw = 1;\n\t\t\t}\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\t\t}\n\n\t\tQuaternion.slerp = function slerp(qa, qb, qm, t) {\n\t\t\treturn qm.copy(qa).slerp(qb, t);\n\t\t};\n\n\t\tQuaternion.slerpFlat = function slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {\n\t\t\t// fuzz-free, array-based Quaternion SLERP operation\n\t\t\tvar x0 = src0[srcOffset0 + 0],\n\t\t\t\t\ty0 = src0[srcOffset0 + 1],\n\t\t\t\t\tz0 = src0[srcOffset0 + 2],\n\t\t\t\t\tw0 = src0[srcOffset0 + 3];\n\t\t\tvar x1 = src1[srcOffset1 + 0],\n\t\t\t\t\ty1 = src1[srcOffset1 + 1],\n\t\t\t\t\tz1 = src1[srcOffset1 + 2],\n\t\t\t\t\tw1 = src1[srcOffset1 + 3];\n\n\t\t\tif (t === 0) {\n\t\t\t\tdst[dstOffset + 0] = x0;\n\t\t\t\tdst[dstOffset + 1] = y0;\n\t\t\t\tdst[dstOffset + 2] = z0;\n\t\t\t\tdst[dstOffset + 3] = w0;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (t === 1) {\n\t\t\t\tdst[dstOffset + 0] = x1;\n\t\t\t\tdst[dstOffset + 1] = y1;\n\t\t\t\tdst[dstOffset + 2] = z1;\n\t\t\t\tdst[dstOffset + 3] = w1;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {\n\t\t\t\tvar s = 1 - t;\n\t\t\t\tvar cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\t\t\t\t\tdir = cos >= 0 ? 1 : -1,\n\t\t\t\t\t\tsqrSin = 1 - cos * cos; // Skip the Slerp for tiny steps to avoid numeric problems:\n\n\t\t\t\tif (sqrSin > Number.EPSILON) {\n\t\t\t\t\tvar sin = Math.sqrt(sqrSin),\n\t\t\t\t\t\t\tlen = Math.atan2(sin, cos * dir);\n\t\t\t\t\ts = Math.sin(s * len) / sin;\n\t\t\t\t\tt = Math.sin(t * len) / sin;\n\t\t\t\t}\n\n\t\t\t\tvar tDir = t * dir;\n\t\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\t\tw0 = w0 * s + w1 * tDir; // Normalize in case we just did a lerp:\n\n\t\t\t\tif (s === 1 - t) {\n\t\t\t\t\tvar f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);\n\t\t\t\t\tx0 *= f;\n\t\t\t\t\ty0 *= f;\n\t\t\t\t\tz0 *= f;\n\t\t\t\t\tw0 *= f;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdst[dstOffset] = x0;\n\t\t\tdst[dstOffset + 1] = y0;\n\t\t\tdst[dstOffset + 2] = z0;\n\t\t\tdst[dstOffset + 3] = w0;\n\t\t};\n\n\t\tQuaternion.multiplyQuaternionsFlat = function multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {\n\t\t\tvar x0 = src0[srcOffset0];\n\t\t\tvar y0 = src0[srcOffset0 + 1];\n\t\t\tvar z0 = src0[srcOffset0 + 2];\n\t\t\tvar w0 = src0[srcOffset0 + 3];\n\t\t\tvar x1 = src1[srcOffset1];\n\t\t\tvar y1 = src1[srcOffset1 + 1];\n\t\t\tvar z1 = src1[srcOffset1 + 2];\n\t\t\tvar w1 = src1[srcOffset1 + 3];\n\t\t\tdst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\t\tdst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\t\tdst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\t\tdst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\t\t\treturn dst;\n\t\t};\n\n\t\tvar _proto = Quaternion.prototype;\n\n\t\t_proto.set = function set(x, y, z, w) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._w = w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this._x, this._y, this._z, this._w);\n\t\t};\n\n\t\t_proto.copy = function copy(quaternion) {\n\t\t\tthis._x = quaternion.x;\n\t\t\tthis._y = quaternion.y;\n\t\t\tthis._z = quaternion.z;\n\t\t\tthis._w = quaternion.w;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromEuler = function setFromEuler(euler, update) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tthrow new Error('THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\tvar x = euler._x,\n\t\t\t\t\ty = euler._y,\n\t\t\t\t\tz = euler._z,\n\t\t\t\t\torder = euler._order; // http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t\t//\tcontent/SpinCalc.m\n\n\t\t\tvar cos = Math.cos;\n\t\t\tvar sin = Math.sin;\n\t\t\tvar c1 = cos(x / 2);\n\t\t\tvar c2 = cos(y / 2);\n\t\t\tvar c3 = cos(z / 2);\n\t\t\tvar s1 = sin(x / 2);\n\t\t\tvar s2 = sin(y / 2);\n\t\t\tvar s3 = sin(z / 2);\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYZ':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXZ':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXY':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYX':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZX':\n\t\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZY':\n\t\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order);\n\t\t\t}\n\n\t\t\tif (update !== false) this._onChangeCallback();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromAxisAngle = function setFromAxisAngle(axis, angle) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\t\t\t// assumes axis is normalized\n\t\t\tvar halfAngle = angle / 2,\n\t\t\t\t\ts = Math.sin(halfAngle);\n\t\t\tthis._x = axis.x * s;\n\t\t\tthis._y = axis.y * s;\n\t\t\tthis._z = axis.z * s;\n\t\t\tthis._w = Math.cos(halfAngle);\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromRotationMatrix = function setFromRotationMatrix(m) {\n\t\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tvar te = m.elements,\n\t\t\t\t\tm11 = te[0],\n\t\t\t\t\tm12 = te[4],\n\t\t\t\t\tm13 = te[8],\n\t\t\t\t\tm21 = te[1],\n\t\t\t\t\tm22 = te[5],\n\t\t\t\t\tm23 = te[9],\n\t\t\t\t\tm31 = te[2],\n\t\t\t\t\tm32 = te[6],\n\t\t\t\t\tm33 = te[10],\n\t\t\t\t\ttrace = m11 + m22 + m33;\n\n\t\t\tif (trace > 0) {\n\t\t\t\tvar s = 0.5 / Math.sqrt(trace + 1.0);\n\t\t\t\tthis._w = 0.25 / s;\n\t\t\t\tthis._x = (m32 - m23) * s;\n\t\t\t\tthis._y = (m13 - m31) * s;\n\t\t\t\tthis._z = (m21 - m12) * s;\n\t\t\t} else if (m11 > m22 && m11 > m33) {\n\t\t\t\tvar _s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n\n\t\t\t\tthis._w = (m32 - m23) / _s;\n\t\t\t\tthis._x = 0.25 * _s;\n\t\t\t\tthis._y = (m12 + m21) / _s;\n\t\t\t\tthis._z = (m13 + m31) / _s;\n\t\t\t} else if (m22 > m33) {\n\t\t\t\tvar _s2 = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n\n\t\t\t\tthis._w = (m13 - m31) / _s2;\n\t\t\t\tthis._x = (m12 + m21) / _s2;\n\t\t\t\tthis._y = 0.25 * _s2;\n\t\t\t\tthis._z = (m23 + m32) / _s2;\n\t\t\t} else {\n\t\t\t\tvar _s3 = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n\n\t\t\t\tthis._w = (m21 - m12) / _s3;\n\t\t\t\tthis._x = (m13 + m31) / _s3;\n\t\t\t\tthis._y = (m23 + m32) / _s3;\n\t\t\t\tthis._z = 0.25 * _s3;\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromUnitVectors = function setFromUnitVectors(vFrom, vTo) {\n\t\t\t// assumes direction vectors vFrom and vTo are normalized\n\t\t\tvar EPS = 0.000001;\n\t\t\tvar r = vFrom.dot(vTo) + 1;\n\n\t\t\tif (r < EPS) {\n\t\t\t\tr = 0;\n\n\t\t\t\tif (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n\t\t\t\t\tthis._x = -vFrom.y;\n\t\t\t\t\tthis._y = vFrom.x;\n\t\t\t\t\tthis._z = 0;\n\t\t\t\t\tthis._w = r;\n\t\t\t\t} else {\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = -vFrom.z;\n\t\t\t\t\tthis._z = vFrom.y;\n\t\t\t\t\tthis._w = r;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\t\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\t\tthis._w = r;\n\t\t\t}\n\n\t\t\treturn this.normalize();\n\t\t};\n\n\t\t_proto.angleTo = function angleTo(q) {\n\t\t\treturn 2 * Math.acos(Math.abs(MathUtils.clamp(this.dot(q), -1, 1)));\n\t\t};\n\n\t\t_proto.rotateTowards = function rotateTowards(q, step) {\n\t\t\tvar angle = this.angleTo(q);\n\t\t\tif (angle === 0) return this;\n\t\t\tvar t = Math.min(1, step / angle);\n\t\t\tthis.slerp(q, t);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.identity = function identity() {\n\t\t\treturn this.set(0, 0, 0, 1);\n\t\t};\n\n\t\t_proto.invert = function invert() {\n\t\t\t// quaternion is assumed to have unit length\n\t\t\treturn this.conjugate();\n\t\t};\n\n\t\t_proto.conjugate = function conjugate() {\n\t\t\tthis._x *= -1;\n\t\t\tthis._y *= -1;\n\t\t\tthis._z *= -1;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.dot = function dot(v) {\n\t\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\t\t};\n\n\t\t_proto.lengthSq = function lengthSq() {\n\t\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\t\t};\n\n\t\t_proto.length = function length() {\n\t\t\treturn Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);\n\t\t};\n\n\t\t_proto.normalize = function normalize() {\n\t\t\tvar l = this.length();\n\n\t\t\tif (l === 0) {\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = 0;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = 1;\n\t\t\t} else {\n\t\t\t\tl = 1 / l;\n\t\t\t\tthis._x = this._x * l;\n\t\t\t\tthis._y = this._y * l;\n\t\t\t\tthis._z = this._z * l;\n\t\t\t\tthis._w = this._w * l;\n\t\t\t}\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(q, p) {\n\t\t\tif (p !== undefined) {\n\t\t\t\tconsole.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');\n\t\t\t\treturn this.multiplyQuaternions(q, p);\n\t\t\t}\n\n\t\t\treturn this.multiplyQuaternions(this, q);\n\t\t};\n\n\t\t_proto.premultiply = function premultiply(q) {\n\t\t\treturn this.multiplyQuaternions(q, this);\n\t\t};\n\n\t\t_proto.multiplyQuaternions = function multiplyQuaternions(a, b) {\n\t\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\t\t\tvar qax = a._x,\n\t\t\t\t\tqay = a._y,\n\t\t\t\t\tqaz = a._z,\n\t\t\t\t\tqaw = a._w;\n\t\t\tvar qbx = b._x,\n\t\t\t\t\tqby = b._y,\n\t\t\t\t\tqbz = b._z,\n\t\t\t\t\tqbw = b._w;\n\t\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.slerp = function slerp(qb, t) {\n\t\t\tif (t === 0) return this;\n\t\t\tif (t === 1) return this.copy(qb);\n\t\t\tvar x = this._x,\n\t\t\t\t\ty = this._y,\n\t\t\t\t\tz = this._z,\n\t\t\t\t\tw = this._w; // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\t\tif (cosHalfTheta < 0) {\n\t\t\t\tthis._w = -qb._w;\n\t\t\t\tthis._x = -qb._x;\n\t\t\t\tthis._y = -qb._y;\n\t\t\t\tthis._z = -qb._z;\n\t\t\t\tcosHalfTheta = -cosHalfTheta;\n\t\t\t} else {\n\t\t\t\tthis.copy(qb);\n\t\t\t}\n\n\t\t\tif (cosHalfTheta >= 1.0) {\n\t\t\t\tthis._w = w;\n\t\t\t\tthis._x = x;\n\t\t\t\tthis._y = y;\n\t\t\t\tthis._z = z;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\t\tif (sqrSinHalfTheta <= Number.EPSILON) {\n\t\t\t\tvar s = 1 - t;\n\t\t\t\tthis._w = s * w + t * this._w;\n\t\t\t\tthis._x = s * x + t * this._x;\n\t\t\t\tthis._y = s * y + t * this._y;\n\t\t\t\tthis._z = s * z + t * this._z;\n\t\t\t\tthis.normalize();\n\n\t\t\t\tthis._onChangeCallback();\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar sinHalfTheta = Math.sqrt(sqrSinHalfTheta);\n\t\t\tvar halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\n\t\t\tvar ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,\n\t\t\t\t\tratioB = Math.sin(t * halfTheta) / sinHalfTheta;\n\t\t\tthis._w = w * ratioA + this._w * ratioB;\n\t\t\tthis._x = x * ratioA + this._x * ratioB;\n\t\t\tthis._y = y * ratioA + this._y * ratioB;\n\t\t\tthis._z = z * ratioA + this._z * ratioB;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(quaternion) {\n\t\t\treturn quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis._x = array[offset];\n\t\t\tthis._y = array[offset + 1];\n\t\t\tthis._z = array[offset + 2];\n\t\t\tthis._w = array[offset + 3];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tarray[offset] = this._x;\n\t\t\tarray[offset + 1] = this._y;\n\t\t\tarray[offset + 2] = this._z;\n\t\t\tarray[offset + 3] = this._w;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.fromBufferAttribute = function fromBufferAttribute(attribute, index) {\n\t\t\tthis._x = attribute.getX(index);\n\t\t\tthis._y = attribute.getY(index);\n\t\t\tthis._z = attribute.getZ(index);\n\t\t\tthis._w = attribute.getW(index);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto._onChange = function _onChange(callback) {\n\t\t\tthis._onChangeCallback = callback;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto._onChangeCallback = function _onChangeCallback() {};\n\n\t\t_createClass(Quaternion, [{\n\t\t\tkey: \"x\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._x;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._x = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"y\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._y;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._y = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"z\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._z;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._z = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"w\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._w;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._w = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}]);\n\n\t\treturn Quaternion;\n\t}();\n\n\tQuaternion.prototype.isQuaternion = true;\n\n\tvar Vector3 = /*#__PURE__*/function () {\n\t\tfunction Vector3(x, y, z) {\n\t\t\tif (x === void 0) {\n\t\t\t\tx = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tif (z === void 0) {\n\t\t\t\tz = 0;\n\t\t\t}\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t}\n\n\t\tvar _proto = Vector3.prototype;\n\n\t\t_proto.set = function set(x, y, z) {\n\t\t\tif (z === undefined) z = this.z; // sprite.scale.set(x,y)\n\n\t\t\tthis.x = x;\n\t\t\tthis.y = y;\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setScalar = function setScalar(scalar) {\n\t\t\tthis.x = scalar;\n\t\t\tthis.y = scalar;\n\t\t\tthis.z = scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setX = function setX(x) {\n\t\t\tthis.x = x;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setY = function setY(y) {\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setZ = function setZ(z) {\n\t\t\tthis.z = z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setComponent = function setComponent(index, value) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.x = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.y = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.z = value;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getComponent = function getComponent(index) {\n\t\t\tswitch (index) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn this.x;\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn this.y;\n\n\t\t\t\tcase 2:\n\t\t\t\t\treturn this.z;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('index is out of range: ' + index);\n\t\t\t}\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this.x, this.y, this.z);\n\t\t};\n\n\t\t_proto.copy = function copy(v) {\n\t\t\tthis.x = v.x;\n\t\t\tthis.y = v.y;\n\t\t\tthis.z = v.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.add = function add(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n\t\t\t\treturn this.addVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x += v.x;\n\t\t\tthis.y += v.y;\n\t\t\tthis.z += v.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScalar = function addScalar(s) {\n\t\t\tthis.x += s;\n\t\t\tthis.y += s;\n\t\t\tthis.z += s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addVectors = function addVectors(a, b) {\n\t\t\tthis.x = a.x + b.x;\n\t\t\tthis.y = a.y + b.y;\n\t\t\tthis.z = a.z + b.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScaledVector = function addScaledVector(v, s) {\n\t\t\tthis.x += v.x * s;\n\t\t\tthis.y += v.y * s;\n\t\t\tthis.z += v.z * s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.sub = function sub(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n\t\t\t\treturn this.subVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x -= v.x;\n\t\t\tthis.y -= v.y;\n\t\t\tthis.z -= v.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subScalar = function subScalar(s) {\n\t\t\tthis.x -= s;\n\t\t\tthis.y -= s;\n\t\t\tthis.z -= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.subVectors = function subVectors(a, b) {\n\t\t\tthis.x = a.x - b.x;\n\t\t\tthis.y = a.y - b.y;\n\t\t\tthis.z = a.z - b.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');\n\t\t\t\treturn this.multiplyVectors(v, w);\n\t\t\t}\n\n\t\t\tthis.x *= v.x;\n\t\t\tthis.y *= v.y;\n\t\t\tthis.z *= v.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(scalar) {\n\t\t\tthis.x *= scalar;\n\t\t\tthis.y *= scalar;\n\t\t\tthis.z *= scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyVectors = function multiplyVectors(a, b) {\n\t\t\tthis.x = a.x * b.x;\n\t\t\tthis.y = a.y * b.y;\n\t\t\tthis.z = a.z * b.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.applyEuler = function applyEuler(euler) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tconsole.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\treturn this.applyQuaternion(_quaternion.setFromEuler(euler));\n\t\t};\n\n\t\t_proto.applyAxisAngle = function applyAxisAngle(axis, angle) {\n\t\t\treturn this.applyQuaternion(_quaternion.setFromAxisAngle(axis, angle));\n\t\t};\n\n\t\t_proto.applyMatrix3 = function applyMatrix3(m) {\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y,\n\t\t\t\t\tz = this.z;\n\t\t\tvar e = m.elements;\n\t\t\tthis.x = e[0] * x + e[3] * y + e[6] * z;\n\t\t\tthis.y = e[1] * x + e[4] * y + e[7] * z;\n\t\t\tthis.z = e[2] * x + e[5] * y + e[8] * z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.applyNormalMatrix = function applyNormalMatrix(m) {\n\t\t\treturn this.applyMatrix3(m).normalize();\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(m) {\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y,\n\t\t\t\t\tz = this.z;\n\t\t\tvar e = m.elements;\n\t\t\tvar w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\n\t\t\tthis.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;\n\t\t\tthis.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;\n\t\t\tthis.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.applyQuaternion = function applyQuaternion(q) {\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y,\n\t\t\t\t\tz = this.z;\n\t\t\tvar qx = q.x,\n\t\t\t\t\tqy = q.y,\n\t\t\t\t\tqz = q.z,\n\t\t\t\t\tqw = q.w; // calculate quat * vector\n\n\t\t\tvar ix = qw * x + qy * z - qz * y;\n\t\t\tvar iy = qw * y + qz * x - qx * z;\n\t\t\tvar iz = qw * z + qx * y - qy * x;\n\t\t\tvar iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n\t\t\tthis.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n\t\t\tthis.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n\t\t\tthis.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.project = function project(camera) {\n\t\t\treturn this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMatrix);\n\t\t};\n\n\t\t_proto.unproject = function unproject(camera) {\n\t\t\treturn this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixWorld);\n\t\t};\n\n\t\t_proto.transformDirection = function transformDirection(m) {\n\t\t\t// input: THREE.Matrix4 affine matrix\n\t\t\t// vector interpreted as a direction\n\t\t\tvar x = this.x,\n\t\t\t\t\ty = this.y,\n\t\t\t\t\tz = this.z;\n\t\t\tvar e = m.elements;\n\t\t\tthis.x = e[0] * x + e[4] * y + e[8] * z;\n\t\t\tthis.y = e[1] * x + e[5] * y + e[9] * z;\n\t\t\tthis.z = e[2] * x + e[6] * y + e[10] * z;\n\t\t\treturn this.normalize();\n\t\t};\n\n\t\t_proto.divide = function divide(v) {\n\t\t\tthis.x /= v.x;\n\t\t\tthis.y /= v.y;\n\t\t\tthis.z /= v.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.divideScalar = function divideScalar(scalar) {\n\t\t\treturn this.multiplyScalar(1 / scalar);\n\t\t};\n\n\t\t_proto.min = function min(v) {\n\t\t\tthis.x = Math.min(this.x, v.x);\n\t\t\tthis.y = Math.min(this.y, v.y);\n\t\t\tthis.z = Math.min(this.z, v.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.max = function max(v) {\n\t\t\tthis.x = Math.max(this.x, v.x);\n\t\t\tthis.y = Math.max(this.y, v.y);\n\t\t\tthis.z = Math.max(this.z, v.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clamp = function clamp(min, max) {\n\t\t\t// assumes min < max, componentwise\n\t\t\tthis.x = Math.max(min.x, Math.min(max.x, this.x));\n\t\t\tthis.y = Math.max(min.y, Math.min(max.y, this.y));\n\t\t\tthis.z = Math.max(min.z, Math.min(max.z, this.z));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampScalar = function clampScalar(minVal, maxVal) {\n\t\t\tthis.x = Math.max(minVal, Math.min(maxVal, this.x));\n\t\t\tthis.y = Math.max(minVal, Math.min(maxVal, this.y));\n\t\t\tthis.z = Math.max(minVal, Math.min(maxVal, this.z));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clampLength = function clampLength(min, max) {\n\t\t\tvar length = this.length();\n\t\t\treturn this.divideScalar(length || 1).multiplyScalar(Math.max(min, Math.min(max, length)));\n\t\t};\n\n\t\t_proto.floor = function floor() {\n\t\t\tthis.x = Math.floor(this.x);\n\t\t\tthis.y = Math.floor(this.y);\n\t\t\tthis.z = Math.floor(this.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.ceil = function ceil() {\n\t\t\tthis.x = Math.ceil(this.x);\n\t\t\tthis.y = Math.ceil(this.y);\n\t\t\tthis.z = Math.ceil(this.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.round = function round() {\n\t\t\tthis.x = Math.round(this.x);\n\t\t\tthis.y = Math.round(this.y);\n\t\t\tthis.z = Math.round(this.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.roundToZero = function roundToZero() {\n\t\t\tthis.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n\t\t\tthis.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n\t\t\tthis.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.negate = function negate() {\n\t\t\tthis.x = -this.x;\n\t\t\tthis.y = -this.y;\n\t\t\tthis.z = -this.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.dot = function dot(v) {\n\t\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\t\t} // TODO lengthSquared?\n\t\t;\n\n\t\t_proto.lengthSq = function lengthSq() {\n\t\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\t\t};\n\n\t\t_proto.length = function length() {\n\t\t\treturn Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n\t\t};\n\n\t\t_proto.manhattanLength = function manhattanLength() {\n\t\t\treturn Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\n\t\t};\n\n\t\t_proto.normalize = function normalize() {\n\t\t\treturn this.divideScalar(this.length() || 1);\n\t\t};\n\n\t\t_proto.setLength = function setLength(length) {\n\t\t\treturn this.normalize().multiplyScalar(length);\n\t\t};\n\n\t\t_proto.lerp = function lerp(v, alpha) {\n\t\t\tthis.x += (v.x - this.x) * alpha;\n\t\t\tthis.y += (v.y - this.y) * alpha;\n\t\t\tthis.z += (v.z - this.z) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerpVectors = function lerpVectors(v1, v2, alpha) {\n\t\t\tthis.x = v1.x + (v2.x - v1.x) * alpha;\n\t\t\tthis.y = v1.y + (v2.y - v1.y) * alpha;\n\t\t\tthis.z = v1.z + (v2.z - v1.z) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.cross = function cross(v, w) {\n\t\t\tif (w !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');\n\t\t\t\treturn this.crossVectors(v, w);\n\t\t\t}\n\n\t\t\treturn this.crossVectors(this, v);\n\t\t};\n\n\t\t_proto.crossVectors = function crossVectors(a, b) {\n\t\t\tvar ax = a.x,\n\t\t\t\t\tay = a.y,\n\t\t\t\t\taz = a.z;\n\t\t\tvar bx = b.x,\n\t\t\t\t\tby = b.y,\n\t\t\t\t\tbz = b.z;\n\t\t\tthis.x = ay * bz - az * by;\n\t\t\tthis.y = az * bx - ax * bz;\n\t\t\tthis.z = ax * by - ay * bx;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.projectOnVector = function projectOnVector(v) {\n\t\t\tvar denominator = v.lengthSq();\n\t\t\tif (denominator === 0) return this.set(0, 0, 0);\n\t\t\tvar scalar = v.dot(this) / denominator;\n\t\t\treturn this.copy(v).multiplyScalar(scalar);\n\t\t};\n\n\t\t_proto.projectOnPlane = function projectOnPlane(planeNormal) {\n\t\t\t_vector.copy(this).projectOnVector(planeNormal);\n\n\t\t\treturn this.sub(_vector);\n\t\t};\n\n\t\t_proto.reflect = function reflect(normal) {\n\t\t\t// reflect incident vector off plane orthogonal to normal\n\t\t\t// normal is assumed to have unit length\n\t\t\treturn this.sub(_vector.copy(normal).multiplyScalar(2 * this.dot(normal)));\n\t\t};\n\n\t\t_proto.angleTo = function angleTo(v) {\n\t\t\tvar denominator = Math.sqrt(this.lengthSq() * v.lengthSq());\n\t\t\tif (denominator === 0) return Math.PI / 2;\n\t\t\tvar theta = this.dot(v) / denominator; // clamp, to handle numerical problems\n\n\t\t\treturn Math.acos(MathUtils.clamp(theta, -1, 1));\n\t\t};\n\n\t\t_proto.distanceTo = function distanceTo(v) {\n\t\t\treturn Math.sqrt(this.distanceToSquared(v));\n\t\t};\n\n\t\t_proto.distanceToSquared = function distanceToSquared(v) {\n\t\t\tvar dx = this.x - v.x,\n\t\t\t\t\tdy = this.y - v.y,\n\t\t\t\t\tdz = this.z - v.z;\n\t\t\treturn dx * dx + dy * dy + dz * dz;\n\t\t};\n\n\t\t_proto.manhattanDistanceTo = function manhattanDistanceTo(v) {\n\t\t\treturn Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);\n\t\t};\n\n\t\t_proto.setFromSpherical = function setFromSpherical(s) {\n\t\t\treturn this.setFromSphericalCoords(s.radius, s.phi, s.theta);\n\t\t};\n\n\t\t_proto.setFromSphericalCoords = function setFromSphericalCoords(radius, phi, theta) {\n\t\t\tvar sinPhiRadius = Math.sin(phi) * radius;\n\t\t\tthis.x = sinPhiRadius * Math.sin(theta);\n\t\t\tthis.y = Math.cos(phi) * radius;\n\t\t\tthis.z = sinPhiRadius * Math.cos(theta);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromCylindrical = function setFromCylindrical(c) {\n\t\t\treturn this.setFromCylindricalCoords(c.radius, c.theta, c.y);\n\t\t};\n\n\t\t_proto.setFromCylindricalCoords = function setFromCylindricalCoords(radius, theta, y) {\n\t\t\tthis.x = radius * Math.sin(theta);\n\t\t\tthis.y = y;\n\t\t\tthis.z = radius * Math.cos(theta);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromMatrixPosition = function setFromMatrixPosition(m) {\n\t\t\tvar e = m.elements;\n\t\t\tthis.x = e[12];\n\t\t\tthis.y = e[13];\n\t\t\tthis.z = e[14];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromMatrixScale = function setFromMatrixScale(m) {\n\t\t\tvar sx = this.setFromMatrixColumn(m, 0).length();\n\t\t\tvar sy = this.setFromMatrixColumn(m, 1).length();\n\t\t\tvar sz = this.setFromMatrixColumn(m, 2).length();\n\t\t\tthis.x = sx;\n\t\t\tthis.y = sy;\n\t\t\tthis.z = sz;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromMatrixColumn = function setFromMatrixColumn(m, index) {\n\t\t\treturn this.fromArray(m.elements, index * 4);\n\t\t};\n\n\t\t_proto.setFromMatrix3Column = function setFromMatrix3Column(m, index) {\n\t\t\treturn this.fromArray(m.elements, index * 3);\n\t\t};\n\n\t\t_proto.equals = function equals(v) {\n\t\t\treturn v.x === this.x && v.y === this.y && v.z === this.z;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis.x = array[offset];\n\t\t\tthis.y = array[offset + 1];\n\t\t\tthis.z = array[offset + 2];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tarray[offset] = this.x;\n\t\t\tarray[offset + 1] = this.y;\n\t\t\tarray[offset + 2] = this.z;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.fromBufferAttribute = function fromBufferAttribute(attribute, index, offset) {\n\t\t\tif (offset !== undefined) {\n\t\t\t\tconsole.warn('THREE.Vector3: offset has been removed from .fromBufferAttribute().');\n\t\t\t}\n\n\t\t\tthis.x = attribute.getX(index);\n\t\t\tthis.y = attribute.getY(index);\n\t\t\tthis.z = attribute.getZ(index);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.random = function random() {\n\t\t\tthis.x = Math.random();\n\t\t\tthis.y = Math.random();\n\t\t\tthis.z = Math.random();\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Vector3;\n\t}();\n\n\tVector3.prototype.isVector3 = true;\n\n\tvar _vector = /*@__PURE__*/new Vector3();\n\n\tvar _quaternion = /*@__PURE__*/new Quaternion();\n\n\tvar Box3 = /*#__PURE__*/function () {\n\t\tfunction Box3(min, max) {\n\t\t\tif (min === void 0) {\n\t\t\t\tmin = new Vector3(+Infinity, +Infinity, +Infinity);\n\t\t\t}\n\n\t\t\tif (max === void 0) {\n\t\t\t\tmax = new Vector3(-Infinity, -Infinity, -Infinity);\n\t\t\t}\n\n\t\t\tthis.min = min;\n\t\t\tthis.max = max;\n\t\t}\n\n\t\tvar _proto = Box3.prototype;\n\n\t\t_proto.set = function set(min, max) {\n\t\t\tthis.min.copy(min);\n\t\t\tthis.max.copy(max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromArray = function setFromArray(array) {\n\t\t\tvar minX = +Infinity;\n\t\t\tvar minY = +Infinity;\n\t\t\tvar minZ = +Infinity;\n\t\t\tvar maxX = -Infinity;\n\t\t\tvar maxY = -Infinity;\n\t\t\tvar maxZ = -Infinity;\n\n\t\t\tfor (var i = 0, l = array.length; i < l; i += 3) {\n\t\t\t\tvar x = array[i];\n\t\t\t\tvar y = array[i + 1];\n\t\t\t\tvar z = array[i + 2];\n\t\t\t\tif (x < minX) minX = x;\n\t\t\t\tif (y < minY) minY = y;\n\t\t\t\tif (z < minZ) minZ = z;\n\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\tif (z > maxZ) maxZ = z;\n\t\t\t}\n\n\t\t\tthis.min.set(minX, minY, minZ);\n\t\t\tthis.max.set(maxX, maxY, maxZ);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromBufferAttribute = function setFromBufferAttribute(attribute) {\n\t\t\tvar minX = +Infinity;\n\t\t\tvar minY = +Infinity;\n\t\t\tvar minZ = +Infinity;\n\t\t\tvar maxX = -Infinity;\n\t\t\tvar maxY = -Infinity;\n\t\t\tvar maxZ = -Infinity;\n\n\t\t\tfor (var i = 0, l = attribute.count; i < l; i++) {\n\t\t\t\tvar x = attribute.getX(i);\n\t\t\t\tvar y = attribute.getY(i);\n\t\t\t\tvar z = attribute.getZ(i);\n\t\t\t\tif (x < minX) minX = x;\n\t\t\t\tif (y < minY) minY = y;\n\t\t\t\tif (z < minZ) minZ = z;\n\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\tif (z > maxZ) maxZ = z;\n\t\t\t}\n\n\t\t\tthis.min.set(minX, minY, minZ);\n\t\t\tthis.max.set(maxX, maxY, maxZ);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromPoints = function setFromPoints(points) {\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor (var i = 0, il = points.length; i < il; i++) {\n\t\t\t\tthis.expandByPoint(points[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromCenterAndSize = function setFromCenterAndSize(center, size) {\n\t\t\tvar halfSize = _vector$1.copy(size).multiplyScalar(0.5);\n\n\t\t\tthis.min.copy(center).sub(halfSize);\n\t\t\tthis.max.copy(center).add(halfSize);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromObject = function setFromObject(object) {\n\t\t\tthis.makeEmpty();\n\t\t\treturn this.expandByObject(object);\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(box) {\n\t\t\tthis.min.copy(box.min);\n\t\t\tthis.max.copy(box.max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeEmpty = function makeEmpty() {\n\t\t\tthis.min.x = this.min.y = this.min.z = +Infinity;\n\t\t\tthis.max.x = this.max.y = this.max.z = -Infinity;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.isEmpty = function isEmpty() {\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\t\treturn this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;\n\t\t};\n\n\t\t_proto.getCenter = function getCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n\t\t};\n\n\t\t_proto.getSize = function getSize(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getSize() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);\n\t\t};\n\n\t\t_proto.expandByPoint = function expandByPoint(point) {\n\t\t\tthis.min.min(point);\n\t\t\tthis.max.max(point);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.expandByVector = function expandByVector(vector) {\n\t\t\tthis.min.sub(vector);\n\t\t\tthis.max.add(vector);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.expandByScalar = function expandByScalar(scalar) {\n\t\t\tthis.min.addScalar(-scalar);\n\t\t\tthis.max.addScalar(scalar);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.expandByObject = function expandByObject(object) {\n\t\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t\t// accounting for both the object's, and children's, world transforms\n\t\t\tobject.updateWorldMatrix(false, false);\n\t\t\tvar geometry = object.geometry;\n\n\t\t\tif (geometry !== undefined) {\n\t\t\t\tif (geometry.boundingBox === null) {\n\t\t\t\t\tgeometry.computeBoundingBox();\n\t\t\t\t}\n\n\t\t\t\t_box.copy(geometry.boundingBox);\n\n\t\t\t\t_box.applyMatrix4(object.matrixWorld);\n\n\t\t\t\tthis.union(_box);\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tthis.expandByObject(children[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.containsPoint = function containsPoint(point) {\n\t\t\treturn point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z ? false : true;\n\t\t};\n\n\t\t_proto.containsBox = function containsBox(box) {\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;\n\t\t};\n\n\t\t_proto.getParameter = function getParameter(point, target) {\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .getParameter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\t// using 6 splitting planes to rule out intersections.\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\t\t};\n\n\t\t_proto.intersectsSphere = function intersectsSphere(sphere) {\n\t\t\t// Find the point on the AABB closest to the sphere center.\n\t\t\tthis.clampPoint(sphere.center, _vector$1); // If that point is inside the sphere, the AABB and sphere intersect.\n\n\t\t\treturn _vector$1.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n\t\t};\n\n\t\t_proto.intersectsPlane = function intersectsPlane(plane) {\n\t\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\t\t\tvar min, max;\n\n\t\t\tif (plane.normal.x > 0) {\n\t\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\t\tmax = plane.normal.x * this.max.x;\n\t\t\t} else {\n\t\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\t\tmax = plane.normal.x * this.min.x;\n\t\t\t}\n\n\t\t\tif (plane.normal.y > 0) {\n\t\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\t\tmax += plane.normal.y * this.max.y;\n\t\t\t} else {\n\t\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\t\tmax += plane.normal.y * this.min.y;\n\t\t\t}\n\n\t\t\tif (plane.normal.z > 0) {\n\t\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\t\tmax += plane.normal.z * this.max.z;\n\t\t\t} else {\n\t\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\t\tmax += plane.normal.z * this.min.z;\n\t\t\t}\n\n\t\t\treturn min <= -plane.constant && max >= -plane.constant;\n\t\t};\n\n\t\t_proto.intersectsTriangle = function intersectsTriangle(triangle) {\n\t\t\tif (this.isEmpty()) {\n\t\t\t\treturn false;\n\t\t\t} // compute box center and extents\n\n\n\t\t\tthis.getCenter(_center);\n\n\t\t\t_extents.subVectors(this.max, _center); // translate triangle to aabb origin\n\n\n\t\t\t_v0.subVectors(triangle.a, _center);\n\n\t\t\t_v1.subVectors(triangle.b, _center);\n\n\t\t\t_v2.subVectors(triangle.c, _center); // compute edge vectors for triangle\n\n\n\t\t\t_f0.subVectors(_v1, _v0);\n\n\t\t\t_f1.subVectors(_v2, _v1);\n\n\t\t\t_f2.subVectors(_v0, _v2); // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\n\n\t\t\tvar axes = [0, -_f0.z, _f0.y, 0, -_f1.z, _f1.y, 0, -_f2.z, _f2.y, _f0.z, 0, -_f0.x, _f1.z, 0, -_f1.x, _f2.z, 0, -_f2.x, -_f0.y, _f0.x, 0, -_f1.y, _f1.x, 0, -_f2.y, _f2.x, 0];\n\n\t\t\tif (!satForAxes(axes, _v0, _v1, _v2, _extents)) {\n\t\t\t\treturn false;\n\t\t\t} // test 3 face normals from the aabb\n\n\n\t\t\taxes = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n\n\t\t\tif (!satForAxes(axes, _v0, _v1, _v2, _extents)) {\n\t\t\t\treturn false;\n\t\t\t} // finally testing the face normal of the triangle\n\t\t\t// use already existing triangle edge vectors here\n\n\n\t\t\t_triangleNormal.crossVectors(_f0, _f1);\n\n\t\t\taxes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];\n\t\t\treturn satForAxes(axes, _v0, _v1, _v2, _extents);\n\t\t};\n\n\t\t_proto.clampPoint = function clampPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box3: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(point).clamp(this.min, this.max);\n\t\t};\n\n\t\t_proto.distanceToPoint = function distanceToPoint(point) {\n\t\t\tvar clampedPoint = _vector$1.copy(point).clamp(this.min, this.max);\n\n\t\t\treturn clampedPoint.sub(point).length();\n\t\t};\n\n\t\t_proto.getBoundingSphere = function getBoundingSphere(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.error('THREE.Box3: .getBoundingSphere() target is now required'); //target = new Sphere(); // removed to avoid cyclic dependency\n\t\t\t}\n\n\t\t\tthis.getCenter(target.center);\n\t\t\ttarget.radius = this.getSize(_vector$1).length() * 0.5;\n\t\t\treturn target;\n\t\t};\n\n\t\t_proto.intersect = function intersect(box) {\n\t\t\tthis.min.max(box.min);\n\t\t\tthis.max.min(box.max); // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\n\t\t\tif (this.isEmpty()) this.makeEmpty();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.union = function union(box) {\n\t\t\tthis.min.min(box.min);\n\t\t\tthis.max.max(box.max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(matrix) {\n\t\t\t// transform of empty box is an empty box.\n\t\t\tif (this.isEmpty()) return this; // NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\n\t\t\t_points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000\n\n\n\t\t\t_points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001\n\n\n\t\t\t_points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010\n\n\n\t\t\t_points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011\n\n\n\t\t\t_points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100\n\n\n\t\t\t_points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101\n\n\n\t\t\t_points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110\n\n\n\t\t\t_points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111\n\n\n\t\t\tthis.setFromPoints(_points);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.translate = function translate(offset) {\n\t\t\tthis.min.add(offset);\n\t\t\tthis.max.add(offset);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(box) {\n\t\t\treturn box.min.equals(this.min) && box.max.equals(this.max);\n\t\t};\n\n\t\treturn Box3;\n\t}();\n\n\tBox3.prototype.isBox3 = true;\n\tvar _points = [/*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3(), /*@__PURE__*/new Vector3()];\n\n\tvar _vector$1 = /*@__PURE__*/new Vector3();\n\n\tvar _box = /*@__PURE__*/new Box3(); // triangle centered vertices\n\n\n\tvar _v0 = /*@__PURE__*/new Vector3();\n\n\tvar _v1 = /*@__PURE__*/new Vector3();\n\n\tvar _v2 = /*@__PURE__*/new Vector3(); // triangle edge vectors\n\n\n\tvar _f0 = /*@__PURE__*/new Vector3();\n\n\tvar _f1 = /*@__PURE__*/new Vector3();\n\n\tvar _f2 = /*@__PURE__*/new Vector3();\n\n\tvar _center = /*@__PURE__*/new Vector3();\n\n\tvar _extents = /*@__PURE__*/new Vector3();\n\n\tvar _triangleNormal = /*@__PURE__*/new Vector3();\n\n\tvar _testAxis = /*@__PURE__*/new Vector3();\n\n\tfunction satForAxes(axes, v0, v1, v2, extents) {\n\t\tfor (var i = 0, j = axes.length - 3; i <= j; i += 3) {\n\t\t\t_testAxis.fromArray(axes, i); // project the aabb onto the seperating axis\n\n\n\t\t\tvar r = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z); // project all 3 vertices of the triangle onto the seperating axis\n\n\t\t\tvar p0 = v0.dot(_testAxis);\n\t\t\tvar p1 = v1.dot(_testAxis);\n\t\t\tvar p2 = v2.dot(_testAxis); // actual test, basically see if either of the most extreme of the triangle points intersects r\n\n\t\t\tif (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {\n\t\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t\t// the axis is seperating and we can exit\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tvar _box$1 = /*@__PURE__*/new Box3();\n\n\tvar Sphere = /*#__PURE__*/function () {\n\t\tfunction Sphere(center, radius) {\n\t\t\tif (center === void 0) {\n\t\t\t\tcenter = new Vector3();\n\t\t\t}\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = -1;\n\t\t\t}\n\n\t\t\tthis.center = center;\n\t\t\tthis.radius = radius;\n\t\t}\n\n\t\tvar _proto = Sphere.prototype;\n\n\t\t_proto.set = function set(center, radius) {\n\t\t\tthis.center.copy(center);\n\t\t\tthis.radius = radius;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromPoints = function setFromPoints(points, optionalCenter) {\n\t\t\tvar center = this.center;\n\n\t\t\tif (optionalCenter !== undefined) {\n\t\t\t\tcenter.copy(optionalCenter);\n\t\t\t} else {\n\t\t\t\t_box$1.setFromPoints(points).getCenter(center);\n\t\t\t}\n\n\t\t\tvar maxRadiusSq = 0;\n\n\t\t\tfor (var i = 0, il = points.length; i < il; i++) {\n\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));\n\t\t\t}\n\n\t\t\tthis.radius = Math.sqrt(maxRadiusSq);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copy = function copy(sphere) {\n\t\t\tthis.center.copy(sphere.center);\n\t\t\tthis.radius = sphere.radius;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.isEmpty = function isEmpty() {\n\t\t\treturn this.radius < 0;\n\t\t};\n\n\t\t_proto.makeEmpty = function makeEmpty() {\n\t\t\tthis.center.set(0, 0, 0);\n\t\t\tthis.radius = -1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.containsPoint = function containsPoint(point) {\n\t\t\treturn point.distanceToSquared(this.center) <= this.radius * this.radius;\n\t\t};\n\n\t\t_proto.distanceToPoint = function distanceToPoint(point) {\n\t\t\treturn point.distanceTo(this.center) - this.radius;\n\t\t};\n\n\t\t_proto.intersectsSphere = function intersectsSphere(sphere) {\n\t\t\tvar radiusSum = this.radius + sphere.radius;\n\t\t\treturn sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\treturn box.intersectsSphere(this);\n\t\t};\n\n\t\t_proto.intersectsPlane = function intersectsPlane(plane) {\n\t\t\treturn Math.abs(plane.distanceToPoint(this.center)) <= this.radius;\n\t\t};\n\n\t\t_proto.clampPoint = function clampPoint(point, target) {\n\t\t\tvar deltaLengthSq = this.center.distanceToSquared(point);\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Sphere: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.copy(point);\n\n\t\t\tif (deltaLengthSq > this.radius * this.radius) {\n\t\t\t\ttarget.sub(this.center).normalize();\n\t\t\t\ttarget.multiplyScalar(this.radius).add(this.center);\n\t\t\t}\n\n\t\t\treturn target;\n\t\t};\n\n\t\t_proto.getBoundingBox = function getBoundingBox(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Sphere: .getBoundingBox() target is now required');\n\t\t\t\ttarget = new Box3();\n\t\t\t}\n\n\t\t\tif (this.isEmpty()) {\n\t\t\t\t// Empty sphere produces empty bounding box\n\t\t\t\ttarget.makeEmpty();\n\t\t\t\treturn target;\n\t\t\t}\n\n\t\t\ttarget.set(this.center, this.center);\n\t\t\ttarget.expandByScalar(this.radius);\n\t\t\treturn target;\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(matrix) {\n\t\t\tthis.center.applyMatrix4(matrix);\n\t\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.translate = function translate(offset) {\n\t\t\tthis.center.add(offset);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(sphere) {\n\t\t\treturn sphere.center.equals(this.center) && sphere.radius === this.radius;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\treturn Sphere;\n\t}();\n\n\tvar _vector$2 = /*@__PURE__*/new Vector3();\n\n\tvar _segCenter = /*@__PURE__*/new Vector3();\n\n\tvar _segDir = /*@__PURE__*/new Vector3();\n\n\tvar _diff = /*@__PURE__*/new Vector3();\n\n\tvar _edge1 = /*@__PURE__*/new Vector3();\n\n\tvar _edge2 = /*@__PURE__*/new Vector3();\n\n\tvar _normal = /*@__PURE__*/new Vector3();\n\n\tvar Ray = /*#__PURE__*/function () {\n\t\tfunction Ray(origin, direction) {\n\t\t\tif (origin === void 0) {\n\t\t\t\torigin = new Vector3();\n\t\t\t}\n\n\t\t\tif (direction === void 0) {\n\t\t\t\tdirection = new Vector3(0, 0, -1);\n\t\t\t}\n\n\t\t\tthis.origin = origin;\n\t\t\tthis.direction = direction;\n\t\t}\n\n\t\tvar _proto = Ray.prototype;\n\n\t\t_proto.set = function set(origin, direction) {\n\t\t\tthis.origin.copy(origin);\n\t\t\tthis.direction.copy(direction);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copy = function copy(ray) {\n\t\t\tthis.origin.copy(ray.origin);\n\t\t\tthis.direction.copy(ray.direction);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.at = function at(t, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Ray: .at() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.direction).multiplyScalar(t).add(this.origin);\n\t\t};\n\n\t\t_proto.lookAt = function lookAt(v) {\n\t\t\tthis.direction.copy(v).sub(this.origin).normalize();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.recast = function recast(t) {\n\t\t\tthis.origin.copy(this.at(t, _vector$2));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.closestPointToPoint = function closestPointToPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Ray: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.subVectors(point, this.origin);\n\t\t\tvar directionDistance = target.dot(this.direction);\n\n\t\t\tif (directionDistance < 0) {\n\t\t\t\treturn target.copy(this.origin);\n\t\t\t}\n\n\t\t\treturn target.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n\t\t};\n\n\t\t_proto.distanceToPoint = function distanceToPoint(point) {\n\t\t\treturn Math.sqrt(this.distanceSqToPoint(point));\n\t\t};\n\n\t\t_proto.distanceSqToPoint = function distanceSqToPoint(point) {\n\t\t\tvar directionDistance = _vector$2.subVectors(point, this.origin).dot(this.direction); // point behind the ray\n\n\n\t\t\tif (directionDistance < 0) {\n\t\t\t\treturn this.origin.distanceToSquared(point);\n\t\t\t}\n\n\t\t\t_vector$2.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n\n\t\t\treturn _vector$2.distanceToSquared(point);\n\t\t};\n\n\t\t_proto.distanceSqToSegment = function distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t\t// It returns the min distance between the ray and the segment\n\t\t\t// defined by v0 and v1\n\t\t\t// It can also set two optional targets :\n\t\t\t// - The closest point on the ray\n\t\t\t// - The closest point on the segment\n\t\t\t_segCenter.copy(v0).add(v1).multiplyScalar(0.5);\n\n\t\t\t_segDir.copy(v1).sub(v0).normalize();\n\n\t\t\t_diff.copy(this.origin).sub(_segCenter);\n\n\t\t\tvar segExtent = v0.distanceTo(v1) * 0.5;\n\t\t\tvar a01 = -this.direction.dot(_segDir);\n\n\t\t\tvar b0 = _diff.dot(this.direction);\n\n\t\t\tvar b1 = -_diff.dot(_segDir);\n\n\t\t\tvar c = _diff.lengthSq();\n\n\t\t\tvar det = Math.abs(1 - a01 * a01);\n\t\t\tvar s0, s1, sqrDist, extDet;\n\n\t\t\tif (det > 0) {\n\t\t\t\t// The ray and segment are not parallel.\n\t\t\t\ts0 = a01 * b1 - b0;\n\t\t\t\ts1 = a01 * b0 - b1;\n\t\t\t\textDet = segExtent * det;\n\n\t\t\t\tif (s0 >= 0) {\n\t\t\t\t\tif (s1 >= -extDet) {\n\t\t\t\t\t\tif (s1 <= extDet) {\n\t\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\t\t\t\t\t\t\tvar invDet = 1 / det;\n\t\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\t\tsqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// region 1\n\t\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// region 5\n\t\t\t\t\t\ts1 = -segExtent;\n\t\t\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (s1 <= -extDet) {\n\t\t\t\t\t\t// region 4\n\t\t\t\t\t\ts0 = Math.max(0, -(-a01 * segExtent + b0));\n\t\t\t\t\t\ts1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t} else if (s1 <= extDet) {\n\t\t\t\t\t\t// region 3\n\t\t\t\t\t\ts0 = 0;\n\t\t\t\t\t\ts1 = Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// region 2\n\t\t\t\t\t\ts0 = Math.max(0, -(a01 * segExtent + b0));\n\t\t\t\t\t\ts1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n\t\t\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Ray and segment are parallel.\n\t\t\t\ts1 = a01 > 0 ? -segExtent : segExtent;\n\t\t\t\ts0 = Math.max(0, -(a01 * s1 + b0));\n\t\t\t\tsqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n\t\t\t}\n\n\t\t\tif (optionalPointOnRay) {\n\t\t\t\toptionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);\n\t\t\t}\n\n\t\t\tif (optionalPointOnSegment) {\n\t\t\t\toptionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);\n\t\t\t}\n\n\t\t\treturn sqrDist;\n\t\t};\n\n\t\t_proto.intersectSphere = function intersectSphere(sphere, target) {\n\t\t\t_vector$2.subVectors(sphere.center, this.origin);\n\n\t\t\tvar tca = _vector$2.dot(this.direction);\n\n\t\t\tvar d2 = _vector$2.dot(_vector$2) - tca * tca;\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\n\t\t\tif (d2 > radius2) return null;\n\t\t\tvar thc = Math.sqrt(radius2 - d2); // t0 = first intersect point - entrance on front of sphere\n\n\t\t\tvar t0 = tca - thc; // t1 = second intersect point - exit point on back of sphere\n\n\t\t\tvar t1 = tca + thc; // test to see if both t0 and t1 are behind the ray - if so, return null\n\n\t\t\tif (t0 < 0 && t1 < 0) return null; // test to see if t0 is behind the ray:\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t\t// in order to always return an intersect point that is in front of the ray.\n\n\t\t\tif (t0 < 0) return this.at(t1, target); // else t0 is in front of the ray, so return the first collision point scaled by t0\n\n\t\t\treturn this.at(t0, target);\n\t\t};\n\n\t\t_proto.intersectsSphere = function intersectsSphere(sphere) {\n\t\t\treturn this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;\n\t\t};\n\n\t\t_proto.distanceToPlane = function distanceToPlane(plane) {\n\t\t\tvar denominator = plane.normal.dot(this.direction);\n\n\t\t\tif (denominator === 0) {\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif (plane.distanceToPoint(this.origin) === 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t} // Null is preferable to undefined since undefined means.... it is undefined\n\n\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tvar t = -(this.origin.dot(plane.normal) + plane.constant) / denominator; // Return if the ray never intersects the plane\n\n\t\t\treturn t >= 0 ? t : null;\n\t\t};\n\n\t\t_proto.intersectPlane = function intersectPlane(plane, target) {\n\t\t\tvar t = this.distanceToPlane(plane);\n\n\t\t\tif (t === null) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\treturn this.at(t, target);\n\t\t};\n\n\t\t_proto.intersectsPlane = function intersectsPlane(plane) {\n\t\t\t// check if the ray lies on the plane first\n\t\t\tvar distToPoint = plane.distanceToPoint(this.origin);\n\n\t\t\tif (distToPoint === 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tvar denominator = plane.normal.dot(this.direction);\n\n\t\t\tif (denominator * distToPoint < 0) {\n\t\t\t\treturn true;\n\t\t\t} // ray origin is behind the plane (and is pointing behind it)\n\n\n\t\t\treturn false;\n\t\t};\n\n\t\t_proto.intersectBox = function intersectBox(box, target) {\n\t\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\n\t\t\tvar invdirx = 1 / this.direction.x,\n\t\t\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\t\t\tinvdirz = 1 / this.direction.z;\n\t\t\tvar origin = this.origin;\n\n\t\t\tif (invdirx >= 0) {\n\t\t\t\ttmin = (box.min.x - origin.x) * invdirx;\n\t\t\t\ttmax = (box.max.x - origin.x) * invdirx;\n\t\t\t} else {\n\t\t\t\ttmin = (box.max.x - origin.x) * invdirx;\n\t\t\t\ttmax = (box.min.x - origin.x) * invdirx;\n\t\t\t}\n\n\t\t\tif (invdiry >= 0) {\n\t\t\t\ttymin = (box.min.y - origin.y) * invdiry;\n\t\t\t\ttymax = (box.max.y - origin.y) * invdiry;\n\t\t\t} else {\n\t\t\t\ttymin = (box.max.y - origin.y) * invdiry;\n\t\t\t\ttymax = (box.min.y - origin.y) * invdiry;\n\t\t\t}\n\n\t\t\tif (tmin > tymax || tymin > tmax) return null; // These lines also handle the case where tmin or tmax is NaN\n\t\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\t\tif (tymin > tmin || tmin !== tmin) tmin = tymin;\n\t\t\tif (tymax < tmax || tmax !== tmax) tmax = tymax;\n\n\t\t\tif (invdirz >= 0) {\n\t\t\t\ttzmin = (box.min.z - origin.z) * invdirz;\n\t\t\t\ttzmax = (box.max.z - origin.z) * invdirz;\n\t\t\t} else {\n\t\t\t\ttzmin = (box.max.z - origin.z) * invdirz;\n\t\t\t\ttzmax = (box.min.z - origin.z) * invdirz;\n\t\t\t}\n\n\t\t\tif (tmin > tzmax || tzmin > tmax) return null;\n\t\t\tif (tzmin > tmin || tmin !== tmin) tmin = tzmin;\n\t\t\tif (tzmax < tmax || tmax !== tmax) tmax = tzmax; //return point closest to the ray (positive side)\n\n\t\t\tif (tmax < 0) return null;\n\t\t\treturn this.at(tmin >= 0 ? tmin : tmax, target);\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\treturn this.intersectBox(box, _vector$2) !== null;\n\t\t};\n\n\t\t_proto.intersectTriangle = function intersectTriangle(a, b, c, backfaceCulling, target) {\n\t\t\t// Compute the offset origin, edges, and normal.\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\t\t\t_edge1.subVectors(b, a);\n\n\t\t\t_edge2.subVectors(c, a);\n\n\t\t\t_normal.crossVectors(_edge1, _edge2); // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t\t//\t |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t\t//\t |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t\t//\t |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\n\n\t\t\tvar DdN = this.direction.dot(_normal);\n\t\t\tvar sign;\n\n\t\t\tif (DdN > 0) {\n\t\t\t\tif (backfaceCulling) return null;\n\t\t\t\tsign = 1;\n\t\t\t} else if (DdN < 0) {\n\t\t\t\tsign = -1;\n\t\t\t\tDdN = -DdN;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t_diff.subVectors(this.origin, a);\n\n\t\t\tvar DdQxE2 = sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2)); // b1 < 0, no intersection\n\n\t\t\tif (DdQxE2 < 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tvar DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff)); // b2 < 0, no intersection\n\n\t\t\tif (DdE1xQ < 0) {\n\t\t\t\treturn null;\n\t\t\t} // b1+b2 > 1, no intersection\n\n\n\t\t\tif (DdQxE2 + DdE1xQ > DdN) {\n\t\t\t\treturn null;\n\t\t\t} // Line intersects triangle, check if ray does.\n\n\n\t\t\tvar QdN = -sign * _diff.dot(_normal); // t < 0, no intersection\n\n\n\t\t\tif (QdN < 0) {\n\t\t\t\treturn null;\n\t\t\t} // Ray intersects triangle.\n\n\n\t\t\treturn this.at(QdN / DdN, target);\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(matrix4) {\n\t\t\tthis.origin.applyMatrix4(matrix4);\n\t\t\tthis.direction.transformDirection(matrix4);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(ray) {\n\t\t\treturn ray.origin.equals(this.origin) && ray.direction.equals(this.direction);\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\treturn Ray;\n\t}();\n\n\tvar Matrix4 = /*#__PURE__*/function () {\n\t\tfunction Matrix4() {\n\t\t\tthis.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\n\t\t\tif (arguments.length > 0) {\n\t\t\t\tconsole.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');\n\t\t\t}\n\t\t}\n\n\t\tvar _proto = Matrix4.prototype;\n\n\t\t_proto.set = function set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] = n11;\n\t\t\tte[4] = n12;\n\t\t\tte[8] = n13;\n\t\t\tte[12] = n14;\n\t\t\tte[1] = n21;\n\t\t\tte[5] = n22;\n\t\t\tte[9] = n23;\n\t\t\tte[13] = n24;\n\t\t\tte[2] = n31;\n\t\t\tte[6] = n32;\n\t\t\tte[10] = n33;\n\t\t\tte[14] = n34;\n\t\t\tte[3] = n41;\n\t\t\tte[7] = n42;\n\t\t\tte[11] = n43;\n\t\t\tte[15] = n44;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.identity = function identity() {\n\t\t\tthis.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new Matrix4().fromArray(this.elements);\n\t\t};\n\n\t\t_proto.copy = function copy(m) {\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\t\t\tte[0] = me[0];\n\t\t\tte[1] = me[1];\n\t\t\tte[2] = me[2];\n\t\t\tte[3] = me[3];\n\t\t\tte[4] = me[4];\n\t\t\tte[5] = me[5];\n\t\t\tte[6] = me[6];\n\t\t\tte[7] = me[7];\n\t\t\tte[8] = me[8];\n\t\t\tte[9] = me[9];\n\t\t\tte[10] = me[10];\n\t\t\tte[11] = me[11];\n\t\t\tte[12] = me[12];\n\t\t\tte[13] = me[13];\n\t\t\tte[14] = me[14];\n\t\t\tte[15] = me[15];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copyPosition = function copyPosition(m) {\n\t\t\tvar te = this.elements,\n\t\t\t\t\tme = m.elements;\n\t\t\tte[12] = me[12];\n\t\t\tte[13] = me[13];\n\t\t\tte[14] = me[14];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromMatrix3 = function setFromMatrix3(m) {\n\t\t\tvar me = m.elements;\n\t\t\tthis.set(me[0], me[3], me[6], 0, me[1], me[4], me[7], 0, me[2], me[5], me[8], 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.extractBasis = function extractBasis(xAxis, yAxis, zAxis) {\n\t\t\txAxis.setFromMatrixColumn(this, 0);\n\t\t\tyAxis.setFromMatrixColumn(this, 1);\n\t\t\tzAxis.setFromMatrixColumn(this, 2);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeBasis = function makeBasis(xAxis, yAxis, zAxis) {\n\t\t\tthis.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.extractRotation = function extractRotation(m) {\n\t\t\t// this method does not support reflection matrices\n\t\t\tvar te = this.elements;\n\t\t\tvar me = m.elements;\n\n\t\t\tvar scaleX = 1 / _v1$1.setFromMatrixColumn(m, 0).length();\n\n\t\t\tvar scaleY = 1 / _v1$1.setFromMatrixColumn(m, 1).length();\n\n\t\t\tvar scaleZ = 1 / _v1$1.setFromMatrixColumn(m, 2).length();\n\n\t\t\tte[0] = me[0] * scaleX;\n\t\t\tte[1] = me[1] * scaleX;\n\t\t\tte[2] = me[2] * scaleX;\n\t\t\tte[3] = 0;\n\t\t\tte[4] = me[4] * scaleY;\n\t\t\tte[5] = me[5] * scaleY;\n\t\t\tte[6] = me[6] * scaleY;\n\t\t\tte[7] = 0;\n\t\t\tte[8] = me[8] * scaleZ;\n\t\t\tte[9] = me[9] * scaleZ;\n\t\t\tte[10] = me[10] * scaleZ;\n\t\t\tte[11] = 0;\n\t\t\tte[12] = 0;\n\t\t\tte[13] = 0;\n\t\t\tte[14] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationFromEuler = function makeRotationFromEuler(euler) {\n\t\t\tif (!(euler && euler.isEuler)) {\n\t\t\t\tconsole.error('THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = euler.x,\n\t\t\t\t\ty = euler.y,\n\t\t\t\t\tz = euler.z;\n\t\t\tvar a = Math.cos(x),\n\t\t\t\t\tb = Math.sin(x);\n\t\t\tvar c = Math.cos(y),\n\t\t\t\t\td = Math.sin(y);\n\t\t\tvar e = Math.cos(z),\n\t\t\t\t\tf = Math.sin(z);\n\n\t\t\tif (euler.order === 'XYZ') {\n\t\t\t\tvar ae = a * e,\n\t\t\t\t\t\taf = a * f,\n\t\t\t\t\t\tbe = b * e,\n\t\t\t\t\t\tbf = b * f;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = -c * f;\n\t\t\t\tte[8] = d;\n\t\t\t\tte[1] = af + be * d;\n\t\t\t\tte[5] = ae - bf * d;\n\t\t\t\tte[9] = -b * c;\n\t\t\t\tte[2] = bf - ae * d;\n\t\t\t\tte[6] = be + af * d;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'YXZ') {\n\t\t\t\tvar ce = c * e,\n\t\t\t\t\t\tcf = c * f,\n\t\t\t\t\t\tde = d * e,\n\t\t\t\t\t\tdf = d * f;\n\t\t\t\tte[0] = ce + df * b;\n\t\t\t\tte[4] = de * b - cf;\n\t\t\t\tte[8] = a * d;\n\t\t\t\tte[1] = a * f;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = -b;\n\t\t\t\tte[2] = cf * b - de;\n\t\t\t\tte[6] = df + ce * b;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'ZXY') {\n\t\t\t\tvar _ce = c * e,\n\t\t\t\t\t\t_cf = c * f,\n\t\t\t\t\t\t_de = d * e,\n\t\t\t\t\t\t_df = d * f;\n\n\t\t\t\tte[0] = _ce - _df * b;\n\t\t\t\tte[4] = -a * f;\n\t\t\t\tte[8] = _de + _cf * b;\n\t\t\t\tte[1] = _cf + _de * b;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = _df - _ce * b;\n\t\t\t\tte[2] = -a * d;\n\t\t\t\tte[6] = b;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'ZYX') {\n\t\t\t\tvar _ae = a * e,\n\t\t\t\t\t\t_af = a * f,\n\t\t\t\t\t\t_be = b * e,\n\t\t\t\t\t\t_bf = b * f;\n\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = _be * d - _af;\n\t\t\t\tte[8] = _ae * d + _bf;\n\t\t\t\tte[1] = c * f;\n\t\t\t\tte[5] = _bf * d + _ae;\n\t\t\t\tte[9] = _af * d - _be;\n\t\t\t\tte[2] = -d;\n\t\t\t\tte[6] = b * c;\n\t\t\t\tte[10] = a * c;\n\t\t\t} else if (euler.order === 'YZX') {\n\t\t\t\tvar ac = a * c,\n\t\t\t\t\t\tad = a * d,\n\t\t\t\t\t\tbc = b * c,\n\t\t\t\t\t\tbd = b * d;\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = bd - ac * f;\n\t\t\t\tte[8] = bc * f + ad;\n\t\t\t\tte[1] = f;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = -b * e;\n\t\t\t\tte[2] = -d * e;\n\t\t\t\tte[6] = ad * f + bc;\n\t\t\t\tte[10] = ac - bd * f;\n\t\t\t} else if (euler.order === 'XZY') {\n\t\t\t\tvar _ac = a * c,\n\t\t\t\t\t\t_ad = a * d,\n\t\t\t\t\t\t_bc = b * c,\n\t\t\t\t\t\t_bd = b * d;\n\n\t\t\t\tte[0] = c * e;\n\t\t\t\tte[4] = -f;\n\t\t\t\tte[8] = d * e;\n\t\t\t\tte[1] = _ac * f + _bd;\n\t\t\t\tte[5] = a * e;\n\t\t\t\tte[9] = _ad * f - _bc;\n\t\t\t\tte[2] = _bc * f - _ad;\n\t\t\t\tte[6] = b * e;\n\t\t\t\tte[10] = _bd * f + _ac;\n\t\t\t} // bottom row\n\n\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = 0; // last column\n\n\t\t\tte[12] = 0;\n\t\t\tte[13] = 0;\n\t\t\tte[14] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationFromQuaternion = function makeRotationFromQuaternion(q) {\n\t\t\treturn this.compose(_zero, q, _one);\n\t\t};\n\n\t\t_proto.lookAt = function lookAt(eye, target, up) {\n\t\t\tvar te = this.elements;\n\n\t\t\t_z.subVectors(eye, target);\n\n\t\t\tif (_z.lengthSq() === 0) {\n\t\t\t\t// eye and target are in the same position\n\t\t\t\t_z.z = 1;\n\t\t\t}\n\n\t\t\t_z.normalize();\n\n\t\t\t_x.crossVectors(up, _z);\n\n\t\t\tif (_x.lengthSq() === 0) {\n\t\t\t\t// up and z are parallel\n\t\t\t\tif (Math.abs(up.z) === 1) {\n\t\t\t\t\t_z.x += 0.0001;\n\t\t\t\t} else {\n\t\t\t\t\t_z.z += 0.0001;\n\t\t\t\t}\n\n\t\t\t\t_z.normalize();\n\n\t\t\t\t_x.crossVectors(up, _z);\n\t\t\t}\n\n\t\t\t_x.normalize();\n\n\t\t\t_y.crossVectors(_z, _x);\n\n\t\t\tte[0] = _x.x;\n\t\t\tte[4] = _y.x;\n\t\t\tte[8] = _z.x;\n\t\t\tte[1] = _x.y;\n\t\t\tte[5] = _y.y;\n\t\t\tte[9] = _z.y;\n\t\t\tte[2] = _x.z;\n\t\t\tte[6] = _y.z;\n\t\t\tte[10] = _z.z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(m, n) {\n\t\t\tif (n !== undefined) {\n\t\t\t\tconsole.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');\n\t\t\t\treturn this.multiplyMatrices(m, n);\n\t\t\t}\n\n\t\t\treturn this.multiplyMatrices(this, m);\n\t\t};\n\n\t\t_proto.premultiply = function premultiply(m) {\n\t\t\treturn this.multiplyMatrices(m, this);\n\t\t};\n\n\t\t_proto.multiplyMatrices = function multiplyMatrices(a, b) {\n\t\t\tvar ae = a.elements;\n\t\t\tvar be = b.elements;\n\t\t\tvar te = this.elements;\n\t\t\tvar a11 = ae[0],\n\t\t\t\t\ta12 = ae[4],\n\t\t\t\t\ta13 = ae[8],\n\t\t\t\t\ta14 = ae[12];\n\t\t\tvar a21 = ae[1],\n\t\t\t\t\ta22 = ae[5],\n\t\t\t\t\ta23 = ae[9],\n\t\t\t\t\ta24 = ae[13];\n\t\t\tvar a31 = ae[2],\n\t\t\t\t\ta32 = ae[6],\n\t\t\t\t\ta33 = ae[10],\n\t\t\t\t\ta34 = ae[14];\n\t\t\tvar a41 = ae[3],\n\t\t\t\t\ta42 = ae[7],\n\t\t\t\t\ta43 = ae[11],\n\t\t\t\t\ta44 = ae[15];\n\t\t\tvar b11 = be[0],\n\t\t\t\t\tb12 = be[4],\n\t\t\t\t\tb13 = be[8],\n\t\t\t\t\tb14 = be[12];\n\t\t\tvar b21 = be[1],\n\t\t\t\t\tb22 = be[5],\n\t\t\t\t\tb23 = be[9],\n\t\t\t\t\tb24 = be[13];\n\t\t\tvar b31 = be[2],\n\t\t\t\t\tb32 = be[6],\n\t\t\t\t\tb33 = be[10],\n\t\t\t\t\tb34 = be[14];\n\t\t\tvar b41 = be[3],\n\t\t\t\t\tb42 = be[7],\n\t\t\t\t\tb43 = be[11],\n\t\t\t\t\tb44 = be[15];\n\t\t\tte[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\t\tte[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\t\tte[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\t\tte[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\t\t\tte[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\t\tte[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\t\tte[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\t\tte[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\t\t\tte[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\t\tte[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\t\tte[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\t\tte[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\t\t\tte[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\t\tte[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\t\tte[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\t\tte[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(s) {\n\t\t\tvar te = this.elements;\n\t\t\tte[0] *= s;\n\t\t\tte[4] *= s;\n\t\t\tte[8] *= s;\n\t\t\tte[12] *= s;\n\t\t\tte[1] *= s;\n\t\t\tte[5] *= s;\n\t\t\tte[9] *= s;\n\t\t\tte[13] *= s;\n\t\t\tte[2] *= s;\n\t\t\tte[6] *= s;\n\t\t\tte[10] *= s;\n\t\t\tte[14] *= s;\n\t\t\tte[3] *= s;\n\t\t\tte[7] *= s;\n\t\t\tte[11] *= s;\n\t\t\tte[15] *= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.determinant = function determinant() {\n\t\t\tvar te = this.elements;\n\t\t\tvar n11 = te[0],\n\t\t\t\t\tn12 = te[4],\n\t\t\t\t\tn13 = te[8],\n\t\t\t\t\tn14 = te[12];\n\t\t\tvar n21 = te[1],\n\t\t\t\t\tn22 = te[5],\n\t\t\t\t\tn23 = te[9],\n\t\t\t\t\tn24 = te[13];\n\t\t\tvar n31 = te[2],\n\t\t\t\t\tn32 = te[6],\n\t\t\t\t\tn33 = te[10],\n\t\t\t\t\tn34 = te[14];\n\t\t\tvar n41 = te[3],\n\t\t\t\t\tn42 = te[7],\n\t\t\t\t\tn43 = te[11],\n\t\t\t\t\tn44 = te[15]; //TODO: make this more efficient\n\t\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\t\treturn n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);\n\t\t};\n\n\t\t_proto.transpose = function transpose() {\n\t\t\tvar te = this.elements;\n\t\t\tvar tmp;\n\t\t\ttmp = te[1];\n\t\t\tte[1] = te[4];\n\t\t\tte[4] = tmp;\n\t\t\ttmp = te[2];\n\t\t\tte[2] = te[8];\n\t\t\tte[8] = tmp;\n\t\t\ttmp = te[6];\n\t\t\tte[6] = te[9];\n\t\t\tte[9] = tmp;\n\t\t\ttmp = te[3];\n\t\t\tte[3] = te[12];\n\t\t\tte[12] = tmp;\n\t\t\ttmp = te[7];\n\t\t\tte[7] = te[13];\n\t\t\tte[13] = tmp;\n\t\t\ttmp = te[11];\n\t\t\tte[11] = te[14];\n\t\t\tte[14] = tmp;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setPosition = function setPosition(x, y, z) {\n\t\t\tvar te = this.elements;\n\n\t\t\tif (x.isVector3) {\n\t\t\t\tte[12] = x.x;\n\t\t\t\tte[13] = x.y;\n\t\t\t\tte[14] = x.z;\n\t\t\t} else {\n\t\t\t\tte[12] = x;\n\t\t\t\tte[13] = y;\n\t\t\t\tte[14] = z;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.invert = function invert() {\n\t\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\t\tvar te = this.elements,\n\t\t\t\t\tn11 = te[0],\n\t\t\t\t\tn21 = te[1],\n\t\t\t\t\tn31 = te[2],\n\t\t\t\t\tn41 = te[3],\n\t\t\t\t\tn12 = te[4],\n\t\t\t\t\tn22 = te[5],\n\t\t\t\t\tn32 = te[6],\n\t\t\t\t\tn42 = te[7],\n\t\t\t\t\tn13 = te[8],\n\t\t\t\t\tn23 = te[9],\n\t\t\t\t\tn33 = te[10],\n\t\t\t\t\tn43 = te[11],\n\t\t\t\t\tn14 = te[12],\n\t\t\t\t\tn24 = te[13],\n\t\t\t\t\tn34 = te[14],\n\t\t\t\t\tn44 = te[15],\n\t\t\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\t\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\t\t\tif (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n\t\t\tvar detInv = 1 / det;\n\t\t\tte[0] = t11 * detInv;\n\t\t\tte[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;\n\t\t\tte[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;\n\t\t\tte[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;\n\t\t\tte[4] = t12 * detInv;\n\t\t\tte[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;\n\t\t\tte[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;\n\t\t\tte[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;\n\t\t\tte[8] = t13 * detInv;\n\t\t\tte[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;\n\t\t\tte[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;\n\t\t\tte[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;\n\t\t\tte[12] = t14 * detInv;\n\t\t\tte[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;\n\t\t\tte[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;\n\t\t\tte[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.scale = function scale(v) {\n\t\t\tvar te = this.elements;\n\t\t\tvar x = v.x,\n\t\t\t\t\ty = v.y,\n\t\t\t\t\tz = v.z;\n\t\t\tte[0] *= x;\n\t\t\tte[4] *= y;\n\t\t\tte[8] *= z;\n\t\t\tte[1] *= x;\n\t\t\tte[5] *= y;\n\t\t\tte[9] *= z;\n\t\t\tte[2] *= x;\n\t\t\tte[6] *= y;\n\t\t\tte[10] *= z;\n\t\t\tte[3] *= x;\n\t\t\tte[7] *= y;\n\t\t\tte[11] *= z;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getMaxScaleOnAxis = function getMaxScaleOnAxis() {\n\t\t\tvar te = this.elements;\n\t\t\tvar scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\n\t\t\tvar scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\n\t\t\tvar scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\n\t\t\treturn Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));\n\t\t};\n\n\t\t_proto.makeTranslation = function makeTranslation(x, y, z) {\n\t\t\tthis.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationX = function makeRotationX(theta) {\n\t\t\tvar c = Math.cos(theta),\n\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationY = function makeRotationY(theta) {\n\t\t\tvar c = Math.cos(theta),\n\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationZ = function makeRotationZ(theta) {\n\t\t\tvar c = Math.cos(theta),\n\t\t\t\t\ts = Math.sin(theta);\n\t\t\tthis.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeRotationAxis = function makeRotationAxis(axis, angle) {\n\t\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\t\t\tvar c = Math.cos(angle);\n\t\t\tvar s = Math.sin(angle);\n\t\t\tvar t = 1 - c;\n\t\t\tvar x = axis.x,\n\t\t\t\t\ty = axis.y,\n\t\t\t\t\tz = axis.z;\n\t\t\tvar tx = t * x,\n\t\t\t\t\tty = t * y;\n\t\t\tthis.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeScale = function makeScale(x, y, z) {\n\t\t\tthis.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeShear = function makeShear(x, y, z) {\n\t\t\tthis.set(1, y, z, 0, x, 1, z, 0, x, y, 1, 0, 0, 0, 0, 1);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.compose = function compose(position, quaternion, scale) {\n\t\t\tvar te = this.elements;\n\t\t\tvar x = quaternion._x,\n\t\t\t\t\ty = quaternion._y,\n\t\t\t\t\tz = quaternion._z,\n\t\t\t\t\tw = quaternion._w;\n\t\t\tvar x2 = x + x,\n\t\t\t\t\ty2 = y + y,\n\t\t\t\t\tz2 = z + z;\n\t\t\tvar xx = x * x2,\n\t\t\t\t\txy = x * y2,\n\t\t\t\t\txz = x * z2;\n\t\t\tvar yy = y * y2,\n\t\t\t\t\tyz = y * z2,\n\t\t\t\t\tzz = z * z2;\n\t\t\tvar wx = w * x2,\n\t\t\t\t\twy = w * y2,\n\t\t\t\t\twz = w * z2;\n\t\t\tvar sx = scale.x,\n\t\t\t\t\tsy = scale.y,\n\t\t\t\t\tsz = scale.z;\n\t\t\tte[0] = (1 - (yy + zz)) * sx;\n\t\t\tte[1] = (xy + wz) * sx;\n\t\t\tte[2] = (xz - wy) * sx;\n\t\t\tte[3] = 0;\n\t\t\tte[4] = (xy - wz) * sy;\n\t\t\tte[5] = (1 - (xx + zz)) * sy;\n\t\t\tte[6] = (yz + wx) * sy;\n\t\t\tte[7] = 0;\n\t\t\tte[8] = (xz + wy) * sz;\n\t\t\tte[9] = (yz - wx) * sz;\n\t\t\tte[10] = (1 - (xx + yy)) * sz;\n\t\t\tte[11] = 0;\n\t\t\tte[12] = position.x;\n\t\t\tte[13] = position.y;\n\t\t\tte[14] = position.z;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.decompose = function decompose(position, quaternion, scale) {\n\t\t\tvar te = this.elements;\n\n\t\t\tvar sx = _v1$1.set(te[0], te[1], te[2]).length();\n\n\t\t\tvar sy = _v1$1.set(te[4], te[5], te[6]).length();\n\n\t\t\tvar sz = _v1$1.set(te[8], te[9], te[10]).length(); // if determine is negative, we need to invert one scale\n\n\n\t\t\tvar det = this.determinant();\n\t\t\tif (det < 0) sx = -sx;\n\t\t\tposition.x = te[12];\n\t\t\tposition.y = te[13];\n\t\t\tposition.z = te[14]; // scale the rotation part\n\n\t\t\t_m1.copy(this);\n\n\t\t\tvar invSX = 1 / sx;\n\t\t\tvar invSY = 1 / sy;\n\t\t\tvar invSZ = 1 / sz;\n\t\t\t_m1.elements[0] *= invSX;\n\t\t\t_m1.elements[1] *= invSX;\n\t\t\t_m1.elements[2] *= invSX;\n\t\t\t_m1.elements[4] *= invSY;\n\t\t\t_m1.elements[5] *= invSY;\n\t\t\t_m1.elements[6] *= invSY;\n\t\t\t_m1.elements[8] *= invSZ;\n\t\t\t_m1.elements[9] *= invSZ;\n\t\t\t_m1.elements[10] *= invSZ;\n\t\t\tquaternion.setFromRotationMatrix(_m1);\n\t\t\tscale.x = sx;\n\t\t\tscale.y = sy;\n\t\t\tscale.z = sz;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makePerspective = function makePerspective(left, right, top, bottom, near, far) {\n\t\t\tif (far === undefined) {\n\t\t\t\tconsole.warn('THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.');\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tvar x = 2 * near / (right - left);\n\t\t\tvar y = 2 * near / (top - bottom);\n\t\t\tvar a = (right + left) / (right - left);\n\t\t\tvar b = (top + bottom) / (top - bottom);\n\t\t\tvar c = -(far + near) / (far - near);\n\t\t\tvar d = -2 * far * near / (far - near);\n\t\t\tte[0] = x;\n\t\t\tte[4] = 0;\n\t\t\tte[8] = a;\n\t\t\tte[12] = 0;\n\t\t\tte[1] = 0;\n\t\t\tte[5] = y;\n\t\t\tte[9] = b;\n\t\t\tte[13] = 0;\n\t\t\tte[2] = 0;\n\t\t\tte[6] = 0;\n\t\t\tte[10] = c;\n\t\t\tte[14] = d;\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = -1;\n\t\t\tte[15] = 0;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeOrthographic = function makeOrthographic(left, right, top, bottom, near, far) {\n\t\t\tvar te = this.elements;\n\t\t\tvar w = 1.0 / (right - left);\n\t\t\tvar h = 1.0 / (top - bottom);\n\t\t\tvar p = 1.0 / (far - near);\n\t\t\tvar x = (right + left) * w;\n\t\t\tvar y = (top + bottom) * h;\n\t\t\tvar z = (far + near) * p;\n\t\t\tte[0] = 2 * w;\n\t\t\tte[4] = 0;\n\t\t\tte[8] = 0;\n\t\t\tte[12] = -x;\n\t\t\tte[1] = 0;\n\t\t\tte[5] = 2 * h;\n\t\t\tte[9] = 0;\n\t\t\tte[13] = -y;\n\t\t\tte[2] = 0;\n\t\t\tte[6] = 0;\n\t\t\tte[10] = -2 * p;\n\t\t\tte[14] = -z;\n\t\t\tte[3] = 0;\n\t\t\tte[7] = 0;\n\t\t\tte[11] = 0;\n\t\t\tte[15] = 1;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(matrix) {\n\t\t\tvar te = this.elements;\n\t\t\tvar me = matrix.elements;\n\n\t\t\tfor (var i = 0; i < 16; i++) {\n\t\t\t\tif (te[i] !== me[i]) return false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < 16; i++) {\n\t\t\t\tthis.elements[i] = array[i + offset];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tvar te = this.elements;\n\t\t\tarray[offset] = te[0];\n\t\t\tarray[offset + 1] = te[1];\n\t\t\tarray[offset + 2] = te[2];\n\t\t\tarray[offset + 3] = te[3];\n\t\t\tarray[offset + 4] = te[4];\n\t\t\tarray[offset + 5] = te[5];\n\t\t\tarray[offset + 6] = te[6];\n\t\t\tarray[offset + 7] = te[7];\n\t\t\tarray[offset + 8] = te[8];\n\t\t\tarray[offset + 9] = te[9];\n\t\t\tarray[offset + 10] = te[10];\n\t\t\tarray[offset + 11] = te[11];\n\t\t\tarray[offset + 12] = te[12];\n\t\t\tarray[offset + 13] = te[13];\n\t\t\tarray[offset + 14] = te[14];\n\t\t\tarray[offset + 15] = te[15];\n\t\t\treturn array;\n\t\t};\n\n\t\treturn Matrix4;\n\t}();\n\n\tMatrix4.prototype.isMatrix4 = true;\n\n\tvar _v1$1 = /*@__PURE__*/new Vector3();\n\n\tvar _m1 = /*@__PURE__*/new Matrix4();\n\n\tvar _zero = /*@__PURE__*/new Vector3(0, 0, 0);\n\n\tvar _one = /*@__PURE__*/new Vector3(1, 1, 1);\n\n\tvar _x = /*@__PURE__*/new Vector3();\n\n\tvar _y = /*@__PURE__*/new Vector3();\n\n\tvar _z = /*@__PURE__*/new Vector3();\n\n\tvar _matrix = /*@__PURE__*/new Matrix4();\n\n\tvar _quaternion$1 = /*@__PURE__*/new Quaternion();\n\n\tvar Euler = /*#__PURE__*/function () {\n\t\tfunction Euler(x, y, z, order) {\n\t\t\tif (x === void 0) {\n\t\t\t\tx = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tif (z === void 0) {\n\t\t\t\tz = 0;\n\t\t\t}\n\n\t\t\tif (order === void 0) {\n\t\t\t\torder = Euler.DefaultOrder;\n\t\t\t}\n\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order;\n\t\t}\n\n\t\tvar _proto = Euler.prototype;\n\n\t\t_proto.set = function set(x, y, z, order) {\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\t\t\tthis._order = order || this._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this._x, this._y, this._z, this._order);\n\t\t};\n\n\t\t_proto.copy = function copy(euler) {\n\t\t\tthis._x = euler._x;\n\t\t\tthis._y = euler._y;\n\t\t\tthis._z = euler._z;\n\t\t\tthis._order = euler._order;\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromRotationMatrix = function setFromRotationMatrix(m, order, update) {\n\t\t\tvar clamp = MathUtils.clamp; // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\t\tvar te = m.elements;\n\t\t\tvar m11 = te[0],\n\t\t\t\t\tm12 = te[4],\n\t\t\t\t\tm13 = te[8];\n\t\t\tvar m21 = te[1],\n\t\t\t\t\tm22 = te[5],\n\t\t\t\t\tm23 = te[9];\n\t\t\tvar m31 = te[2],\n\t\t\t\t\tm32 = te[6],\n\t\t\t\t\tm33 = te[10];\n\t\t\torder = order || this._order;\n\n\t\t\tswitch (order) {\n\t\t\t\tcase 'XYZ':\n\t\t\t\t\tthis._y = Math.asin(clamp(m13, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m13) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m22);\n\t\t\t\t\t\tthis._z = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YXZ':\n\t\t\t\t\tthis._x = Math.asin(-clamp(m23, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m23) < 0.9999999) {\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m22);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m11);\n\t\t\t\t\t\tthis._z = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZXY':\n\t\t\t\t\tthis._x = Math.asin(clamp(m32, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m32) < 0.9999999) {\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m22);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._y = 0;\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m11);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ZYX':\n\t\t\t\t\tthis._y = Math.asin(-clamp(m31, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m31) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m33);\n\t\t\t\t\t\tthis._z = Math.atan2(m21, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._z = Math.atan2(-m12, m22);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'YZX':\n\t\t\t\t\tthis._z = Math.asin(clamp(m21, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m21) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m22);\n\t\t\t\t\t\tthis._y = Math.atan2(-m31, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = 0;\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m33);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'XZY':\n\t\t\t\t\tthis._z = Math.asin(-clamp(m12, -1, 1));\n\n\t\t\t\t\tif (Math.abs(m12) < 0.9999999) {\n\t\t\t\t\t\tthis._x = Math.atan2(m32, m22);\n\t\t\t\t\t\tthis._y = Math.atan2(m13, m11);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._x = Math.atan2(-m23, m33);\n\t\t\t\t\t\tthis._y = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order);\n\t\t\t}\n\n\t\t\tthis._order = order;\n\t\t\tif (update !== false) this._onChangeCallback();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromQuaternion = function setFromQuaternion(q, order, update) {\n\t\t\t_matrix.makeRotationFromQuaternion(q);\n\n\t\t\treturn this.setFromRotationMatrix(_matrix, order, update);\n\t\t};\n\n\t\t_proto.setFromVector3 = function setFromVector3(v, order) {\n\t\t\treturn this.set(v.x, v.y, v.z, order || this._order);\n\t\t};\n\n\t\t_proto.reorder = function reorder(newOrder) {\n\t\t\t// WARNING: this discards revolution information -bhouston\n\t\t\t_quaternion$1.setFromEuler(this);\n\n\t\t\treturn this.setFromQuaternion(_quaternion$1, newOrder);\n\t\t};\n\n\t\t_proto.equals = function equals(euler) {\n\t\t\treturn euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array) {\n\t\t\tthis._x = array[0];\n\t\t\tthis._y = array[1];\n\t\t\tthis._z = array[2];\n\t\t\tif (array[3] !== undefined) this._order = array[3];\n\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tarray[offset] = this._x;\n\t\t\tarray[offset + 1] = this._y;\n\t\t\tarray[offset + 2] = this._z;\n\t\t\tarray[offset + 3] = this._order;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.toVector3 = function toVector3(optionalResult) {\n\t\t\tif (optionalResult) {\n\t\t\t\treturn optionalResult.set(this._x, this._y, this._z);\n\t\t\t} else {\n\t\t\t\treturn new Vector3(this._x, this._y, this._z);\n\t\t\t}\n\t\t};\n\n\t\t_proto._onChange = function _onChange(callback) {\n\t\t\tthis._onChangeCallback = callback;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto._onChangeCallback = function _onChangeCallback() {};\n\n\t\t_createClass(Euler, [{\n\t\t\tkey: \"x\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._x;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._x = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"y\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._y;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._y = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"z\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._z;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._z = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"order\",\n\t\t\tget: function get() {\n\t\t\t\treturn this._order;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis._order = value;\n\n\t\t\t\tthis._onChangeCallback();\n\t\t\t}\n\t\t}]);\n\n\t\treturn Euler;\n\t}();\n\n\tEuler.prototype.isEuler = true;\n\tEuler.DefaultOrder = 'XYZ';\n\tEuler.RotationOrders = ['XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX'];\n\n\tvar Layers = /*#__PURE__*/function () {\n\t\tfunction Layers() {\n\t\t\tthis.mask = 1 | 0;\n\t\t}\n\n\t\tvar _proto = Layers.prototype;\n\n\t\t_proto.set = function set(channel) {\n\t\t\tthis.mask = 1 << channel | 0;\n\t\t};\n\n\t\t_proto.enable = function enable(channel) {\n\t\t\tthis.mask |= 1 << channel | 0;\n\t\t};\n\n\t\t_proto.enableAll = function enableAll() {\n\t\t\tthis.mask = 0xffffffff | 0;\n\t\t};\n\n\t\t_proto.toggle = function toggle(channel) {\n\t\t\tthis.mask ^= 1 << channel | 0;\n\t\t};\n\n\t\t_proto.disable = function disable(channel) {\n\t\t\tthis.mask &= ~(1 << channel | 0);\n\t\t};\n\n\t\t_proto.disableAll = function disableAll() {\n\t\t\tthis.mask = 0;\n\t\t};\n\n\t\t_proto.test = function test(layers) {\n\t\t\treturn (this.mask & layers.mask) !== 0;\n\t\t};\n\n\t\treturn Layers;\n\t}();\n\n\tvar _object3DId = 0;\n\n\tvar _v1$2 = new Vector3();\n\n\tvar _q1 = new Quaternion();\n\n\tvar _m1$1 = new Matrix4();\n\n\tvar _target = new Vector3();\n\n\tvar _position = new Vector3();\n\n\tvar _scale = new Vector3();\n\n\tvar _quaternion$2 = new Quaternion();\n\n\tvar _xAxis = new Vector3(1, 0, 0);\n\n\tvar _yAxis = new Vector3(0, 1, 0);\n\n\tvar _zAxis = new Vector3(0, 0, 1);\n\n\tvar _addedEvent = {\n\t\ttype: 'added'\n\t};\n\tvar _removedEvent = {\n\t\ttype: 'removed'\n\t};\n\n\tfunction Object3D() {\n\t\tObject.defineProperty(this, 'id', {\n\t\t\tvalue: _object3DId++\n\t\t});\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\t\tthis.up = Object3D.DefaultUp.clone();\n\t\tvar position = new Vector3();\n\t\tvar rotation = new Euler();\n\t\tvar quaternion = new Quaternion();\n\t\tvar scale = new Vector3(1, 1, 1);\n\n\t\tfunction onRotationChange() {\n\t\t\tquaternion.setFromEuler(rotation, false);\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\t\t\trotation.setFromQuaternion(quaternion, undefined, false);\n\t\t}\n\n\t\trotation._onChange(onRotationChange);\n\n\t\tquaternion._onChange(onQuaternionChange);\n\n\t\tObject.defineProperties(this, {\n\t\t\tposition: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t});\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\t\tthis.animations = [];\n\t\tthis.userData = {};\n\t}\n\n\tObject3D.DefaultUp = new Vector3(0, 1, 0);\n\tObject3D.DefaultMatrixAutoUpdate = true;\n\tObject3D.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: Object3D,\n\t\tisObject3D: true,\n\t\tonBeforeRender: function onBeforeRender() {},\n\t\tonAfterRender: function onAfterRender() {},\n\t\tapplyMatrix4: function applyMatrix4(matrix) {\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\t\t\tthis.matrix.premultiply(matrix);\n\t\t\tthis.matrix.decompose(this.position, this.quaternion, this.scale);\n\t\t},\n\t\tapplyQuaternion: function applyQuaternion(q) {\n\t\t\tthis.quaternion.premultiply(q);\n\t\t\treturn this;\n\t\t},\n\t\tsetRotationFromAxisAngle: function setRotationFromAxisAngle(axis, angle) {\n\t\t\t// assumes axis is normalized\n\t\t\tthis.quaternion.setFromAxisAngle(axis, angle);\n\t\t},\n\t\tsetRotationFromEuler: function setRotationFromEuler(euler) {\n\t\t\tthis.quaternion.setFromEuler(euler, true);\n\t\t},\n\t\tsetRotationFromMatrix: function setRotationFromMatrix(m) {\n\t\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\t\t\tthis.quaternion.setFromRotationMatrix(m);\n\t\t},\n\t\tsetRotationFromQuaternion: function setRotationFromQuaternion(q) {\n\t\t\t// assumes q is normalized\n\t\t\tthis.quaternion.copy(q);\n\t\t},\n\t\trotateOnAxis: function rotateOnAxis(axis, angle) {\n\t\t\t// rotate object on axis in object space\n\t\t\t// axis is assumed to be normalized\n\t\t\t_q1.setFromAxisAngle(axis, angle);\n\n\t\t\tthis.quaternion.multiply(_q1);\n\t\t\treturn this;\n\t\t},\n\t\trotateOnWorldAxis: function rotateOnWorldAxis(axis, angle) {\n\t\t\t// rotate object on axis in world space\n\t\t\t// axis is assumed to be normalized\n\t\t\t// method assumes no rotated parent\n\t\t\t_q1.setFromAxisAngle(axis, angle);\n\n\t\t\tthis.quaternion.premultiply(_q1);\n\t\t\treturn this;\n\t\t},\n\t\trotateX: function rotateX(angle) {\n\t\t\treturn this.rotateOnAxis(_xAxis, angle);\n\t\t},\n\t\trotateY: function rotateY(angle) {\n\t\t\treturn this.rotateOnAxis(_yAxis, angle);\n\t\t},\n\t\trotateZ: function rotateZ(angle) {\n\t\t\treturn this.rotateOnAxis(_zAxis, angle);\n\t\t},\n\t\ttranslateOnAxis: function translateOnAxis(axis, distance) {\n\t\t\t// translate object by distance along axis in object space\n\t\t\t// axis is assumed to be normalized\n\t\t\t_v1$2.copy(axis).applyQuaternion(this.quaternion);\n\n\t\t\tthis.position.add(_v1$2.multiplyScalar(distance));\n\t\t\treturn this;\n\t\t},\n\t\ttranslateX: function translateX(distance) {\n\t\t\treturn this.translateOnAxis(_xAxis, distance);\n\t\t},\n\t\ttranslateY: function translateY(distance) {\n\t\t\treturn this.translateOnAxis(_yAxis, distance);\n\t\t},\n\t\ttranslateZ: function translateZ(distance) {\n\t\t\treturn this.translateOnAxis(_zAxis, distance);\n\t\t},\n\t\tlocalToWorld: function localToWorld(vector) {\n\t\t\treturn vector.applyMatrix4(this.matrixWorld);\n\t\t},\n\t\tworldToLocal: function worldToLocal(vector) {\n\t\t\treturn vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());\n\t\t},\n\t\tlookAt: function lookAt(x, y, z) {\n\t\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\t\t\tif (x.isVector3) {\n\t\t\t\t_target.copy(x);\n\t\t\t} else {\n\t\t\t\t_target.set(x, y, z);\n\t\t\t}\n\n\t\t\tvar parent = this.parent;\n\t\t\tthis.updateWorldMatrix(true, false);\n\n\t\t\t_position.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\tif (this.isCamera || this.isLight) {\n\t\t\t\t_m1$1.lookAt(_position, _target, this.up);\n\t\t\t} else {\n\t\t\t\t_m1$1.lookAt(_target, _position, this.up);\n\t\t\t}\n\n\t\t\tthis.quaternion.setFromRotationMatrix(_m1$1);\n\n\t\t\tif (parent) {\n\t\t\t\t_m1$1.extractRotation(parent.matrixWorld);\n\n\t\t\t\t_q1.setFromRotationMatrix(_m1$1);\n\n\t\t\t\tthis.quaternion.premultiply(_q1.invert());\n\t\t\t}\n\t\t},\n\t\tadd: function add(object) {\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\t\t\tthis.add(arguments[i]);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (object === this) {\n\t\t\t\tconsole.error('THREE.Object3D.add: object can\\'t be added as a child of itself.', object);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (object && object.isObject3D) {\n\t\t\t\tif (object.parent !== null) {\n\t\t\t\t\tobject.parent.remove(object);\n\t\t\t\t}\n\n\t\t\t\tobject.parent = this;\n\t\t\t\tthis.children.push(object);\n\t\t\t\tobject.dispatchEvent(_addedEvent);\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Object3D.add: object not an instance of THREE.Object3D.', object);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tremove: function remove(object) {\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\t\t\tthis.remove(arguments[i]);\n\t\t\t\t}\n\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar index = this.children.indexOf(object);\n\n\t\t\tif (index !== -1) {\n\t\t\t\tobject.parent = null;\n\t\t\t\tthis.children.splice(index, 1);\n\t\t\t\tobject.dispatchEvent(_removedEvent);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tclear: function clear() {\n\t\t\tfor (var i = 0; i < this.children.length; i++) {\n\t\t\t\tvar object = this.children[i];\n\t\t\t\tobject.parent = null;\n\t\t\t\tobject.dispatchEvent(_removedEvent);\n\t\t\t}\n\n\t\t\tthis.children.length = 0;\n\t\t\treturn this;\n\t\t},\n\t\tattach: function attach(object) {\n\t\t\t// adds object as a child of this, while maintaining the object's world transform\n\t\t\tthis.updateWorldMatrix(true, false);\n\n\t\t\t_m1$1.copy(this.matrixWorld).invert();\n\n\t\t\tif (object.parent !== null) {\n\t\t\t\tobject.parent.updateWorldMatrix(true, false);\n\n\t\t\t\t_m1$1.multiply(object.parent.matrixWorld);\n\t\t\t}\n\n\t\t\tobject.applyMatrix4(_m1$1);\n\t\t\tthis.add(object);\n\t\t\tobject.updateWorldMatrix(false, true);\n\t\t\treturn this;\n\t\t},\n\t\tgetObjectById: function getObjectById(id) {\n\t\t\treturn this.getObjectByProperty('id', id);\n\t\t},\n\t\tgetObjectByName: function getObjectByName(name) {\n\t\t\treturn this.getObjectByProperty('name', name);\n\t\t},\n\t\tgetObjectByProperty: function getObjectByProperty(name, value) {\n\t\t\tif (this[name] === value) return this;\n\n\t\t\tfor (var i = 0, l = this.children.length; i < l; i++) {\n\t\t\t\tvar child = this.children[i];\n\t\t\t\tvar object = child.getObjectByProperty(name, value);\n\n\t\t\t\tif (object !== undefined) {\n\t\t\t\t\treturn object;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t},\n\t\tgetWorldPosition: function getWorldPosition(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldPosition() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\treturn target.setFromMatrixPosition(this.matrixWorld);\n\t\t},\n\t\tgetWorldQuaternion: function getWorldQuaternion(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldQuaternion() target is now required');\n\t\t\t\ttarget = new Quaternion();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tthis.matrixWorld.decompose(_position, target, _scale);\n\t\t\treturn target;\n\t\t},\n\t\tgetWorldScale: function getWorldScale(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldScale() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tthis.matrixWorld.decompose(_position, _quaternion$2, target);\n\t\t\treturn target;\n\t\t},\n\t\tgetWorldDirection: function getWorldDirection(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Object3D: .getWorldDirection() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tvar e = this.matrixWorld.elements;\n\t\t\treturn target.set(e[8], e[9], e[10]).normalize();\n\t\t},\n\t\traycast: function raycast() {},\n\t\ttraverse: function traverse(callback) {\n\t\t\tcallback(this);\n\t\t\tvar children = this.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].traverse(callback);\n\t\t\t}\n\t\t},\n\t\ttraverseVisible: function traverseVisible(callback) {\n\t\t\tif (this.visible === false) return;\n\t\t\tcallback(this);\n\t\t\tvar children = this.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].traverseVisible(callback);\n\t\t\t}\n\t\t},\n\t\ttraverseAncestors: function traverseAncestors(callback) {\n\t\t\tvar parent = this.parent;\n\n\t\t\tif (parent !== null) {\n\t\t\t\tcallback(parent);\n\t\t\t\tparent.traverseAncestors(callback);\n\t\t\t}\n\t\t},\n\t\tupdateMatrix: function updateMatrix() {\n\t\t\tthis.matrix.compose(this.position, this.quaternion, this.scale);\n\t\t\tthis.matrixWorldNeedsUpdate = true;\n\t\t},\n\t\tupdateMatrixWorld: function updateMatrixWorld(force) {\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\n\t\t\tif (this.matrixWorldNeedsUpdate || force) {\n\t\t\t\tif (this.parent === null) {\n\t\t\t\t\tthis.matrixWorld.copy(this.matrix);\n\t\t\t\t} else {\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n\t\t\t\t}\n\n\t\t\t\tthis.matrixWorldNeedsUpdate = false;\n\t\t\t\tforce = true;\n\t\t\t} // update children\n\n\n\t\t\tvar children = this.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\tchildren[i].updateMatrixWorld(force);\n\t\t\t}\n\t\t},\n\t\tupdateWorldMatrix: function updateWorldMatrix(updateParents, updateChildren) {\n\t\t\tvar parent = this.parent;\n\n\t\t\tif (updateParents === true && parent !== null) {\n\t\t\t\tparent.updateWorldMatrix(true, false);\n\t\t\t}\n\n\t\t\tif (this.matrixAutoUpdate) this.updateMatrix();\n\n\t\t\tif (this.parent === null) {\n\t\t\t\tthis.matrixWorld.copy(this.matrix);\n\t\t\t} else {\n\t\t\t\tthis.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n\t\t\t} // update children\n\n\n\t\t\tif (updateChildren === true) {\n\t\t\t\tvar children = this.children;\n\n\t\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\t\tchildren[i].updateWorldMatrix(false, true);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\t// meta is a string when called from JSON.stringify\n\t\t\tvar isRootObject = meta === undefined || typeof meta === 'string';\n\t\t\tvar output = {}; // meta is a hash used to collect geometries, materials.\n\t\t\t// not providing it implies that this is the root object\n\t\t\t// being serialized.\n\n\t\t\tif (isRootObject) {\n\t\t\t\t// initialize meta obj\n\t\t\t\tmeta = {\n\t\t\t\t\tgeometries: {},\n\t\t\t\t\tmaterials: {},\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {},\n\t\t\t\t\tshapes: {},\n\t\t\t\t\tskeletons: {},\n\t\t\t\t\tanimations: {}\n\t\t\t\t};\n\t\t\t\toutput.metadata = {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Object',\n\t\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t\t};\n\t\t\t} // standard Object3D serialization\n\n\n\t\t\tvar object = {};\n\t\t\tobject.uuid = this.uuid;\n\t\t\tobject.type = this.type;\n\t\t\tif (this.name !== '') object.name = this.name;\n\t\t\tif (this.castShadow === true) object.castShadow = true;\n\t\t\tif (this.receiveShadow === true) object.receiveShadow = true;\n\t\t\tif (this.visible === false) object.visible = false;\n\t\t\tif (this.frustumCulled === false) object.frustumCulled = false;\n\t\t\tif (this.renderOrder !== 0) object.renderOrder = this.renderOrder;\n\t\t\tif (JSON.stringify(this.userData) !== '{}') object.userData = this.userData;\n\t\t\tobject.layers = this.layers.mask;\n\t\t\tobject.matrix = this.matrix.toArray();\n\t\t\tif (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false; // object specific properties\n\n\t\t\tif (this.isInstancedMesh) {\n\t\t\t\tobject.type = 'InstancedMesh';\n\t\t\t\tobject.count = this.count;\n\t\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\t\t\t} //\n\n\n\t\t\tfunction serialize(library, element) {\n\t\t\t\tif (library[element.uuid] === undefined) {\n\t\t\t\t\tlibrary[element.uuid] = element.toJSON(meta);\n\t\t\t\t}\n\n\t\t\t\treturn element.uuid;\n\t\t\t}\n\n\t\t\tif (this.isMesh || this.isLine || this.isPoints) {\n\t\t\t\tobject.geometry = serialize(meta.geometries, this.geometry);\n\t\t\t\tvar parameters = this.geometry.parameters;\n\n\t\t\t\tif (parameters !== undefined && parameters.shapes !== undefined) {\n\t\t\t\t\tvar shapes = parameters.shapes;\n\n\t\t\t\t\tif (Array.isArray(shapes)) {\n\t\t\t\t\t\tfor (var i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\t\t\t\tvar shape = shapes[i];\n\t\t\t\t\t\t\tserialize(meta.shapes, shape);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tserialize(meta.shapes, shapes);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.isSkinnedMesh) {\n\t\t\t\tobject.bindMode = this.bindMode;\n\t\t\t\tobject.bindMatrix = this.bindMatrix.toArray();\n\n\t\t\t\tif (this.skeleton !== undefined) {\n\t\t\t\t\tserialize(meta.skeletons, this.skeleton);\n\t\t\t\t\tobject.skeleton = this.skeleton.uuid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.material !== undefined) {\n\t\t\t\tif (Array.isArray(this.material)) {\n\t\t\t\t\tvar uuids = [];\n\n\t\t\t\t\tfor (var _i = 0, _l = this.material.length; _i < _l; _i++) {\n\t\t\t\t\t\tuuids.push(serialize(meta.materials, this.material[_i]));\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.material = uuids;\n\t\t\t\t} else {\n\t\t\t\t\tobject.material = serialize(meta.materials, this.material);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tif (this.children.length > 0) {\n\t\t\t\tobject.children = [];\n\n\t\t\t\tfor (var _i2 = 0; _i2 < this.children.length; _i2++) {\n\t\t\t\t\tobject.children.push(this.children[_i2].toJSON(meta).object);\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tif (this.animations.length > 0) {\n\t\t\t\tobject.animations = [];\n\n\t\t\t\tfor (var _i3 = 0; _i3 < this.animations.length; _i3++) {\n\t\t\t\t\tvar animation = this.animations[_i3];\n\t\t\t\t\tobject.animations.push(serialize(meta.animations, animation));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isRootObject) {\n\t\t\t\tvar geometries = extractFromCache(meta.geometries);\n\t\t\t\tvar materials = extractFromCache(meta.materials);\n\t\t\t\tvar textures = extractFromCache(meta.textures);\n\t\t\t\tvar images = extractFromCache(meta.images);\n\n\t\t\t\tvar _shapes = extractFromCache(meta.shapes);\n\n\t\t\t\tvar skeletons = extractFromCache(meta.skeletons);\n\t\t\t\tvar animations = extractFromCache(meta.animations);\n\t\t\t\tif (geometries.length > 0) output.geometries = geometries;\n\t\t\t\tif (materials.length > 0) output.materials = materials;\n\t\t\t\tif (textures.length > 0) output.textures = textures;\n\t\t\t\tif (images.length > 0) output.images = images;\n\t\t\t\tif (_shapes.length > 0) output.shapes = _shapes;\n\t\t\t\tif (skeletons.length > 0) output.skeletons = skeletons;\n\t\t\t\tif (animations.length > 0) output.animations = animations;\n\t\t\t}\n\n\t\t\toutput.object = object;\n\t\t\treturn output; // extract data from the cache hash\n\t\t\t// remove metadata on each item\n\t\t\t// and return as array\n\n\t\t\tfunction extractFromCache(cache) {\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor (var key in cache) {\n\t\t\t\t\tvar data = cache[key];\n\t\t\t\t\tdelete data.metadata;\n\t\t\t\t\tvalues.push(data);\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t}\n\t\t},\n\t\tclone: function clone(recursive) {\n\t\t\treturn new this.constructor().copy(this, recursive);\n\t\t},\n\t\tcopy: function copy(source, recursive) {\n\t\t\tif (recursive === void 0) {\n\t\t\t\trecursive = true;\n\t\t\t}\n\n\t\t\tthis.name = source.name;\n\t\t\tthis.up.copy(source.up);\n\t\t\tthis.position.copy(source.position);\n\t\t\tthis.rotation.order = source.rotation.order;\n\t\t\tthis.quaternion.copy(source.quaternion);\n\t\t\tthis.scale.copy(source.scale);\n\t\t\tthis.matrix.copy(source.matrix);\n\t\t\tthis.matrixWorld.copy(source.matrixWorld);\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\t\t\tthis.layers.mask = source.layers.mask;\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.castShadow = source.castShadow;\n\t\t\tthis.receiveShadow = source.receiveShadow;\n\t\t\tthis.frustumCulled = source.frustumCulled;\n\t\t\tthis.renderOrder = source.renderOrder;\n\t\t\tthis.userData = JSON.parse(JSON.stringify(source.userData));\n\n\t\t\tif (recursive === true) {\n\t\t\t\tfor (var i = 0; i < source.children.length; i++) {\n\t\t\t\t\tvar child = source.children[i];\n\t\t\t\t\tthis.add(child.clone());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tvar _vector1 = /*@__PURE__*/new Vector3();\n\n\tvar _vector2 = /*@__PURE__*/new Vector3();\n\n\tvar _normalMatrix = /*@__PURE__*/new Matrix3();\n\n\tvar Plane = /*#__PURE__*/function () {\n\t\tfunction Plane(normal, constant) {\n\t\t\tif (normal === void 0) {\n\t\t\t\tnormal = new Vector3(1, 0, 0);\n\t\t\t}\n\n\t\t\tif (constant === void 0) {\n\t\t\t\tconstant = 0;\n\t\t\t}\n\n\t\t\t// normal is assumed to be normalized\n\t\t\tthis.normal = normal;\n\t\t\tthis.constant = constant;\n\t\t}\n\n\t\tvar _proto = Plane.prototype;\n\n\t\t_proto.set = function set(normal, constant) {\n\t\t\tthis.normal.copy(normal);\n\t\t\tthis.constant = constant;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setComponents = function setComponents(x, y, z, w) {\n\t\t\tthis.normal.set(x, y, z);\n\t\t\tthis.constant = w;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromNormalAndCoplanarPoint = function setFromNormalAndCoplanarPoint(normal, point) {\n\t\t\tthis.normal.copy(normal);\n\t\t\tthis.constant = -point.dot(this.normal);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromCoplanarPoints = function setFromCoplanarPoints(a, b, c) {\n\t\t\tvar normal = _vector1.subVectors(c, b).cross(_vector2.subVectors(a, b)).normalize(); // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\n\t\t\tthis.setFromNormalAndCoplanarPoint(normal, a);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copy = function copy(plane) {\n\t\t\tthis.normal.copy(plane.normal);\n\t\t\tthis.constant = plane.constant;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.normalize = function normalize() {\n\t\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\t\t\tvar inverseNormalLength = 1.0 / this.normal.length();\n\t\t\tthis.normal.multiplyScalar(inverseNormalLength);\n\t\t\tthis.constant *= inverseNormalLength;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.negate = function negate() {\n\t\t\tthis.constant *= -1;\n\t\t\tthis.normal.negate();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.distanceToPoint = function distanceToPoint(point) {\n\t\t\treturn this.normal.dot(point) + this.constant;\n\t\t};\n\n\t\t_proto.distanceToSphere = function distanceToSphere(sphere) {\n\t\t\treturn this.distanceToPoint(sphere.center) - sphere.radius;\n\t\t};\n\n\t\t_proto.projectPoint = function projectPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .projectPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.normal).multiplyScalar(-this.distanceToPoint(point)).add(point);\n\t\t};\n\n\t\t_proto.intersectLine = function intersectLine(line, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .intersectLine() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tvar direction = line.delta(_vector1);\n\t\t\tvar denominator = this.normal.dot(direction);\n\n\t\t\tif (denominator === 0) {\n\t\t\t\t// line is coplanar, return origin\n\t\t\t\tif (this.distanceToPoint(line.start) === 0) {\n\t\t\t\t\treturn target.copy(line.start);\n\t\t\t\t} // Unsure if this is the correct method to handle this case.\n\n\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tvar t = -(line.start.dot(this.normal) + this.constant) / denominator;\n\n\t\t\tif (t < 0 || t > 1) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\treturn target.copy(direction).multiplyScalar(t).add(line.start);\n\t\t};\n\n\t\t_proto.intersectsLine = function intersectsLine(line) {\n\t\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\t\t\tvar startSign = this.distanceToPoint(line.start);\n\t\t\tvar endSign = this.distanceToPoint(line.end);\n\t\t\treturn startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\treturn box.intersectsPlane(this);\n\t\t};\n\n\t\t_proto.intersectsSphere = function intersectsSphere(sphere) {\n\t\t\treturn sphere.intersectsPlane(this);\n\t\t};\n\n\t\t_proto.coplanarPoint = function coplanarPoint(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Plane: .coplanarPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.copy(this.normal).multiplyScalar(-this.constant);\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(matrix, optionalNormalMatrix) {\n\t\t\tvar normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);\n\n\t\t\tvar referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);\n\t\t\tvar normal = this.normal.applyMatrix3(normalMatrix).normalize();\n\t\t\tthis.constant = -referencePoint.dot(normal);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.translate = function translate(offset) {\n\t\t\tthis.constant -= offset.dot(this.normal);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(plane) {\n\t\t\treturn plane.normal.equals(this.normal) && plane.constant === this.constant;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\treturn Plane;\n\t}();\n\n\tPlane.prototype.isPlane = true;\n\n\tvar _v0$1 = /*@__PURE__*/new Vector3();\n\n\tvar _v1$3 = /*@__PURE__*/new Vector3();\n\n\tvar _v2$1 = /*@__PURE__*/new Vector3();\n\n\tvar _v3 = /*@__PURE__*/new Vector3();\n\n\tvar _vab = /*@__PURE__*/new Vector3();\n\n\tvar _vac = /*@__PURE__*/new Vector3();\n\n\tvar _vbc = /*@__PURE__*/new Vector3();\n\n\tvar _vap = /*@__PURE__*/new Vector3();\n\n\tvar _vbp = /*@__PURE__*/new Vector3();\n\n\tvar _vcp = /*@__PURE__*/new Vector3();\n\n\tvar Triangle = /*#__PURE__*/function () {\n\t\tfunction Triangle(a, b, c) {\n\t\t\tif (a === void 0) {\n\t\t\t\ta = new Vector3();\n\t\t\t}\n\n\t\t\tif (b === void 0) {\n\t\t\t\tb = new Vector3();\n\t\t\t}\n\n\t\t\tif (c === void 0) {\n\t\t\t\tc = new Vector3();\n\t\t\t}\n\n\t\t\tthis.a = a;\n\t\t\tthis.b = b;\n\t\t\tthis.c = c;\n\t\t}\n\n\t\tTriangle.getNormal = function getNormal(a, b, c, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getNormal() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\ttarget.subVectors(c, b);\n\n\t\t\t_v0$1.subVectors(a, b);\n\n\t\t\ttarget.cross(_v0$1);\n\t\t\tvar targetLengthSq = target.lengthSq();\n\n\t\t\tif (targetLengthSq > 0) {\n\t\t\t\treturn target.multiplyScalar(1 / Math.sqrt(targetLengthSq));\n\t\t\t}\n\n\t\t\treturn target.set(0, 0, 0);\n\t\t} // static/instance method to calculate barycentric coordinates\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\t\t;\n\n\t\tTriangle.getBarycoord = function getBarycoord(point, a, b, c, target) {\n\t\t\t_v0$1.subVectors(c, a);\n\n\t\t\t_v1$3.subVectors(b, a);\n\n\t\t\t_v2$1.subVectors(point, a);\n\n\t\t\tvar dot00 = _v0$1.dot(_v0$1);\n\n\t\t\tvar dot01 = _v0$1.dot(_v1$3);\n\n\t\t\tvar dot02 = _v0$1.dot(_v2$1);\n\n\t\t\tvar dot11 = _v1$3.dot(_v1$3);\n\n\t\t\tvar dot12 = _v1$3.dot(_v2$1);\n\n\t\t\tvar denom = dot00 * dot11 - dot01 * dot01;\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getBarycoord() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t} // collinear or singular triangle\n\n\n\t\t\tif (denom === 0) {\n\t\t\t\t// arbitrary location outside of triangle?\n\t\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\t\treturn target.set(-2, -1, -1);\n\t\t\t}\n\n\t\t\tvar invDenom = 1 / denom;\n\t\t\tvar u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n\t\t\tvar v = (dot00 * dot12 - dot01 * dot02) * invDenom; // barycentric coordinates must always sum to 1\n\n\t\t\treturn target.set(1 - u - v, v, u);\n\t\t};\n\n\t\tTriangle.containsPoint = function containsPoint(point, a, b, c) {\n\t\t\tthis.getBarycoord(point, a, b, c, _v3);\n\t\t\treturn _v3.x >= 0 && _v3.y >= 0 && _v3.x + _v3.y <= 1;\n\t\t};\n\n\t\tTriangle.getUV = function getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {\n\t\t\tthis.getBarycoord(point, p1, p2, p3, _v3);\n\t\t\ttarget.set(0, 0);\n\t\t\ttarget.addScaledVector(uv1, _v3.x);\n\t\t\ttarget.addScaledVector(uv2, _v3.y);\n\t\t\ttarget.addScaledVector(uv3, _v3.z);\n\t\t\treturn target;\n\t\t};\n\n\t\tTriangle.isFrontFacing = function isFrontFacing(a, b, c, direction) {\n\t\t\t_v0$1.subVectors(c, b);\n\n\t\t\t_v1$3.subVectors(a, b); // strictly front facing\n\n\n\t\t\treturn _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;\n\t\t};\n\n\t\tvar _proto = Triangle.prototype;\n\n\t\t_proto.set = function set(a, b, c) {\n\t\t\tthis.a.copy(a);\n\t\t\tthis.b.copy(b);\n\t\t\tthis.c.copy(c);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromPointsAndIndices = function setFromPointsAndIndices(points, i0, i1, i2) {\n\t\t\tthis.a.copy(points[i0]);\n\t\t\tthis.b.copy(points[i1]);\n\t\t\tthis.c.copy(points[i2]);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(triangle) {\n\t\t\tthis.a.copy(triangle.a);\n\t\t\tthis.b.copy(triangle.b);\n\t\t\tthis.c.copy(triangle.c);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getArea = function getArea() {\n\t\t\t_v0$1.subVectors(this.c, this.b);\n\n\t\t\t_v1$3.subVectors(this.a, this.b);\n\n\t\t\treturn _v0$1.cross(_v1$3).length() * 0.5;\n\t\t};\n\n\t\t_proto.getMidpoint = function getMidpoint(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getMidpoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);\n\t\t};\n\n\t\t_proto.getNormal = function getNormal(target) {\n\t\t\treturn Triangle.getNormal(this.a, this.b, this.c, target);\n\t\t};\n\n\t\t_proto.getPlane = function getPlane(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .getPlane() target is now required');\n\t\t\t\ttarget = new Plane();\n\t\t\t}\n\n\t\t\treturn target.setFromCoplanarPoints(this.a, this.b, this.c);\n\t\t};\n\n\t\t_proto.getBarycoord = function getBarycoord(point, target) {\n\t\t\treturn Triangle.getBarycoord(point, this.a, this.b, this.c, target);\n\t\t};\n\n\t\t_proto.getUV = function getUV(point, uv1, uv2, uv3, target) {\n\t\t\treturn Triangle.getUV(point, this.a, this.b, this.c, uv1, uv2, uv3, target);\n\t\t};\n\n\t\t_proto.containsPoint = function containsPoint(point) {\n\t\t\treturn Triangle.containsPoint(point, this.a, this.b, this.c);\n\t\t};\n\n\t\t_proto.isFrontFacing = function isFrontFacing(direction) {\n\t\t\treturn Triangle.isFrontFacing(this.a, this.b, this.c, direction);\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\treturn box.intersectsTriangle(this);\n\t\t};\n\n\t\t_proto.closestPointToPoint = function closestPointToPoint(p, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Triangle: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tvar a = this.a,\n\t\t\t\t\tb = this.b,\n\t\t\t\t\tc = this.c;\n\t\t\tvar v, w; // algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t\t_vab.subVectors(b, a);\n\n\t\t\t_vac.subVectors(c, a);\n\n\t\t\t_vap.subVectors(p, a);\n\n\t\t\tvar d1 = _vab.dot(_vap);\n\n\t\t\tvar d2 = _vac.dot(_vap);\n\n\t\t\tif (d1 <= 0 && d2 <= 0) {\n\t\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\t\treturn target.copy(a);\n\t\t\t}\n\n\t\t\t_vbp.subVectors(p, b);\n\n\t\t\tvar d3 = _vab.dot(_vbp);\n\n\t\t\tvar d4 = _vac.dot(_vbp);\n\n\t\t\tif (d3 >= 0 && d4 <= d3) {\n\t\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\t\treturn target.copy(b);\n\t\t\t}\n\n\t\t\tvar vc = d1 * d4 - d3 * d2;\n\n\t\t\tif (vc <= 0 && d1 >= 0 && d3 <= 0) {\n\t\t\t\tv = d1 / (d1 - d3); // edge region of AB; barycentric coords (1-v, v, 0)\n\n\t\t\t\treturn target.copy(a).addScaledVector(_vab, v);\n\t\t\t}\n\n\t\t\t_vcp.subVectors(p, c);\n\n\t\t\tvar d5 = _vab.dot(_vcp);\n\n\t\t\tvar d6 = _vac.dot(_vcp);\n\n\t\t\tif (d6 >= 0 && d5 <= d6) {\n\t\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\t\treturn target.copy(c);\n\t\t\t}\n\n\t\t\tvar vb = d5 * d2 - d1 * d6;\n\n\t\t\tif (vb <= 0 && d2 >= 0 && d6 <= 0) {\n\t\t\t\tw = d2 / (d2 - d6); // edge region of AC; barycentric coords (1-w, 0, w)\n\n\t\t\t\treturn target.copy(a).addScaledVector(_vac, w);\n\t\t\t}\n\n\t\t\tvar va = d3 * d6 - d5 * d4;\n\n\t\t\tif (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {\n\t\t\t\t_vbc.subVectors(c, b);\n\n\t\t\t\tw = (d4 - d3) / (d4 - d3 + (d5 - d6)); // edge region of BC; barycentric coords (0, 1-w, w)\n\n\t\t\t\treturn target.copy(b).addScaledVector(_vbc, w); // edge region of BC\n\t\t\t} // face region\n\n\n\t\t\tvar denom = 1 / (va + vb + vc); // u = va * denom\n\n\t\t\tv = vb * denom;\n\t\t\tw = vc * denom;\n\t\t\treturn target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);\n\t\t};\n\n\t\t_proto.equals = function equals(triangle) {\n\t\t\treturn triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);\n\t\t};\n\n\t\treturn Triangle;\n\t}();\n\n\tvar materialId = 0;\n\n\tfunction Material() {\n\t\tObject.defineProperty(this, 'id', {\n\t\t\tvalue: materialId++\n\t\t});\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\t\tthis.fog = true;\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.vertexColors = false;\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\t\tthis.stencilWriteMask = 0xff;\n\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\tthis.stencilRef = 0;\n\t\tthis.stencilFuncMask = 0xff;\n\t\tthis.stencilFail = KeepStencilOp;\n\t\tthis.stencilZFail = KeepStencilOp;\n\t\tthis.stencilZPass = KeepStencilOp;\n\t\tthis.stencilWrite = false;\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\t\tthis.shadowSide = null;\n\t\tthis.colorWrite = true;\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\t\tthis.dithering = false;\n\t\tthis.alphaTest = 0;\n\t\tthis.premultipliedAlpha = false;\n\t\tthis.visible = true;\n\t\tthis.toneMapped = true;\n\t\tthis.userData = {};\n\t\tthis.version = 0;\n\t}\n\n\tMaterial.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: Material,\n\t\tisMaterial: true,\n\t\tonBeforeCompile: function onBeforeCompile()\n\t\t/* shaderobject, renderer */\n\t\t{},\n\t\tcustomProgramCacheKey: function customProgramCacheKey() {\n\t\t\treturn this.onBeforeCompile.toString();\n\t\t},\n\t\tsetValues: function setValues(values) {\n\t\t\tif (values === undefined) return;\n\n\t\t\tfor (var key in values) {\n\t\t\t\tvar newValue = values[key];\n\n\t\t\t\tif (newValue === undefined) {\n\t\t\t\t\tconsole.warn('THREE.Material: \\'' + key + '\\' parameter is undefined.');\n\t\t\t\t\tcontinue;\n\t\t\t\t} // for backward compatability if shading is set in the constructor\n\n\n\t\t\t\tif (key === 'shading') {\n\t\t\t\t\tconsole.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t\t\tthis.flatShading = newValue === FlatShading ? true : false;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tvar currentValue = this[key];\n\n\t\t\t\tif (currentValue === undefined) {\n\t\t\t\t\tconsole.warn('THREE.' + this.type + ': \\'' + key + '\\' is not a property of this material.');\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (currentValue && currentValue.isColor) {\n\t\t\t\t\tcurrentValue.set(newValue);\n\t\t\t\t} else if (currentValue && currentValue.isVector3 && newValue && newValue.isVector3) {\n\t\t\t\t\tcurrentValue.copy(newValue);\n\t\t\t\t} else {\n\t\t\t\t\tthis[key] = newValue;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar isRoot = meta === undefined || typeof meta === 'string';\n\n\t\t\tif (isRoot) {\n\t\t\t\tmeta = {\n\t\t\t\t\ttextures: {},\n\t\t\t\t\timages: {}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Material',\n\t\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t\t}\n\t\t\t}; // standard Material serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (this.color && this.color.isColor) data.color = this.color.getHex();\n\t\t\tif (this.roughness !== undefined) data.roughness = this.roughness;\n\t\t\tif (this.metalness !== undefined) data.metalness = this.metalness;\n\t\t\tif (this.sheen && this.sheen.isColor) data.sheen = this.sheen.getHex();\n\t\t\tif (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();\n\t\t\tif (this.emissiveIntensity && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;\n\t\t\tif (this.specular && this.specular.isColor) data.specular = this.specular.getHex();\n\t\t\tif (this.shininess !== undefined) data.shininess = this.shininess;\n\t\t\tif (this.clearcoat !== undefined) data.clearcoat = this.clearcoat;\n\t\t\tif (this.clearcoatRoughness !== undefined) data.clearcoatRoughness = this.clearcoatRoughness;\n\n\t\t\tif (this.clearcoatMap && this.clearcoatMap.isTexture) {\n\t\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {\n\t\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {\n\t\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;\n\t\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\t\t\t}\n\n\t\t\tif (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;\n\t\t\tif (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;\n\t\t\tif (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;\n\n\t\t\tif (this.lightMap && this.lightMap.isTexture) {\n\t\t\t\tdata.lightMap = this.lightMap.toJSON(meta).uuid;\n\t\t\t\tdata.lightMapIntensity = this.lightMapIntensity;\n\t\t\t}\n\n\t\t\tif (this.aoMap && this.aoMap.isTexture) {\n\t\t\t\tdata.aoMap = this.aoMap.toJSON(meta).uuid;\n\t\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\t\t\t}\n\n\t\t\tif (this.bumpMap && this.bumpMap.isTexture) {\n\t\t\t\tdata.bumpMap = this.bumpMap.toJSON(meta).uuid;\n\t\t\t\tdata.bumpScale = this.bumpScale;\n\t\t\t}\n\n\t\t\tif (this.normalMap && this.normalMap.isTexture) {\n\t\t\t\tdata.normalMap = this.normalMap.toJSON(meta).uuid;\n\t\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\t\tdata.normalScale = this.normalScale.toArray();\n\t\t\t}\n\n\t\t\tif (this.displacementMap && this.displacementMap.isTexture) {\n\t\t\t\tdata.displacementMap = this.displacementMap.toJSON(meta).uuid;\n\t\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\t\tdata.displacementBias = this.displacementBias;\n\t\t\t}\n\n\t\t\tif (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;\n\t\t\tif (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;\n\t\t\tif (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;\n\t\t\tif (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;\n\n\t\t\tif (this.envMap && this.envMap.isTexture) {\n\t\t\t\tdata.envMap = this.envMap.toJSON(meta).uuid;\n\t\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\n\n\t\t\t\tdata.refractionRatio = this.refractionRatio;\n\t\t\t\tif (this.combine !== undefined) data.combine = this.combine;\n\t\t\t\tif (this.envMapIntensity !== undefined) data.envMapIntensity = this.envMapIntensity;\n\t\t\t}\n\n\t\t\tif (this.gradientMap && this.gradientMap.isTexture) {\n\t\t\t\tdata.gradientMap = this.gradientMap.toJSON(meta).uuid;\n\t\t\t}\n\n\t\t\tif (this.size !== undefined) data.size = this.size;\n\t\t\tif (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;\n\t\t\tif (this.blending !== NormalBlending) data.blending = this.blending;\n\t\t\tif (this.side !== FrontSide) data.side = this.side;\n\t\t\tif (this.vertexColors) data.vertexColors = true;\n\t\t\tif (this.opacity < 1) data.opacity = this.opacity;\n\t\t\tif (this.transparent === true) data.transparent = this.transparent;\n\t\t\tdata.depthFunc = this.depthFunc;\n\t\t\tdata.depthTest = this.depthTest;\n\t\t\tdata.depthWrite = this.depthWrite;\n\t\t\tdata.stencilWrite = this.stencilWrite;\n\t\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\t\tdata.stencilFunc = this.stencilFunc;\n\t\t\tdata.stencilRef = this.stencilRef;\n\t\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\t\tdata.stencilFail = this.stencilFail;\n\t\t\tdata.stencilZFail = this.stencilZFail;\n\t\t\tdata.stencilZPass = this.stencilZPass; // rotation (SpriteMaterial)\n\n\t\t\tif (this.rotation && this.rotation !== 0) data.rotation = this.rotation;\n\t\t\tif (this.polygonOffset === true) data.polygonOffset = true;\n\t\t\tif (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;\n\t\t\tif (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;\n\t\t\tif (this.linewidth && this.linewidth !== 1) data.linewidth = this.linewidth;\n\t\t\tif (this.dashSize !== undefined) data.dashSize = this.dashSize;\n\t\t\tif (this.gapSize !== undefined) data.gapSize = this.gapSize;\n\t\t\tif (this.scale !== undefined) data.scale = this.scale;\n\t\t\tif (this.dithering === true) data.dithering = true;\n\t\t\tif (this.alphaTest > 0) data.alphaTest = this.alphaTest;\n\t\t\tif (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;\n\t\t\tif (this.wireframe === true) data.wireframe = this.wireframe;\n\t\t\tif (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\t\tif (this.wireframeLinecap !== 'round') data.wireframeLinecap = this.wireframeLinecap;\n\t\t\tif (this.wireframeLinejoin !== 'round') data.wireframeLinejoin = this.wireframeLinejoin;\n\t\t\tif (this.morphTargets === true) data.morphTargets = true;\n\t\t\tif (this.morphNormals === true) data.morphNormals = true;\n\t\t\tif (this.skinning === true) data.skinning = true;\n\t\t\tif (this.flatShading === true) data.flatShading = this.flatShading;\n\t\t\tif (this.visible === false) data.visible = false;\n\t\t\tif (this.toneMapped === false) data.toneMapped = false;\n\t\t\tif (JSON.stringify(this.userData) !== '{}') data.userData = this.userData; // TODO: Copied from Object3D.toJSON\n\n\t\t\tfunction extractFromCache(cache) {\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor (var key in cache) {\n\t\t\t\t\tvar _data = cache[key];\n\t\t\t\t\tdelete _data.metadata;\n\t\t\t\t\tvalues.push(_data);\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t}\n\n\t\t\tif (isRoot) {\n\t\t\t\tvar textures = extractFromCache(meta.textures);\n\t\t\t\tvar images = extractFromCache(meta.images);\n\t\t\t\tif (textures.length > 0) data.textures = textures;\n\t\t\t\tif (images.length > 0) data.images = images;\n\t\t\t}\n\n\t\t\treturn data;\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.fog = source.fog;\n\t\t\tthis.blending = source.blending;\n\t\t\tthis.side = source.side;\n\t\t\tthis.vertexColors = source.vertexColors;\n\t\t\tthis.opacity = source.opacity;\n\t\t\tthis.transparent = source.transparent;\n\t\t\tthis.blendSrc = source.blendSrc;\n\t\t\tthis.blendDst = source.blendDst;\n\t\t\tthis.blendEquation = source.blendEquation;\n\t\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\t\t\tthis.depthFunc = source.depthFunc;\n\t\t\tthis.depthTest = source.depthTest;\n\t\t\tthis.depthWrite = source.depthWrite;\n\t\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\t\tthis.stencilFunc = source.stencilFunc;\n\t\t\tthis.stencilRef = source.stencilRef;\n\t\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\t\tthis.stencilFail = source.stencilFail;\n\t\t\tthis.stencilZFail = source.stencilZFail;\n\t\t\tthis.stencilZPass = source.stencilZPass;\n\t\t\tthis.stencilWrite = source.stencilWrite;\n\t\t\tvar srcPlanes = source.clippingPlanes;\n\t\t\tvar dstPlanes = null;\n\n\t\t\tif (srcPlanes !== null) {\n\t\t\t\tvar n = srcPlanes.length;\n\t\t\t\tdstPlanes = new Array(n);\n\n\t\t\t\tfor (var i = 0; i !== n; ++i) {\n\t\t\t\t\tdstPlanes[i] = srcPlanes[i].clone();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.clippingPlanes = dstPlanes;\n\t\t\tthis.clipIntersection = source.clipIntersection;\n\t\t\tthis.clipShadows = source.clipShadows;\n\t\t\tthis.shadowSide = source.shadowSide;\n\t\t\tthis.colorWrite = source.colorWrite;\n\t\t\tthis.precision = source.precision;\n\t\t\tthis.polygonOffset = source.polygonOffset;\n\t\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\t\t\tthis.dithering = source.dithering;\n\t\t\tthis.alphaTest = source.alphaTest;\n\t\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\t\t\tthis.visible = source.visible;\n\t\t\tthis.toneMapped = source.toneMapped;\n\t\t\tthis.userData = JSON.parse(JSON.stringify(source.userData));\n\t\t\treturn this;\n\t\t},\n\t\tdispose: function dispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\t});\n\tObject.defineProperty(Material.prototype, 'needsUpdate', {\n\t\tset: function set(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\n\tvar _colorKeywords = {\n\t\t'aliceblue': 0xF0F8FF,\n\t\t'antiquewhite': 0xFAEBD7,\n\t\t'aqua': 0x00FFFF,\n\t\t'aquamarine': 0x7FFFD4,\n\t\t'azure': 0xF0FFFF,\n\t\t'beige': 0xF5F5DC,\n\t\t'bisque': 0xFFE4C4,\n\t\t'black': 0x000000,\n\t\t'blanchedalmond': 0xFFEBCD,\n\t\t'blue': 0x0000FF,\n\t\t'blueviolet': 0x8A2BE2,\n\t\t'brown': 0xA52A2A,\n\t\t'burlywood': 0xDEB887,\n\t\t'cadetblue': 0x5F9EA0,\n\t\t'chartreuse': 0x7FFF00,\n\t\t'chocolate': 0xD2691E,\n\t\t'coral': 0xFF7F50,\n\t\t'cornflowerblue': 0x6495ED,\n\t\t'cornsilk': 0xFFF8DC,\n\t\t'crimson': 0xDC143C,\n\t\t'cyan': 0x00FFFF,\n\t\t'darkblue': 0x00008B,\n\t\t'darkcyan': 0x008B8B,\n\t\t'darkgoldenrod': 0xB8860B,\n\t\t'darkgray': 0xA9A9A9,\n\t\t'darkgreen': 0x006400,\n\t\t'darkgrey': 0xA9A9A9,\n\t\t'darkkhaki': 0xBDB76B,\n\t\t'darkmagenta': 0x8B008B,\n\t\t'darkolivegreen': 0x556B2F,\n\t\t'darkorange': 0xFF8C00,\n\t\t'darkorchid': 0x9932CC,\n\t\t'darkred': 0x8B0000,\n\t\t'darksalmon': 0xE9967A,\n\t\t'darkseagreen': 0x8FBC8F,\n\t\t'darkslateblue': 0x483D8B,\n\t\t'darkslategray': 0x2F4F4F,\n\t\t'darkslategrey': 0x2F4F4F,\n\t\t'darkturquoise': 0x00CED1,\n\t\t'darkviolet': 0x9400D3,\n\t\t'deeppink': 0xFF1493,\n\t\t'deepskyblue': 0x00BFFF,\n\t\t'dimgray': 0x696969,\n\t\t'dimgrey': 0x696969,\n\t\t'dodgerblue': 0x1E90FF,\n\t\t'firebrick': 0xB22222,\n\t\t'floralwhite': 0xFFFAF0,\n\t\t'forestgreen': 0x228B22,\n\t\t'fuchsia': 0xFF00FF,\n\t\t'gainsboro': 0xDCDCDC,\n\t\t'ghostwhite': 0xF8F8FF,\n\t\t'gold': 0xFFD700,\n\t\t'goldenrod': 0xDAA520,\n\t\t'gray': 0x808080,\n\t\t'green': 0x008000,\n\t\t'greenyellow': 0xADFF2F,\n\t\t'grey': 0x808080,\n\t\t'honeydew': 0xF0FFF0,\n\t\t'hotpink': 0xFF69B4,\n\t\t'indianred': 0xCD5C5C,\n\t\t'indigo': 0x4B0082,\n\t\t'ivory': 0xFFFFF0,\n\t\t'khaki': 0xF0E68C,\n\t\t'lavender': 0xE6E6FA,\n\t\t'lavenderblush': 0xFFF0F5,\n\t\t'lawngreen': 0x7CFC00,\n\t\t'lemonchiffon': 0xFFFACD,\n\t\t'lightblue': 0xADD8E6,\n\t\t'lightcoral': 0xF08080,\n\t\t'lightcyan': 0xE0FFFF,\n\t\t'lightgoldenrodyellow': 0xFAFAD2,\n\t\t'lightgray': 0xD3D3D3,\n\t\t'lightgreen': 0x90EE90,\n\t\t'lightgrey': 0xD3D3D3,\n\t\t'lightpink': 0xFFB6C1,\n\t\t'lightsalmon': 0xFFA07A,\n\t\t'lightseagreen': 0x20B2AA,\n\t\t'lightskyblue': 0x87CEFA,\n\t\t'lightslategray': 0x778899,\n\t\t'lightslategrey': 0x778899,\n\t\t'lightsteelblue': 0xB0C4DE,\n\t\t'lightyellow': 0xFFFFE0,\n\t\t'lime': 0x00FF00,\n\t\t'limegreen': 0x32CD32,\n\t\t'linen': 0xFAF0E6,\n\t\t'magenta': 0xFF00FF,\n\t\t'maroon': 0x800000,\n\t\t'mediumaquamarine': 0x66CDAA,\n\t\t'mediumblue': 0x0000CD,\n\t\t'mediumorchid': 0xBA55D3,\n\t\t'mediumpurple': 0x9370DB,\n\t\t'mediumseagreen': 0x3CB371,\n\t\t'mediumslateblue': 0x7B68EE,\n\t\t'mediumspringgreen': 0x00FA9A,\n\t\t'mediumturquoise': 0x48D1CC,\n\t\t'mediumvioletred': 0xC71585,\n\t\t'midnightblue': 0x191970,\n\t\t'mintcream': 0xF5FFFA,\n\t\t'mistyrose': 0xFFE4E1,\n\t\t'moccasin': 0xFFE4B5,\n\t\t'navajowhite': 0xFFDEAD,\n\t\t'navy': 0x000080,\n\t\t'oldlace': 0xFDF5E6,\n\t\t'olive': 0x808000,\n\t\t'olivedrab': 0x6B8E23,\n\t\t'orange': 0xFFA500,\n\t\t'orangered': 0xFF4500,\n\t\t'orchid': 0xDA70D6,\n\t\t'palegoldenrod': 0xEEE8AA,\n\t\t'palegreen': 0x98FB98,\n\t\t'paleturquoise': 0xAFEEEE,\n\t\t'palevioletred': 0xDB7093,\n\t\t'papayawhip': 0xFFEFD5,\n\t\t'peachpuff': 0xFFDAB9,\n\t\t'peru': 0xCD853F,\n\t\t'pink': 0xFFC0CB,\n\t\t'plum': 0xDDA0DD,\n\t\t'powderblue': 0xB0E0E6,\n\t\t'purple': 0x800080,\n\t\t'rebeccapurple': 0x663399,\n\t\t'red': 0xFF0000,\n\t\t'rosybrown': 0xBC8F8F,\n\t\t'royalblue': 0x4169E1,\n\t\t'saddlebrown': 0x8B4513,\n\t\t'salmon': 0xFA8072,\n\t\t'sandybrown': 0xF4A460,\n\t\t'seagreen': 0x2E8B57,\n\t\t'seashell': 0xFFF5EE,\n\t\t'sienna': 0xA0522D,\n\t\t'silver': 0xC0C0C0,\n\t\t'skyblue': 0x87CEEB,\n\t\t'slateblue': 0x6A5ACD,\n\t\t'slategray': 0x708090,\n\t\t'slategrey': 0x708090,\n\t\t'snow': 0xFFFAFA,\n\t\t'springgreen': 0x00FF7F,\n\t\t'steelblue': 0x4682B4,\n\t\t'tan': 0xD2B48C,\n\t\t'teal': 0x008080,\n\t\t'thistle': 0xD8BFD8,\n\t\t'tomato': 0xFF6347,\n\t\t'turquoise': 0x40E0D0,\n\t\t'violet': 0xEE82EE,\n\t\t'wheat': 0xF5DEB3,\n\t\t'white': 0xFFFFFF,\n\t\t'whitesmoke': 0xF5F5F5,\n\t\t'yellow': 0xFFFF00,\n\t\t'yellowgreen': 0x9ACD32\n\t};\n\tvar _hslA = {\n\t\th: 0,\n\t\ts: 0,\n\t\tl: 0\n\t};\n\tvar _hslB = {\n\t\th: 0,\n\t\ts: 0,\n\t\tl: 0\n\t};\n\n\tfunction hue2rgb(p, q, t) {\n\t\tif (t < 0) t += 1;\n\t\tif (t > 1) t -= 1;\n\t\tif (t < 1 / 6) return p + (q - p) * 6 * t;\n\t\tif (t < 1 / 2) return q;\n\t\tif (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);\n\t\treturn p;\n\t}\n\n\tfunction SRGBToLinear(c) {\n\t\treturn c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);\n\t}\n\n\tfunction LinearToSRGB(c) {\n\t\treturn c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;\n\t}\n\n\tvar Color = /*#__PURE__*/function () {\n\t\tfunction Color(r, g, b) {\n\t\t\tif (g === undefined && b === undefined) {\n\t\t\t\t// r is THREE.Color, hex or string\n\t\t\t\treturn this.set(r);\n\t\t\t}\n\n\t\t\treturn this.setRGB(r, g, b);\n\t\t}\n\n\t\tvar _proto = Color.prototype;\n\n\t\t_proto.set = function set(value) {\n\t\t\tif (value && value.isColor) {\n\t\t\t\tthis.copy(value);\n\t\t\t} else if (typeof value === 'number') {\n\t\t\t\tthis.setHex(value);\n\t\t\t} else if (typeof value === 'string') {\n\t\t\t\tthis.setStyle(value);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setScalar = function setScalar(scalar) {\n\t\t\tthis.r = scalar;\n\t\t\tthis.g = scalar;\n\t\t\tthis.b = scalar;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setHex = function setHex(hex) {\n\t\t\thex = Math.floor(hex);\n\t\t\tthis.r = (hex >> 16 & 255) / 255;\n\t\t\tthis.g = (hex >> 8 & 255) / 255;\n\t\t\tthis.b = (hex & 255) / 255;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setRGB = function setRGB(r, g, b) {\n\t\t\tthis.r = r;\n\t\t\tthis.g = g;\n\t\t\tthis.b = b;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setHSL = function setHSL(h, s, l) {\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\th = MathUtils.euclideanModulo(h, 1);\n\t\t\ts = MathUtils.clamp(s, 0, 1);\n\t\t\tl = MathUtils.clamp(l, 0, 1);\n\n\t\t\tif (s === 0) {\n\t\t\t\tthis.r = this.g = this.b = l;\n\t\t\t} else {\n\t\t\t\tvar p = l <= 0.5 ? l * (1 + s) : l + s - l * s;\n\t\t\t\tvar q = 2 * l - p;\n\t\t\t\tthis.r = hue2rgb(q, p, h + 1 / 3);\n\t\t\t\tthis.g = hue2rgb(q, p, h);\n\t\t\t\tthis.b = hue2rgb(q, p, h - 1 / 3);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setStyle = function setStyle(style) {\n\t\t\tfunction handleAlpha(string) {\n\t\t\t\tif (string === undefined) return;\n\n\t\t\t\tif (parseFloat(string) < 1) {\n\t\t\t\t\tconsole.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar m;\n\n\t\t\tif (m = /^((?:rgb|hsl)a?)\\(([^\\)]*)\\)/.exec(style)) {\n\t\t\t\t// rgb / hsl\n\t\t\t\tvar color;\n\t\t\t\tvar name = m[1];\n\t\t\t\tvar components = m[2];\n\n\t\t\t\tswitch (name) {\n\t\t\t\t\tcase 'rgb':\n\t\t\t\t\tcase 'rgba':\n\t\t\t\t\t\tif (color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min(255, parseInt(color[1], 10)) / 255;\n\t\t\t\t\t\t\tthis.g = Math.min(255, parseInt(color[2], 10)) / 255;\n\t\t\t\t\t\t\tthis.b = Math.min(255, parseInt(color[3], 10)) / 255;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\t\tthis.r = Math.min(100, parseInt(color[1], 10)) / 100;\n\t\t\t\t\t\t\tthis.g = Math.min(100, parseInt(color[2], 10)) / 100;\n\t\t\t\t\t\t\tthis.b = Math.min(100, parseInt(color[3], 10)) / 100;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'hsl':\n\t\t\t\t\tcase 'hsla':\n\t\t\t\t\t\tif (color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(components)) {\n\t\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\t\tvar h = parseFloat(color[1]) / 360;\n\t\t\t\t\t\t\tvar s = parseInt(color[2], 10) / 100;\n\t\t\t\t\t\t\tvar l = parseInt(color[3], 10) / 100;\n\t\t\t\t\t\t\thandleAlpha(color[4]);\n\t\t\t\t\t\t\treturn this.setHSL(h, s, l);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else if (m = /^\\#([A-Fa-f\\d]+)$/.exec(style)) {\n\t\t\t\t// hex color\n\t\t\t\tvar hex = m[1];\n\t\t\t\tvar size = hex.length;\n\n\t\t\t\tif (size === 3) {\n\t\t\t\t\t// #ff0\n\t\t\t\t\tthis.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;\n\t\t\t\t\tthis.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;\n\t\t\t\t\tthis.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;\n\t\t\t\t\treturn this;\n\t\t\t\t} else if (size === 6) {\n\t\t\t\t\t// #ff0000\n\t\t\t\t\tthis.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;\n\t\t\t\t\tthis.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;\n\t\t\t\t\tthis.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (style && style.length > 0) {\n\t\t\t\treturn this.setColorName(style);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setColorName = function setColorName(style) {\n\t\t\t// color keywords\n\t\t\tvar hex = _colorKeywords[style];\n\n\t\t\tif (hex !== undefined) {\n\t\t\t\t// red\n\t\t\t\tthis.setHex(hex);\n\t\t\t} else {\n\t\t\t\t// unknown color\n\t\t\t\tconsole.warn('THREE.Color: Unknown color ' + style);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this.r, this.g, this.b);\n\t\t};\n\n\t\t_proto.copy = function copy(color) {\n\t\t\tthis.r = color.r;\n\t\t\tthis.g = color.g;\n\t\t\tthis.b = color.b;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copyGammaToLinear = function copyGammaToLinear(color, gammaFactor) {\n\t\t\tif (gammaFactor === void 0) {\n\t\t\t\tgammaFactor = 2.0;\n\t\t\t}\n\n\t\t\tthis.r = Math.pow(color.r, gammaFactor);\n\t\t\tthis.g = Math.pow(color.g, gammaFactor);\n\t\t\tthis.b = Math.pow(color.b, gammaFactor);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copyLinearToGamma = function copyLinearToGamma(color, gammaFactor) {\n\t\t\tif (gammaFactor === void 0) {\n\t\t\t\tgammaFactor = 2.0;\n\t\t\t}\n\n\t\t\tvar safeInverse = gammaFactor > 0 ? 1.0 / gammaFactor : 1.0;\n\t\t\tthis.r = Math.pow(color.r, safeInverse);\n\t\t\tthis.g = Math.pow(color.g, safeInverse);\n\t\t\tthis.b = Math.pow(color.b, safeInverse);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.convertGammaToLinear = function convertGammaToLinear(gammaFactor) {\n\t\t\tthis.copyGammaToLinear(this, gammaFactor);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.convertLinearToGamma = function convertLinearToGamma(gammaFactor) {\n\t\t\tthis.copyLinearToGamma(this, gammaFactor);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copySRGBToLinear = function copySRGBToLinear(color) {\n\t\t\tthis.r = SRGBToLinear(color.r);\n\t\t\tthis.g = SRGBToLinear(color.g);\n\t\t\tthis.b = SRGBToLinear(color.b);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copyLinearToSRGB = function copyLinearToSRGB(color) {\n\t\t\tthis.r = LinearToSRGB(color.r);\n\t\t\tthis.g = LinearToSRGB(color.g);\n\t\t\tthis.b = LinearToSRGB(color.b);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.convertSRGBToLinear = function convertSRGBToLinear() {\n\t\t\tthis.copySRGBToLinear(this);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.convertLinearToSRGB = function convertLinearToSRGB() {\n\t\t\tthis.copyLinearToSRGB(this);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getHex = function getHex() {\n\t\t\treturn this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;\n\t\t};\n\n\t\t_proto.getHexString = function getHexString() {\n\t\t\treturn ('000000' + this.getHex().toString(16)).slice(-6);\n\t\t};\n\n\t\t_proto.getHSL = function getHSL(target) {\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Color: .getHSL() target is now required');\n\t\t\t\ttarget = {\n\t\t\t\t\th: 0,\n\t\t\t\t\ts: 0,\n\t\t\t\t\tl: 0\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar r = this.r,\n\t\t\t\t\tg = this.g,\n\t\t\t\t\tb = this.b;\n\t\t\tvar max = Math.max(r, g, b);\n\t\t\tvar min = Math.min(r, g, b);\n\t\t\tvar hue, saturation;\n\t\t\tvar lightness = (min + max) / 2.0;\n\n\t\t\tif (min === max) {\n\t\t\t\thue = 0;\n\t\t\t\tsaturation = 0;\n\t\t\t} else {\n\t\t\t\tvar delta = max - min;\n\t\t\t\tsaturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);\n\n\t\t\t\tswitch (max) {\n\t\t\t\t\tcase r:\n\t\t\t\t\t\thue = (g - b) / delta + (g < b ? 6 : 0);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase g:\n\t\t\t\t\t\thue = (b - r) / delta + 2;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase b:\n\t\t\t\t\t\thue = (r - g) / delta + 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\thue /= 6;\n\t\t\t}\n\n\t\t\ttarget.h = hue;\n\t\t\ttarget.s = saturation;\n\t\t\ttarget.l = lightness;\n\t\t\treturn target;\n\t\t};\n\n\t\t_proto.getStyle = function getStyle() {\n\t\t\treturn 'rgb(' + (this.r * 255 | 0) + ',' + (this.g * 255 | 0) + ',' + (this.b * 255 | 0) + ')';\n\t\t};\n\n\t\t_proto.offsetHSL = function offsetHSL(h, s, l) {\n\t\t\tthis.getHSL(_hslA);\n\t\t\t_hslA.h += h;\n\t\t\t_hslA.s += s;\n\t\t\t_hslA.l += l;\n\t\t\tthis.setHSL(_hslA.h, _hslA.s, _hslA.l);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.add = function add(color) {\n\t\t\tthis.r += color.r;\n\t\t\tthis.g += color.g;\n\t\t\tthis.b += color.b;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addColors = function addColors(color1, color2) {\n\t\t\tthis.r = color1.r + color2.r;\n\t\t\tthis.g = color1.g + color2.g;\n\t\t\tthis.b = color1.b + color2.b;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScalar = function addScalar(s) {\n\t\t\tthis.r += s;\n\t\t\tthis.g += s;\n\t\t\tthis.b += s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.sub = function sub(color) {\n\t\t\tthis.r = Math.max(0, this.r - color.r);\n\t\t\tthis.g = Math.max(0, this.g - color.g);\n\t\t\tthis.b = Math.max(0, this.b - color.b);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiply = function multiply(color) {\n\t\t\tthis.r *= color.r;\n\t\t\tthis.g *= color.g;\n\t\t\tthis.b *= color.b;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.multiplyScalar = function multiplyScalar(s) {\n\t\t\tthis.r *= s;\n\t\t\tthis.g *= s;\n\t\t\tthis.b *= s;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerp = function lerp(color, alpha) {\n\t\t\tthis.r += (color.r - this.r) * alpha;\n\t\t\tthis.g += (color.g - this.g) * alpha;\n\t\t\tthis.b += (color.b - this.b) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerpColors = function lerpColors(color1, color2, alpha) {\n\t\t\tthis.r = color1.r + (color2.r - color1.r) * alpha;\n\t\t\tthis.g = color1.g + (color2.g - color1.g) * alpha;\n\t\t\tthis.b = color1.b + (color2.b - color1.b) * alpha;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerpHSL = function lerpHSL(color, alpha) {\n\t\t\tthis.getHSL(_hslA);\n\t\t\tcolor.getHSL(_hslB);\n\t\t\tvar h = MathUtils.lerp(_hslA.h, _hslB.h, alpha);\n\t\t\tvar s = MathUtils.lerp(_hslA.s, _hslB.s, alpha);\n\t\t\tvar l = MathUtils.lerp(_hslA.l, _hslB.l, alpha);\n\t\t\tthis.setHSL(h, s, l);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(c) {\n\t\t\treturn c.r === this.r && c.g === this.g && c.b === this.b;\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis.r = array[offset];\n\t\t\tthis.g = array[offset + 1];\n\t\t\tthis.b = array[offset + 2];\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tarray[offset] = this.r;\n\t\t\tarray[offset + 1] = this.g;\n\t\t\tarray[offset + 2] = this.b;\n\t\t\treturn array;\n\t\t};\n\n\t\t_proto.fromBufferAttribute = function fromBufferAttribute(attribute, index) {\n\t\t\tthis.r = attribute.getX(index);\n\t\t\tthis.g = attribute.getY(index);\n\t\t\tthis.b = attribute.getZ(index);\n\n\t\t\tif (attribute.normalized === true) {\n\t\t\t\t// assuming Uint8Array\n\t\t\t\tthis.r /= 255;\n\t\t\t\tthis.g /= 255;\n\t\t\t\tthis.b /= 255;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\treturn this.getHex();\n\t\t};\n\n\t\treturn Color;\n\t}();\n\n\tColor.NAMES = _colorKeywords;\n\tColor.prototype.isColor = true;\n\tColor.prototype.r = 1;\n\tColor.prototype.g = 1;\n\tColor.prototype.b = 1;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.Multiply,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\tdepthTest: <bool>,\n\t *\tdepthWrite: <bool>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>\n\t * }\n\t */\n\n\tvar MeshBasicMaterial = /*#__PURE__*/function (_Material) {\n\t\t_inheritsLoose(MeshBasicMaterial, _Material);\n\n\t\tfunction MeshBasicMaterial(parameters) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Material.call(this) || this;\n\t\t\t_this.type = 'MeshBasicMaterial';\n\t\t\t_this.color = new Color(0xffffff); // emissive\n\n\t\t\t_this.map = null;\n\t\t\t_this.lightMap = null;\n\t\t\t_this.lightMapIntensity = 1.0;\n\t\t\t_this.aoMap = null;\n\t\t\t_this.aoMapIntensity = 1.0;\n\t\t\t_this.specularMap = null;\n\t\t\t_this.alphaMap = null;\n\t\t\t_this.envMap = null;\n\t\t\t_this.combine = MultiplyOperation;\n\t\t\t_this.reflectivity = 1;\n\t\t\t_this.refractionRatio = 0.98;\n\t\t\t_this.wireframe = false;\n\t\t\t_this.wireframeLinewidth = 1;\n\t\t\t_this.wireframeLinecap = 'round';\n\t\t\t_this.wireframeLinejoin = 'round';\n\t\t\t_this.skinning = false;\n\t\t\t_this.morphTargets = false;\n\n\t\t\t_this.setValues(parameters);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = MeshBasicMaterial.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Material.prototype.copy.call(this, source);\n\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.specularMap = source.specularMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.combine = source.combine;\n\t\t\tthis.reflectivity = source.reflectivity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.skinning = source.skinning;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn MeshBasicMaterial;\n\t}(Material);\n\n\tMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\n\tvar _vector$3 = new Vector3();\n\n\tvar _vector2$1 = new Vector2();\n\n\tfunction BufferAttribute(array, itemSize, normalized) {\n\t\tif (Array.isArray(array)) {\n\t\t\tthrow new TypeError('THREE.BufferAttribute: array should be a Typed Array.');\n\t\t}\n\n\t\tthis.name = '';\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized === true;\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = {\n\t\t\toffset: 0,\n\t\t\tcount: -1\n\t\t};\n\t\tthis.version = 0;\n\t}\n\n\tObject.defineProperty(BufferAttribute.prototype, 'needsUpdate', {\n\t\tset: function set(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\tObject.assign(BufferAttribute.prototype, {\n\t\tisBufferAttribute: true,\n\t\tonUploadCallback: function onUploadCallback() {},\n\t\tsetUsage: function setUsage(value) {\n\t\t\tthis.usage = value;\n\t\t\treturn this;\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.name = source.name;\n\t\t\tthis.array = new source.array.constructor(source.array);\n\t\t\tthis.itemSize = source.itemSize;\n\t\t\tthis.count = source.count;\n\t\t\tthis.normalized = source.normalized;\n\t\t\tthis.usage = source.usage;\n\t\t\treturn this;\n\t\t},\n\t\tcopyAt: function copyAt(index1, attribute, index2) {\n\t\t\tindex1 *= this.itemSize;\n\t\t\tindex2 *= attribute.itemSize;\n\n\t\t\tfor (var i = 0, l = this.itemSize; i < l; i++) {\n\t\t\t\tthis.array[index1 + i] = attribute.array[index2 + i];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcopyArray: function copyArray(array) {\n\t\t\tthis.array.set(array);\n\t\t\treturn this;\n\t\t},\n\t\tcopyColorsArray: function copyColorsArray(colors) {\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor (var i = 0, l = colors.length; i < l; i++) {\n\t\t\t\tvar color = colors[i];\n\n\t\t\t\tif (color === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined', i);\n\t\t\t\t\tcolor = new Color();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = color.r;\n\t\t\t\tarray[offset++] = color.g;\n\t\t\t\tarray[offset++] = color.b;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcopyVector2sArray: function copyVector2sArray(vectors) {\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor (var i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tvar vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector2();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcopyVector3sArray: function copyVector3sArray(vectors) {\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor (var i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tvar vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector3();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t\tarray[offset++] = vector.z;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tcopyVector4sArray: function copyVector4sArray(vectors) {\n\t\t\tvar array = this.array;\n\t\t\tvar offset = 0;\n\n\t\t\tfor (var i = 0, l = vectors.length; i < l; i++) {\n\t\t\t\tvar vector = vectors[i];\n\n\t\t\t\tif (vector === undefined) {\n\t\t\t\t\tconsole.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i);\n\t\t\t\t\tvector = new Vector4();\n\t\t\t\t}\n\n\t\t\t\tarray[offset++] = vector.x;\n\t\t\t\tarray[offset++] = vector.y;\n\t\t\t\tarray[offset++] = vector.z;\n\t\t\t\tarray[offset++] = vector.w;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tapplyMatrix3: function applyMatrix3(m) {\n\t\t\tif (this.itemSize === 2) {\n\t\t\t\tfor (var i = 0, l = this.count; i < l; i++) {\n\t\t\t\t\t_vector2$1.fromBufferAttribute(this, i);\n\n\t\t\t\t\t_vector2$1.applyMatrix3(m);\n\n\t\t\t\t\tthis.setXY(i, _vector2$1.x, _vector2$1.y);\n\t\t\t\t}\n\t\t\t} else if (this.itemSize === 3) {\n\t\t\t\tfor (var _i = 0, _l = this.count; _i < _l; _i++) {\n\t\t\t\t\t_vector$3.fromBufferAttribute(this, _i);\n\n\t\t\t\t\t_vector$3.applyMatrix3(m);\n\n\t\t\t\t\tthis.setXYZ(_i, _vector$3.x, _vector$3.y, _vector$3.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tapplyMatrix4: function applyMatrix4(m) {\n\t\t\tfor (var i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$3.x = this.getX(i);\n\t\t\t\t_vector$3.y = this.getY(i);\n\t\t\t\t_vector$3.z = this.getZ(i);\n\n\t\t\t\t_vector$3.applyMatrix4(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tapplyNormalMatrix: function applyNormalMatrix(m) {\n\t\t\tfor (var i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$3.x = this.getX(i);\n\t\t\t\t_vector$3.y = this.getY(i);\n\t\t\t\t_vector$3.z = this.getZ(i);\n\n\t\t\t\t_vector$3.applyNormalMatrix(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\ttransformDirection: function transformDirection(m) {\n\t\t\tfor (var i = 0, l = this.count; i < l; i++) {\n\t\t\t\t_vector$3.x = this.getX(i);\n\t\t\t\t_vector$3.y = this.getY(i);\n\t\t\t\t_vector$3.z = this.getZ(i);\n\n\t\t\t\t_vector$3.transformDirection(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$3.x, _vector$3.y, _vector$3.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tset: function set(value, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis.array.set(value, offset);\n\t\t\treturn this;\n\t\t},\n\t\tgetX: function getX(index) {\n\t\t\treturn this.array[index * this.itemSize];\n\t\t},\n\t\tsetX: function setX(index, x) {\n\t\t\tthis.array[index * this.itemSize] = x;\n\t\t\treturn this;\n\t\t},\n\t\tgetY: function getY(index) {\n\t\t\treturn this.array[index * this.itemSize + 1];\n\t\t},\n\t\tsetY: function setY(index, y) {\n\t\t\tthis.array[index * this.itemSize + 1] = y;\n\t\t\treturn this;\n\t\t},\n\t\tgetZ: function getZ(index) {\n\t\t\treturn this.array[index * this.itemSize + 2];\n\t\t},\n\t\tsetZ: function setZ(index, z) {\n\t\t\tthis.array[index * this.itemSize + 2] = z;\n\t\t\treturn this;\n\t\t},\n\t\tgetW: function getW(index) {\n\t\t\treturn this.array[index * this.itemSize + 3];\n\t\t},\n\t\tsetW: function setW(index, w) {\n\t\t\tthis.array[index * this.itemSize + 3] = w;\n\t\t\treturn this;\n\t\t},\n\t\tsetXY: function setXY(index, x, y) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\treturn this;\n\t\t},\n\t\tsetXYZ: function setXYZ(index, x, y, z) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\tthis.array[index + 2] = z;\n\t\t\treturn this;\n\t\t},\n\t\tsetXYZW: function setXYZW(index, x, y, z, w) {\n\t\t\tindex *= this.itemSize;\n\t\t\tthis.array[index + 0] = x;\n\t\t\tthis.array[index + 1] = y;\n\t\t\tthis.array[index + 2] = z;\n\t\t\tthis.array[index + 3] = w;\n\t\t\treturn this;\n\t\t},\n\t\tonUpload: function onUpload(callback) {\n\t\t\tthis.onUploadCallback = callback;\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor(this.array, this.itemSize).copy(this);\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\treturn {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call(this.array),\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\t\t}\n\t}); //\n\n\tfunction Int8BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Int8Array(array), itemSize, normalized);\n\t}\n\n\tInt8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tInt8BufferAttribute.prototype.constructor = Int8BufferAttribute;\n\n\tfunction Uint8BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint8Array(array), itemSize, normalized);\n\t}\n\n\tUint8BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tUint8BufferAttribute.prototype.constructor = Uint8BufferAttribute;\n\n\tfunction Uint8ClampedBufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint8ClampedArray(array), itemSize, normalized);\n\t}\n\n\tUint8ClampedBufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tUint8ClampedBufferAttribute.prototype.constructor = Uint8ClampedBufferAttribute;\n\n\tfunction Int16BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Int16Array(array), itemSize, normalized);\n\t}\n\n\tInt16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tInt16BufferAttribute.prototype.constructor = Int16BufferAttribute;\n\n\tfunction Uint16BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint16Array(array), itemSize, normalized);\n\t}\n\n\tUint16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tUint16BufferAttribute.prototype.constructor = Uint16BufferAttribute;\n\n\tfunction Int32BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Int32Array(array), itemSize, normalized);\n\t}\n\n\tInt32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tInt32BufferAttribute.prototype.constructor = Int32BufferAttribute;\n\n\tfunction Uint32BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint32Array(array), itemSize, normalized);\n\t}\n\n\tUint32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tUint32BufferAttribute.prototype.constructor = Uint32BufferAttribute;\n\n\tfunction Float16BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Uint16Array(array), itemSize, normalized);\n\t}\n\n\tFloat16BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tFloat16BufferAttribute.prototype.constructor = Float16BufferAttribute;\n\tFloat16BufferAttribute.prototype.isFloat16BufferAttribute = true;\n\n\tfunction Float32BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Float32Array(array), itemSize, normalized);\n\t}\n\n\tFloat32BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tFloat32BufferAttribute.prototype.constructor = Float32BufferAttribute;\n\n\tfunction Float64BufferAttribute(array, itemSize, normalized) {\n\t\tBufferAttribute.call(this, new Float64Array(array), itemSize, normalized);\n\t}\n\n\tFloat64BufferAttribute.prototype = Object.create(BufferAttribute.prototype);\n\tFloat64BufferAttribute.prototype.constructor = Float64BufferAttribute; //\n\n\tfunction arrayMax(array) {\n\t\tif (array.length === 0) return -Infinity;\n\t\tvar max = array[0];\n\n\t\tfor (var i = 1, l = array.length; i < l; ++i) {\n\t\t\tif (array[i] > max) max = array[i];\n\t\t}\n\n\t\treturn max;\n\t}\n\n\tvar TYPED_ARRAYS = {\n\t\tInt8Array: Int8Array,\n\t\tUint8Array: Uint8Array,\n\t\tUint8ClampedArray: Uint8ClampedArray,\n\t\tInt16Array: Int16Array,\n\t\tUint16Array: Uint16Array,\n\t\tInt32Array: Int32Array,\n\t\tUint32Array: Uint32Array,\n\t\tFloat32Array: Float32Array,\n\t\tFloat64Array: Float64Array\n\t};\n\n\tfunction getTypedArray(type, buffer) {\n\t\treturn new TYPED_ARRAYS[type](buffer);\n\t}\n\n\tvar _id = 0;\n\n\tvar _m1$2 = new Matrix4();\n\n\tvar _obj = new Object3D();\n\n\tvar _offset = new Vector3();\n\n\tvar _box$2 = new Box3();\n\n\tvar _boxMorphTargets = new Box3();\n\n\tvar _vector$4 = new Vector3();\n\n\tfunction BufferGeometry() {\n\t\tObject.defineProperty(this, 'id', {\n\t\t\tvalue: _id++\n\t\t});\n\t\tthis.uuid = MathUtils.generateUUID();\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\t\tthis.morphAttributes = {};\n\t\tthis.morphTargetsRelative = false;\n\t\tthis.groups = [];\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\t\tthis.drawRange = {\n\t\t\tstart: 0,\n\t\t\tcount: Infinity\n\t\t};\n\t\tthis.userData = {};\n\t}\n\n\tBufferGeometry.prototype = Object.assign(Object.create(EventDispatcher.prototype), {\n\t\tconstructor: BufferGeometry,\n\t\tisBufferGeometry: true,\n\t\tgetIndex: function getIndex() {\n\t\t\treturn this.index;\n\t\t},\n\t\tsetIndex: function setIndex(index) {\n\t\t\tif (Array.isArray(index)) {\n\t\t\t\tthis.index = new (arrayMax(index) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(index, 1);\n\t\t\t} else {\n\t\t\t\tthis.index = index;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tgetAttribute: function getAttribute(name) {\n\t\t\treturn this.attributes[name];\n\t\t},\n\t\tsetAttribute: function setAttribute(name, attribute) {\n\t\t\tthis.attributes[name] = attribute;\n\t\t\treturn this;\n\t\t},\n\t\tdeleteAttribute: function deleteAttribute(name) {\n\t\t\tdelete this.attributes[name];\n\t\t\treturn this;\n\t\t},\n\t\thasAttribute: function hasAttribute(name) {\n\t\t\treturn this.attributes[name] !== undefined;\n\t\t},\n\t\taddGroup: function addGroup(start, count, materialIndex) {\n\t\t\tif (materialIndex === void 0) {\n\t\t\t\tmaterialIndex = 0;\n\t\t\t}\n\n\t\t\tthis.groups.push({\n\t\t\t\tstart: start,\n\t\t\t\tcount: count,\n\t\t\t\tmaterialIndex: materialIndex\n\t\t\t});\n\t\t},\n\t\tclearGroups: function clearGroups() {\n\t\t\tthis.groups = [];\n\t\t},\n\t\tsetDrawRange: function setDrawRange(start, count) {\n\t\t\tthis.drawRange.start = start;\n\t\t\tthis.drawRange.count = count;\n\t\t},\n\t\tapplyMatrix4: function applyMatrix4(matrix) {\n\t\t\tvar position = this.attributes.position;\n\n\t\t\tif (position !== undefined) {\n\t\t\t\tposition.applyMatrix4(matrix);\n\t\t\t\tposition.needsUpdate = true;\n\t\t\t}\n\n\t\t\tvar normal = this.attributes.normal;\n\n\t\t\tif (normal !== undefined) {\n\t\t\t\tvar normalMatrix = new Matrix3().getNormalMatrix(matrix);\n\t\t\t\tnormal.applyNormalMatrix(normalMatrix);\n\t\t\t\tnormal.needsUpdate = true;\n\t\t\t}\n\n\t\t\tvar tangent = this.attributes.tangent;\n\n\t\t\tif (tangent !== undefined) {\n\t\t\t\ttangent.transformDirection(matrix);\n\t\t\t\ttangent.needsUpdate = true;\n\t\t\t}\n\n\t\t\tif (this.boundingBox !== null) {\n\t\t\t\tthis.computeBoundingBox();\n\t\t\t}\n\n\t\t\tif (this.boundingSphere !== null) {\n\t\t\t\tthis.computeBoundingSphere();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\trotateX: function rotateX(angle) {\n\t\t\t// rotate geometry around world x-axis\n\t\t\t_m1$2.makeRotationX(angle);\n\n\t\t\tthis.applyMatrix4(_m1$2);\n\t\t\treturn this;\n\t\t},\n\t\trotateY: function rotateY(angle) {\n\t\t\t// rotate geometry around world y-axis\n\t\t\t_m1$2.makeRotationY(angle);\n\n\t\t\tthis.applyMatrix4(_m1$2);\n\t\t\treturn this;\n\t\t},\n\t\trotateZ: function rotateZ(angle) {\n\t\t\t// rotate geometry around world z-axis\n\t\t\t_m1$2.makeRotationZ(angle);\n\n\t\t\tthis.applyMatrix4(_m1$2);\n\t\t\treturn this;\n\t\t},\n\t\ttranslate: function translate(x, y, z) {\n\t\t\t// translate geometry\n\t\t\t_m1$2.makeTranslation(x, y, z);\n\n\t\t\tthis.applyMatrix4(_m1$2);\n\t\t\treturn this;\n\t\t},\n\t\tscale: function scale(x, y, z) {\n\t\t\t// scale geometry\n\t\t\t_m1$2.makeScale(x, y, z);\n\n\t\t\tthis.applyMatrix4(_m1$2);\n\t\t\treturn this;\n\t\t},\n\t\tlookAt: function lookAt(vector) {\n\t\t\t_obj.lookAt(vector);\n\n\t\t\t_obj.updateMatrix();\n\n\t\t\tthis.applyMatrix4(_obj.matrix);\n\t\t\treturn this;\n\t\t},\n\t\tcenter: function center() {\n\t\t\tthis.computeBoundingBox();\n\t\t\tthis.boundingBox.getCenter(_offset).negate();\n\t\t\tthis.translate(_offset.x, _offset.y, _offset.z);\n\t\t\treturn this;\n\t\t},\n\t\tsetFromPoints: function setFromPoints(points) {\n\t\t\tvar position = [];\n\n\t\t\tfor (var i = 0, l = points.length; i < l; i++) {\n\t\t\t\tvar point = points[i];\n\t\t\t\tposition.push(point.x, point.y, point.z || 0);\n\t\t\t}\n\n\t\t\tthis.setAttribute('position', new Float32BufferAttribute(position, 3));\n\t\t\treturn this;\n\t\t},\n\t\tcomputeBoundingBox: function computeBoundingBox() {\n\t\t\tif (this.boundingBox === null) {\n\t\t\t\tthis.boundingBox = new Box3();\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif (position && position.isGLBufferAttribute) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set \"mesh.frustumCulled\" to \"false\".', this);\n\t\t\t\tthis.boundingBox.set(new Vector3(-Infinity, -Infinity, -Infinity), new Vector3(+Infinity, +Infinity, +Infinity));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (position !== undefined) {\n\t\t\t\tthis.boundingBox.setFromBufferAttribute(position); // process morph attributes if present\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (var i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[i];\n\n\t\t\t\t\t\t_box$2.setFromBufferAttribute(morphAttribute);\n\n\t\t\t\t\t\tif (this.morphTargetsRelative) {\n\t\t\t\t\t\t\t_vector$4.addVectors(this.boundingBox.min, _box$2.min);\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_vector$4);\n\n\t\t\t\t\t\t\t_vector$4.addVectors(this.boundingBox.max, _box$2.max);\n\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_vector$4);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_box$2.min);\n\t\t\t\t\t\t\tthis.boundingBox.expandByPoint(_box$2.max);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.boundingBox.makeEmpty();\n\t\t\t}\n\n\t\t\tif (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this);\n\t\t\t}\n\t\t},\n\t\tcomputeBoundingSphere: function computeBoundingSphere() {\n\t\t\tif (this.boundingSphere === null) {\n\t\t\t\tthis.boundingSphere = new Sphere();\n\t\t\t}\n\n\t\t\tvar position = this.attributes.position;\n\t\t\tvar morphAttributesPosition = this.morphAttributes.position;\n\n\t\t\tif (position && position.isGLBufferAttribute) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set \"mesh.frustumCulled\" to \"false\".', this);\n\t\t\t\tthis.boundingSphere.set(new Vector3(), Infinity);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (position) {\n\t\t\t\t// first, find the center of the bounding sphere\n\t\t\t\tvar center = this.boundingSphere.center;\n\n\t\t\t\t_box$2.setFromBufferAttribute(position); // process morph attributes if present\n\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (var i = 0, il = morphAttributesPosition.length; i < il; i++) {\n\t\t\t\t\t\tvar morphAttribute = morphAttributesPosition[i];\n\n\t\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute(morphAttribute);\n\n\t\t\t\t\t\tif (this.morphTargetsRelative) {\n\t\t\t\t\t\t\t_vector$4.addVectors(_box$2.min, _boxMorphTargets.min);\n\n\t\t\t\t\t\t\t_box$2.expandByPoint(_vector$4);\n\n\t\t\t\t\t\t\t_vector$4.addVectors(_box$2.max, _boxMorphTargets.max);\n\n\t\t\t\t\t\t\t_box$2.expandByPoint(_vector$4);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t_box$2.expandByPoint(_boxMorphTargets.min);\n\n\t\t\t\t\t\t\t_box$2.expandByPoint(_boxMorphTargets.max);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t_box$2.getCenter(center); // second, try to find a boundingSphere with a radius smaller than the\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\n\t\t\t\tvar maxRadiusSq = 0;\n\n\t\t\t\tfor (var _i = 0, _il = position.count; _i < _il; _i++) {\n\t\t\t\t\t_vector$4.fromBufferAttribute(position, _i);\n\n\t\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$4));\n\t\t\t\t} // process morph attributes if present\n\n\n\t\t\t\tif (morphAttributesPosition) {\n\t\t\t\t\tfor (var _i2 = 0, _il2 = morphAttributesPosition.length; _i2 < _il2; _i2++) {\n\t\t\t\t\t\tvar _morphAttribute = morphAttributesPosition[_i2];\n\t\t\t\t\t\tvar morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\t\tfor (var j = 0, jl = _morphAttribute.count; j < jl; j++) {\n\t\t\t\t\t\t\t_vector$4.fromBufferAttribute(_morphAttribute, j);\n\n\t\t\t\t\t\t\tif (morphTargetsRelative) {\n\t\t\t\t\t\t\t\t_offset.fromBufferAttribute(position, j);\n\n\t\t\t\t\t\t\t\t_vector$4.add(_offset);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tmaxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$4));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n\n\t\t\t\tif (isNaN(this.boundingSphere.radius)) {\n\t\t\t\t\tconsole.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcomputeFaceNormals: function computeFaceNormals() {// backwards compatibility\n\t\t},\n\t\tcomputeTangents: function computeTangents() {\n\t\t\tvar index = this.index;\n\t\t\tvar attributes = this.attributes; // based on http://www.terathon.com/code/tangent.html\n\t\t\t// (per vertex tangents)\n\n\t\t\tif (index === null || attributes.position === undefined || attributes.normal === undefined || attributes.uv === undefined) {\n\t\t\t\tconsole.error('THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar indices = index.array;\n\t\t\tvar positions = attributes.position.array;\n\t\t\tvar normals = attributes.normal.array;\n\t\t\tvar uvs = attributes.uv.array;\n\t\t\tvar nVertices = positions.length / 3;\n\n\t\t\tif (attributes.tangent === undefined) {\n\t\t\t\tthis.setAttribute('tangent', new BufferAttribute(new Float32Array(4 * nVertices), 4));\n\t\t\t}\n\n\t\t\tvar tangents = attributes.tangent.array;\n\t\t\tvar tan1 = [],\n\t\t\t\t\ttan2 = [];\n\n\t\t\tfor (var i = 0; i < nVertices; i++) {\n\t\t\t\ttan1[i] = new Vector3();\n\t\t\t\ttan2[i] = new Vector3();\n\t\t\t}\n\n\t\t\tvar vA = new Vector3(),\n\t\t\t\t\tvB = new Vector3(),\n\t\t\t\t\tvC = new Vector3(),\n\t\t\t\t\tuvA = new Vector2(),\n\t\t\t\t\tuvB = new Vector2(),\n\t\t\t\t\tuvC = new Vector2(),\n\t\t\t\t\tsdir = new Vector3(),\n\t\t\t\t\ttdir = new Vector3();\n\n\t\t\tfunction handleTriangle(a, b, c) {\n\t\t\t\tvA.fromArray(positions, a * 3);\n\t\t\t\tvB.fromArray(positions, b * 3);\n\t\t\t\tvC.fromArray(positions, c * 3);\n\t\t\t\tuvA.fromArray(uvs, a * 2);\n\t\t\t\tuvB.fromArray(uvs, b * 2);\n\t\t\t\tuvC.fromArray(uvs, c * 2);\n\t\t\t\tvB.sub(vA);\n\t\t\t\tvC.sub(vA);\n\t\t\t\tuvB.sub(uvA);\n\t\t\t\tuvC.sub(uvA);\n\t\t\t\tvar r = 1.0 / (uvB.x * uvC.y - uvC.x * uvB.y); // silently ignore degenerate uv triangles having coincident or colinear vertices\n\n\t\t\t\tif (!isFinite(r)) return;\n\t\t\t\tsdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);\n\t\t\t\ttdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);\n\t\t\t\ttan1[a].add(sdir);\n\t\t\t\ttan1[b].add(sdir);\n\t\t\t\ttan1[c].add(sdir);\n\t\t\t\ttan2[a].add(tdir);\n\t\t\t\ttan2[b].add(tdir);\n\t\t\t\ttan2[c].add(tdir);\n\t\t\t}\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tif (groups.length === 0) {\n\t\t\t\tgroups = [{\n\t\t\t\t\tstart: 0,\n\t\t\t\t\tcount: indices.length\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tfor (var _i3 = 0, il = groups.length; _i3 < il; ++_i3) {\n\t\t\t\tvar group = groups[_i3];\n\t\t\t\tvar start = group.start;\n\t\t\t\tvar count = group.count;\n\n\t\t\t\tfor (var j = start, jl = start + count; j < jl; j += 3) {\n\t\t\t\t\thandleTriangle(indices[j + 0], indices[j + 1], indices[j + 2]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar tmp = new Vector3(),\n\t\t\t\t\ttmp2 = new Vector3();\n\t\t\tvar n = new Vector3(),\n\t\t\t\t\tn2 = new Vector3();\n\n\t\t\tfunction handleVertex(v) {\n\t\t\t\tn.fromArray(normals, v * 3);\n\t\t\t\tn2.copy(n);\n\t\t\t\tvar t = tan1[v]; // Gram-Schmidt orthogonalize\n\n\t\t\t\ttmp.copy(t);\n\t\t\t\ttmp.sub(n.multiplyScalar(n.dot(t))).normalize(); // Calculate handedness\n\n\t\t\t\ttmp2.crossVectors(n2, t);\n\t\t\t\tvar test = tmp2.dot(tan2[v]);\n\t\t\t\tvar w = test < 0.0 ? -1.0 : 1.0;\n\t\t\t\ttangents[v * 4] = tmp.x;\n\t\t\t\ttangents[v * 4 + 1] = tmp.y;\n\t\t\t\ttangents[v * 4 + 2] = tmp.z;\n\t\t\t\ttangents[v * 4 + 3] = w;\n\t\t\t}\n\n\t\t\tfor (var _i4 = 0, _il3 = groups.length; _i4 < _il3; ++_i4) {\n\t\t\t\tvar _group = groups[_i4];\n\t\t\t\tvar _start = _group.start;\n\t\t\t\tvar _count = _group.count;\n\n\t\t\t\tfor (var _j = _start, _jl = _start + _count; _j < _jl; _j += 3) {\n\t\t\t\t\thandleVertex(indices[_j + 0]);\n\t\t\t\t\thandleVertex(indices[_j + 1]);\n\t\t\t\t\thandleVertex(indices[_j + 2]);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcomputeVertexNormals: function computeVertexNormals() {\n\t\t\tvar index = this.index;\n\t\t\tvar positionAttribute = this.getAttribute('position');\n\n\t\t\tif (positionAttribute !== undefined) {\n\t\t\t\tvar normalAttribute = this.getAttribute('normal');\n\n\t\t\t\tif (normalAttribute === undefined) {\n\t\t\t\t\tnormalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);\n\t\t\t\t\tthis.setAttribute('normal', normalAttribute);\n\t\t\t\t} else {\n\t\t\t\t\t// reset existing normals to zero\n\t\t\t\t\tfor (var i = 0, il = normalAttribute.count; i < il; i++) {\n\t\t\t\t\t\tnormalAttribute.setXYZ(i, 0, 0, 0);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar pA = new Vector3(),\n\t\t\t\t\t\tpB = new Vector3(),\n\t\t\t\t\t\tpC = new Vector3();\n\t\t\t\tvar nA = new Vector3(),\n\t\t\t\t\t\tnB = new Vector3(),\n\t\t\t\t\t\tnC = new Vector3();\n\t\t\t\tvar cb = new Vector3(),\n\t\t\t\t\t\tab = new Vector3(); // indexed elements\n\n\t\t\t\tif (index) {\n\t\t\t\t\tfor (var _i5 = 0, _il4 = index.count; _i5 < _il4; _i5 += 3) {\n\t\t\t\t\t\tvar vA = index.getX(_i5 + 0);\n\t\t\t\t\t\tvar vB = index.getX(_i5 + 1);\n\t\t\t\t\t\tvar vC = index.getX(_i5 + 2);\n\t\t\t\t\t\tpA.fromBufferAttribute(positionAttribute, vA);\n\t\t\t\t\t\tpB.fromBufferAttribute(positionAttribute, vB);\n\t\t\t\t\t\tpC.fromBufferAttribute(positionAttribute, vC);\n\t\t\t\t\t\tcb.subVectors(pC, pB);\n\t\t\t\t\t\tab.subVectors(pA, pB);\n\t\t\t\t\t\tcb.cross(ab);\n\t\t\t\t\t\tnA.fromBufferAttribute(normalAttribute, vA);\n\t\t\t\t\t\tnB.fromBufferAttribute(normalAttribute, vB);\n\t\t\t\t\t\tnC.fromBufferAttribute(normalAttribute, vC);\n\t\t\t\t\t\tnA.add(cb);\n\t\t\t\t\t\tnB.add(cb);\n\t\t\t\t\t\tnC.add(cb);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\t\t\t\t\tfor (var _i6 = 0, _il5 = positionAttribute.count; _i6 < _il5; _i6 += 3) {\n\t\t\t\t\t\tpA.fromBufferAttribute(positionAttribute, _i6 + 0);\n\t\t\t\t\t\tpB.fromBufferAttribute(positionAttribute, _i6 + 1);\n\t\t\t\t\t\tpC.fromBufferAttribute(positionAttribute, _i6 + 2);\n\t\t\t\t\t\tcb.subVectors(pC, pB);\n\t\t\t\t\t\tab.subVectors(pA, pB);\n\t\t\t\t\t\tcb.cross(ab);\n\t\t\t\t\t\tnormalAttribute.setXYZ(_i6 + 0, cb.x, cb.y, cb.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(_i6 + 1, cb.x, cb.y, cb.z);\n\t\t\t\t\t\tnormalAttribute.setXYZ(_i6 + 2, cb.x, cb.y, cb.z);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.normalizeNormals();\n\t\t\t\tnormalAttribute.needsUpdate = true;\n\t\t\t}\n\t\t},\n\t\tmerge: function merge(geometry, offset) {\n\t\t\tif (!(geometry && geometry.isBufferGeometry)) {\n\t\t\t\tconsole.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (offset === undefined) {\n\t\t\t\toffset = 0;\n\t\t\t\tconsole.warn('THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. ' + 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.');\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor (var key in attributes) {\n\t\t\t\tif (geometry.attributes[key] === undefined) continue;\n\t\t\t\tvar attribute1 = attributes[key];\n\t\t\t\tvar attributeArray1 = attribute1.array;\n\t\t\t\tvar attribute2 = geometry.attributes[key];\n\t\t\t\tvar attributeArray2 = attribute2.array;\n\t\t\t\tvar attributeOffset = attribute2.itemSize * offset;\n\t\t\t\tvar length = Math.min(attributeArray2.length, attributeArray1.length - attributeOffset);\n\n\t\t\t\tfor (var i = 0, j = attributeOffset; i < length; i++, j++) {\n\t\t\t\t\tattributeArray1[j] = attributeArray2[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tnormalizeNormals: function normalizeNormals() {\n\t\t\tvar normals = this.attributes.normal;\n\n\t\t\tfor (var i = 0, il = normals.count; i < il; i++) {\n\t\t\t\t_vector$4.fromBufferAttribute(normals, i);\n\n\t\t\t\t_vector$4.normalize();\n\n\t\t\t\tnormals.setXYZ(i, _vector$4.x, _vector$4.y, _vector$4.z);\n\t\t\t}\n\t\t},\n\t\ttoNonIndexed: function toNonIndexed() {\n\t\t\tfunction convertBufferAttribute(attribute, indices) {\n\t\t\t\tvar array = attribute.array;\n\t\t\t\tvar itemSize = attribute.itemSize;\n\t\t\t\tvar normalized = attribute.normalized;\n\t\t\t\tvar array2 = new array.constructor(indices.length * itemSize);\n\t\t\t\tvar index = 0,\n\t\t\t\t\t\tindex2 = 0;\n\n\t\t\t\tfor (var i = 0, l = indices.length; i < l; i++) {\n\t\t\t\t\tindex = indices[i] * itemSize;\n\n\t\t\t\t\tfor (var j = 0; j < itemSize; j++) {\n\t\t\t\t\t\tarray2[index2++] = array[index++];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute(array2, itemSize, normalized);\n\t\t\t} //\n\n\n\t\t\tif (this.index === null) {\n\t\t\t\tconsole.warn('THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.');\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tvar geometry2 = new BufferGeometry();\n\t\t\tvar indices = this.index.array;\n\t\t\tvar attributes = this.attributes; // attributes\n\n\t\t\tfor (var name in attributes) {\n\t\t\t\tvar attribute = attributes[name];\n\t\t\t\tvar newAttribute = convertBufferAttribute(attribute, indices);\n\t\t\t\tgeometry2.setAttribute(name, newAttribute);\n\t\t\t} // morph attributes\n\n\n\t\t\tvar morphAttributes = this.morphAttributes;\n\n\t\t\tfor (var _name in morphAttributes) {\n\t\t\t\tvar morphArray = [];\n\t\t\t\tvar morphAttribute = morphAttributes[_name]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor (var i = 0, il = morphAttribute.length; i < il; i++) {\n\t\t\t\t\tvar _attribute = morphAttribute[i];\n\n\t\t\t\t\tvar _newAttribute = convertBufferAttribute(_attribute, indices);\n\n\t\t\t\t\tmorphArray.push(_newAttribute);\n\t\t\t\t}\n\n\t\t\t\tgeometry2.morphAttributes[_name] = morphArray;\n\t\t\t}\n\n\t\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative; // groups\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tfor (var _i7 = 0, l = groups.length; _i7 < l; _i7++) {\n\t\t\t\tvar group = groups[_i7];\n\t\t\t\tgeometry2.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t}\n\n\t\t\treturn geometry2;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t\t}\n\t\t\t}; // standard BufferGeometry serialization\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.type = this.type;\n\t\t\tif (this.name !== '') data.name = this.name;\n\t\t\tif (Object.keys(this.userData).length > 0) data.userData = this.userData;\n\n\t\t\tif (this.parameters !== undefined) {\n\t\t\t\tvar parameters = this.parameters;\n\n\t\t\t\tfor (var key in parameters) {\n\t\t\t\t\tif (parameters[key] !== undefined) data[key] = parameters[key];\n\t\t\t\t}\n\n\t\t\t\treturn data;\n\t\t\t}\n\n\t\t\tdata.data = {\n\t\t\t\tattributes: {}\n\t\t\t};\n\t\t\tvar index = this.index;\n\n\t\t\tif (index !== null) {\n\t\t\t\tdata.data.index = {\n\t\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\t\tarray: Array.prototype.slice.call(index.array)\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tvar attributes = this.attributes;\n\n\t\t\tfor (var _key in attributes) {\n\t\t\t\tvar attribute = attributes[_key];\n\t\t\t\tvar attributeData = attribute.toJSON(data.data);\n\t\t\t\tif (attribute.name !== '') attributeData.name = attribute.name;\n\t\t\t\tdata.data.attributes[_key] = attributeData;\n\t\t\t}\n\n\t\t\tvar morphAttributes = {};\n\t\t\tvar hasMorphAttributes = false;\n\n\t\t\tfor (var _key2 in this.morphAttributes) {\n\t\t\t\tvar attributeArray = this.morphAttributes[_key2];\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor (var i = 0, il = attributeArray.length; i < il; i++) {\n\t\t\t\t\tvar _attribute2 = attributeArray[i];\n\n\t\t\t\t\tvar _attributeData = _attribute2.toJSON(data.data);\n\n\t\t\t\t\tif (_attribute2.name !== '') _attributeData.name = _attribute2.name;\n\t\t\t\t\tarray.push(_attributeData);\n\t\t\t\t}\n\n\t\t\t\tif (array.length > 0) {\n\t\t\t\t\tmorphAttributes[_key2] = array;\n\t\t\t\t\thasMorphAttributes = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hasMorphAttributes) {\n\t\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\t\t\t}\n\n\t\t\tvar groups = this.groups;\n\n\t\t\tif (groups.length > 0) {\n\t\t\t\tdata.data.groups = JSON.parse(JSON.stringify(groups));\n\t\t\t}\n\n\t\t\tvar boundingSphere = this.boundingSphere;\n\n\t\t\tif (boundingSphere !== null) {\n\t\t\t\tdata.data.boundingSphere = {\n\t\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\t\tradius: boundingSphere.radius\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn data;\n\t\t},\n\t\tclone: function clone() {\n\t\t\t/*\n\t\t\t // Handle primitives\n\t\t\t\t const parameters = this.parameters;\n\t\t\t\t if ( parameters !== undefined ) {\n\t\t\t\t const values = [];\n\t\t\t\t for ( const key in parameters ) {\n\t\t\t\t values.push( parameters[ key ] );\n\t\t\t\t }\n\t\t\t\t const geometry = Object.create( this.constructor.prototype );\n\t\t\t this.constructor.apply( geometry, values );\n\t\t\t return geometry;\n\t\t\t\t }\n\t\t\t\t return new this.constructor().copy( this );\n\t\t\t */\n\t\t\treturn new BufferGeometry().copy(this);\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\t// reset\n\t\t\tthis.index = null;\n\t\t\tthis.attributes = {};\n\t\t\tthis.morphAttributes = {};\n\t\t\tthis.groups = [];\n\t\t\tthis.boundingBox = null;\n\t\t\tthis.boundingSphere = null; // used for storing cloned, shared data\n\n\t\t\tvar data = {}; // name\n\n\t\t\tthis.name = source.name; // index\n\n\t\t\tvar index = source.index;\n\n\t\t\tif (index !== null) {\n\t\t\t\tthis.setIndex(index.clone(data));\n\t\t\t} // attributes\n\n\n\t\t\tvar attributes = source.attributes;\n\n\t\t\tfor (var name in attributes) {\n\t\t\t\tvar attribute = attributes[name];\n\t\t\t\tthis.setAttribute(name, attribute.clone(data));\n\t\t\t} // morph attributes\n\n\n\t\t\tvar morphAttributes = source.morphAttributes;\n\n\t\t\tfor (var _name2 in morphAttributes) {\n\t\t\t\tvar array = [];\n\t\t\t\tvar morphAttribute = morphAttributes[_name2]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\t\tfor (var i = 0, l = morphAttribute.length; i < l; i++) {\n\t\t\t\t\tarray.push(morphAttribute[i].clone(data));\n\t\t\t\t}\n\n\t\t\t\tthis.morphAttributes[_name2] = array;\n\t\t\t}\n\n\t\t\tthis.morphTargetsRelative = source.morphTargetsRelative; // groups\n\n\t\t\tvar groups = source.groups;\n\n\t\t\tfor (var _i8 = 0, _l = groups.length; _i8 < _l; _i8++) {\n\t\t\t\tvar group = groups[_i8];\n\t\t\t\tthis.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t} // bounding box\n\n\n\t\t\tvar boundingBox = source.boundingBox;\n\n\t\t\tif (boundingBox !== null) {\n\t\t\t\tthis.boundingBox = boundingBox.clone();\n\t\t\t} // bounding sphere\n\n\n\t\t\tvar boundingSphere = source.boundingSphere;\n\n\t\t\tif (boundingSphere !== null) {\n\t\t\t\tthis.boundingSphere = boundingSphere.clone();\n\t\t\t} // draw range\n\n\n\t\t\tthis.drawRange.start = source.drawRange.start;\n\t\t\tthis.drawRange.count = source.drawRange.count; // user data\n\n\t\t\tthis.userData = source.userData;\n\t\t\treturn this;\n\t\t},\n\t\tdispose: function dispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\t});\n\n\tvar _inverseMatrix = new Matrix4();\n\n\tvar _ray = new Ray();\n\n\tvar _sphere = new Sphere();\n\n\tvar _vA = new Vector3();\n\n\tvar _vB = new Vector3();\n\n\tvar _vC = new Vector3();\n\n\tvar _tempA = new Vector3();\n\n\tvar _tempB = new Vector3();\n\n\tvar _tempC = new Vector3();\n\n\tvar _morphA = new Vector3();\n\n\tvar _morphB = new Vector3();\n\n\tvar _morphC = new Vector3();\n\n\tvar _uvA = new Vector2();\n\n\tvar _uvB = new Vector2();\n\n\tvar _uvC = new Vector2();\n\n\tvar _intersectionPoint = new Vector3();\n\n\tvar _intersectionPointWorld = new Vector3();\n\n\tfunction Mesh(geometry, material) {\n\t\tif (geometry === void 0) {\n\t\t\tgeometry = new BufferGeometry();\n\t\t}\n\n\t\tif (material === void 0) {\n\t\t\tmaterial = new MeshBasicMaterial();\n\t\t}\n\n\t\tObject3D.call(this);\n\t\tthis.type = 'Mesh';\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\t\tthis.updateMorphTargets();\n\t}\n\n\tMesh.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Mesh,\n\t\tisMesh: true,\n\t\tcopy: function copy(source) {\n\t\t\tObject3D.prototype.copy.call(this, source);\n\n\t\t\tif (source.morphTargetInfluences !== undefined) {\n\t\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\t\t\t}\n\n\t\t\tif (source.morphTargetDictionary !== undefined) {\n\t\t\t\tthis.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);\n\t\t\t}\n\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t},\n\t\tupdateMorphTargets: function updateMorphTargets() {\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tvar morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (var m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tvar name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar material = this.material;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tif (material === undefined) return; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere.copy(geometry.boundingSphere);\n\n\t\t\t_sphere.applyMatrix4(matrixWorld);\n\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere) === false) return; //\n\n\t\t\t_inverseMatrix.copy(matrixWorld).invert();\n\n\t\t\t_ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix); // Check boundingBox before continuing\n\n\n\t\t\tif (geometry.boundingBox !== null) {\n\t\t\t\tif (_ray.intersectsBox(geometry.boundingBox) === false) return;\n\t\t\t}\n\n\t\t\tvar intersection;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\tvar morphPosition = geometry.morphAttributes.position;\n\t\t\t\tvar morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\t\tvar uv = geometry.attributes.uv;\n\t\t\t\tvar uv2 = geometry.attributes.uv2;\n\t\t\t\tvar groups = geometry.groups;\n\t\t\t\tvar drawRange = geometry.drawRange;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\t// indexed buffer geometry\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (var i = 0, il = groups.length; i < il; i++) {\n\t\t\t\t\t\t\tvar group = groups[i];\n\t\t\t\t\t\t\tvar groupMaterial = material[group.materialIndex];\n\t\t\t\t\t\t\tvar start = Math.max(group.start, drawRange.start);\n\t\t\t\t\t\t\tvar end = Math.min(group.start + group.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\t\tfor (var j = start, jl = end; j < jl; j += 3) {\n\t\t\t\t\t\t\t\tvar a = index.getX(j);\n\t\t\t\t\t\t\t\tvar b = index.getX(j + 1);\n\t\t\t\t\t\t\t\tvar c = index.getX(j + 2);\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c);\n\n\t\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics\n\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar _start = Math.max(0, drawRange.start);\n\n\t\t\t\t\t\tvar _end = Math.min(index.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\tfor (var _i = _start, _il = _end; _i < _il; _i += 3) {\n\t\t\t\t\t\t\tvar _a = index.getX(_i);\n\n\t\t\t\t\t\t\tvar _b = index.getX(_i + 1);\n\n\t\t\t\t\t\t\tvar _c = index.getX(_i + 2);\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, _a, _b, _c);\n\n\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(_i / 3); // triangle number in indexed buffer semantics\n\n\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (position !== undefined) {\n\t\t\t\t\t// non-indexed buffer geometry\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (var _i2 = 0, _il2 = groups.length; _i2 < _il2; _i2++) {\n\t\t\t\t\t\t\tvar _group = groups[_i2];\n\t\t\t\t\t\t\tvar _groupMaterial = material[_group.materialIndex];\n\n\t\t\t\t\t\t\tvar _start2 = Math.max(_group.start, drawRange.start);\n\n\t\t\t\t\t\t\tvar _end2 = Math.min(_group.start + _group.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\t\tfor (var _j = _start2, _jl = _end2; _j < _jl; _j += 3) {\n\t\t\t\t\t\t\t\tvar _a2 = _j;\n\n\t\t\t\t\t\t\t\tvar _b2 = _j + 1;\n\n\t\t\t\t\t\t\t\tvar _c2 = _j + 2;\n\n\t\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, _groupMaterial, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, _a2, _b2, _c2);\n\n\t\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(_j / 3); // triangle number in non-indexed buffer semantics\n\n\t\t\t\t\t\t\t\t\tintersection.face.materialIndex = _group.materialIndex;\n\t\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar _start3 = Math.max(0, drawRange.start);\n\n\t\t\t\t\t\tvar _end3 = Math.min(position.count, drawRange.start + drawRange.count);\n\n\t\t\t\t\t\tfor (var _i3 = _start3, _il3 = _end3; _i3 < _il3; _i3 += 3) {\n\t\t\t\t\t\t\tvar _a3 = _i3;\n\n\t\t\t\t\t\t\tvar _b3 = _i3 + 1;\n\n\t\t\t\t\t\t\tvar _c3 = _i3 + 2;\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection(this, material, raycaster, _ray, position, morphPosition, morphTargetsRelative, uv, uv2, _a3, _b3, _c3);\n\n\t\t\t\t\t\t\tif (intersection) {\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor(_i3 / 3); // triangle number in non-indexed buffer semantics\n\n\t\t\t\t\t\t\t\tintersects.push(intersection);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction checkIntersection(object, material, raycaster, ray, pA, pB, pC, point) {\n\t\tvar intersect;\n\n\t\tif (material.side === BackSide) {\n\t\t\tintersect = ray.intersectTriangle(pC, pB, pA, true, point);\n\t\t} else {\n\t\t\tintersect = ray.intersectTriangle(pA, pB, pC, material.side !== DoubleSide, point);\n\t\t}\n\n\t\tif (intersect === null) return null;\n\n\t\t_intersectionPointWorld.copy(point);\n\n\t\t_intersectionPointWorld.applyMatrix4(object.matrixWorld);\n\n\t\tvar distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);\n\t\tif (distance < raycaster.near || distance > raycaster.far) return null;\n\t\treturn {\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectionPointWorld.clone(),\n\t\t\tobject: object\n\t\t};\n\t}\n\n\tfunction checkBufferGeometryIntersection(object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c) {\n\t\t_vA.fromBufferAttribute(position, a);\n\n\t\t_vB.fromBufferAttribute(position, b);\n\n\t\t_vC.fromBufferAttribute(position, c);\n\n\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\tif (material.morphTargets && morphPosition && morphInfluences) {\n\t\t\t_morphA.set(0, 0, 0);\n\n\t\t\t_morphB.set(0, 0, 0);\n\n\t\t\t_morphC.set(0, 0, 0);\n\n\t\t\tfor (var i = 0, il = morphPosition.length; i < il; i++) {\n\t\t\t\tvar influence = morphInfluences[i];\n\t\t\t\tvar morphAttribute = morphPosition[i];\n\t\t\t\tif (influence === 0) continue;\n\n\t\t\t\t_tempA.fromBufferAttribute(morphAttribute, a);\n\n\t\t\t\t_tempB.fromBufferAttribute(morphAttribute, b);\n\n\t\t\t\t_tempC.fromBufferAttribute(morphAttribute, c);\n\n\t\t\t\tif (morphTargetsRelative) {\n\t\t\t\t\t_morphA.addScaledVector(_tempA, influence);\n\n\t\t\t\t\t_morphB.addScaledVector(_tempB, influence);\n\n\t\t\t\t\t_morphC.addScaledVector(_tempC, influence);\n\t\t\t\t} else {\n\t\t\t\t\t_morphA.addScaledVector(_tempA.sub(_vA), influence);\n\n\t\t\t\t\t_morphB.addScaledVector(_tempB.sub(_vB), influence);\n\n\t\t\t\t\t_morphC.addScaledVector(_tempC.sub(_vC), influence);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_vA.add(_morphA);\n\n\t\t\t_vB.add(_morphB);\n\n\t\t\t_vC.add(_morphC);\n\t\t}\n\n\t\tif (object.isSkinnedMesh && material.skinning) {\n\t\t\tobject.boneTransform(a, _vA);\n\t\t\tobject.boneTransform(b, _vB);\n\t\t\tobject.boneTransform(c, _vC);\n\t\t}\n\n\t\tvar intersection = checkIntersection(object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint);\n\n\t\tif (intersection) {\n\t\t\tif (uv) {\n\t\t\t\t_uvA.fromBufferAttribute(uv, a);\n\n\t\t\t\t_uvB.fromBufferAttribute(uv, b);\n\n\t\t\t\t_uvC.fromBufferAttribute(uv, c);\n\n\t\t\t\tintersection.uv = Triangle.getUV(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2());\n\t\t\t}\n\n\t\t\tif (uv2) {\n\t\t\t\t_uvA.fromBufferAttribute(uv2, a);\n\n\t\t\t\t_uvB.fromBufferAttribute(uv2, b);\n\n\t\t\t\t_uvC.fromBufferAttribute(uv2, c);\n\n\t\t\t\tintersection.uv2 = Triangle.getUV(_intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2());\n\t\t\t}\n\n\t\t\tvar face = {\n\t\t\t\ta: a,\n\t\t\t\tb: b,\n\t\t\t\tc: c,\n\t\t\t\tnormal: new Vector3(),\n\t\t\t\tmaterialIndex: 0\n\t\t\t};\n\t\t\tTriangle.getNormal(_vA, _vB, _vC, face.normal);\n\t\t\tintersection.face = face;\n\t\t}\n\n\t\treturn intersection;\n\t}\n\n\tvar BoxGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(BoxGeometry, _BufferGeometry);\n\n\t\tfunction BoxGeometry(width, height, depth, widthSegments, heightSegments, depthSegments) {\n\t\t\tvar _this;\n\n\t\t\tif (width === void 0) {\n\t\t\t\twidth = 1;\n\t\t\t}\n\n\t\t\tif (height === void 0) {\n\t\t\t\theight = 1;\n\t\t\t}\n\n\t\t\tif (depth === void 0) {\n\t\t\t\tdepth = 1;\n\t\t\t}\n\n\t\t\tif (widthSegments === void 0) {\n\t\t\t\twidthSegments = 1;\n\t\t\t}\n\n\t\t\tif (heightSegments === void 0) {\n\t\t\t\theightSegments = 1;\n\t\t\t}\n\n\t\t\tif (depthSegments === void 0) {\n\t\t\t\tdepthSegments = 1;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'BoxGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tdepthSegments: depthSegments\n\t\t\t};\n\n\t\t\tvar scope = _assertThisInitialized(_this); // segments\n\n\n\t\t\twidthSegments = Math.floor(widthSegments);\n\t\t\theightSegments = Math.floor(heightSegments);\n\t\t\tdepthSegments = Math.floor(depthSegments); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar numberOfVertices = 0;\n\t\t\tvar groupStart = 0; // build each side of the box geometry\n\n\t\t\tbuildPlane('z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px\n\n\t\t\tbuildPlane('z', 'y', 'x', 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx\n\n\t\t\tbuildPlane('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py\n\n\t\t\tbuildPlane('x', 'z', 'y', 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny\n\n\t\t\tbuildPlane('x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz\n\n\t\t\tbuildPlane('x', 'y', 'z', -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz\n\t\t\t// build geometry\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\tfunction buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {\n\t\t\t\tvar segmentWidth = width / gridX;\n\t\t\t\tvar segmentHeight = height / gridY;\n\t\t\t\tvar widthHalf = width / 2;\n\t\t\t\tvar heightHalf = height / 2;\n\t\t\t\tvar depthHalf = depth / 2;\n\t\t\t\tvar gridX1 = gridX + 1;\n\t\t\t\tvar gridY1 = gridY + 1;\n\t\t\t\tvar vertexCounter = 0;\n\t\t\t\tvar groupCount = 0;\n\t\t\t\tvar vector = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\t\tfor (var iy = 0; iy < gridY1; iy++) {\n\t\t\t\t\tvar y = iy * segmentHeight - heightHalf;\n\n\t\t\t\t\tfor (var ix = 0; ix < gridX1; ix++) {\n\t\t\t\t\t\tvar x = ix * segmentWidth - widthHalf; // set values to correct vector component\n\n\t\t\t\t\t\tvector[u] = x * udir;\n\t\t\t\t\t\tvector[v] = y * vdir;\n\t\t\t\t\t\tvector[w] = depthHalf; // now apply vector to vertex buffer\n\n\t\t\t\t\t\tvertices.push(vector.x, vector.y, vector.z); // set values to correct vector component\n\n\t\t\t\t\t\tvector[u] = 0;\n\t\t\t\t\t\tvector[v] = 0;\n\t\t\t\t\t\tvector[w] = depth > 0 ? 1 : -1; // now apply vector to normal buffer\n\n\t\t\t\t\t\tnormals.push(vector.x, vector.y, vector.z); // uvs\n\n\t\t\t\t\t\tuvs.push(ix / gridX);\n\t\t\t\t\t\tuvs.push(1 - iy / gridY); // counters\n\n\t\t\t\t\t\tvertexCounter += 1;\n\t\t\t\t\t}\n\t\t\t\t} // indices\n\t\t\t\t// 1. you need three indices to draw a single face\n\t\t\t\t// 2. a single segment consists of two faces\n\t\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\n\t\t\t\tfor (var _iy = 0; _iy < gridY; _iy++) {\n\t\t\t\t\tfor (var _ix = 0; _ix < gridX; _ix++) {\n\t\t\t\t\t\tvar a = numberOfVertices + _ix + gridX1 * _iy;\n\t\t\t\t\t\tvar b = numberOfVertices + _ix + gridX1 * (_iy + 1);\n\t\t\t\t\t\tvar c = numberOfVertices + (_ix + 1) + gridX1 * (_iy + 1);\n\t\t\t\t\t\tvar d = numberOfVertices + (_ix + 1) + gridX1 * _iy; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d); // increase counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\t\t\t\t\t}\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, materialIndex); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount; // update total number of vertices\n\n\t\t\t\tnumberOfVertices += vertexCounter;\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn BoxGeometry;\n\t}(BufferGeometry);\n\n\t/**\n\t * Uniform Utilities\n\t */\n\tfunction cloneUniforms(src) {\n\t\tvar dst = {};\n\n\t\tfor (var u in src) {\n\t\t\tdst[u] = {};\n\n\t\t\tfor (var p in src[u]) {\n\t\t\t\tvar property = src[u][p];\n\n\t\t\t\tif (property && (property.isColor || property.isMatrix3 || property.isMatrix4 || property.isVector2 || property.isVector3 || property.isVector4 || property.isTexture || property.isQuaternion)) {\n\t\t\t\t\tdst[u][p] = property.clone();\n\t\t\t\t} else if (Array.isArray(property)) {\n\t\t\t\t\tdst[u][p] = property.slice();\n\t\t\t\t} else {\n\t\t\t\t\tdst[u][p] = property;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn dst;\n\t}\n\tfunction mergeUniforms(uniforms) {\n\t\tvar merged = {};\n\n\t\tfor (var u = 0; u < uniforms.length; u++) {\n\t\t\tvar tmp = cloneUniforms(uniforms[u]);\n\n\t\t\tfor (var p in tmp) {\n\t\t\t\tmerged[p] = tmp[p];\n\t\t\t}\n\t\t}\n\n\t\treturn merged;\n\t} // Legacy\n\n\tvar UniformsUtils = {\n\t\tclone: cloneUniforms,\n\t\tmerge: mergeUniforms\n\t};\n\n\tvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\n\tvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n\t/**\n\t * parameters = {\n\t *\tdefines: { \"label\" : \"value\" },\n\t *\tuniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n\t *\n\t *\tfragmentShader: <string>,\n\t *\tvertexShader: <string>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tlights: <bool>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tfunction ShaderMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.type = 'ShaderMaterial';\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\t\tthis.vertexShader = default_vertex;\n\t\tthis.fragmentShader = default_fragment;\n\t\tthis.linewidth = 1;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.fog = false; // set to use scene fog\n\n\t\tthis.lights = false; // set to use scene lights\n\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.skinning = false; // set to use skinning attribute streams\n\n\t\tthis.morphTargets = false; // set to use morph targets\n\n\t\tthis.morphNormals = false; // set to use morph normals\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false,\n\t\t\t// set to use derivatives\n\t\t\tfragDepth: false,\n\t\t\t// set to use fragment depth values\n\t\t\tdrawBuffers: false,\n\t\t\t// set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\n\t\t}; // When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [1, 1, 1],\n\t\t\t'uv': [0, 0],\n\t\t\t'uv2': [0, 0]\n\t\t};\n\t\tthis.index0AttributeName = undefined;\n\t\tthis.uniformsNeedUpdate = false;\n\t\tthis.glslVersion = null;\n\n\t\tif (parameters !== undefined) {\n\t\t\tif (parameters.attributes !== undefined) {\n\t\t\t\tconsole.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');\n\t\t\t}\n\n\t\t\tthis.setValues(parameters);\n\t\t}\n\t}\n\n\tShaderMaterial.prototype = Object.create(Material.prototype);\n\tShaderMaterial.prototype.constructor = ShaderMaterial;\n\tShaderMaterial.prototype.isShaderMaterial = true;\n\n\tShaderMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\t\tthis.uniforms = cloneUniforms(source.uniforms);\n\t\tthis.defines = Object.assign({}, source.defines);\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\tthis.extensions = Object.assign({}, source.extensions);\n\t\tthis.glslVersion = source.glslVersion;\n\t\treturn this;\n\t};\n\n\tShaderMaterial.prototype.toJSON = function (meta) {\n\t\tvar data = Material.prototype.toJSON.call(this, meta);\n\t\tdata.glslVersion = this.glslVersion;\n\t\tdata.uniforms = {};\n\n\t\tfor (var name in this.uniforms) {\n\t\t\tvar uniform = this.uniforms[name];\n\t\t\tvar value = uniform.value;\n\n\t\t\tif (value && value.isTexture) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON(meta).uuid\n\t\t\t\t};\n\t\t\t} else if (value && value.isColor) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\t\t\t} else if (value && value.isVector2) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else if (value && value.isVector3) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else if (value && value.isVector4) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else if (value && value.isMatrix3) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'm3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else if (value && value.isMatrix4) {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tdata.uniforms[name] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t}; // note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\t\t\t}\n\t\t}\n\n\t\tif (Object.keys(this.defines).length > 0) data.defines = this.defines;\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\t\tvar extensions = {};\n\n\t\tfor (var key in this.extensions) {\n\t\t\tif (this.extensions[key] === true) extensions[key] = true;\n\t\t}\n\n\t\tif (Object.keys(extensions).length > 0) data.extensions = extensions;\n\t\treturn data;\n\t};\n\n\tfunction Camera() {\n\t\tObject3D.call(this);\n\t\tthis.type = 'Camera';\n\t\tthis.matrixWorldInverse = new Matrix4();\n\t\tthis.projectionMatrix = new Matrix4();\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\t}\n\n\tCamera.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Camera,\n\t\tisCamera: true,\n\t\tcopy: function copy(source, recursive) {\n\t\t\tObject3D.prototype.copy.call(this, source, recursive);\n\t\t\tthis.matrixWorldInverse.copy(source.matrixWorldInverse);\n\t\t\tthis.projectionMatrix.copy(source.projectionMatrix);\n\t\t\tthis.projectionMatrixInverse.copy(source.projectionMatrixInverse);\n\t\t\treturn this;\n\t\t},\n\t\tgetWorldDirection: function getWorldDirection(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Camera: .getWorldDirection() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\tthis.updateWorldMatrix(true, false);\n\t\t\tvar e = this.matrixWorld.elements;\n\t\t\treturn target.set(-e[8], -e[9], -e[10]).normalize();\n\t\t},\n\t\tupdateMatrixWorld: function updateMatrixWorld(force) {\n\t\t\tObject3D.prototype.updateMatrixWorld.call(this, force);\n\t\t\tthis.matrixWorldInverse.copy(this.matrixWorld).invert();\n\t\t},\n\t\tupdateWorldMatrix: function updateWorldMatrix(updateParents, updateChildren) {\n\t\t\tObject3D.prototype.updateWorldMatrix.call(this, updateParents, updateChildren);\n\t\t\tthis.matrixWorldInverse.copy(this.matrixWorld).invert();\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t}\n\t});\n\n\tfunction PerspectiveCamera(fov, aspect, near, far) {\n\t\tif (fov === void 0) {\n\t\t\tfov = 50;\n\t\t}\n\n\t\tif (aspect === void 0) {\n\t\t\taspect = 1;\n\t\t}\n\n\t\tif (near === void 0) {\n\t\t\tnear = 0.1;\n\t\t}\n\n\t\tif (far === void 0) {\n\t\t\tfar = 2000;\n\t\t}\n\n\t\tCamera.call(this);\n\t\tthis.type = 'PerspectiveCamera';\n\t\tthis.fov = fov;\n\t\tthis.zoom = 1;\n\t\tthis.near = near;\n\t\tthis.far = far;\n\t\tthis.focus = 10;\n\t\tthis.aspect = aspect;\n\t\tthis.view = null;\n\t\tthis.filmGauge = 35; // width of the film (default in millimeters)\n\n\t\tthis.filmOffset = 0; // horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\t}\n\n\tPerspectiveCamera.prototype = Object.assign(Object.create(Camera.prototype), {\n\t\tconstructor: PerspectiveCamera,\n\t\tisPerspectiveCamera: true,\n\t\tcopy: function copy(source, recursive) {\n\t\t\tCamera.prototype.copy.call(this, source, recursive);\n\t\t\tthis.fov = source.fov;\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.focus = source.focus;\n\t\t\tthis.aspect = source.aspect;\n\t\t\tthis.view = source.view === null ? null : Object.assign({}, source.view);\n\t\t\tthis.filmGauge = source.filmGauge;\n\t\t\tthis.filmOffset = source.filmOffset;\n\t\t\treturn this;\n\t\t},\n\n\t\t/**\n\t\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t\t *\n\t\t * The default film gauge is 35, so that the focal length can be specified for\n\t\t * a 35mm (full frame) camera.\n\t\t *\n\t\t * Values for focal length and film gauge must have the same unit.\n\t\t */\n\t\tsetFocalLength: function setFocalLength(focalLength) {\n\t\t\t/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\n\t\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\t\t\tthis.fov = MathUtils.RAD2DEG * 2 * Math.atan(vExtentSlope);\n\t\t\tthis.updateProjectionMatrix();\n\t\t},\n\n\t\t/**\n\t\t * Calculates the focal length from the current .fov and .filmGauge.\n\t\t */\n\t\tgetFocalLength: function getFocalLength() {\n\t\t\tvar vExtentSlope = Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov);\n\t\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\t\t},\n\t\tgetEffectiveFOV: function getEffectiveFOV() {\n\t\t\treturn MathUtils.RAD2DEG * 2 * Math.atan(Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov) / this.zoom);\n\t\t},\n\t\tgetFilmWidth: function getFilmWidth() {\n\t\t\t// film not completely covered in portrait format (aspect < 1)\n\t\t\treturn this.filmGauge * Math.min(this.aspect, 1);\n\t\t},\n\t\tgetFilmHeight: function getFilmHeight() {\n\t\t\t// film not completely covered in landscape format (aspect > 1)\n\t\t\treturn this.filmGauge / Math.max(this.aspect, 1);\n\t\t},\n\n\t\t/**\n\t\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t\t * multi-monitor/multi-machine setups.\n\t\t *\n\t\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t\t * the monitors are in grid like this\n\t\t *\n\t\t *\t +---+---+---+\n\t\t *\t | A | B | C |\n\t\t *\t +---+---+---+\n\t\t *\t | D | E | F |\n\t\t *\t +---+---+---+\n\t\t *\n\t\t * then for each monitor you would call it like this\n\t\t *\n\t\t *\t const w = 1920;\n\t\t *\t const h = 1080;\n\t\t *\t const fullWidth = w * 3;\n\t\t *\t const fullHeight = h * 2;\n\t\t *\n\t\t *\t --A--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t\t *\t --B--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t\t *\t --C--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t\t *\t --D--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t\t *\t --E--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t\t *\t --F--\n\t\t *\t camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t\t *\n\t\t *\t Note there is no reason monitors have to be the same size or in a grid.\n\t\t */\n\t\tsetViewOffset: function setViewOffset(fullWidth, fullHeight, x, y, width, height) {\n\t\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\t\tif (this.view === null) {\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\t\t\tthis.updateProjectionMatrix();\n\t\t},\n\t\tclearViewOffset: function clearViewOffset() {\n\t\t\tif (this.view !== null) {\n\t\t\t\tthis.view.enabled = false;\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t},\n\t\tupdateProjectionMatrix: function updateProjectionMatrix() {\n\t\t\tvar near = this.near;\n\t\t\tvar top = near * Math.tan(MathUtils.DEG2RAD * 0.5 * this.fov) / this.zoom;\n\t\t\tvar height = 2 * top;\n\t\t\tvar width = this.aspect * height;\n\t\t\tvar left = -0.5 * width;\n\t\t\tvar view = this.view;\n\n\t\t\tif (this.view !== null && this.view.enabled) {\n\t\t\t\tvar fullWidth = view.fullWidth,\n\t\t\t\t\t\tfullHeight = view.fullHeight;\n\t\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\t\twidth *= view.width / fullWidth;\n\t\t\t\theight *= view.height / fullHeight;\n\t\t\t}\n\n\t\t\tvar skew = this.filmOffset;\n\t\t\tif (skew !== 0) left += near * skew / this.getFilmWidth();\n\t\t\tthis.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far);\n\t\t\tthis.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n\t\t},\n\t\ttoJSON: function toJSON(meta) {\n\t\t\tvar data = Object3D.prototype.toJSON.call(this, meta);\n\t\t\tdata.object.fov = this.fov;\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tdata.object.focus = this.focus;\n\t\t\tdata.object.aspect = this.aspect;\n\t\t\tif (this.view !== null) data.object.view = Object.assign({}, this.view);\n\t\t\tdata.object.filmGauge = this.filmGauge;\n\t\t\tdata.object.filmOffset = this.filmOffset;\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tvar fov = 90,\n\t\t\taspect = 1;\n\n\tvar CubeCamera = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(CubeCamera, _Object3D);\n\n\t\tfunction CubeCamera(near, far, renderTarget) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.type = 'CubeCamera';\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget !== true) {\n\t\t\t\tconsole.error('THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.');\n\t\t\t\treturn _assertThisInitialized(_this);\n\t\t\t}\n\n\t\t\t_this.renderTarget = renderTarget;\n\t\t\tvar cameraPX = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraPX.layers = _this.layers;\n\t\t\tcameraPX.up.set(0, -1, 0);\n\t\t\tcameraPX.lookAt(new Vector3(1, 0, 0));\n\n\t\t\t_this.add(cameraPX);\n\n\t\t\tvar cameraNX = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraNX.layers = _this.layers;\n\t\t\tcameraNX.up.set(0, -1, 0);\n\t\t\tcameraNX.lookAt(new Vector3(-1, 0, 0));\n\n\t\t\t_this.add(cameraNX);\n\n\t\t\tvar cameraPY = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraPY.layers = _this.layers;\n\t\t\tcameraPY.up.set(0, 0, 1);\n\t\t\tcameraPY.lookAt(new Vector3(0, 1, 0));\n\n\t\t\t_this.add(cameraPY);\n\n\t\t\tvar cameraNY = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraNY.layers = _this.layers;\n\t\t\tcameraNY.up.set(0, 0, -1);\n\t\t\tcameraNY.lookAt(new Vector3(0, -1, 0));\n\n\t\t\t_this.add(cameraNY);\n\n\t\t\tvar cameraPZ = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraPZ.layers = _this.layers;\n\t\t\tcameraPZ.up.set(0, -1, 0);\n\t\t\tcameraPZ.lookAt(new Vector3(0, 0, 1));\n\n\t\t\t_this.add(cameraPZ);\n\n\t\t\tvar cameraNZ = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tcameraNZ.layers = _this.layers;\n\t\t\tcameraNZ.up.set(0, -1, 0);\n\t\t\tcameraNZ.lookAt(new Vector3(0, 0, -1));\n\n\t\t\t_this.add(cameraNZ);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = CubeCamera.prototype;\n\n\t\t_proto.update = function update(renderer, scene) {\n\t\t\tif (this.parent === null) this.updateMatrixWorld();\n\t\t\tvar renderTarget = this.renderTarget;\n\t\t\tvar _this$children = this.children,\n\t\t\t\t\tcameraPX = _this$children[0],\n\t\t\t\t\tcameraNX = _this$children[1],\n\t\t\t\t\tcameraPY = _this$children[2],\n\t\t\t\t\tcameraNY = _this$children[3],\n\t\t\t\t\tcameraPZ = _this$children[4],\n\t\t\t\t\tcameraNZ = _this$children[5];\n\t\t\tvar currentXrEnabled = renderer.xr.enabled;\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\t\t\trenderer.xr.enabled = false;\n\t\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\n\t\t\trenderTarget.texture.generateMipmaps = false;\n\t\t\trenderer.setRenderTarget(renderTarget, 0);\n\t\t\trenderer.render(scene, cameraPX);\n\t\t\trenderer.setRenderTarget(renderTarget, 1);\n\t\t\trenderer.render(scene, cameraNX);\n\t\t\trenderer.setRenderTarget(renderTarget, 2);\n\t\t\trenderer.render(scene, cameraPY);\n\t\t\trenderer.setRenderTarget(renderTarget, 3);\n\t\t\trenderer.render(scene, cameraNY);\n\t\t\trenderer.setRenderTarget(renderTarget, 4);\n\t\t\trenderer.render(scene, cameraPZ);\n\t\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\t\t\trenderer.setRenderTarget(renderTarget, 5);\n\t\t\trenderer.render(scene, cameraNZ);\n\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t\trenderer.xr.enabled = currentXrEnabled;\n\t\t};\n\n\t\treturn CubeCamera;\n\t}(Object3D);\n\n\tvar CubeTexture = /*#__PURE__*/function (_Texture) {\n\t\t_inheritsLoose(CubeTexture, _Texture);\n\n\t\tfunction CubeTexture(images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {\n\t\t\tvar _this;\n\n\t\t\timages = images !== undefined ? images : [];\n\t\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\t\t\tformat = format !== undefined ? format : RGBFormat;\n\t\t\t_this = _Texture.call(this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) || this; // Why CubeTexture._needsFlipEnvMap is necessary:\n\t\t\t//\n\t\t\t// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\n\t\t\t// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\n\t\t\t// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\n\t\t\t// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\n\t\t\t// and the flag _needsFlipEnvMap controls this conversion. The flip is not required (and thus _needsFlipEnvMap is set to false)\n\t\t\t// when using WebGLCubeRenderTarget.texture as a cube texture.\n\n\t\t\t_this._needsFlipEnvMap = true;\n\t\t\t_this.flipY = false;\n\t\t\treturn _this;\n\t\t}\n\n\t\t_createClass(CubeTexture, [{\n\t\t\tkey: \"images\",\n\t\t\tget: function get() {\n\t\t\t\treturn this.image;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tthis.image = value;\n\t\t\t}\n\t\t}]);\n\n\t\treturn CubeTexture;\n\t}(Texture);\n\n\tCubeTexture.prototype.isCubeTexture = true;\n\n\tvar WebGLCubeRenderTarget = /*#__PURE__*/function (_WebGLRenderTarget) {\n\t\t_inheritsLoose(WebGLCubeRenderTarget, _WebGLRenderTarget);\n\n\t\tfunction WebGLCubeRenderTarget(size, options, dummy) {\n\t\t\tvar _this;\n\n\t\t\tif (Number.isInteger(options)) {\n\t\t\t\tconsole.warn('THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )');\n\t\t\t\toptions = dummy;\n\t\t\t}\n\n\t\t\t_this = _WebGLRenderTarget.call(this, size, size, options) || this;\n\t\t\toptions = options || {};\n\t\t\t_this.texture = new CubeTexture(undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n\t\t\t_this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\t\t_this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\t\t\t_this.texture._needsFlipEnvMap = false;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = WebGLCubeRenderTarget.prototype;\n\n\t\t_proto.fromEquirectangularTexture = function fromEquirectangularTexture(renderer, texture) {\n\t\t\tthis.texture.type = texture.type;\n\t\t\tthis.texture.format = RGBAFormat; // see #18859\n\n\t\t\tthis.texture.encoding = texture.encoding;\n\t\t\tthis.texture.generateMipmaps = texture.generateMipmaps;\n\t\t\tthis.texture.minFilter = texture.minFilter;\n\t\t\tthis.texture.magFilter = texture.magFilter;\n\t\t\tvar shader = {\n\t\t\t\tuniforms: {\n\t\t\t\t\ttEquirect: {\n\t\t\t\t\t\tvalue: null\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tvertexShader:\n\t\t\t\t/* glsl */\n\t\t\t\t\"\\n\\n\\t\\t\\t\\tvarying vec3 vWorldDirection;\\n\\n\\t\\t\\t\\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\n\\t\\t\\t\\t\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\n\\t\\t\\t\\t\\t#include <begin_vertex>\\n\\t\\t\\t\\t\\t#include <project_vertex>\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\",\n\t\t\t\tfragmentShader:\n\t\t\t\t/* glsl */\n\t\t\t\t\"\\n\\n\\t\\t\\t\\tuniform sampler2D tEquirect;\\n\\n\\t\\t\\t\\tvarying vec3 vWorldDirection;\\n\\n\\t\\t\\t\\t#include <common>\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tvec3 direction = normalize( vWorldDirection );\\n\\n\\t\\t\\t\\t\\tvec2 sampleUV = equirectUv( direction );\\n\\n\\t\\t\\t\\t\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\"\n\t\t\t};\n\t\t\tvar geometry = new BoxGeometry(5, 5, 5);\n\t\t\tvar material = new ShaderMaterial({\n\t\t\t\tname: 'CubemapFromEquirect',\n\t\t\t\tuniforms: cloneUniforms(shader.uniforms),\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\t\tside: BackSide,\n\t\t\t\tblending: NoBlending\n\t\t\t});\n\t\t\tmaterial.uniforms.tEquirect.value = texture;\n\t\t\tvar mesh = new Mesh(geometry, material);\n\t\t\tvar currentMinFilter = texture.minFilter; // Avoid blurred poles\n\n\t\t\tif (texture.minFilter === LinearMipmapLinearFilter) texture.minFilter = LinearFilter;\n\t\t\tvar camera = new CubeCamera(1, 10, this);\n\t\t\tcamera.update(renderer, mesh);\n\t\t\ttexture.minFilter = currentMinFilter;\n\t\t\tmesh.geometry.dispose();\n\t\t\tmesh.material.dispose();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clear = function clear(renderer, color, depth, stencil) {\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\trenderer.setRenderTarget(this, i);\n\t\t\t\trenderer.clear(color, depth, stencil);\n\t\t\t}\n\n\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t};\n\n\t\treturn WebGLCubeRenderTarget;\n\t}(WebGLRenderTarget);\n\n\tWebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;\n\n\tvar DataTexture = /*#__PURE__*/function (_Texture) {\n\t\t_inheritsLoose(DataTexture, _Texture);\n\n\t\tfunction DataTexture(data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) || this;\n\t\t\t_this.image = {\n\t\t\t\tdata: data || null,\n\t\t\t\twidth: width || 1,\n\t\t\t\theight: height || 1\n\t\t\t};\n\t\t\t_this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\t\t_this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\t\t_this.generateMipmaps = false;\n\t\t\t_this.flipY = false;\n\t\t\t_this.unpackAlignment = 1;\n\t\t\t_this.needsUpdate = true;\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn DataTexture;\n\t}(Texture);\n\n\tDataTexture.prototype.isDataTexture = true;\n\n\tvar _sphere$1 = /*@__PURE__*/new Sphere();\n\n\tvar _vector$5 = /*@__PURE__*/new Vector3();\n\n\tvar Frustum = /*#__PURE__*/function () {\n\t\tfunction Frustum(p0, p1, p2, p3, p4, p5) {\n\t\t\tif (p0 === void 0) {\n\t\t\t\tp0 = new Plane();\n\t\t\t}\n\n\t\t\tif (p1 === void 0) {\n\t\t\t\tp1 = new Plane();\n\t\t\t}\n\n\t\t\tif (p2 === void 0) {\n\t\t\t\tp2 = new Plane();\n\t\t\t}\n\n\t\t\tif (p3 === void 0) {\n\t\t\t\tp3 = new Plane();\n\t\t\t}\n\n\t\t\tif (p4 === void 0) {\n\t\t\t\tp4 = new Plane();\n\t\t\t}\n\n\t\t\tif (p5 === void 0) {\n\t\t\t\tp5 = new Plane();\n\t\t\t}\n\n\t\t\tthis.planes = [p0, p1, p2, p3, p4, p5];\n\t\t}\n\n\t\tvar _proto = Frustum.prototype;\n\n\t\t_proto.set = function set(p0, p1, p2, p3, p4, p5) {\n\t\t\tvar planes = this.planes;\n\t\t\tplanes[0].copy(p0);\n\t\t\tplanes[1].copy(p1);\n\t\t\tplanes[2].copy(p2);\n\t\t\tplanes[3].copy(p3);\n\t\t\tplanes[4].copy(p4);\n\t\t\tplanes[5].copy(p5);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copy = function copy(frustum) {\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tplanes[i].copy(frustum.planes[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromProjectionMatrix = function setFromProjectionMatrix(m) {\n\t\t\tvar planes = this.planes;\n\t\t\tvar me = m.elements;\n\t\t\tvar me0 = me[0],\n\t\t\t\t\tme1 = me[1],\n\t\t\t\t\tme2 = me[2],\n\t\t\t\t\tme3 = me[3];\n\t\t\tvar me4 = me[4],\n\t\t\t\t\tme5 = me[5],\n\t\t\t\t\tme6 = me[6],\n\t\t\t\t\tme7 = me[7];\n\t\t\tvar me8 = me[8],\n\t\t\t\t\tme9 = me[9],\n\t\t\t\t\tme10 = me[10],\n\t\t\t\t\tme11 = me[11];\n\t\t\tvar me12 = me[12],\n\t\t\t\t\tme13 = me[13],\n\t\t\t\t\tme14 = me[14],\n\t\t\t\t\tme15 = me[15];\n\t\t\tplanes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();\n\t\t\tplanes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();\n\t\t\tplanes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();\n\t\t\tplanes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();\n\t\t\tplanes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();\n\t\t\tplanes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.intersectsObject = function intersectsObject(object) {\n\t\t\tvar geometry = object.geometry;\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$1.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);\n\n\t\t\treturn this.intersectsSphere(_sphere$1);\n\t\t};\n\n\t\t_proto.intersectsSprite = function intersectsSprite(sprite) {\n\t\t\t_sphere$1.center.set(0, 0, 0);\n\n\t\t\t_sphere$1.radius = 0.7071067811865476;\n\n\t\t\t_sphere$1.applyMatrix4(sprite.matrixWorld);\n\n\t\t\treturn this.intersectsSphere(_sphere$1);\n\t\t};\n\n\t\t_proto.intersectsSphere = function intersectsSphere(sphere) {\n\t\t\tvar planes = this.planes;\n\t\t\tvar center = sphere.center;\n\t\t\tvar negRadius = -sphere.radius;\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tvar distance = planes[i].distanceToPoint(center);\n\n\t\t\t\tif (distance < negRadius) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tvar plane = planes[i]; // corner at max distance\n\n\t\t\t\t_vector$5.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t\t_vector$5.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t\t_vector$5.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\t\tif (plane.distanceToPoint(_vector$5) < 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.containsPoint = function containsPoint(point) {\n\t\t\tvar planes = this.planes;\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tif (planes[i].distanceToPoint(point) < 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\treturn Frustum;\n\t}();\n\n\tfunction WebGLAnimation() {\n\t\tvar context = null;\n\t\tvar isAnimating = false;\n\t\tvar animationLoop = null;\n\t\tvar requestId = null;\n\n\t\tfunction onAnimationFrame(time, frame) {\n\t\t\tanimationLoop(time, frame);\n\t\t\trequestId = context.requestAnimationFrame(onAnimationFrame);\n\t\t}\n\n\t\treturn {\n\t\t\tstart: function start() {\n\t\t\t\tif (isAnimating === true) return;\n\t\t\t\tif (animationLoop === null) return;\n\t\t\t\trequestId = context.requestAnimationFrame(onAnimationFrame);\n\t\t\t\tisAnimating = true;\n\t\t\t},\n\t\t\tstop: function stop() {\n\t\t\t\tcontext.cancelAnimationFrame(requestId);\n\t\t\t\tisAnimating = false;\n\t\t\t},\n\t\t\tsetAnimationLoop: function setAnimationLoop(callback) {\n\t\t\t\tanimationLoop = callback;\n\t\t\t},\n\t\t\tsetContext: function setContext(value) {\n\t\t\t\tcontext = value;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction WebGLAttributes(gl, capabilities) {\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar buffers = new WeakMap();\n\n\t\tfunction createBuffer(attribute, bufferType) {\n\t\t\tvar array = attribute.array;\n\t\t\tvar usage = attribute.usage;\n\t\t\tvar buffer = gl.createBuffer();\n\t\t\tgl.bindBuffer(bufferType, buffer);\n\t\t\tgl.bufferData(bufferType, array, usage);\n\t\t\tattribute.onUploadCallback();\n\t\t\tvar type = 5126;\n\n\t\t\tif (array instanceof Float32Array) {\n\t\t\t\ttype = 5126;\n\t\t\t} else if (array instanceof Float64Array) {\n\t\t\t\tconsole.warn('THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.');\n\t\t\t} else if (array instanceof Uint16Array) {\n\t\t\t\tif (attribute.isFloat16BufferAttribute) {\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\ttype = 5131;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttype = 5123;\n\t\t\t\t}\n\t\t\t} else if (array instanceof Int16Array) {\n\t\t\t\ttype = 5122;\n\t\t\t} else if (array instanceof Uint32Array) {\n\t\t\t\ttype = 5125;\n\t\t\t} else if (array instanceof Int32Array) {\n\t\t\t\ttype = 5124;\n\t\t\t} else if (array instanceof Int8Array) {\n\t\t\t\ttype = 5120;\n\t\t\t} else if (array instanceof Uint8Array) {\n\t\t\t\ttype = 5121;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tbuffer: buffer,\n\t\t\t\ttype: type,\n\t\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\t\tversion: attribute.version\n\t\t\t};\n\t\t}\n\n\t\tfunction updateBuffer(buffer, attribute, bufferType) {\n\t\t\tvar array = attribute.array;\n\t\t\tvar updateRange = attribute.updateRange;\n\t\t\tgl.bindBuffer(bufferType, buffer);\n\n\t\t\tif (updateRange.count === -1) {\n\t\t\t\t// Not using update ranges\n\t\t\t\tgl.bufferSubData(bufferType, 0, array);\n\t\t\t} else {\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tgl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array, updateRange.offset, updateRange.count);\n\t\t\t\t} else {\n\t\t\t\t\tgl.bufferSubData(bufferType, updateRange.offset * array.BYTES_PER_ELEMENT, array.subarray(updateRange.offset, updateRange.offset + updateRange.count));\n\t\t\t\t}\n\n\t\t\t\tupdateRange.count = -1; // reset range\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction get(attribute) {\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\treturn buffers.get(attribute);\n\t\t}\n\n\t\tfunction remove(attribute) {\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\tvar data = buffers.get(attribute);\n\n\t\t\tif (data) {\n\t\t\t\tgl.deleteBuffer(data.buffer);\n\t\t\t\tbuffers.delete(attribute);\n\t\t\t}\n\t\t}\n\n\t\tfunction update(attribute, bufferType) {\n\t\t\tif (attribute.isGLBufferAttribute) {\n\t\t\t\tvar cached = buffers.get(attribute);\n\n\t\t\t\tif (!cached || cached.version < attribute.version) {\n\t\t\t\t\tbuffers.set(attribute, {\n\t\t\t\t\t\tbuffer: attribute.buffer,\n\t\t\t\t\t\ttype: attribute.type,\n\t\t\t\t\t\tbytesPerElement: attribute.elementSize,\n\t\t\t\t\t\tversion: attribute.version\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (attribute.isInterleavedBufferAttribute) attribute = attribute.data;\n\t\t\tvar data = buffers.get(attribute);\n\n\t\t\tif (data === undefined) {\n\t\t\t\tbuffers.set(attribute, createBuffer(attribute, bufferType));\n\t\t\t} else if (data.version < attribute.version) {\n\t\t\t\tupdateBuffer(data.buffer, attribute, bufferType);\n\t\t\t\tdata.version = attribute.version;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tvar PlaneGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(PlaneGeometry, _BufferGeometry);\n\n\t\tfunction PlaneGeometry(width, height, widthSegments, heightSegments) {\n\t\t\tvar _this;\n\n\t\t\tif (width === void 0) {\n\t\t\t\twidth = 1;\n\t\t\t}\n\n\t\t\tif (height === void 0) {\n\t\t\t\theight = 1;\n\t\t\t}\n\n\t\t\tif (widthSegments === void 0) {\n\t\t\t\twidthSegments = 1;\n\t\t\t}\n\n\t\t\tif (heightSegments === void 0) {\n\t\t\t\theightSegments = 1;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'PlaneGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments\n\t\t\t};\n\t\t\tvar width_half = width / 2;\n\t\t\tvar height_half = height / 2;\n\t\t\tvar gridX = Math.floor(widthSegments);\n\t\t\tvar gridY = Math.floor(heightSegments);\n\t\t\tvar gridX1 = gridX + 1;\n\t\t\tvar gridY1 = gridY + 1;\n\t\t\tvar segment_width = width / gridX;\n\t\t\tvar segment_height = height / gridY; //\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\n\t\t\tfor (var iy = 0; iy < gridY1; iy++) {\n\t\t\t\tvar y = iy * segment_height - height_half;\n\n\t\t\t\tfor (var ix = 0; ix < gridX1; ix++) {\n\t\t\t\t\tvar x = ix * segment_width - width_half;\n\t\t\t\t\tvertices.push(x, -y, 0);\n\t\t\t\t\tnormals.push(0, 0, 1);\n\t\t\t\t\tuvs.push(ix / gridX);\n\t\t\t\t\tuvs.push(1 - iy / gridY);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var _iy = 0; _iy < gridY; _iy++) {\n\t\t\t\tfor (var _ix = 0; _ix < gridX; _ix++) {\n\t\t\t\t\tvar a = _ix + gridX1 * _iy;\n\t\t\t\t\tvar b = _ix + gridX1 * (_iy + 1);\n\t\t\t\t\tvar c = _ix + 1 + gridX1 * (_iy + 1);\n\t\t\t\t\tvar d = _ix + 1 + gridX1 * _iy;\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn PlaneGeometry;\n\t}(BufferGeometry);\n\n\tvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n\n\tvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar alphatest_fragment = \"#ifdef ALPHATEST\\n\\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\";\n\n\tvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\\t#endif\\n#endif\";\n\n\tvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\n\tvar begin_vertex = \"vec3 transformed = vec3( position );\";\n\n\tvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\n\tvar bsdfs = \"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\tif( cutoffDistance > 0.0 ) {\\n\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t}\\n\\treturn distanceFalloff;\\n#else\\n\\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t}\\n\\treturn 1.0;\\n#endif\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\\n\\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\\n\\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\\n\\treturn Fr * fresnel + F0;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( G * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\treturn specularColor * brdf.x + brdf.y;\\n}\\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\\n\\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\\n\\tvec3 FssEss = F * brdf.x + brdf.y;\\n\\tfloat Ess = brdf.x + brdf.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, dotLH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie(float roughness, float NoH) {\\n\\tfloat invAlpha = 1.0 / roughness;\\n\\tfloat cos2h = NoH * NoH;\\n\\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\\n}\\nfloat V_Neubelt(float NoV, float NoL) {\\n\\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\\n}\\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\\n\\tvec3 N = geometry.normal;\\n\\tvec3 V = geometry.viewDir;\\n\\tvec3 H = normalize( V + L );\\n\\tfloat dotNH = saturate( dot( N, H ) );\\n\\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\\n}\\n#endif\";\n\n\tvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\n\tvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\n\tvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\n\tvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\";\n\n\tvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\";\n\n\tvar color_fragment = \"#ifdef USE_COLOR\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\n\tvar color_pars_fragment = \"#ifdef USE_COLOR\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_pars_vertex = \"#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\n\tvar color_vertex = \"#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvColor = vec3( 1.0 );\\n#endif\\n#ifdef USE_COLOR\\n\\tvColor.xyz *= color.xyz;\\n#endif\\n#ifdef USE_INSTANCING_COLOR\\n\\tvColor.xyz *= instanceColor.xyz;\\n#endif\";\n\n\tvar common = \"#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract(sin(sn) * c);\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n\\treturn m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}\";\n\n\tvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t#define cubeUV_maxMipLevel 8.0\\n\\t#define cubeUV_minMipLevel 4.0\\n\\t#define cubeUV_maxTileSize 256.0\\n\\t#define cubeUV_minTileSize 16.0\\n\\tfloat getFace( vec3 direction ) {\\n\\t\\tvec3 absDirection = abs( direction );\\n\\t\\tfloat face = - 1.0;\\n\\t\\tif ( absDirection.x > absDirection.z ) {\\n\\t\\t\\tif ( absDirection.x > absDirection.y )\\n\\t\\t\\t\\tface = direction.x > 0.0 ? 0.0 : 3.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t} else {\\n\\t\\t\\tif ( absDirection.z > absDirection.y )\\n\\t\\t\\t\\tface = direction.z > 0.0 ? 2.0 : 5.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t}\\n\\t\\treturn face;\\n\\t}\\n\\tvec2 getUV( vec3 direction, float face ) {\\n\\t\\tvec2 uv;\\n\\t\\tif ( face == 0.0 ) {\\n\\t\\t\\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 1.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\\n\\t\\t} else if ( face == 2.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\\n\\t\\t} else if ( face == 3.0 ) {\\n\\t\\t\\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 4.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\\n\\t\\t} else {\\n\\t\\t\\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\\n\\t\\t}\\n\\t\\treturn 0.5 * ( uv + 1.0 );\\n\\t}\\n\\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\\n\\t\\tfloat face = getFace( direction );\\n\\t\\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\\n\\t\\tmipInt = max( mipInt, cubeUV_minMipLevel );\\n\\t\\tfloat faceSize = exp2( mipInt );\\n\\t\\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\\n\\t\\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\\n\\t\\tvec2 f = fract( uv );\\n\\t\\tuv += 0.5 - f;\\n\\t\\tif ( face > 2.0 ) {\\n\\t\\t\\tuv.y += faceSize;\\n\\t\\t\\tface -= 3.0;\\n\\t\\t}\\n\\t\\tuv.x += face * faceSize;\\n\\t\\tif ( mipInt < cubeUV_maxMipLevel ) {\\n\\t\\t\\tuv.y += 2.0 * cubeUV_maxTileSize;\\n\\t\\t}\\n\\t\\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\\n\\t\\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\\n\\t\\tuv *= texelSize;\\n\\t\\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x += texelSize;\\n\\t\\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.y += texelSize;\\n\\t\\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x -= texelSize;\\n\\t\\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\treturn mix( tm, bm, f.y );\\n\\t}\\n\\t#define r0 1.0\\n\\t#define v0 0.339\\n\\t#define m0 - 2.0\\n\\t#define r1 0.8\\n\\t#define v1 0.276\\n\\t#define m1 - 1.0\\n\\t#define r4 0.4\\n\\t#define v4 0.046\\n\\t#define m4 2.0\\n\\t#define r5 0.305\\n\\t#define v5 0.016\\n\\t#define m5 3.0\\n\\t#define r6 0.21\\n\\t#define v6 0.0038\\n\\t#define m6 4.0\\n\\tfloat roughnessToMip( float roughness ) {\\n\\t\\tfloat mip = 0.0;\\n\\t\\tif ( roughness >= r1 ) {\\n\\t\\t\\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\\n\\t\\t} else if ( roughness >= r4 ) {\\n\\t\\t\\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\\n\\t\\t} else if ( roughness >= r5 ) {\\n\\t\\t\\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\\n\\t\\t} else if ( roughness >= r6 ) {\\n\\t\\t\\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\\n\\t\\t} else {\\n\\t\\t\\tmip = - 2.0 * log2( 1.16 * roughness );\\t\\t}\\n\\t\\treturn mip;\\n\\t}\\n\\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\\n\\t\\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\\n\\t\\tfloat mipF = fract( mip );\\n\\t\\tfloat mipInt = floor( mip );\\n\\t\\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\\n\\t\\tif ( mipF == 0.0 ) {\\n\\t\\t\\treturn vec4( color0, 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\\n\\t\\t\\treturn vec4( mix( color0, color1, mipF ), 1.0 );\\n\\t\\t}\\n\\t}\\n#endif\";\n\n\tvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\n\tvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\n\tvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n\n\tvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\n\tvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\n\tvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\n\tvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value ) {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\";\n\n\tvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifndef ENVMAP_TYPE_CUBE_UV\\n\\t\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\n\tvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\n\tvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\n\tvar fog_vertex = \"#ifdef USE_FOG\\n\\tfogDepth = - mvPosition.z;\\n#endif\";\n\n\tvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float fogDepth;\\n#endif\";\n\n\tvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\n\tvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float fogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\n\tvar gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}\";\n\n\tvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n#endif\";\n\n\tvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\n\tvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\\n#ifdef DOUBLE_SIDED\\n\\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\\n\\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = PI * directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\";\n\n\tvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\\n\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tdirectLight.color = directionalLight.color;\\n\\t\\tdirectLight.direction = directionalLight.direction;\\n\\t\\tdirectLight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tdirectLight.color = pointLight.color;\\n\\t\\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tdirectLight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\\t\\tif ( angleCos > spotLight.coneCos ) {\\n\\t\\t\\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\t\\tdirectLight.color = spotLight.color;\\n\\t\\t\\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tdirectLight.visible = true;\\n\\t\\t} else {\\n\\t\\t\\tdirectLight.color = vec3( 0.0 );\\n\\t\\t\\tdirectLight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tirradiance *= PI;\\n\\t\\t#endif\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\n\tvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t#else\\n\\t\\t\\tvec4 envMapColor = vec4( 0.0 );\\n\\t\\t#endif\\n\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t}\\n\\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\\n\\t\\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\\t\\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\\n\\t\\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\\n\\t\\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\\t}\\n\\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( -viewDir, normal );\\n\\t\\t\\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( -viewDir, normal, refractionRatio );\\n\\t\\t#endif\\n\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\t\\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\\t\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\t\\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#else\\n\\t\\t\\t\\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\\t\\t\\t#endif\\n\\t\\t\\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\\t\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t#endif\\n\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t}\\n#endif\";\n\n\tvar lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\";\n\n\tvar lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct ToonMaterial {\\n\\tvec3 diffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\n\tvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\\tvec3 diffuseColor;\\n\\tvec3 specularColor;\\n\\tfloat specularShininess;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\n\tvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\\n#ifdef REFLECTIVITY\\n\\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#endif\\n#ifdef CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheen;\\n#endif\";\n\n\tvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat specularRoughness;\\n\\tvec3 specularColor;\\n#ifdef CLEARCOAT\\n\\tfloat clearcoat;\\n\\tfloat clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tvec3 sheenColor;\\n#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.specularRoughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(\t\t0, 1,\t\t0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tirradiance *= PI;\\n\\t#endif\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = ccDotNL * directLight.color;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tccIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t\\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\\n\\t\\t\\tmaterial.specularRoughness,\\n\\t\\t\\tdirectLight.direction,\\n\\t\\t\\tgeometry,\\n\\t\\t\\tmaterial.sheenColor\\n\\t\\t);\\n\\t#else\\n\\t\\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\\n\\t#endif\\n\\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef CLEARCOAT\\n\\t\\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\\n\\t\\tfloat ccDotNL = ccDotNV;\\n\\t\\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\\n\\t#else\\n\\t\\tfloat clearcoatDHR = 0.0;\\n\\t#endif\\n\\tfloat clearcoatInv = 1.0 - clearcoatDHR;\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\n\tvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\n\tvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\\n\\t#ifdef CLEARCOAT\\n\\t\\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\\n\\t#endif\\n#endif\";\n\n\tvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n\n\tvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\n\tvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\n\tvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\n\tvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\n\n\tvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\n\tvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\n\tvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\n\tvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\n\tvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\n\tvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n#endif\";\n\n\tvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\t\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\";\n\n\tvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\t\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\t\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\t\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\";\n\n\tvar normal_fragment_begin = \"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\\n#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * faceDirection;\\n\\t\\t\\tbitangent = bitangent * faceDirection;\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n\n\tvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN, faceDirection );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd(), faceDirection );\\n#endif\";\n\n\tvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 N = surf_norm;\\n\\t\\tvec3 q1perp = cross( q1, N );\\n\\t\\tvec3 q0perp = cross( N, q0 );\\n\\t\\tvec3 T = q1perp * st0.x + q0perp * st1.x;\\n\\t\\tvec3 B = q1perp * st0.y + q0perp * st1.y;\\n\\t\\tfloat det = max( dot( T, T ), dot( B, B ) );\\n\\t\\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\\n\\t\\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\\n\\t}\\n#endif\";\n\n\tvar clearcoat_normal_fragment_begin = \"#ifdef CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n\n\tvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\\n\\t#endif\\n#endif\";\n\n\tvar clearcoat_pars_fragment = \"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n\n\tvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n\n\tvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\n\tvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\n\tvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\n\tvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\n\tvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\n\tvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\n\tvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t\tf.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t\ttexture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t\tf.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\n\tvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\n\tvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\tvec4 shadowWorldPosition;\\n\\t#endif\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\";\n\n\tvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\n\tvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\n\tvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\n\tvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\n\tvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\n\tvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\n\tvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\n\tvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\n\tvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(\t1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,\t1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,\t1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }\";\n\n\tvar transmissionmap_fragment = \"#ifdef USE_TRANSMISSIONMAP\\n\\ttotalTransmission *= texture2D( transmissionMap, vUv ).r;\\n#endif\";\n\n\tvar transmissionmap_pars_fragment = \"#ifdef USE_TRANSMISSIONMAP\\n\\tuniform sampler2D transmissionMap;\\n#endif\";\n\n\tvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\n\n\tvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\n\n\tvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\n\tvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\n\tvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\";\n\n\tvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\";\n\n\tvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\n\tvar background_frag = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar background_vert = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\n\tvar cube_frag = \"#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar cube_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\n\tvar depth_frag = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\";\n\n\tvar depth_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\";\n\n\tvar distanceRGBA_frag = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\n\tvar distanceRGBA_vert = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\n\tvar equirect_frag = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\n\tvar equirect_vert = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\n\tvar linedashed_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar linedashed_vert = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshbasic_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshbasic_vert = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_ENVMAP\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshlambert_frag = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshlambert_vert = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshmatcap_frag = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshmatcap_vert = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#ifndef FLAT_SHADED\\n\\t\\tvNormal = normalize( transformedNormal );\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\n\tvar meshtoon_frag = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshtoon_vert = \"#define TOON\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphong_frag = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphong_vert = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar meshphysical_frag = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define REFLECTIVITY\\n\\t#define CLEARCOAT\\n\\t#define TRANSMISSION\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef TRANSMISSION\\n\\tuniform float transmission;\\n#endif\\n#ifdef REFLECTIVITY\\n\\tuniform float reflectivity;\\n#endif\\n#ifdef CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheen;\\n#endif\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <transmissionmap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#ifdef TRANSMISSION\\n\\t\\tfloat totalTransmission = transmission;\\n\\t#endif\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <transmissionmap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#ifdef TRANSMISSION\\n\\t\\tdiffuseColor.a *= mix( saturate( 1. - totalTransmission + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) ), 1.0, metalness );\\n\\t#endif\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\n\tvar meshphysical_vert = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar normal_frag = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\n\n\tvar normal_vert = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\n\tvar points_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\n\tvar points_vert = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar shadow_frag = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar shadow_vert = \"#include <common>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar sprite_frag = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\n\tvar sprite_vert = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\n\tvar ShaderChunk = {\n\t\talphamap_fragment: alphamap_fragment,\n\t\talphamap_pars_fragment: alphamap_pars_fragment,\n\t\talphatest_fragment: alphatest_fragment,\n\t\taomap_fragment: aomap_fragment,\n\t\taomap_pars_fragment: aomap_pars_fragment,\n\t\tbegin_vertex: begin_vertex,\n\t\tbeginnormal_vertex: beginnormal_vertex,\n\t\tbsdfs: bsdfs,\n\t\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\t\tclipping_planes_fragment: clipping_planes_fragment,\n\t\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\t\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\t\tclipping_planes_vertex: clipping_planes_vertex,\n\t\tcolor_fragment: color_fragment,\n\t\tcolor_pars_fragment: color_pars_fragment,\n\t\tcolor_pars_vertex: color_pars_vertex,\n\t\tcolor_vertex: color_vertex,\n\t\tcommon: common,\n\t\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\t\tdefaultnormal_vertex: defaultnormal_vertex,\n\t\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\t\tdisplacementmap_vertex: displacementmap_vertex,\n\t\temissivemap_fragment: emissivemap_fragment,\n\t\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\t\tencodings_fragment: encodings_fragment,\n\t\tencodings_pars_fragment: encodings_pars_fragment,\n\t\tenvmap_fragment: envmap_fragment,\n\t\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\t\tenvmap_pars_fragment: envmap_pars_fragment,\n\t\tenvmap_pars_vertex: envmap_pars_vertex,\n\t\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\t\tenvmap_vertex: envmap_vertex,\n\t\tfog_vertex: fog_vertex,\n\t\tfog_pars_vertex: fog_pars_vertex,\n\t\tfog_fragment: fog_fragment,\n\t\tfog_pars_fragment: fog_pars_fragment,\n\t\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\t\tlightmap_fragment: lightmap_fragment,\n\t\tlightmap_pars_fragment: lightmap_pars_fragment,\n\t\tlights_lambert_vertex: lights_lambert_vertex,\n\t\tlights_pars_begin: lights_pars_begin,\n\t\tlights_toon_fragment: lights_toon_fragment,\n\t\tlights_toon_pars_fragment: lights_toon_pars_fragment,\n\t\tlights_phong_fragment: lights_phong_fragment,\n\t\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\t\tlights_physical_fragment: lights_physical_fragment,\n\t\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\t\tlights_fragment_begin: lights_fragment_begin,\n\t\tlights_fragment_maps: lights_fragment_maps,\n\t\tlights_fragment_end: lights_fragment_end,\n\t\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\t\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\t\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\t\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\t\tmap_fragment: map_fragment,\n\t\tmap_pars_fragment: map_pars_fragment,\n\t\tmap_particle_fragment: map_particle_fragment,\n\t\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\t\tmetalnessmap_fragment: metalnessmap_fragment,\n\t\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\t\tmorphnormal_vertex: morphnormal_vertex,\n\t\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\t\tmorphtarget_vertex: morphtarget_vertex,\n\t\tnormal_fragment_begin: normal_fragment_begin,\n\t\tnormal_fragment_maps: normal_fragment_maps,\n\t\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\t\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\t\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\t\tclearcoat_pars_fragment: clearcoat_pars_fragment,\n\t\tpacking: packing,\n\t\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\t\tproject_vertex: project_vertex,\n\t\tdithering_fragment: dithering_fragment,\n\t\tdithering_pars_fragment: dithering_pars_fragment,\n\t\troughnessmap_fragment: roughnessmap_fragment,\n\t\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\t\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\t\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\t\tshadowmap_vertex: shadowmap_vertex,\n\t\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\t\tskinbase_vertex: skinbase_vertex,\n\t\tskinning_pars_vertex: skinning_pars_vertex,\n\t\tskinning_vertex: skinning_vertex,\n\t\tskinnormal_vertex: skinnormal_vertex,\n\t\tspecularmap_fragment: specularmap_fragment,\n\t\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\t\ttonemapping_fragment: tonemapping_fragment,\n\t\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\t\ttransmissionmap_fragment: transmissionmap_fragment,\n\t\ttransmissionmap_pars_fragment: transmissionmap_pars_fragment,\n\t\tuv_pars_fragment: uv_pars_fragment,\n\t\tuv_pars_vertex: uv_pars_vertex,\n\t\tuv_vertex: uv_vertex,\n\t\tuv2_pars_fragment: uv2_pars_fragment,\n\t\tuv2_pars_vertex: uv2_pars_vertex,\n\t\tuv2_vertex: uv2_vertex,\n\t\tworldpos_vertex: worldpos_vertex,\n\t\tbackground_frag: background_frag,\n\t\tbackground_vert: background_vert,\n\t\tcube_frag: cube_frag,\n\t\tcube_vert: cube_vert,\n\t\tdepth_frag: depth_frag,\n\t\tdepth_vert: depth_vert,\n\t\tdistanceRGBA_frag: distanceRGBA_frag,\n\t\tdistanceRGBA_vert: distanceRGBA_vert,\n\t\tequirect_frag: equirect_frag,\n\t\tequirect_vert: equirect_vert,\n\t\tlinedashed_frag: linedashed_frag,\n\t\tlinedashed_vert: linedashed_vert,\n\t\tmeshbasic_frag: meshbasic_frag,\n\t\tmeshbasic_vert: meshbasic_vert,\n\t\tmeshlambert_frag: meshlambert_frag,\n\t\tmeshlambert_vert: meshlambert_vert,\n\t\tmeshmatcap_frag: meshmatcap_frag,\n\t\tmeshmatcap_vert: meshmatcap_vert,\n\t\tmeshtoon_frag: meshtoon_frag,\n\t\tmeshtoon_vert: meshtoon_vert,\n\t\tmeshphong_frag: meshphong_frag,\n\t\tmeshphong_vert: meshphong_vert,\n\t\tmeshphysical_frag: meshphysical_frag,\n\t\tmeshphysical_vert: meshphysical_vert,\n\t\tnormal_frag: normal_frag,\n\t\tnormal_vert: normal_vert,\n\t\tpoints_frag: points_frag,\n\t\tpoints_vert: points_vert,\n\t\tshadow_frag: shadow_frag,\n\t\tshadow_vert: shadow_vert,\n\t\tsprite_frag: sprite_frag,\n\t\tsprite_vert: sprite_vert\n\t};\n\n\t/**\n\t * Uniforms library for shared webgl shaders\n\t */\n\n\tvar UniformsLib = {\n\t\tcommon: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xeeeeee)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t},\n\t\t\tuv2Transform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tspecularmap: {\n\t\t\tspecularMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tenvmap: {\n\t\t\tenvMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tflipEnvMap: {\n\t\t\t\tvalue: -1\n\t\t\t},\n\t\t\treflectivity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\trefractionRatio: {\n\t\t\t\tvalue: 0.98\n\t\t\t},\n\t\t\tmaxMipLevel: {\n\t\t\t\tvalue: 0\n\t\t\t}\n\t\t},\n\t\taomap: {\n\t\t\taoMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\taoMapIntensity: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\tlightmap: {\n\t\t\tlightMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tlightMapIntensity: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\temissivemap: {\n\t\t\temissiveMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tbumpmap: {\n\t\t\tbumpMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tbumpScale: {\n\t\t\t\tvalue: 1\n\t\t\t}\n\t\t},\n\t\tnormalmap: {\n\t\t\tnormalMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tnormalScale: {\n\t\t\t\tvalue: new Vector2(1, 1)\n\t\t\t}\n\t\t},\n\t\tdisplacementmap: {\n\t\t\tdisplacementMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tdisplacementScale: {\n\t\t\t\tvalue: 1\n\t\t\t},\n\t\t\tdisplacementBias: {\n\t\t\t\tvalue: 0\n\t\t\t}\n\t\t},\n\t\troughnessmap: {\n\t\t\troughnessMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tmetalnessmap: {\n\t\t\tmetalnessMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tgradientmap: {\n\t\t\tgradientMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tfog: {\n\t\t\tfogDensity: {\n\t\t\t\tvalue: 0.00025\n\t\t\t},\n\t\t\tfogNear: {\n\t\t\t\tvalue: 1\n\t\t\t},\n\t\t\tfogFar: {\n\t\t\t\tvalue: 2000\n\t\t\t},\n\t\t\tfogColor: {\n\t\t\t\tvalue: new Color(0xffffff)\n\t\t\t}\n\t\t},\n\t\tlights: {\n\t\t\tambientLightColor: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tlightProbe: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tdirectionalLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tcolor: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdirectionalLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tdirectionalShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tdirectionalShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tspotLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tdistance: {},\n\t\t\t\t\tconeCos: {},\n\t\t\t\t\tpenumbraCos: {},\n\t\t\t\t\tdecay: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tspotLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tspotShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tspotShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tpointLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\tdecay: {},\n\t\t\t\t\tdistance: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tpointLightShadows: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tshadowBias: {},\n\t\t\t\t\tshadowNormalBias: {},\n\t\t\t\t\tshadowRadius: {},\n\t\t\t\t\tshadowMapSize: {},\n\t\t\t\t\tshadowCameraNear: {},\n\t\t\t\t\tshadowCameraFar: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tpointShadowMap: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tpointShadowMatrix: {\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\themisphereLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tdirection: {},\n\t\t\t\t\tskyColor: {},\n\t\t\t\t\tgroundColor: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\t\trectAreaLights: {\n\t\t\t\tvalue: [],\n\t\t\t\tproperties: {\n\t\t\t\t\tcolor: {},\n\t\t\t\t\tposition: {},\n\t\t\t\t\twidth: {},\n\t\t\t\t\theight: {}\n\t\t\t\t}\n\t\t\t},\n\t\t\tltc_1: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tltc_2: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t},\n\t\tpoints: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xeeeeee)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tsize: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t},\n\t\tsprite: {\n\t\t\tdiffuse: {\n\t\t\t\tvalue: new Color(0xeeeeee)\n\t\t\t},\n\t\t\topacity: {\n\t\t\t\tvalue: 1.0\n\t\t\t},\n\t\t\tcenter: {\n\t\t\t\tvalue: new Vector2(0.5, 0.5)\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tvalue: 0.0\n\t\t\t},\n\t\t\tmap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\talphaMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tuvTransform: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t}\n\t};\n\n\tvar ShaderLib = {\n\t\tbasic: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\t\t},\n\t\tlambert: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\t\t},\n\t\tphong: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t},\n\t\t\t\tspecular: {\n\t\t\t\t\tvalue: new Color(0x111111)\n\t\t\t\t},\n\t\t\t\tshininess: {\n\t\t\t\t\tvalue: 30\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphong_frag\n\t\t},\n\t\tstandard: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.roughnessmap, UniformsLib.metalnessmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t},\n\t\t\t\troughness: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t},\n\t\t\t\tmetalness: {\n\t\t\t\t\tvalue: 0.0\n\t\t\t\t},\n\t\t\t\tenvMapIntensity: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t} // temporary\n\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t\t},\n\t\ttoon: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.gradientmap, UniformsLib.fog, UniformsLib.lights, {\n\t\t\t\temissive: {\n\t\t\t\t\tvalue: new Color(0x000000)\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshtoon_vert,\n\t\t\tfragmentShader: ShaderChunk.meshtoon_frag\n\t\t},\n\t\tmatcap: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.fog, {\n\t\t\t\tmatcap: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\t\t},\n\t\tpoints: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.points, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.points_vert,\n\t\t\tfragmentShader: ShaderChunk.points_frag\n\t\t},\n\t\tdashed: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.fog, {\n\t\t\t\tscale: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\tdashSize: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\ttotalSize: {\n\t\t\t\t\tvalue: 2\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\t\tfragmentShader: ShaderChunk.linedashed_frag\n\t\t},\n\t\tdepth: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap]),\n\t\t\tvertexShader: ShaderChunk.depth_vert,\n\t\t\tfragmentShader: ShaderChunk.depth_frag\n\t\t},\n\t\tnormal: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, {\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.normal_vert,\n\t\t\tfragmentShader: ShaderChunk.normal_frag\n\t\t},\n\t\tsprite: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.sprite, UniformsLib.fog]),\n\t\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\t\tfragmentShader: ShaderChunk.sprite_frag\n\t\t},\n\t\tbackground: {\n\t\t\tuniforms: {\n\t\t\t\tuvTransform: {\n\t\t\t\t\tvalue: new Matrix3()\n\t\t\t\t},\n\t\t\t\tt2D: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: ShaderChunk.background_vert,\n\t\t\tfragmentShader: ShaderChunk.background_frag\n\t\t},\n\n\t\t/* -------------------------------------------------------------------------\n\t\t//\tCube map shader\n\t\t ------------------------------------------------------------------------- */\n\t\tcube: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.envmap, {\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.cube_vert,\n\t\t\tfragmentShader: ShaderChunk.cube_frag\n\t\t},\n\t\tequirect: {\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: {\n\t\t\t\t\tvalue: null\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\t\tfragmentShader: ShaderChunk.equirect_frag\n\t\t},\n\t\tdistanceRGBA: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.common, UniformsLib.displacementmap, {\n\t\t\t\treferencePosition: {\n\t\t\t\t\tvalue: new Vector3()\n\t\t\t\t},\n\t\t\t\tnearDistance: {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\tfarDistance: {\n\t\t\t\t\tvalue: 1000\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\t\t},\n\t\tshadow: {\n\t\t\tuniforms: mergeUniforms([UniformsLib.lights, UniformsLib.fog, {\n\t\t\t\tcolor: {\n\t\t\t\t\tvalue: new Color(0x00000)\n\t\t\t\t},\n\t\t\t\topacity: {\n\t\t\t\t\tvalue: 1.0\n\t\t\t\t}\n\t\t\t}]),\n\t\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\t\tfragmentShader: ShaderChunk.shadow_frag\n\t\t}\n\t};\n\tShaderLib.physical = {\n\t\tuniforms: mergeUniforms([ShaderLib.standard.uniforms, {\n\t\t\tclearcoat: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tclearcoatMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tclearcoatRoughness: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\tclearcoatRoughnessMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tclearcoatNormalScale: {\n\t\t\t\tvalue: new Vector2(1, 1)\n\t\t\t},\n\t\t\tclearcoatNormalMap: {\n\t\t\t\tvalue: null\n\t\t\t},\n\t\t\tsheen: {\n\t\t\t\tvalue: new Color(0x000000)\n\t\t\t},\n\t\t\ttransmission: {\n\t\t\t\tvalue: 0\n\t\t\t},\n\t\t\ttransmissionMap: {\n\t\t\t\tvalue: null\n\t\t\t}\n\t\t}]),\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\t};\n\n\tfunction WebGLBackground(renderer, cubemaps, state, objects, premultipliedAlpha) {\n\t\tvar clearColor = new Color(0x000000);\n\t\tvar clearAlpha = 0;\n\t\tvar planeMesh;\n\t\tvar boxMesh;\n\t\tvar currentBackground = null;\n\t\tvar currentBackgroundVersion = 0;\n\t\tvar currentTonemapping = null;\n\n\t\tfunction render(renderList, scene, camera, forceClear) {\n\t\t\tvar background = scene.isScene === true ? scene.background : null;\n\n\t\t\tif (background && background.isTexture) {\n\t\t\t\tbackground = cubemaps.get(background);\n\t\t\t} // Ignore background in AR\n\t\t\t// TODO: Reconsider this.\n\n\n\t\t\tvar xr = renderer.xr;\n\t\t\tvar session = xr.getSession && xr.getSession();\n\n\t\t\tif (session && session.environmentBlendMode === 'additive') {\n\t\t\t\tbackground = null;\n\t\t\t}\n\n\t\t\tif (background === null) {\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t} else if (background && background.isColor) {\n\t\t\t\tsetClear(background, 1);\n\t\t\t\tforceClear = true;\n\t\t\t}\n\n\t\t\tif (renderer.autoClear || forceClear) {\n\t\t\t\trenderer.clear(renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil);\n\t\t\t}\n\n\t\t\tif (background && (background.isCubeTexture || background.isWebGLCubeRenderTarget || background.mapping === CubeUVReflectionMapping)) {\n\t\t\t\tif (boxMesh === undefined) {\n\t\t\t\t\tboxMesh = new Mesh(new BoxGeometry(1, 1, 1), new ShaderMaterial({\n\t\t\t\t\t\tname: 'BackgroundCubeMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms(ShaderLib.cube.uniforms),\n\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t}));\n\t\t\t\t\tboxMesh.geometry.deleteAttribute('normal');\n\t\t\t\t\tboxMesh.geometry.deleteAttribute('uv');\n\n\t\t\t\t\tboxMesh.onBeforeRender = function (renderer, scene, camera) {\n\t\t\t\t\t\tthis.matrixWorld.copyPosition(camera.matrixWorld);\n\t\t\t\t\t}; // enable code injection for non-built-in material\n\n\n\t\t\t\t\tObject.defineProperty(boxMesh.material, 'envMap', {\n\t\t\t\t\t\tget: function get() {\n\t\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tobjects.update(boxMesh);\n\t\t\t\t}\n\n\t\t\t\tif (background.isWebGLCubeRenderTarget) {\n\t\t\t\t\t// TODO Deprecate\n\t\t\t\t\tbackground = background.texture;\n\t\t\t\t}\n\n\t\t\t\tboxMesh.material.uniforms.envMap.value = background;\n\t\t\t\tboxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background._needsFlipEnvMap ? -1 : 1;\n\n\t\t\t\tif (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n\t\t\t\t\tboxMesh.material.needsUpdate = true;\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\t\t\t\t} // push to the pre-sorted opaque render list\n\n\n\t\t\t\trenderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);\n\t\t\t} else if (background && background.isTexture) {\n\t\t\t\tif (planeMesh === undefined) {\n\t\t\t\t\tplaneMesh = new Mesh(new PlaneGeometry(2, 2), new ShaderMaterial({\n\t\t\t\t\t\tname: 'BackgroundMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms(ShaderLib.background.uniforms),\n\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t}));\n\t\t\t\t\tplaneMesh.geometry.deleteAttribute('normal'); // enable code injection for non-built-in material\n\n\t\t\t\t\tObject.defineProperty(planeMesh.material, 'map', {\n\t\t\t\t\t\tget: function get() {\n\t\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tobjects.update(planeMesh);\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\n\t\t\t\tif (background.matrixAutoUpdate === true) {\n\t\t\t\t\tbackground.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy(background.matrix);\n\n\t\t\t\tif (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer.toneMapping) {\n\t\t\t\t\tplaneMesh.material.needsUpdate = true;\n\t\t\t\t\tcurrentBackground = background;\n\t\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\t\t\t\t} // push to the pre-sorted opaque render list\n\n\n\t\t\t\trenderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);\n\t\t\t}\n\t\t}\n\n\t\tfunction setClear(color, alpha) {\n\t\t\tstate.buffers.color.setClear(color.r, color.g, color.b, alpha, premultipliedAlpha);\n\t\t}\n\n\t\treturn {\n\t\t\tgetClearColor: function getClearColor() {\n\t\t\t\treturn clearColor;\n\t\t\t},\n\t\t\tsetClearColor: function setClearColor(color, alpha) {\n\t\t\t\tif (alpha === void 0) {\n\t\t\t\t\talpha = 1;\n\t\t\t\t}\n\n\t\t\t\tclearColor.set(color);\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t},\n\t\t\tgetClearAlpha: function getClearAlpha() {\n\t\t\t\treturn clearAlpha;\n\t\t\t},\n\t\t\tsetClearAlpha: function setClearAlpha(alpha) {\n\t\t\t\tclearAlpha = alpha;\n\t\t\t\tsetClear(clearColor, clearAlpha);\n\t\t\t},\n\t\t\trender: render\n\t\t};\n\t}\n\n\tfunction WebGLBindingStates(gl, extensions, attributes, capabilities) {\n\t\tvar maxVertexAttributes = gl.getParameter(34921);\n\t\tvar extension = capabilities.isWebGL2 ? null : extensions.get('OES_vertex_array_object');\n\t\tvar vaoAvailable = capabilities.isWebGL2 || extension !== null;\n\t\tvar bindingStates = {};\n\t\tvar defaultState = createBindingState(null);\n\t\tvar currentState = defaultState;\n\n\t\tfunction setup(object, material, program, geometry, index) {\n\t\t\tvar updateBuffers = false;\n\n\t\t\tif (vaoAvailable) {\n\t\t\t\tvar state = getBindingState(geometry, program, material);\n\n\t\t\t\tif (currentState !== state) {\n\t\t\t\t\tcurrentState = state;\n\t\t\t\t\tbindVertexArrayObject(currentState.object);\n\t\t\t\t}\n\n\t\t\t\tupdateBuffers = needsUpdate(geometry, index);\n\t\t\t\tif (updateBuffers) saveCache(geometry, index);\n\t\t\t} else {\n\t\t\t\tvar wireframe = material.wireframe === true;\n\n\t\t\t\tif (currentState.geometry !== geometry.id || currentState.program !== program.id || currentState.wireframe !== wireframe) {\n\t\t\t\t\tcurrentState.geometry = geometry.id;\n\t\t\t\t\tcurrentState.program = program.id;\n\t\t\t\t\tcurrentState.wireframe = wireframe;\n\t\t\t\t\tupdateBuffers = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh === true) {\n\t\t\t\tupdateBuffers = true;\n\t\t\t}\n\n\t\t\tif (index !== null) {\n\t\t\t\tattributes.update(index, 34963);\n\t\t\t}\n\n\t\t\tif (updateBuffers) {\n\t\t\t\tsetupVertexAttributes(object, material, program, geometry);\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tgl.bindBuffer(34963, attributes.get(index).buffer);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction createVertexArrayObject() {\n\t\t\tif (capabilities.isWebGL2) return gl.createVertexArray();\n\t\t\treturn extension.createVertexArrayOES();\n\t\t}\n\n\t\tfunction bindVertexArrayObject(vao) {\n\t\t\tif (capabilities.isWebGL2) return gl.bindVertexArray(vao);\n\t\t\treturn extension.bindVertexArrayOES(vao);\n\t\t}\n\n\t\tfunction deleteVertexArrayObject(vao) {\n\t\t\tif (capabilities.isWebGL2) return gl.deleteVertexArray(vao);\n\t\t\treturn extension.deleteVertexArrayOES(vao);\n\t\t}\n\n\t\tfunction getBindingState(geometry, program, material) {\n\t\t\tvar wireframe = material.wireframe === true;\n\t\t\tvar programMap = bindingStates[geometry.id];\n\n\t\t\tif (programMap === undefined) {\n\t\t\t\tprogramMap = {};\n\t\t\t\tbindingStates[geometry.id] = programMap;\n\t\t\t}\n\n\t\t\tvar stateMap = programMap[program.id];\n\n\t\t\tif (stateMap === undefined) {\n\t\t\t\tstateMap = {};\n\t\t\t\tprogramMap[program.id] = stateMap;\n\t\t\t}\n\n\t\t\tvar state = stateMap[wireframe];\n\n\t\t\tif (state === undefined) {\n\t\t\t\tstate = createBindingState(createVertexArrayObject());\n\t\t\t\tstateMap[wireframe] = state;\n\t\t\t}\n\n\t\t\treturn state;\n\t\t}\n\n\t\tfunction createBindingState(vao) {\n\t\t\tvar newAttributes = [];\n\t\t\tvar enabledAttributes = [];\n\t\t\tvar attributeDivisors = [];\n\n\t\t\tfor (var i = 0; i < maxVertexAttributes; i++) {\n\t\t\t\tnewAttributes[i] = 0;\n\t\t\t\tenabledAttributes[i] = 0;\n\t\t\t\tattributeDivisors[i] = 0;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t// for backward compatibility on non-VAO support browser\n\t\t\t\tgeometry: null,\n\t\t\t\tprogram: null,\n\t\t\t\twireframe: false,\n\t\t\t\tnewAttributes: newAttributes,\n\t\t\t\tenabledAttributes: enabledAttributes,\n\t\t\t\tattributeDivisors: attributeDivisors,\n\t\t\t\tobject: vao,\n\t\t\t\tattributes: {},\n\t\t\t\tindex: null\n\t\t\t};\n\t\t}\n\n\t\tfunction needsUpdate(geometry, index) {\n\t\t\tvar cachedAttributes = currentState.attributes;\n\t\t\tvar geometryAttributes = geometry.attributes;\n\t\t\tvar attributesNum = 0;\n\n\t\t\tfor (var key in geometryAttributes) {\n\t\t\t\tvar cachedAttribute = cachedAttributes[key];\n\t\t\t\tvar geometryAttribute = geometryAttributes[key];\n\t\t\t\tif (cachedAttribute === undefined) return true;\n\t\t\t\tif (cachedAttribute.attribute !== geometryAttribute) return true;\n\t\t\t\tif (cachedAttribute.data !== geometryAttribute.data) return true;\n\t\t\t\tattributesNum++;\n\t\t\t}\n\n\t\t\tif (currentState.attributesNum !== attributesNum) return true;\n\t\t\tif (currentState.index !== index) return true;\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction saveCache(geometry, index) {\n\t\t\tvar cache = {};\n\t\t\tvar attributes = geometry.attributes;\n\t\t\tvar attributesNum = 0;\n\n\t\t\tfor (var key in attributes) {\n\t\t\t\tvar attribute = attributes[key];\n\t\t\t\tvar data = {};\n\t\t\t\tdata.attribute = attribute;\n\n\t\t\t\tif (attribute.data) {\n\t\t\t\t\tdata.data = attribute.data;\n\t\t\t\t}\n\n\t\t\t\tcache[key] = data;\n\t\t\t\tattributesNum++;\n\t\t\t}\n\n\t\t\tcurrentState.attributes = cache;\n\t\t\tcurrentState.attributesNum = attributesNum;\n\t\t\tcurrentState.index = index;\n\t\t}\n\n\t\tfunction initAttributes() {\n\t\t\tvar newAttributes = currentState.newAttributes;\n\n\t\t\tfor (var i = 0, il = newAttributes.length; i < il; i++) {\n\t\t\t\tnewAttributes[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\tfunction enableAttribute(attribute) {\n\t\t\tenableAttributeAndDivisor(attribute, 0);\n\t\t}\n\n\t\tfunction enableAttributeAndDivisor(attribute, meshPerAttribute) {\n\t\t\tvar newAttributes = currentState.newAttributes;\n\t\t\tvar enabledAttributes = currentState.enabledAttributes;\n\t\t\tvar attributeDivisors = currentState.attributeDivisors;\n\t\t\tnewAttributes[attribute] = 1;\n\n\t\t\tif (enabledAttributes[attribute] === 0) {\n\t\t\t\tgl.enableVertexAttribArray(attribute);\n\t\t\t\tenabledAttributes[attribute] = 1;\n\t\t\t}\n\n\t\t\tif (attributeDivisors[attribute] !== meshPerAttribute) {\n\t\t\t\tvar _extension = capabilities.isWebGL2 ? gl : extensions.get('ANGLE_instanced_arrays');\n\n\t\t\t\t_extension[capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE'](attribute, meshPerAttribute);\n\n\t\t\t\tattributeDivisors[attribute] = meshPerAttribute;\n\t\t\t}\n\t\t}\n\n\t\tfunction disableUnusedAttributes() {\n\t\t\tvar newAttributes = currentState.newAttributes;\n\t\t\tvar enabledAttributes = currentState.enabledAttributes;\n\n\t\t\tfor (var i = 0, il = enabledAttributes.length; i < il; i++) {\n\t\t\t\tif (enabledAttributes[i] !== newAttributes[i]) {\n\t\t\t\t\tgl.disableVertexAttribArray(i);\n\t\t\t\t\tenabledAttributes[i] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction vertexAttribPointer(index, size, type, normalized, stride, offset) {\n\t\t\tif (capabilities.isWebGL2 === true && (type === 5124 || type === 5125)) {\n\t\t\t\tgl.vertexAttribIPointer(index, size, type, stride, offset);\n\t\t\t} else {\n\t\t\t\tgl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n\t\t\t}\n\t\t}\n\n\t\tfunction setupVertexAttributes(object, material, program, geometry) {\n\t\t\tif (capabilities.isWebGL2 === false && (object.isInstancedMesh || geometry.isInstancedBufferGeometry)) {\n\t\t\t\tif (extensions.get('ANGLE_instanced_arrays') === null) return;\n\t\t\t}\n\n\t\t\tinitAttributes();\n\t\t\tvar geometryAttributes = geometry.attributes;\n\t\t\tvar programAttributes = program.getAttributes();\n\t\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\t\tfor (var name in programAttributes) {\n\t\t\t\tvar programAttribute = programAttributes[name];\n\n\t\t\t\tif (programAttribute >= 0) {\n\t\t\t\t\tvar geometryAttribute = geometryAttributes[name];\n\n\t\t\t\t\tif (geometryAttribute !== undefined) {\n\t\t\t\t\t\tvar normalized = geometryAttribute.normalized;\n\t\t\t\t\t\tvar size = geometryAttribute.itemSize;\n\t\t\t\t\t\tvar attribute = attributes.get(geometryAttribute); // TODO Attribute may not be available on context restore\n\n\t\t\t\t\t\tif (attribute === undefined) continue;\n\t\t\t\t\t\tvar buffer = attribute.buffer;\n\t\t\t\t\t\tvar type = attribute.type;\n\t\t\t\t\t\tvar bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\t\tif (geometryAttribute.isInterleavedBufferAttribute) {\n\t\t\t\t\t\t\tvar data = geometryAttribute.data;\n\t\t\t\t\t\t\tvar stride = data.stride;\n\t\t\t\t\t\t\tvar offset = geometryAttribute.offset;\n\n\t\t\t\t\t\t\tif (data && data.isInstancedInterleavedBuffer) {\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, data.meshPerAttribute);\n\n\t\t\t\t\t\t\t\tif (geometry._maxInstanceCount === undefined) {\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = data.meshPerAttribute * data.count;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tenableAttribute(programAttribute);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer(34962, buffer);\n\t\t\t\t\t\t\tvertexAttribPointer(programAttribute, size, type, normalized, stride * bytesPerElement, offset * bytesPerElement);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (geometryAttribute.isInstancedBufferAttribute) {\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, geometryAttribute.meshPerAttribute);\n\n\t\t\t\t\t\t\t\tif (geometry._maxInstanceCount === undefined) {\n\t\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tenableAttribute(programAttribute);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgl.bindBuffer(34962, buffer);\n\t\t\t\t\t\t\tvertexAttribPointer(programAttribute, size, type, normalized, 0, 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (name === 'instanceMatrix') {\n\t\t\t\t\t\tvar _attribute = attributes.get(object.instanceMatrix); // TODO Attribute may not be available on context restore\n\n\n\t\t\t\t\t\tif (_attribute === undefined) continue;\n\t\t\t\t\t\tvar _buffer = _attribute.buffer;\n\t\t\t\t\t\tvar _type = _attribute.type;\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 0, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 1, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 2, 1);\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute + 3, 1);\n\t\t\t\t\t\tgl.bindBuffer(34962, _buffer);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 0, 4, _type, false, 64, 0);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 1, 4, _type, false, 64, 16);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 2, 4, _type, false, 64, 32);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute + 3, 4, _type, false, 64, 48);\n\t\t\t\t\t} else if (name === 'instanceColor') {\n\t\t\t\t\t\tvar _attribute2 = attributes.get(object.instanceColor); // TODO Attribute may not be available on context restore\n\n\n\t\t\t\t\t\tif (_attribute2 === undefined) continue;\n\t\t\t\t\t\tvar _buffer2 = _attribute2.buffer;\n\t\t\t\t\t\tvar _type2 = _attribute2.type;\n\t\t\t\t\t\tenableAttributeAndDivisor(programAttribute, 1);\n\t\t\t\t\t\tgl.bindBuffer(34962, _buffer2);\n\t\t\t\t\t\tgl.vertexAttribPointer(programAttribute, 3, _type2, false, 12, 0);\n\t\t\t\t\t} else if (materialDefaultAttributeValues !== undefined) {\n\t\t\t\t\t\tvar value = materialDefaultAttributeValues[name];\n\n\t\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\t\tswitch (value.length) {\n\t\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib2fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib3fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib4fv(programAttribute, value);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tgl.vertexAttrib1fv(programAttribute, value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdisableUnusedAttributes();\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\treset();\n\n\t\t\tfor (var geometryId in bindingStates) {\n\t\t\t\tvar programMap = bindingStates[geometryId];\n\n\t\t\t\tfor (var programId in programMap) {\n\t\t\t\t\tvar stateMap = programMap[programId];\n\n\t\t\t\t\tfor (var wireframe in stateMap) {\n\t\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t\t}\n\n\t\t\t\t\tdelete programMap[programId];\n\t\t\t\t}\n\n\t\t\t\tdelete bindingStates[geometryId];\n\t\t\t}\n\t\t}\n\n\t\tfunction releaseStatesOfGeometry(geometry) {\n\t\t\tif (bindingStates[geometry.id] === undefined) return;\n\t\t\tvar programMap = bindingStates[geometry.id];\n\n\t\t\tfor (var programId in programMap) {\n\t\t\t\tvar stateMap = programMap[programId];\n\n\t\t\t\tfor (var wireframe in stateMap) {\n\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[programId];\n\t\t\t}\n\n\t\t\tdelete bindingStates[geometry.id];\n\t\t}\n\n\t\tfunction releaseStatesOfProgram(program) {\n\t\t\tfor (var geometryId in bindingStates) {\n\t\t\t\tvar programMap = bindingStates[geometryId];\n\t\t\t\tif (programMap[program.id] === undefined) continue;\n\t\t\t\tvar stateMap = programMap[program.id];\n\n\t\t\t\tfor (var wireframe in stateMap) {\n\t\t\t\t\tdeleteVertexArrayObject(stateMap[wireframe].object);\n\t\t\t\t\tdelete stateMap[wireframe];\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[program.id];\n\t\t\t}\n\t\t}\n\n\t\tfunction reset() {\n\t\t\tresetDefaultState();\n\t\t\tif (currentState === defaultState) return;\n\t\t\tcurrentState = defaultState;\n\t\t\tbindVertexArrayObject(currentState.object);\n\t\t} // for backward-compatilibity\n\n\n\t\tfunction resetDefaultState() {\n\t\t\tdefaultState.geometry = null;\n\t\t\tdefaultState.program = null;\n\t\t\tdefaultState.wireframe = false;\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\treset: reset,\n\t\t\tresetDefaultState: resetDefaultState,\n\t\t\tdispose: dispose,\n\t\t\treleaseStatesOfGeometry: releaseStatesOfGeometry,\n\t\t\treleaseStatesOfProgram: releaseStatesOfProgram,\n\t\t\tinitAttributes: initAttributes,\n\t\t\tenableAttribute: enableAttribute,\n\t\t\tdisableUnusedAttributes: disableUnusedAttributes\n\t\t};\n\t}\n\n\tfunction WebGLBufferRenderer(gl, extensions, info, capabilities) {\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar mode;\n\n\t\tfunction setMode(value) {\n\t\t\tmode = value;\n\t\t}\n\n\t\tfunction render(start, count) {\n\t\t\tgl.drawArrays(mode, start, count);\n\t\t\tinfo.update(count, mode, 1);\n\t\t}\n\n\t\tfunction renderInstances(start, count, primcount) {\n\t\t\tif (primcount === 0) return;\n\t\t\tvar extension, methodName;\n\n\t\t\tif (isWebGL2) {\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawArraysInstanced';\n\t\t\t} else {\n\t\t\t\textension = extensions.get('ANGLE_instanced_arrays');\n\t\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\textension[methodName](mode, start, count, primcount);\n\t\t\tinfo.update(count, mode, primcount);\n\t\t} //\n\n\n\t\tthis.setMode = setMode;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\t}\n\n\tfunction WebGLCapabilities(gl, extensions, parameters) {\n\t\tvar maxAnisotropy;\n\n\t\tfunction getMaxAnisotropy() {\n\t\t\tif (maxAnisotropy !== undefined) return maxAnisotropy;\n\n\t\t\tif (extensions.has('EXT_texture_filter_anisotropic') === true) {\n\t\t\t\tvar extension = extensions.get('EXT_texture_filter_anisotropic');\n\t\t\t\tmaxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n\t\t\t} else {\n\t\t\t\tmaxAnisotropy = 0;\n\t\t\t}\n\n\t\t\treturn maxAnisotropy;\n\t\t}\n\n\t\tfunction getMaxPrecision(precision) {\n\t\t\tif (precision === 'highp') {\n\t\t\t\tif (gl.getShaderPrecisionFormat(35633, 36338).precision > 0 && gl.getShaderPrecisionFormat(35632, 36338).precision > 0) {\n\t\t\t\t\treturn 'highp';\n\t\t\t\t}\n\n\t\t\t\tprecision = 'mediump';\n\t\t\t}\n\n\t\t\tif (precision === 'mediump') {\n\t\t\t\tif (gl.getShaderPrecisionFormat(35633, 36337).precision > 0 && gl.getShaderPrecisionFormat(35632, 36337).precision > 0) {\n\t\t\t\t\treturn 'mediump';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn 'lowp';\n\t\t}\n\t\t/* eslint-disable no-undef */\n\n\n\t\tvar isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext;\n\t\t/* eslint-enable no-undef */\n\n\t\tvar precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\t\tvar maxPrecision = getMaxPrecision(precision);\n\n\t\tif (maxPrecision !== precision) {\n\t\t\tconsole.warn('THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.');\n\t\t\tprecision = maxPrecision;\n\t\t}\n\n\t\tvar logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\t\tvar maxTextures = gl.getParameter(34930);\n\t\tvar maxVertexTextures = gl.getParameter(35660);\n\t\tvar maxTextureSize = gl.getParameter(3379);\n\t\tvar maxCubemapSize = gl.getParameter(34076);\n\t\tvar maxAttributes = gl.getParameter(34921);\n\t\tvar maxVertexUniforms = gl.getParameter(36347);\n\t\tvar maxVaryings = gl.getParameter(36348);\n\t\tvar maxFragmentUniforms = gl.getParameter(36349);\n\t\tvar vertexTextures = maxVertexTextures > 0;\n\t\tvar floatFragmentTextures = isWebGL2 || extensions.has('OES_texture_float');\n\t\tvar floatVertexTextures = vertexTextures && floatFragmentTextures;\n\t\tvar maxSamples = isWebGL2 ? gl.getParameter(36183) : 0;\n\t\treturn {\n\t\t\tisWebGL2: isWebGL2,\n\t\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\t\tgetMaxPrecision: getMaxPrecision,\n\t\t\tprecision: precision,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\t\tmaxTextures: maxTextures,\n\t\t\tmaxVertexTextures: maxVertexTextures,\n\t\t\tmaxTextureSize: maxTextureSize,\n\t\t\tmaxCubemapSize: maxCubemapSize,\n\t\t\tmaxAttributes: maxAttributes,\n\t\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\t\tmaxVaryings: maxVaryings,\n\t\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\t\t\tvertexTextures: vertexTextures,\n\t\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\t\tfloatVertexTextures: floatVertexTextures,\n\t\t\tmaxSamples: maxSamples\n\t\t};\n\t}\n\n\tfunction WebGLClipping(properties) {\n\t\tvar scope = this;\n\t\tvar globalState = null,\n\t\t\t\tnumGlobalPlanes = 0,\n\t\t\t\tlocalClippingEnabled = false,\n\t\t\t\trenderingShadows = false;\n\t\tvar plane = new Plane(),\n\t\t\t\tviewNormalMatrix = new Matrix3(),\n\t\t\t\tuniform = {\n\t\t\tvalue: null,\n\t\t\tneedsUpdate: false\n\t\t};\n\t\tthis.uniform = uniform;\n\t\tthis.numPlanes = 0;\n\t\tthis.numIntersection = 0;\n\n\t\tthis.init = function (planes, enableLocalClipping, camera) {\n\t\t\tvar enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to\n\t\t\t// run another frame in order to reset the state:\n\t\t\tnumGlobalPlanes !== 0 || localClippingEnabled;\n\t\t\tlocalClippingEnabled = enableLocalClipping;\n\t\t\tglobalState = projectPlanes(planes, camera, 0);\n\t\t\tnumGlobalPlanes = planes.length;\n\t\t\treturn enabled;\n\t\t};\n\n\t\tthis.beginShadows = function () {\n\t\t\trenderingShadows = true;\n\t\t\tprojectPlanes(null);\n\t\t};\n\n\t\tthis.endShadows = function () {\n\t\t\trenderingShadows = false;\n\t\t\tresetGlobalState();\n\t\t};\n\n\t\tthis.setState = function (material, camera, useCache) {\n\t\t\tvar planes = material.clippingPlanes,\n\t\t\t\t\tclipIntersection = material.clipIntersection,\n\t\t\t\t\tclipShadows = material.clipShadows;\n\t\t\tvar materialProperties = properties.get(material);\n\n\t\t\tif (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {\n\t\t\t\t// there's no local clipping\n\t\t\t\tif (renderingShadows) {\n\t\t\t\t\t// there's no global clipping\n\t\t\t\t\tprojectPlanes(null);\n\t\t\t\t} else {\n\t\t\t\t\tresetGlobalState();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\t\t\tlGlobal = nGlobal * 4;\n\t\t\t\tvar dstArray = materialProperties.clippingState || null;\n\t\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\t\tdstArray = projectPlanes(planes, camera, lGlobal, useCache);\n\n\t\t\t\tfor (var i = 0; i !== lGlobal; ++i) {\n\t\t\t\t\tdstArray[i] = globalState[i];\n\t\t\t\t}\n\n\t\t\t\tmaterialProperties.clippingState = dstArray;\n\t\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\t\tthis.numPlanes += nGlobal;\n\t\t\t}\n\t\t};\n\n\t\tfunction resetGlobalState() {\n\t\t\tif (uniform.value !== globalState) {\n\t\t\t\tuniform.value = globalState;\n\t\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\t\t\t}\n\n\t\t\tscope.numPlanes = numGlobalPlanes;\n\t\t\tscope.numIntersection = 0;\n\t\t}\n\n\t\tfunction projectPlanes(planes, camera, dstOffset, skipTransform) {\n\t\t\tvar nPlanes = planes !== null ? planes.length : 0;\n\t\t\tvar dstArray = null;\n\n\t\t\tif (nPlanes !== 0) {\n\t\t\t\tdstArray = uniform.value;\n\n\t\t\t\tif (skipTransform !== true || dstArray === null) {\n\t\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\t\t\t\t\tviewNormalMatrix.getNormalMatrix(viewMatrix);\n\n\t\t\t\t\tif (dstArray === null || dstArray.length < flatSize) {\n\t\t\t\t\t\tdstArray = new Float32Array(flatSize);\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (var i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {\n\t\t\t\t\t\tplane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);\n\t\t\t\t\t\tplane.normal.toArray(dstArray, i4);\n\t\t\t\t\t\tdstArray[i4 + 3] = plane.constant;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tuniform.value = dstArray;\n\t\t\t\tuniform.needsUpdate = true;\n\t\t\t}\n\n\t\t\tscope.numPlanes = nPlanes;\n\t\t\tscope.numIntersection = 0;\n\t\t\treturn dstArray;\n\t\t}\n\t}\n\n\tfunction WebGLCubeMaps(renderer) {\n\t\tvar cubemaps = new WeakMap();\n\n\t\tfunction mapTextureMapping(texture, mapping) {\n\t\t\tif (mapping === EquirectangularReflectionMapping) {\n\t\t\t\ttexture.mapping = CubeReflectionMapping;\n\t\t\t} else if (mapping === EquirectangularRefractionMapping) {\n\t\t\t\ttexture.mapping = CubeRefractionMapping;\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tfunction get(texture) {\n\t\t\tif (texture && texture.isTexture) {\n\t\t\t\tvar mapping = texture.mapping;\n\n\t\t\t\tif (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {\n\t\t\t\t\tif (cubemaps.has(texture)) {\n\t\t\t\t\t\tvar cubemap = cubemaps.get(texture).texture;\n\t\t\t\t\t\treturn mapTextureMapping(cubemap, texture.mapping);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar image = texture.image;\n\n\t\t\t\t\t\tif (image && image.height > 0) {\n\t\t\t\t\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\t\t\t\t\t\t\tvar renderTarget = new WebGLCubeRenderTarget(image.height / 2);\n\t\t\t\t\t\t\trenderTarget.fromEquirectangularTexture(renderer, texture);\n\t\t\t\t\t\t\tcubemaps.set(texture, renderTarget);\n\t\t\t\t\t\t\trenderer.setRenderTarget(currentRenderTarget);\n\t\t\t\t\t\t\ttexture.addEventListener('dispose', onTextureDispose);\n\t\t\t\t\t\t\treturn mapTextureMapping(renderTarget.texture, texture.mapping);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tfunction onTextureDispose(event) {\n\t\t\tvar texture = event.target;\n\t\t\ttexture.removeEventListener('dispose', onTextureDispose);\n\t\t\tvar cubemap = cubemaps.get(texture);\n\n\t\t\tif (cubemap !== undefined) {\n\t\t\t\tcubemaps.delete(texture);\n\t\t\t\tcubemap.dispose();\n\t\t\t}\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tcubemaps = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction WebGLExtensions(gl) {\n\t\tvar extensions = {};\n\n\t\tfunction getExtension(name) {\n\t\t\tif (extensions[name] !== undefined) {\n\t\t\t\treturn extensions[name];\n\t\t\t}\n\n\t\t\tvar extension;\n\n\t\t\tswitch (name) {\n\t\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\t\textension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\t\textension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\t\textension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\t\textension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\textension = gl.getExtension(name);\n\t\t\t}\n\n\t\t\textensions[name] = extension;\n\t\t\treturn extension;\n\t\t}\n\n\t\treturn {\n\t\t\thas: function has(name) {\n\t\t\t\treturn getExtension(name) !== null;\n\t\t\t},\n\t\t\tinit: function init(capabilities) {\n\t\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t\tgetExtension('EXT_color_buffer_float');\n\t\t\t\t} else {\n\t\t\t\t\tgetExtension('WEBGL_depth_texture');\n\t\t\t\t\tgetExtension('OES_texture_float');\n\t\t\t\t\tgetExtension('OES_texture_half_float');\n\t\t\t\t\tgetExtension('OES_texture_half_float_linear');\n\t\t\t\t\tgetExtension('OES_standard_derivatives');\n\t\t\t\t\tgetExtension('OES_element_index_uint');\n\t\t\t\t\tgetExtension('OES_vertex_array_object');\n\t\t\t\t\tgetExtension('ANGLE_instanced_arrays');\n\t\t\t\t}\n\n\t\t\t\tgetExtension('OES_texture_float_linear');\n\t\t\t\tgetExtension('EXT_color_buffer_half_float');\n\t\t\t},\n\t\t\tget: function get(name) {\n\t\t\t\tvar extension = getExtension(name);\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: ' + name + ' extension not supported.');\n\t\t\t\t}\n\n\t\t\t\treturn extension;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction WebGLGeometries(gl, attributes, info, bindingStates) {\n\t\tvar geometries = {};\n\t\tvar wireframeAttributes = new WeakMap();\n\n\t\tfunction onGeometryDispose(event) {\n\t\t\tvar geometry = event.target;\n\n\t\t\tif (geometry.index !== null) {\n\t\t\t\tattributes.remove(geometry.index);\n\t\t\t}\n\n\t\t\tfor (var name in geometry.attributes) {\n\t\t\t\tattributes.remove(geometry.attributes[name]);\n\t\t\t}\n\n\t\t\tgeometry.removeEventListener('dispose', onGeometryDispose);\n\t\t\tdelete geometries[geometry.id];\n\t\t\tvar attribute = wireframeAttributes.get(geometry);\n\n\t\t\tif (attribute) {\n\t\t\t\tattributes.remove(attribute);\n\t\t\t\twireframeAttributes.delete(geometry);\n\t\t\t}\n\n\t\t\tbindingStates.releaseStatesOfGeometry(geometry);\n\n\t\t\tif (geometry.isInstancedBufferGeometry === true) {\n\t\t\t\tdelete geometry._maxInstanceCount;\n\t\t\t} //\n\n\n\t\t\tinfo.memory.geometries--;\n\t\t}\n\n\t\tfunction get(object, geometry) {\n\t\t\tif (geometries[geometry.id] === true) return geometry;\n\t\t\tgeometry.addEventListener('dispose', onGeometryDispose);\n\t\t\tgeometries[geometry.id] = true;\n\t\t\tinfo.memory.geometries++;\n\t\t\treturn geometry;\n\t\t}\n\n\t\tfunction update(geometry) {\n\t\t\tvar geometryAttributes = geometry.attributes; // Updating index buffer in VAO now. See WebGLBindingStates.\n\n\t\t\tfor (var name in geometryAttributes) {\n\t\t\t\tattributes.update(geometryAttributes[name], 34962);\n\t\t\t} // morph targets\n\n\n\t\t\tvar morphAttributes = geometry.morphAttributes;\n\n\t\t\tfor (var _name in morphAttributes) {\n\t\t\t\tvar array = morphAttributes[_name];\n\n\t\t\t\tfor (var i = 0, l = array.length; i < l; i++) {\n\t\t\t\t\tattributes.update(array[i], 34962);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction updateWireframeAttribute(geometry) {\n\t\t\tvar indices = [];\n\t\t\tvar geometryIndex = geometry.index;\n\t\t\tvar geometryPosition = geometry.attributes.position;\n\t\t\tvar version = 0;\n\n\t\t\tif (geometryIndex !== null) {\n\t\t\t\tvar array = geometryIndex.array;\n\t\t\t\tversion = geometryIndex.version;\n\n\t\t\t\tfor (var i = 0, l = array.length; i < l; i += 3) {\n\t\t\t\t\tvar a = array[i + 0];\n\t\t\t\t\tvar b = array[i + 1];\n\t\t\t\t\tvar c = array[i + 2];\n\t\t\t\t\tindices.push(a, b, b, c, c, a);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar _array = geometryPosition.array;\n\t\t\t\tversion = geometryPosition.version;\n\n\t\t\t\tfor (var _i = 0, _l = _array.length / 3 - 1; _i < _l; _i += 3) {\n\t\t\t\t\tvar _a = _i + 0;\n\n\t\t\t\t\tvar _b = _i + 1;\n\n\t\t\t\t\tvar _c = _i + 2;\n\n\t\t\t\t\tindices.push(_a, _b, _b, _c, _c, _a);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar attribute = new (arrayMax(indices) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);\n\t\t\tattribute.version = version; // Updating index buffer in VAO now. See WebGLBindingStates\n\t\t\t//\n\n\t\t\tvar previousAttribute = wireframeAttributes.get(geometry);\n\t\t\tif (previousAttribute) attributes.remove(previousAttribute); //\n\n\t\t\twireframeAttributes.set(geometry, attribute);\n\t\t}\n\n\t\tfunction getWireframeAttribute(geometry) {\n\t\t\tvar currentAttribute = wireframeAttributes.get(geometry);\n\n\t\t\tif (currentAttribute) {\n\t\t\t\tvar geometryIndex = geometry.index;\n\n\t\t\t\tif (geometryIndex !== null) {\n\t\t\t\t\t// if the attribute is obsolete, create a new one\n\t\t\t\t\tif (currentAttribute.version < geometryIndex.version) {\n\t\t\t\t\t\tupdateWireframeAttribute(geometry);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tupdateWireframeAttribute(geometry);\n\t\t\t}\n\n\t\t\treturn wireframeAttributes.get(geometry);\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tupdate: update,\n\t\t\tgetWireframeAttribute: getWireframeAttribute\n\t\t};\n\t}\n\n\tfunction WebGLIndexedBufferRenderer(gl, extensions, info, capabilities) {\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar mode;\n\n\t\tfunction setMode(value) {\n\t\t\tmode = value;\n\t\t}\n\n\t\tvar type, bytesPerElement;\n\n\t\tfunction setIndex(value) {\n\t\t\ttype = value.type;\n\t\t\tbytesPerElement = value.bytesPerElement;\n\t\t}\n\n\t\tfunction render(start, count) {\n\t\t\tgl.drawElements(mode, count, type, start * bytesPerElement);\n\t\t\tinfo.update(count, mode, 1);\n\t\t}\n\n\t\tfunction renderInstances(start, count, primcount) {\n\t\t\tif (primcount === 0) return;\n\t\t\tvar extension, methodName;\n\n\t\t\tif (isWebGL2) {\n\t\t\t\textension = gl;\n\t\t\t\tmethodName = 'drawElementsInstanced';\n\t\t\t} else {\n\t\t\t\textension = extensions.get('ANGLE_instanced_arrays');\n\t\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\t\tif (extension === null) {\n\t\t\t\t\tconsole.error('THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\textension[methodName](mode, count, type, start * bytesPerElement, primcount);\n\t\t\tinfo.update(count, mode, primcount);\n\t\t} //\n\n\n\t\tthis.setMode = setMode;\n\t\tthis.setIndex = setIndex;\n\t\tthis.render = render;\n\t\tthis.renderInstances = renderInstances;\n\t}\n\n\tfunction WebGLInfo(gl) {\n\t\tvar memory = {\n\t\t\tgeometries: 0,\n\t\t\ttextures: 0\n\t\t};\n\t\tvar render = {\n\t\t\tframe: 0,\n\t\t\tcalls: 0,\n\t\t\ttriangles: 0,\n\t\t\tpoints: 0,\n\t\t\tlines: 0\n\t\t};\n\n\t\tfunction update(count, mode, instanceCount) {\n\t\t\trender.calls++;\n\n\t\t\tswitch (mode) {\n\t\t\t\tcase 4:\n\t\t\t\t\trender.triangles += instanceCount * (count / 3);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\trender.lines += instanceCount * (count / 2);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\trender.lines += instanceCount * (count - 1);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 0:\n\t\t\t\t\trender.points += instanceCount * count;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.error('THREE.WebGLInfo: Unknown draw mode:', mode);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfunction reset() {\n\t\t\trender.frame++;\n\t\t\trender.calls = 0;\n\t\t\trender.triangles = 0;\n\t\t\trender.points = 0;\n\t\t\trender.lines = 0;\n\t\t}\n\n\t\treturn {\n\t\t\tmemory: memory,\n\t\t\trender: render,\n\t\t\tprograms: null,\n\t\t\tautoReset: true,\n\t\t\treset: reset,\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tfunction numericalSort(a, b) {\n\t\treturn a[0] - b[0];\n\t}\n\n\tfunction absNumericalSort(a, b) {\n\t\treturn Math.abs(b[1]) - Math.abs(a[1]);\n\t}\n\n\tfunction WebGLMorphtargets(gl) {\n\t\tvar influencesList = {};\n\t\tvar morphInfluences = new Float32Array(8);\n\t\tvar workInfluences = [];\n\n\t\tfor (var i = 0; i < 8; i++) {\n\t\t\tworkInfluences[i] = [i, 0];\n\t\t}\n\n\t\tfunction update(object, geometry, material, program) {\n\t\t\tvar objectInfluences = object.morphTargetInfluences; // When object doesn't have morph target influences defined, we treat it as a 0-length array\n\t\t\t// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\n\n\t\t\tvar length = objectInfluences === undefined ? 0 : objectInfluences.length;\n\t\t\tvar influences = influencesList[geometry.id];\n\n\t\t\tif (influences === undefined) {\n\t\t\t\t// initialise list\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor (var _i = 0; _i < length; _i++) {\n\t\t\t\t\tinfluences[_i] = [_i, 0];\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[geometry.id] = influences;\n\t\t\t} // Collect influences\n\n\n\t\t\tfor (var _i2 = 0; _i2 < length; _i2++) {\n\t\t\t\tvar influence = influences[_i2];\n\t\t\t\tinfluence[0] = _i2;\n\t\t\t\tinfluence[1] = objectInfluences[_i2];\n\t\t\t}\n\n\t\t\tinfluences.sort(absNumericalSort);\n\n\t\t\tfor (var _i3 = 0; _i3 < 8; _i3++) {\n\t\t\t\tif (_i3 < length && influences[_i3][1]) {\n\t\t\t\t\tworkInfluences[_i3][0] = influences[_i3][0];\n\t\t\t\t\tworkInfluences[_i3][1] = influences[_i3][1];\n\t\t\t\t} else {\n\t\t\t\t\tworkInfluences[_i3][0] = Number.MAX_SAFE_INTEGER;\n\t\t\t\t\tworkInfluences[_i3][1] = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tworkInfluences.sort(numericalSort);\n\t\t\tvar morphTargets = material.morphTargets && geometry.morphAttributes.position;\n\t\t\tvar morphNormals = material.morphNormals && geometry.morphAttributes.normal;\n\t\t\tvar morphInfluencesSum = 0;\n\n\t\t\tfor (var _i4 = 0; _i4 < 8; _i4++) {\n\t\t\t\tvar _influence = workInfluences[_i4];\n\t\t\t\tvar index = _influence[0];\n\t\t\t\tvar value = _influence[1];\n\n\t\t\t\tif (index !== Number.MAX_SAFE_INTEGER && value) {\n\t\t\t\t\tif (morphTargets && geometry.getAttribute('morphTarget' + _i4) !== morphTargets[index]) {\n\t\t\t\t\t\tgeometry.setAttribute('morphTarget' + _i4, morphTargets[index]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (morphNormals && geometry.getAttribute('morphNormal' + _i4) !== morphNormals[index]) {\n\t\t\t\t\t\tgeometry.setAttribute('morphNormal' + _i4, morphNormals[index]);\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[_i4] = value;\n\t\t\t\t\tmorphInfluencesSum += value;\n\t\t\t\t} else {\n\t\t\t\t\tif (morphTargets && geometry.hasAttribute('morphTarget' + _i4) === true) {\n\t\t\t\t\t\tgeometry.deleteAttribute('morphTarget' + _i4);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (morphNormals && geometry.hasAttribute('morphNormal' + _i4) === true) {\n\t\t\t\t\t\tgeometry.deleteAttribute('morphNormal' + _i4);\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[_i4] = 0;\n\t\t\t\t}\n\t\t\t} // GLSL shader uses formula baseinfluence * base + sum(target * influence)\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\n\n\t\t\tvar morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\t\t\tprogram.getUniforms().setValue(gl, 'morphTargetBaseInfluence', morphBaseInfluence);\n\t\t\tprogram.getUniforms().setValue(gl, 'morphTargetInfluences', morphInfluences);\n\t\t}\n\n\t\treturn {\n\t\t\tupdate: update\n\t\t};\n\t}\n\n\tfunction WebGLObjects(gl, geometries, attributes, info) {\n\t\tvar updateMap = new WeakMap();\n\n\t\tfunction update(object) {\n\t\t\tvar frame = info.render.frame;\n\t\t\tvar geometry = object.geometry;\n\t\t\tvar buffergeometry = geometries.get(object, geometry); // Update once per frame\n\n\t\t\tif (updateMap.get(buffergeometry) !== frame) {\n\t\t\t\tgeometries.update(buffergeometry);\n\t\t\t\tupdateMap.set(buffergeometry, frame);\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh) {\n\t\t\t\tif (object.hasEventListener('dispose', onInstancedMeshDispose) === false) {\n\t\t\t\t\tobject.addEventListener('dispose', onInstancedMeshDispose);\n\t\t\t\t}\n\n\t\t\t\tattributes.update(object.instanceMatrix, 34962);\n\n\t\t\t\tif (object.instanceColor !== null) {\n\t\t\t\t\tattributes.update(object.instanceColor, 34962);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn buffergeometry;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tupdateMap = new WeakMap();\n\t\t}\n\n\t\tfunction onInstancedMeshDispose(event) {\n\t\t\tvar instancedMesh = event.target;\n\t\t\tinstancedMesh.removeEventListener('dispose', onInstancedMeshDispose);\n\t\t\tattributes.remove(instancedMesh.instanceMatrix);\n\t\t\tif (instancedMesh.instanceColor !== null) attributes.remove(instancedMesh.instanceColor);\n\t\t}\n\n\t\treturn {\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tvar DataTexture2DArray = /*#__PURE__*/function (_Texture) {\n\t\t_inheritsLoose(DataTexture2DArray, _Texture);\n\n\t\tfunction DataTexture2DArray(data, width, height, depth) {\n\t\t\tvar _this;\n\n\t\t\tif (data === void 0) {\n\t\t\t\tdata = null;\n\t\t\t}\n\n\t\t\tif (width === void 0) {\n\t\t\t\twidth = 1;\n\t\t\t}\n\n\t\t\tif (height === void 0) {\n\t\t\t\theight = 1;\n\t\t\t}\n\n\t\t\tif (depth === void 0) {\n\t\t\t\tdepth = 1;\n\t\t\t}\n\n\t\t\t_this = _Texture.call(this, null) || this;\n\t\t\t_this.image = {\n\t\t\t\tdata: data,\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth\n\t\t\t};\n\t\t\t_this.magFilter = NearestFilter;\n\t\t\t_this.minFilter = NearestFilter;\n\t\t\t_this.wrapR = ClampToEdgeWrapping;\n\t\t\t_this.generateMipmaps = false;\n\t\t\t_this.flipY = false;\n\t\t\t_this.needsUpdate = true;\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn DataTexture2DArray;\n\t}(Texture);\n\n\tDataTexture2DArray.prototype.isDataTexture2DArray = true;\n\n\tvar DataTexture3D = /*#__PURE__*/function (_Texture) {\n\t\t_inheritsLoose(DataTexture3D, _Texture);\n\n\t\tfunction DataTexture3D(data, width, height, depth) {\n\t\t\tvar _this;\n\n\t\t\tif (data === void 0) {\n\t\t\t\tdata = null;\n\t\t\t}\n\n\t\t\tif (width === void 0) {\n\t\t\t\twidth = 1;\n\t\t\t}\n\n\t\t\tif (height === void 0) {\n\t\t\t\theight = 1;\n\t\t\t}\n\n\t\t\tif (depth === void 0) {\n\t\t\t\tdepth = 1;\n\t\t\t}\n\n\t\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t\t// Users can still set in DataTexture3D directly.\n\t\t\t//\n\t\t\t//\tconst texture = new THREE.DataTexture3D( data, width, height, depth );\n\t\t\t// \ttexture.anisotropy = 16;\n\t\t\t//\n\t\t\t// See #14839\n\t\t\t_this = _Texture.call(this, null) || this;\n\t\t\t_this.image = {\n\t\t\t\tdata: data,\n\t\t\t\twidth: width,\n\t\t\t\theight: height,\n\t\t\t\tdepth: depth\n\t\t\t};\n\t\t\t_this.magFilter = NearestFilter;\n\t\t\t_this.minFilter = NearestFilter;\n\t\t\t_this.wrapR = ClampToEdgeWrapping;\n\t\t\t_this.generateMipmaps = false;\n\t\t\t_this.flipY = false;\n\t\t\t_this.needsUpdate = true;\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn DataTexture3D;\n\t}(Texture);\n\n\tDataTexture3D.prototype.isDataTexture3D = true;\n\n\t/**\n\t * Uniforms of a program.\n\t * Those form a tree structure with a special top-level container for the root,\n\t * which you get by calling 'new WebGLUniforms( gl, program )'.\n\t *\n\t *\n\t * Properties of inner nodes including the top-level container:\n\t *\n\t * .seq - array of nested uniforms\n\t * .map - nested uniforms by name\n\t *\n\t *\n\t * Methods of all nodes except the top-level container:\n\t *\n\t * .setValue( gl, value, [textures] )\n\t *\n\t * \t\tuploads a uniform value(s)\n\t *\t\tthe 'textures' parameter is needed for sampler uniforms\n\t *\n\t *\n\t * Static methods of the top-level container (textures factorizations):\n\t *\n\t * .upload( gl, seq, values, textures )\n\t *\n\t * \t\tsets uniforms in 'seq' to 'values[id].value'\n\t *\n\t * .seqWithValue( seq, values ) : filteredSeq\n\t *\n\t * \t\tfilters 'seq' entries with corresponding entry in values\n\t *\n\t *\n\t * Methods of the top-level container (textures factorizations):\n\t *\n\t * .setValue( gl, name, value, textures )\n\t *\n\t * \t\tsets uniform with\tname 'name' to 'value'\n\t *\n\t * .setOptional( gl, obj, prop )\n\t *\n\t * \t\tlike .set for an optional property of the object\n\t *\n\t */\n\tvar emptyTexture = new Texture();\n\tvar emptyTexture2dArray = new DataTexture2DArray();\n\tvar emptyTexture3d = new DataTexture3D();\n\tvar emptyCubeTexture = new CubeTexture(); // --- Utilities ---\n\t// Array Caches (provide typed arrays for temporary by size)\n\n\tvar arrayCacheF32 = [];\n\tvar arrayCacheI32 = []; // Float32Array caches used for uploading Matrix uniforms\n\n\tvar mat4array = new Float32Array(16);\n\tvar mat3array = new Float32Array(9);\n\tvar mat2array = new Float32Array(4); // Flattening for arrays of vectors and matrices\n\n\tfunction flatten(array, nBlocks, blockSize) {\n\t\tvar firstElem = array[0];\n\t\tif (firstElem <= 0 || firstElem > 0) return array; // unoptimized: ! isNaN( firstElem )\n\t\t// see http://jacksondunstan.com/articles/983\n\n\t\tvar n = nBlocks * blockSize;\n\t\tvar r = arrayCacheF32[n];\n\n\t\tif (r === undefined) {\n\t\t\tr = new Float32Array(n);\n\t\t\tarrayCacheF32[n] = r;\n\t\t}\n\n\t\tif (nBlocks !== 0) {\n\t\t\tfirstElem.toArray(r, 0);\n\n\t\t\tfor (var i = 1, offset = 0; i !== nBlocks; ++i) {\n\t\t\t\toffset += blockSize;\n\t\t\t\tarray[i].toArray(r, offset);\n\t\t\t}\n\t\t}\n\n\t\treturn r;\n\t}\n\n\tfunction arraysEqual(a, b) {\n\t\tif (a.length !== b.length) return false;\n\n\t\tfor (var i = 0, l = a.length; i < l; i++) {\n\t\t\tif (a[i] !== b[i]) return false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction copyArray(a, b) {\n\t\tfor (var i = 0, l = b.length; i < l; i++) {\n\t\t\ta[i] = b[i];\n\t\t}\n\t} // Texture unit allocation\n\n\n\tfunction allocTexUnits(textures, n) {\n\t\tvar r = arrayCacheI32[n];\n\n\t\tif (r === undefined) {\n\t\t\tr = new Int32Array(n);\n\t\t\tarrayCacheI32[n] = r;\n\t\t}\n\n\t\tfor (var i = 0; i !== n; ++i) {\n\t\t\tr[i] = textures.allocateTextureUnit();\n\t\t}\n\n\t\treturn r;\n\t} // --- Setters ---\n\t// Note: Defining these methods externally, because they come in a bunch\n\t// and this way their names minify.\n\t// Single scalar\n\n\n\tfunction setValueV1f(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1f(this.addr, v);\n\t\tcache[0] = v;\n\t} // Single float vector (from flat array or THREE.VectorN)\n\n\n\tfunction setValueV2f(gl, v) {\n\t\tvar cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y) {\n\t\t\t\tgl.uniform2f(this.addr, v.x, v.y);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform2fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t}\n\n\tfunction setValueV3f(gl, v) {\n\t\tvar cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z) {\n\t\t\t\tgl.uniform3f(this.addr, v.x, v.y, v.z);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t\tcache[2] = v.z;\n\t\t\t}\n\t\t} else if (v.r !== undefined) {\n\t\t\tif (cache[0] !== v.r || cache[1] !== v.g || cache[2] !== v.b) {\n\t\t\t\tgl.uniform3f(this.addr, v.r, v.g, v.b);\n\t\t\t\tcache[0] = v.r;\n\t\t\t\tcache[1] = v.g;\n\t\t\t\tcache[2] = v.b;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform3fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t}\n\n\tfunction setValueV4f(gl, v) {\n\t\tvar cache = this.cache;\n\n\t\tif (v.x !== undefined) {\n\t\t\tif (cache[0] !== v.x || cache[1] !== v.y || cache[2] !== v.z || cache[3] !== v.w) {\n\t\t\t\tgl.uniform4f(this.addr, v.x, v.y, v.z, v.w);\n\t\t\t\tcache[0] = v.x;\n\t\t\t\tcache[1] = v.y;\n\t\t\t\tcache[2] = v.z;\n\t\t\t\tcache[3] = v.w;\n\t\t\t}\n\t\t} else {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniform4fv(this.addr, v);\n\t\t\tcopyArray(cache, v);\n\t\t}\n\t} // Single matrix (from flat array or MatrixN)\n\n\n\tfunction setValueM2(gl, v) {\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix2fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat2array.set(elements);\n\t\t\tgl.uniformMatrix2fv(this.addr, false, mat2array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t}\n\n\tfunction setValueM3(gl, v) {\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix3fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat3array.set(elements);\n\t\t\tgl.uniformMatrix3fv(this.addr, false, mat3array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t}\n\n\tfunction setValueM4(gl, v) {\n\t\tvar cache = this.cache;\n\t\tvar elements = v.elements;\n\n\t\tif (elements === undefined) {\n\t\t\tif (arraysEqual(cache, v)) return;\n\t\t\tgl.uniformMatrix4fv(this.addr, false, v);\n\t\t\tcopyArray(cache, v);\n\t\t} else {\n\t\t\tif (arraysEqual(cache, elements)) return;\n\t\t\tmat4array.set(elements);\n\t\t\tgl.uniformMatrix4fv(this.addr, false, mat4array);\n\t\t\tcopyArray(cache, elements);\n\t\t}\n\t} // Single texture (2D / Cube)\n\n\n\tfunction setValueT1(gl, v, textures) {\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.safeSetTexture2D(v || emptyTexture, unit);\n\t}\n\n\tfunction setValueT2DArray1(gl, v, textures) {\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.setTexture2DArray(v || emptyTexture2dArray, unit);\n\t}\n\n\tfunction setValueT3D1(gl, v, textures) {\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.setTexture3D(v || emptyTexture3d, unit);\n\t}\n\n\tfunction setValueT6(gl, v, textures) {\n\t\tvar cache = this.cache;\n\t\tvar unit = textures.allocateTextureUnit();\n\n\t\tif (cache[0] !== unit) {\n\t\t\tgl.uniform1i(this.addr, unit);\n\t\t\tcache[0] = unit;\n\t\t}\n\n\t\ttextures.safeSetTextureCube(v || emptyCubeTexture, unit);\n\t} // Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\n\tfunction setValueV1i(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1i(this.addr, v);\n\t\tcache[0] = v;\n\t}\n\n\tfunction setValueV2i(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform2iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV3i(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform3iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t}\n\n\tfunction setValueV4i(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (arraysEqual(cache, v)) return;\n\t\tgl.uniform4iv(this.addr, v);\n\t\tcopyArray(cache, v);\n\t} // uint\n\n\n\tfunction setValueV1ui(gl, v) {\n\t\tvar cache = this.cache;\n\t\tif (cache[0] === v) return;\n\t\tgl.uniform1ui(this.addr, v);\n\t\tcache[0] = v;\n\t} // Helper to pick the right setter for the singular case\n\n\n\tfunction getSingularSetter(type) {\n\t\tswitch (type) {\n\t\t\tcase 0x1406:\n\t\t\t\treturn setValueV1f;\n\t\t\t// FLOAT\n\n\t\t\tcase 0x8b50:\n\t\t\t\treturn setValueV2f;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b51:\n\t\t\t\treturn setValueV3f;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b52:\n\t\t\t\treturn setValueV4f;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5a:\n\t\t\t\treturn setValueM2;\n\t\t\t// _MAT2\n\n\t\t\tcase 0x8b5b:\n\t\t\t\treturn setValueM3;\n\t\t\t// _MAT3\n\n\t\t\tcase 0x8b5c:\n\t\t\t\treturn setValueM4;\n\t\t\t// _MAT4\n\n\t\t\tcase 0x1404:\n\t\t\tcase 0x8b56:\n\t\t\t\treturn setValueV1i;\n\t\t\t// INT, BOOL\n\n\t\t\tcase 0x8b53:\n\t\t\tcase 0x8b57:\n\t\t\t\treturn setValueV2i;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b54:\n\t\t\tcase 0x8b58:\n\t\t\t\treturn setValueV3i;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b55:\n\t\t\tcase 0x8b59:\n\t\t\t\treturn setValueV4i;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x1405:\n\t\t\t\treturn setValueV1ui;\n\t\t\t// UINT\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\n\t\t\tcase 0x8b62:\n\t\t\t\t// SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1;\n\n\t\t\tcase 0x8b5f: // SAMPLER_3D\n\n\t\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\n\t\t\tcase 0x8dd3:\n\t\t\t\t// UNSIGNED_INT_SAMPLER_3D\n\t\t\t\treturn setValueT3D1;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dc5:\n\t\t\t\t// SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6;\n\n\t\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\n\t\t\tcase 0x8dc4:\n\t\t\t\t// SAMPLER_2D_ARRAY_SHADOW\n\t\t\t\treturn setValueT2DArray1;\n\t\t}\n\t} // Array of scalars\n\n\n\tfunction setValueV1fArray(gl, v) {\n\t\tgl.uniform1fv(this.addr, v);\n\t} // Integer / Boolean vectors or arrays thereof (always flat arrays)\n\n\n\tfunction setValueV1iArray(gl, v) {\n\t\tgl.uniform1iv(this.addr, v);\n\t}\n\n\tfunction setValueV2iArray(gl, v) {\n\t\tgl.uniform2iv(this.addr, v);\n\t}\n\n\tfunction setValueV3iArray(gl, v) {\n\t\tgl.uniform3iv(this.addr, v);\n\t}\n\n\tfunction setValueV4iArray(gl, v) {\n\t\tgl.uniform4iv(this.addr, v);\n\t} // Array of vectors (flat or from THREE classes)\n\n\n\tfunction setValueV2fArray(gl, v) {\n\t\tvar data = flatten(v, this.size, 2);\n\t\tgl.uniform2fv(this.addr, data);\n\t}\n\n\tfunction setValueV3fArray(gl, v) {\n\t\tvar data = flatten(v, this.size, 3);\n\t\tgl.uniform3fv(this.addr, data);\n\t}\n\n\tfunction setValueV4fArray(gl, v) {\n\t\tvar data = flatten(v, this.size, 4);\n\t\tgl.uniform4fv(this.addr, data);\n\t} // Array of matrices (flat or from THREE clases)\n\n\n\tfunction setValueM2Array(gl, v) {\n\t\tvar data = flatten(v, this.size, 4);\n\t\tgl.uniformMatrix2fv(this.addr, false, data);\n\t}\n\n\tfunction setValueM3Array(gl, v) {\n\t\tvar data = flatten(v, this.size, 9);\n\t\tgl.uniformMatrix3fv(this.addr, false, data);\n\t}\n\n\tfunction setValueM4Array(gl, v) {\n\t\tvar data = flatten(v, this.size, 16);\n\t\tgl.uniformMatrix4fv(this.addr, false, data);\n\t} // Array of textures (2D / Cube)\n\n\n\tfunction setValueT1Array(gl, v, textures) {\n\t\tvar n = v.length;\n\t\tvar units = allocTexUnits(textures, n);\n\t\tgl.uniform1iv(this.addr, units);\n\n\t\tfor (var i = 0; i !== n; ++i) {\n\t\t\ttextures.safeSetTexture2D(v[i] || emptyTexture, units[i]);\n\t\t}\n\t}\n\n\tfunction setValueT6Array(gl, v, textures) {\n\t\tvar n = v.length;\n\t\tvar units = allocTexUnits(textures, n);\n\t\tgl.uniform1iv(this.addr, units);\n\n\t\tfor (var i = 0; i !== n; ++i) {\n\t\t\ttextures.safeSetTextureCube(v[i] || emptyCubeTexture, units[i]);\n\t\t}\n\t} // Helper to pick the right setter for a pure (bottom-level) array\n\n\n\tfunction getPureArraySetter(type) {\n\t\tswitch (type) {\n\t\t\tcase 0x1406:\n\t\t\t\treturn setValueV1fArray;\n\t\t\t// FLOAT\n\n\t\t\tcase 0x8b50:\n\t\t\t\treturn setValueV2fArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b51:\n\t\t\t\treturn setValueV3fArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b52:\n\t\t\t\treturn setValueV4fArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5a:\n\t\t\t\treturn setValueM2Array;\n\t\t\t// _MAT2\n\n\t\t\tcase 0x8b5b:\n\t\t\t\treturn setValueM3Array;\n\t\t\t// _MAT3\n\n\t\t\tcase 0x8b5c:\n\t\t\t\treturn setValueM4Array;\n\t\t\t// _MAT4\n\n\t\t\tcase 0x1404:\n\t\t\tcase 0x8b56:\n\t\t\t\treturn setValueV1iArray;\n\t\t\t// INT, BOOL\n\n\t\t\tcase 0x8b53:\n\t\t\tcase 0x8b57:\n\t\t\t\treturn setValueV2iArray;\n\t\t\t// _VEC2\n\n\t\t\tcase 0x8b54:\n\t\t\tcase 0x8b58:\n\t\t\t\treturn setValueV3iArray;\n\t\t\t// _VEC3\n\n\t\t\tcase 0x8b55:\n\t\t\tcase 0x8b59:\n\t\t\t\treturn setValueV4iArray;\n\t\t\t// _VEC4\n\n\t\t\tcase 0x8b5e: // SAMPLER_2D\n\n\t\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\n\t\t\tcase 0x8dca: // INT_SAMPLER_2D\n\n\t\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\n\t\t\tcase 0x8b62:\n\t\t\t\t// SAMPLER_2D_SHADOW\n\t\t\t\treturn setValueT1Array;\n\n\t\t\tcase 0x8b60: // SAMPLER_CUBE\n\n\t\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\n\t\t\tcase 0x8dc5:\n\t\t\t\t// SAMPLER_CUBE_SHADOW\n\t\t\t\treturn setValueT6Array;\n\t\t}\n\t} // --- Uniform Classes ---\n\n\n\tfunction SingleUniform(id, activeInfo, addr) {\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.setValue = getSingularSetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n\t}\n\n\tfunction PureArrayUniform(id, activeInfo, addr) {\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n\t}\n\n\tPureArrayUniform.prototype.updateCache = function (data) {\n\t\tvar cache = this.cache;\n\n\t\tif (data instanceof Float32Array && cache.length !== data.length) {\n\t\t\tthis.cache = new Float32Array(data.length);\n\t\t}\n\n\t\tcopyArray(cache, data);\n\t};\n\n\tfunction StructuredUniform(id) {\n\t\tthis.id = id;\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\t}\n\n\tStructuredUniform.prototype.setValue = function (gl, value, textures) {\n\t\tvar seq = this.seq;\n\n\t\tfor (var i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tvar u = seq[i];\n\t\t\tu.setValue(gl, value[u.id], textures);\n\t\t}\n\t}; // --- Top-level ---\n\t// Parser - builds up the property tree from the path strings\n\n\n\tvar RePathPart = /(\\w+)(\\])?(\\[|\\.)?/g; // extracts\n\t// \t- the identifier (member name or array index)\n\t//\t- followed by an optional right bracket (found when array index)\n\t//\t- followed by an optional left bracket or dot (type of subscript)\n\t//\n\t// Note: These portions can be read in a non-overlapping fashion and\n\t// allow straightforward parsing of the hierarchy that WebGL encodes\n\t// in the uniform names.\n\n\tfunction addUniform(container, uniformObject) {\n\t\tcontainer.seq.push(uniformObject);\n\t\tcontainer.map[uniformObject.id] = uniformObject;\n\t}\n\n\tfunction parseUniform(activeInfo, addr, container) {\n\t\tvar path = activeInfo.name,\n\t\t\t\tpathLength = path.length; // reset RegExp object, because of the early exit of a previous run\n\n\t\tRePathPart.lastIndex = 0;\n\n\t\twhile (true) {\n\t\t\tvar match = RePathPart.exec(path),\n\t\t\t\t\tmatchEnd = RePathPart.lastIndex;\n\t\t\tvar id = match[1];\n\t\t\tvar idIsIndex = match[2] === ']',\n\t\t\t\t\tsubscript = match[3];\n\t\t\tif (idIsIndex) id = id | 0; // convert to integer\n\n\t\t\tif (subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength) {\n\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\t\t\t\taddUniform(container, subscript === undefined ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\t// step into inner node / create it in case it doesn't exist\n\t\t\t\tvar map = container.map;\n\t\t\t\tvar next = map[id];\n\n\t\t\t\tif (next === undefined) {\n\t\t\t\t\tnext = new StructuredUniform(id);\n\t\t\t\t\taddUniform(container, next);\n\t\t\t\t}\n\n\t\t\t\tcontainer = next;\n\t\t\t}\n\t\t}\n\t} // Root Container\n\n\n\tfunction WebGLUniforms(gl, program) {\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\t\tvar n = gl.getProgramParameter(program, 35718);\n\n\t\tfor (var i = 0; i < n; ++i) {\n\t\t\tvar info = gl.getActiveUniform(program, i),\n\t\t\t\t\taddr = gl.getUniformLocation(program, info.name);\n\t\t\tparseUniform(info, addr, this);\n\t\t}\n\t}\n\n\tWebGLUniforms.prototype.setValue = function (gl, name, value, textures) {\n\t\tvar u = this.map[name];\n\t\tif (u !== undefined) u.setValue(gl, value, textures);\n\t};\n\n\tWebGLUniforms.prototype.setOptional = function (gl, object, name) {\n\t\tvar v = object[name];\n\t\tif (v !== undefined) this.setValue(gl, name, v);\n\t}; // Static interface\n\n\n\tWebGLUniforms.upload = function (gl, seq, values, textures) {\n\t\tfor (var i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tvar u = seq[i],\n\t\t\t\t\tv = values[u.id];\n\n\t\t\tif (v.needsUpdate !== false) {\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue(gl, v.value, textures);\n\t\t\t}\n\t\t}\n\t};\n\n\tWebGLUniforms.seqWithValue = function (seq, values) {\n\t\tvar r = [];\n\n\t\tfor (var i = 0, n = seq.length; i !== n; ++i) {\n\t\t\tvar u = seq[i];\n\t\t\tif (u.id in values) r.push(u);\n\t\t}\n\n\t\treturn r;\n\t};\n\n\tfunction WebGLShader(gl, type, string) {\n\t\tvar shader = gl.createShader(type);\n\t\tgl.shaderSource(shader, string);\n\t\tgl.compileShader(shader);\n\t\treturn shader;\n\t}\n\n\tvar programIdCount = 0;\n\n\tfunction addLineNumbers(string) {\n\t\tvar lines = string.split('\\n');\n\n\t\tfor (var i = 0; i < lines.length; i++) {\n\t\t\tlines[i] = i + 1 + ': ' + lines[i];\n\t\t}\n\n\t\treturn lines.join('\\n');\n\t}\n\n\tfunction getEncodingComponents(encoding) {\n\t\tswitch (encoding) {\n\t\t\tcase LinearEncoding:\n\t\t\t\treturn ['Linear', '( value )'];\n\n\t\t\tcase sRGBEncoding:\n\t\t\t\treturn ['sRGB', '( value )'];\n\n\t\t\tcase RGBEEncoding:\n\t\t\t\treturn ['RGBE', '( value )'];\n\n\t\t\tcase RGBM7Encoding:\n\t\t\t\treturn ['RGBM', '( value, 7.0 )'];\n\n\t\t\tcase RGBM16Encoding:\n\t\t\t\treturn ['RGBM', '( value, 16.0 )'];\n\n\t\t\tcase RGBDEncoding:\n\t\t\t\treturn ['RGBD', '( value, 256.0 )'];\n\n\t\t\tcase GammaEncoding:\n\t\t\t\treturn ['Gamma', '( value, float( GAMMA_FACTOR ) )'];\n\n\t\t\tcase LogLuvEncoding:\n\t\t\t\treturn ['LogLuv', '( value )'];\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.WebGLProgram: Unsupported encoding:', encoding);\n\t\t\t\treturn ['Linear', '( value )'];\n\t\t}\n\t}\n\n\tfunction getShaderErrors(gl, shader, type) {\n\t\tvar status = gl.getShaderParameter(shader, 35713);\n\t\tvar log = gl.getShaderInfoLog(shader).trim();\n\t\tif (status && log === '') return ''; // --enable-privileged-webgl-extension\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\tvar source = gl.getShaderSource(shader);\n\t\treturn 'THREE.WebGLShader: gl.getShaderInfoLog() ' + type + '\\n' + log + addLineNumbers(source);\n\t}\n\n\tfunction getTexelDecodingFunction(functionName, encoding) {\n\t\tvar components = getEncodingComponents(encoding);\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[0] + 'ToLinear' + components[1] + '; }';\n\t}\n\n\tfunction getTexelEncodingFunction(functionName, encoding) {\n\t\tvar components = getEncodingComponents(encoding);\n\t\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[0] + components[1] + '; }';\n\t}\n\n\tfunction getToneMappingFunction(functionName, toneMapping) {\n\t\tvar toneMappingName;\n\n\t\tswitch (toneMapping) {\n\t\t\tcase LinearToneMapping:\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t\t\tbreak;\n\n\t\t\tcase ReinhardToneMapping:\n\t\t\t\ttoneMappingName = 'Reinhard';\n\t\t\t\tbreak;\n\n\t\t\tcase CineonToneMapping:\n\t\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\t\tbreak;\n\n\t\t\tcase ACESFilmicToneMapping:\n\t\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\t\tbreak;\n\n\t\t\tcase CustomToneMapping:\n\t\t\t\ttoneMappingName = 'Custom';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn('THREE.WebGLProgram: Unsupported toneMapping:', toneMapping);\n\t\t\t\ttoneMappingName = 'Linear';\n\t\t}\n\n\t\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\t}\n\n\tfunction generateExtensions(parameters) {\n\t\tvar chunks = [parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ? '#extension GL_OES_standard_derivatives : enable' : '', (parameters.extensionFragDepth || parameters.logarithmicDepthBuffer) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '', parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ? '#extension GL_EXT_draw_buffers : require' : '', (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''];\n\t\treturn chunks.filter(filterEmptyLine).join('\\n');\n\t}\n\n\tfunction generateDefines(defines) {\n\t\tvar chunks = [];\n\n\t\tfor (var name in defines) {\n\t\t\tvar value = defines[name];\n\t\t\tif (value === false) continue;\n\t\t\tchunks.push('#define ' + name + ' ' + value);\n\t\t}\n\n\t\treturn chunks.join('\\n');\n\t}\n\n\tfunction fetchAttributeLocations(gl, program) {\n\t\tvar attributes = {};\n\t\tvar n = gl.getProgramParameter(program, 35721);\n\n\t\tfor (var i = 0; i < n; i++) {\n\t\t\tvar info = gl.getActiveAttrib(program, i);\n\t\t\tvar name = info.name; // console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\t\tattributes[name] = gl.getAttribLocation(program, name);\n\t\t}\n\n\t\treturn attributes;\n\t}\n\n\tfunction filterEmptyLine(string) {\n\t\treturn string !== '';\n\t}\n\n\tfunction replaceLightNums(string, parameters) {\n\t\treturn string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);\n\t}\n\n\tfunction replaceClippingPlaneNums(string, parameters) {\n\t\treturn string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);\n\t} // Resolve Includes\n\n\n\tvar includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\n\tfunction resolveIncludes(string) {\n\t\treturn string.replace(includePattern, includeReplacer);\n\t}\n\n\tfunction includeReplacer(match, include) {\n\t\tvar string = ShaderChunk[include];\n\n\t\tif (string === undefined) {\n\t\t\tthrow new Error('Can not resolve #include <' + include + '>');\n\t\t}\n\n\t\treturn resolveIncludes(string);\n\t} // Unroll Loops\n\n\n\tvar deprecatedUnrollLoopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\tvar unrollLoopPattern = /#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;\n\n\tfunction unrollLoops(string) {\n\t\treturn string.replace(unrollLoopPattern, loopReplacer).replace(deprecatedUnrollLoopPattern, deprecatedLoopReplacer);\n\t}\n\n\tfunction deprecatedLoopReplacer(match, start, end, snippet) {\n\t\tconsole.warn('WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.');\n\t\treturn loopReplacer(match, start, end, snippet);\n\t}\n\n\tfunction loopReplacer(match, start, end, snippet) {\n\t\tvar string = '';\n\n\t\tfor (var i = parseInt(start); i < parseInt(end); i++) {\n\t\t\tstring += snippet.replace(/\\[\\s*i\\s*\\]/g, '[ ' + i + ' ]').replace(/UNROLLED_LOOP_INDEX/g, i);\n\t\t}\n\n\t\treturn string;\n\t} //\n\n\n\tfunction generatePrecision(parameters) {\n\t\tvar precisionstring = 'precision ' + parameters.precision + ' float;\\nprecision ' + parameters.precision + ' int;';\n\n\t\tif (parameters.precision === 'highp') {\n\t\t\tprecisionstring += '\\n#define HIGH_PRECISION';\n\t\t} else if (parameters.precision === 'mediump') {\n\t\t\tprecisionstring += '\\n#define MEDIUM_PRECISION';\n\t\t} else if (parameters.precision === 'lowp') {\n\t\t\tprecisionstring += '\\n#define LOW_PRECISION';\n\t\t}\n\n\t\treturn precisionstring;\n\t}\n\n\tfunction generateShadowMapTypeDefine(parameters) {\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\t\tif (parameters.shadowMapType === PCFShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\t\t} else if (parameters.shadowMapType === PCFSoftShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\t\t} else if (parameters.shadowMapType === VSMShadowMap) {\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\t\t}\n\n\t\treturn shadowMapTypeDefine;\n\t}\n\n\tfunction generateEnvMapTypeDefine(parameters) {\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.envMapMode) {\n\t\t\t\tcase CubeReflectionMapping:\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapTypeDefine;\n\t}\n\n\tfunction generateEnvMapModeDefine(parameters) {\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.envMapMode) {\n\t\t\t\tcase CubeRefractionMapping:\n\t\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapModeDefine;\n\t}\n\n\tfunction generateEnvMapBlendingDefine(parameters) {\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n\n\t\tif (parameters.envMap) {\n\t\t\tswitch (parameters.combine) {\n\t\t\t\tcase MultiplyOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MixOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase AddOperation:\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn envMapBlendingDefine;\n\t}\n\n\tfunction WebGLProgram(renderer, cacheKey, parameters, bindingStates) {\n\t\tvar gl = renderer.getContext();\n\t\tvar defines = parameters.defines;\n\t\tvar vertexShader = parameters.vertexShader;\n\t\tvar fragmentShader = parameters.fragmentShader;\n\t\tvar shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);\n\t\tvar envMapTypeDefine = generateEnvMapTypeDefine(parameters);\n\t\tvar envMapModeDefine = generateEnvMapModeDefine(parameters);\n\t\tvar envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);\n\t\tvar gammaFactorDefine = renderer.gammaFactor > 0 ? renderer.gammaFactor : 1.0;\n\t\tvar customExtensions = parameters.isWebGL2 ? '' : generateExtensions(parameters);\n\t\tvar customDefines = generateDefines(defines);\n\t\tvar program = gl.createProgram();\n\t\tvar prefixVertex, prefixFragment;\n\t\tvar versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\\n' : '';\n\n\t\tif (parameters.isRawShaderMaterial) {\n\t\t\tprefixVertex = [customDefines].filter(filterEmptyLine).join('\\n');\n\n\t\t\tif (prefixVertex.length > 0) {\n\t\t\t\tprefixVertex += '\\n';\n\t\t\t}\n\n\t\t\tprefixFragment = [customExtensions, customDefines].filter(filterEmptyLine).join('\\n');\n\n\t\t\tif (prefixFragment.length > 0) {\n\t\t\t\tprefixFragment += '\\n';\n\t\t\t}\n\t\t} else {\n\t\t\tprefixVertex = [generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.instancing ? '#define USE_INSTANCING' : '', parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '', parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '', '#define GAMMA_FACTOR ' + gammaFactorDefine, '#define MAX_BONES ' + parameters.maxBones, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors ? '#define USE_COLOR' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.skinning ? '#define USE_SKINNING' : '', parameters.useVertexTexture ? '#define BONE_TEXTURE' : '', parameters.morphTargets ? '#define USE_MORPHTARGETS' : '', parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', 'uniform mat4 modelMatrix;', 'uniform mat4 modelViewMatrix;', 'uniform mat4 projectionMatrix;', 'uniform mat4 viewMatrix;', 'uniform mat3 normalMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', '#ifdef USE_INSTANCING', '\tattribute mat4 instanceMatrix;', '#endif', '#ifdef USE_INSTANCING_COLOR', '\tattribute vec3 instanceColor;', '#endif', 'attribute vec3 position;', 'attribute vec3 normal;', 'attribute vec2 uv;', '#ifdef USE_TANGENT', '\tattribute vec4 tangent;', '#endif', '#ifdef USE_COLOR', '\tattribute vec3 color;', '#endif', '#ifdef USE_MORPHTARGETS', '\tattribute vec3 morphTarget0;', '\tattribute vec3 morphTarget1;', '\tattribute vec3 morphTarget2;', '\tattribute vec3 morphTarget3;', '\t#ifdef USE_MORPHNORMALS', '\t\tattribute vec3 morphNormal0;', '\t\tattribute vec3 morphNormal1;', '\t\tattribute vec3 morphNormal2;', '\t\tattribute vec3 morphNormal3;', '\t#else', '\t\tattribute vec3 morphTarget4;', '\t\tattribute vec3 morphTarget5;', '\t\tattribute vec3 morphTarget6;', '\t\tattribute vec3 morphTarget7;', '\t#endif', '#endif', '#ifdef USE_SKINNING', '\tattribute vec4 skinIndex;', '\tattribute vec4 skinWeight;', '#endif', '\\n'].filter(filterEmptyLine).join('\\n');\n\t\t\tprefixFragment = [customExtensions, generatePrecision(parameters), '#define SHADER_NAME ' + parameters.shaderName, customDefines, parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest + (parameters.alphaTest % 1 ? '' : '.0') : '', // add '.0' if integer\n\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.matcap ? '#define USE_MATCAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapTypeDefine : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.envMap ? '#define ' + envMapBlendingDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.normalMap && parameters.objectSpaceNormalMap ? '#define OBJECTSPACE_NORMALMAP' : '', parameters.normalMap && parameters.tangentSpaceNormalMap ? '#define TANGENTSPACE_NORMALMAP' : '', parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '', parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '', parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.sheen ? '#define USE_SHEEN' : '', parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '', parameters.vertexTangents ? '#define USE_TANGENT' : '', parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '', parameters.vertexUvs ? '#define USE_UV' : '', parameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '', parameters.gradientMap ? '#define USE_GRADIENTMAP' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '', parameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ? '#define USE_LOGDEPTHBUF_EXT' : '', (parameters.extensionShaderTextureLOD || parameters.envMap) && parameters.rendererExtensionShaderTextureLod ? '#define TEXTURE_LOD_EXT' : '', 'uniform mat4 viewMatrix;', 'uniform vec3 cameraPosition;', 'uniform bool isOrthographic;', parameters.toneMapping !== NoToneMapping ? '#define TONE_MAPPING' : '', parameters.toneMapping !== NoToneMapping ? ShaderChunk['tonemapping_pars_fragment'] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\tparameters.toneMapping !== NoToneMapping ? getToneMappingFunction('toneMapping', parameters.toneMapping) : '', parameters.dithering ? '#define DITHERING' : '', ShaderChunk['encodings_pars_fragment'], // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\tparameters.map ? getTexelDecodingFunction('mapTexelToLinear', parameters.mapEncoding) : '', parameters.matcap ? getTexelDecodingFunction('matcapTexelToLinear', parameters.matcapEncoding) : '', parameters.envMap ? getTexelDecodingFunction('envMapTexelToLinear', parameters.envMapEncoding) : '', parameters.emissiveMap ? getTexelDecodingFunction('emissiveMapTexelToLinear', parameters.emissiveMapEncoding) : '', parameters.lightMap ? getTexelDecodingFunction('lightMapTexelToLinear', parameters.lightMapEncoding) : '', getTexelEncodingFunction('linearToOutputTexel', parameters.outputEncoding), parameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '', '\\n'].filter(filterEmptyLine).join('\\n');\n\t\t}\n\n\t\tvertexShader = resolveIncludes(vertexShader);\n\t\tvertexShader = replaceLightNums(vertexShader, parameters);\n\t\tvertexShader = replaceClippingPlaneNums(vertexShader, parameters);\n\t\tfragmentShader = resolveIncludes(fragmentShader);\n\t\tfragmentShader = replaceLightNums(fragmentShader, parameters);\n\t\tfragmentShader = replaceClippingPlaneNums(fragmentShader, parameters);\n\t\tvertexShader = unrollLoops(vertexShader);\n\t\tfragmentShader = unrollLoops(fragmentShader);\n\n\t\tif (parameters.isWebGL2 && parameters.isRawShaderMaterial !== true) {\n\t\t\t// GLSL 3.0 conversion for built-in materials and ShaderMaterial\n\t\t\tversionString = '#version 300 es\\n';\n\t\t\tprefixVertex = ['#define attribute in', '#define varying out', '#define texture2D texture'].join('\\n') + '\\n' + prefixVertex;\n\t\t\tprefixFragment = ['#define varying in', parameters.glslVersion === GLSL3 ? '' : 'out highp vec4 pc_fragColor;', parameters.glslVersion === GLSL3 ? '' : '#define gl_FragColor pc_fragColor', '#define gl_FragDepthEXT gl_FragDepth', '#define texture2D texture', '#define textureCube texture', '#define texture2DProj textureProj', '#define texture2DLodEXT textureLod', '#define texture2DProjLodEXT textureProjLod', '#define textureCubeLodEXT textureLod', '#define texture2DGradEXT textureGrad', '#define texture2DProjGradEXT textureProjGrad', '#define textureCubeGradEXT textureGrad'].join('\\n') + '\\n' + prefixFragment;\n\t\t}\n\n\t\tvar vertexGlsl = versionString + prefixVertex + vertexShader;\n\t\tvar fragmentGlsl = versionString + prefixFragment + fragmentShader; // console.log( '*VERTEX*', vertexGlsl );\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\t\tvar glVertexShader = WebGLShader(gl, 35633, vertexGlsl);\n\t\tvar glFragmentShader = WebGLShader(gl, 35632, fragmentGlsl);\n\t\tgl.attachShader(program, glVertexShader);\n\t\tgl.attachShader(program, glFragmentShader); // Force a particular attribute to index 0.\n\n\t\tif (parameters.index0AttributeName !== undefined) {\n\t\t\tgl.bindAttribLocation(program, 0, parameters.index0AttributeName);\n\t\t} else if (parameters.morphTargets === true) {\n\t\t\t// programs with morphTargets displace position out of attribute 0\n\t\t\tgl.bindAttribLocation(program, 0, 'position');\n\t\t}\n\n\t\tgl.linkProgram(program); // check for link errors\n\n\t\tif (renderer.debug.checkShaderErrors) {\n\t\t\tvar programLog = gl.getProgramInfoLog(program).trim();\n\t\t\tvar vertexLog = gl.getShaderInfoLog(glVertexShader).trim();\n\t\t\tvar fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();\n\t\t\tvar runnable = true;\n\t\t\tvar haveDiagnostics = true;\n\n\t\t\tif (gl.getProgramParameter(program, 35714) === false) {\n\t\t\t\trunnable = false;\n\t\t\t\tvar vertexErrors = getShaderErrors(gl, glVertexShader, 'vertex');\n\t\t\t\tvar fragmentErrors = getShaderErrors(gl, glFragmentShader, 'fragment');\n\t\t\t\tconsole.error('THREE.WebGLProgram: shader error: ', gl.getError(), '35715', gl.getProgramParameter(program, 35715), 'gl.getProgramInfoLog', programLog, vertexErrors, fragmentErrors);\n\t\t\t} else if (programLog !== '') {\n\t\t\t\tconsole.warn('THREE.WebGLProgram: gl.getProgramInfoLog()', programLog);\n\t\t\t} else if (vertexLog === '' || fragmentLog === '') {\n\t\t\t\thaveDiagnostics = false;\n\t\t\t}\n\n\t\t\tif (haveDiagnostics) {\n\t\t\t\tthis.diagnostics = {\n\t\t\t\t\trunnable: runnable,\n\t\t\t\t\tprogramLog: programLog,\n\t\t\t\t\tvertexShader: {\n\t\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\t\tprefix: prefixVertex\n\t\t\t\t\t},\n\t\t\t\t\tfragmentShader: {\n\t\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\t\tprefix: prefixFragment\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t} // Clean up\n\t\t// Crashes in iOS9 and iOS10. #18402\n\t\t// gl.detachShader( program, glVertexShader );\n\t\t// gl.detachShader( program, glFragmentShader );\n\n\n\t\tgl.deleteShader(glVertexShader);\n\t\tgl.deleteShader(glFragmentShader); // set up caching for uniform locations\n\n\t\tvar cachedUniforms;\n\n\t\tthis.getUniforms = function () {\n\t\t\tif (cachedUniforms === undefined) {\n\t\t\t\tcachedUniforms = new WebGLUniforms(gl, program);\n\t\t\t}\n\n\t\t\treturn cachedUniforms;\n\t\t}; // set up caching for attribute locations\n\n\n\t\tvar cachedAttributes;\n\n\t\tthis.getAttributes = function () {\n\t\t\tif (cachedAttributes === undefined) {\n\t\t\t\tcachedAttributes = fetchAttributeLocations(gl, program);\n\t\t\t}\n\n\t\t\treturn cachedAttributes;\n\t\t}; // free resource\n\n\n\t\tthis.destroy = function () {\n\t\t\tbindingStates.releaseStatesOfProgram(this);\n\t\t\tgl.deleteProgram(program);\n\t\t\tthis.program = undefined;\n\t\t}; //\n\n\n\t\tthis.name = parameters.shaderName;\n\t\tthis.id = programIdCount++;\n\t\tthis.cacheKey = cacheKey;\n\t\tthis.usedTimes = 1;\n\t\tthis.program = program;\n\t\tthis.vertexShader = glVertexShader;\n\t\tthis.fragmentShader = glFragmentShader;\n\t\treturn this;\n\t}\n\n\tfunction WebGLPrograms(renderer, cubemaps, extensions, capabilities, bindingStates, clipping) {\n\t\tvar programs = [];\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\t\tvar floatVertexTextures = capabilities.floatVertexTextures;\n\t\tvar maxVertexUniforms = capabilities.maxVertexUniforms;\n\t\tvar vertexTextures = capabilities.vertexTextures;\n\t\tvar precision = capabilities.precision;\n\t\tvar shaderIDs = {\n\t\t\tMeshDepthMaterial: 'depth',\n\t\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\t\tMeshNormalMaterial: 'normal',\n\t\t\tMeshBasicMaterial: 'basic',\n\t\t\tMeshLambertMaterial: 'lambert',\n\t\t\tMeshPhongMaterial: 'phong',\n\t\t\tMeshToonMaterial: 'toon',\n\t\t\tMeshStandardMaterial: 'physical',\n\t\t\tMeshPhysicalMaterial: 'physical',\n\t\t\tMeshMatcapMaterial: 'matcap',\n\t\t\tLineBasicMaterial: 'basic',\n\t\t\tLineDashedMaterial: 'dashed',\n\t\t\tPointsMaterial: 'points',\n\t\t\tShadowMaterial: 'shadow',\n\t\t\tSpriteMaterial: 'sprite'\n\t\t};\n\t\tvar parameterNames = ['precision', 'isWebGL2', 'supportsVertexTextures', 'outputEncoding', 'instancing', 'instancingColor', 'map', 'mapEncoding', 'matcap', 'matcapEncoding', 'envMap', 'envMapMode', 'envMapEncoding', 'envMapCubeUV', 'lightMap', 'lightMapEncoding', 'aoMap', 'emissiveMap', 'emissiveMapEncoding', 'bumpMap', 'normalMap', 'objectSpaceNormalMap', 'tangentSpaceNormalMap', 'clearcoatMap', 'clearcoatRoughnessMap', 'clearcoatNormalMap', 'displacementMap', 'specularMap', 'roughnessMap', 'metalnessMap', 'gradientMap', 'alphaMap', 'combine', 'vertexColors', 'vertexTangents', 'vertexUvs', 'uvsVertexOnly', 'fog', 'useFog', 'fogExp2', 'flatShading', 'sizeAttenuation', 'logarithmicDepthBuffer', 'skinning', 'maxBones', 'useVertexTexture', 'morphTargets', 'morphNormals', 'maxMorphTargets', 'maxMorphNormals', 'premultipliedAlpha', 'numDirLights', 'numPointLights', 'numSpotLights', 'numHemiLights', 'numRectAreaLights', 'numDirLightShadows', 'numPointLightShadows', 'numSpotLightShadows', 'shadowMapEnabled', 'shadowMapType', 'toneMapping', 'physicallyCorrectLights', 'alphaTest', 'doubleSided', 'flipSided', 'numClippingPlanes', 'numClipIntersection', 'depthPacking', 'dithering', 'sheen', 'transmissionMap'];\n\n\t\tfunction getMaxBones(object) {\n\t\t\tvar skeleton = object.skeleton;\n\t\t\tvar bones = skeleton.bones;\n\n\t\t\tif (floatVertexTextures) {\n\t\t\t\treturn 1024;\n\t\t\t} else {\n\t\t\t\t// default for when object is not specified\n\t\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t\t//\n\t\t\t\t//\t- leave some extra space for other uniforms\n\t\t\t\t//\t- limit here is ANGLE's 254 max uniform vectors\n\t\t\t\t//\t\t(up to 54 should be safe)\n\t\t\t\tvar nVertexUniforms = maxVertexUniforms;\n\t\t\t\tvar nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);\n\t\t\t\tvar maxBones = Math.min(nVertexMatrices, bones.length);\n\n\t\t\t\tif (maxBones < bones.length) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.');\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn maxBones;\n\t\t\t}\n\t\t}\n\n\t\tfunction getTextureEncodingFromMap(map) {\n\t\t\tvar encoding;\n\n\t\t\tif (map && map.isTexture) {\n\t\t\t\tencoding = map.encoding;\n\t\t\t} else if (map && map.isWebGLRenderTarget) {\n\t\t\t\tconsole.warn('THREE.WebGLPrograms.getTextureEncodingFromMap: don\\'t use render targets as textures. Use their .texture property instead.');\n\t\t\t\tencoding = map.texture.encoding;\n\t\t\t} else {\n\t\t\t\tencoding = LinearEncoding;\n\t\t\t}\n\n\t\t\treturn encoding;\n\t\t}\n\n\t\tfunction getParameters(material, lights, shadows, scene, object) {\n\t\t\tvar fog = scene.fog;\n\t\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tvar envMap = cubemaps.get(material.envMap || environment);\n\t\t\tvar shaderID = shaderIDs[material.type]; // heuristics to create shader parameters according to lights in the scene\n\t\t\t// (not to blow over maxLights budget)\n\n\t\t\tvar maxBones = object.isSkinnedMesh ? getMaxBones(object) : 0;\n\n\t\t\tif (material.precision !== null) {\n\t\t\t\tprecision = capabilities.getMaxPrecision(material.precision);\n\n\t\t\t\tif (precision !== material.precision) {\n\t\t\t\t\tconsole.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar vertexShader, fragmentShader;\n\n\t\t\tif (shaderID) {\n\t\t\t\tvar shader = ShaderLib[shaderID];\n\t\t\t\tvertexShader = shader.vertexShader;\n\t\t\t\tfragmentShader = shader.fragmentShader;\n\t\t\t} else {\n\t\t\t\tvertexShader = material.vertexShader;\n\t\t\t\tfragmentShader = material.fragmentShader;\n\t\t\t}\n\n\t\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\t\t\tvar parameters = {\n\t\t\t\tisWebGL2: isWebGL2,\n\t\t\t\tshaderID: shaderID,\n\t\t\t\tshaderName: material.type,\n\t\t\t\tvertexShader: vertexShader,\n\t\t\t\tfragmentShader: fragmentShader,\n\t\t\t\tdefines: material.defines,\n\t\t\t\tisRawShaderMaterial: material.isRawShaderMaterial === true,\n\t\t\t\tglslVersion: material.glslVersion,\n\t\t\t\tprecision: precision,\n\t\t\t\tinstancing: object.isInstancedMesh === true,\n\t\t\t\tinstancingColor: object.isInstancedMesh === true && object.instanceColor !== null,\n\t\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\t\toutputEncoding: currentRenderTarget !== null ? getTextureEncodingFromMap(currentRenderTarget.texture) : renderer.outputEncoding,\n\t\t\t\tmap: !!material.map,\n\t\t\t\tmapEncoding: getTextureEncodingFromMap(material.map),\n\t\t\t\tmatcap: !!material.matcap,\n\t\t\t\tmatcapEncoding: getTextureEncodingFromMap(material.matcap),\n\t\t\t\tenvMap: !!envMap,\n\t\t\t\tenvMapMode: envMap && envMap.mapping,\n\t\t\t\tenvMapEncoding: getTextureEncodingFromMap(envMap),\n\t\t\t\tenvMapCubeUV: !!envMap && (envMap.mapping === CubeUVReflectionMapping || envMap.mapping === CubeUVRefractionMapping),\n\t\t\t\tlightMap: !!material.lightMap,\n\t\t\t\tlightMapEncoding: getTextureEncodingFromMap(material.lightMap),\n\t\t\t\taoMap: !!material.aoMap,\n\t\t\t\temissiveMap: !!material.emissiveMap,\n\t\t\t\temissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap),\n\t\t\t\tbumpMap: !!material.bumpMap,\n\t\t\t\tnormalMap: !!material.normalMap,\n\t\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\t\t\t\tclearcoatMap: !!material.clearcoatMap,\n\t\t\t\tclearcoatRoughnessMap: !!material.clearcoatRoughnessMap,\n\t\t\t\tclearcoatNormalMap: !!material.clearcoatNormalMap,\n\t\t\t\tdisplacementMap: !!material.displacementMap,\n\t\t\t\troughnessMap: !!material.roughnessMap,\n\t\t\t\tmetalnessMap: !!material.metalnessMap,\n\t\t\t\tspecularMap: !!material.specularMap,\n\t\t\t\talphaMap: !!material.alphaMap,\n\t\t\t\tgradientMap: !!material.gradientMap,\n\t\t\t\tsheen: !!material.sheen,\n\t\t\t\ttransmissionMap: !!material.transmissionMap,\n\t\t\t\tcombine: material.combine,\n\t\t\t\tvertexTangents: material.normalMap && material.vertexTangents,\n\t\t\t\tvertexColors: material.vertexColors,\n\t\t\t\tvertexUvs: !!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatMap || !!material.clearcoatRoughnessMap || !!material.clearcoatNormalMap || !!material.displacementMap || !!material.transmissionMap,\n\t\t\t\tuvsVertexOnly: !(!!material.map || !!material.bumpMap || !!material.normalMap || !!material.specularMap || !!material.alphaMap || !!material.emissiveMap || !!material.roughnessMap || !!material.metalnessMap || !!material.clearcoatNormalMap || !!material.transmissionMap) && !!material.displacementMap,\n\t\t\t\tfog: !!fog,\n\t\t\t\tuseFog: material.fog,\n\t\t\t\tfogExp2: fog && fog.isFogExp2,\n\t\t\t\tflatShading: !!material.flatShading,\n\t\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\t\t\t\tskinning: material.skinning && maxBones > 0,\n\t\t\t\tmaxBones: maxBones,\n\t\t\t\tuseVertexTexture: floatVertexTextures,\n\t\t\t\tmorphTargets: material.morphTargets,\n\t\t\t\tmorphNormals: material.morphNormals,\n\t\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\n\t\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\n\t\t\t\tnumDirLights: lights.directional.length,\n\t\t\t\tnumPointLights: lights.point.length,\n\t\t\t\tnumSpotLights: lights.spot.length,\n\t\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\t\tnumHemiLights: lights.hemi.length,\n\t\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\t\t\t\tnumClippingPlanes: clipping.numPlanes,\n\t\t\t\tnumClipIntersection: clipping.numIntersection,\n\t\t\t\tdithering: material.dithering,\n\t\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\t\tshadowMapType: renderer.shadowMap.type,\n\t\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\t\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\t\t\t\talphaTest: material.alphaTest,\n\t\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\t\tflipSided: material.side === BackSide,\n\t\t\t\tdepthPacking: material.depthPacking !== undefined ? material.depthPacking : false,\n\t\t\t\tindex0AttributeName: material.index0AttributeName,\n\t\t\t\textensionDerivatives: material.extensions && material.extensions.derivatives,\n\t\t\t\textensionFragDepth: material.extensions && material.extensions.fragDepth,\n\t\t\t\textensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n\t\t\t\textensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n\t\t\t\trendererExtensionFragDepth: isWebGL2 || extensions.has('EXT_frag_depth'),\n\t\t\t\trendererExtensionDrawBuffers: isWebGL2 || extensions.has('WEBGL_draw_buffers'),\n\t\t\t\trendererExtensionShaderTextureLod: isWebGL2 || extensions.has('EXT_shader_texture_lod'),\n\t\t\t\tcustomProgramCacheKey: material.customProgramCacheKey()\n\t\t\t};\n\t\t\treturn parameters;\n\t\t}\n\n\t\tfunction getProgramCacheKey(parameters) {\n\t\t\tvar array = [];\n\n\t\t\tif (parameters.shaderID) {\n\t\t\t\tarray.push(parameters.shaderID);\n\t\t\t} else {\n\t\t\t\tarray.push(parameters.fragmentShader);\n\t\t\t\tarray.push(parameters.vertexShader);\n\t\t\t}\n\n\t\t\tif (parameters.defines !== undefined) {\n\t\t\t\tfor (var name in parameters.defines) {\n\t\t\t\t\tarray.push(name);\n\t\t\t\t\tarray.push(parameters.defines[name]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (parameters.isRawShaderMaterial === false) {\n\t\t\t\tfor (var i = 0; i < parameterNames.length; i++) {\n\t\t\t\t\tarray.push(parameters[parameterNames[i]]);\n\t\t\t\t}\n\n\t\t\t\tarray.push(renderer.outputEncoding);\n\t\t\t\tarray.push(renderer.gammaFactor);\n\t\t\t}\n\n\t\t\tarray.push(parameters.customProgramCacheKey);\n\t\t\treturn array.join();\n\t\t}\n\n\t\tfunction getUniforms(material) {\n\t\t\tvar shaderID = shaderIDs[material.type];\n\t\t\tvar uniforms;\n\n\t\t\tif (shaderID) {\n\t\t\t\tvar shader = ShaderLib[shaderID];\n\t\t\t\tuniforms = UniformsUtils.clone(shader.uniforms);\n\t\t\t} else {\n\t\t\t\tuniforms = material.uniforms;\n\t\t\t}\n\n\t\t\treturn uniforms;\n\t\t}\n\n\t\tfunction acquireProgram(parameters, cacheKey) {\n\t\t\tvar program; // Check if code has been already compiled\n\n\t\t\tfor (var p = 0, pl = programs.length; p < pl; p++) {\n\t\t\t\tvar preexistingProgram = programs[p];\n\n\t\t\t\tif (preexistingProgram.cacheKey === cacheKey) {\n\t\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t\t++program.usedTimes;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (program === undefined) {\n\t\t\t\tprogram = new WebGLProgram(renderer, cacheKey, parameters, bindingStates);\n\t\t\t\tprograms.push(program);\n\t\t\t}\n\n\t\t\treturn program;\n\t\t}\n\n\t\tfunction releaseProgram(program) {\n\t\t\tif (--program.usedTimes === 0) {\n\t\t\t\t// Remove from unordered set\n\t\t\t\tvar i = programs.indexOf(program);\n\t\t\t\tprograms[i] = programs[programs.length - 1];\n\t\t\t\tprograms.pop(); // Free WebGL resources\n\n\t\t\t\tprogram.destroy();\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tgetParameters: getParameters,\n\t\t\tgetProgramCacheKey: getProgramCacheKey,\n\t\t\tgetUniforms: getUniforms,\n\t\t\tacquireProgram: acquireProgram,\n\t\t\treleaseProgram: releaseProgram,\n\t\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\t\tprograms: programs\n\t\t};\n\t}\n\n\tfunction WebGLProperties() {\n\t\tvar properties = new WeakMap();\n\n\t\tfunction get(object) {\n\t\t\tvar map = properties.get(object);\n\n\t\t\tif (map === undefined) {\n\t\t\t\tmap = {};\n\t\t\t\tproperties.set(object, map);\n\t\t\t}\n\n\t\t\treturn map;\n\t\t}\n\n\t\tfunction remove(object) {\n\t\t\tproperties.delete(object);\n\t\t}\n\n\t\tfunction update(object, key, value) {\n\t\t\tproperties.get(object)[key] = value;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tproperties = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tremove: remove,\n\t\t\tupdate: update,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction painterSortStable(a, b) {\n\t\tif (a.groupOrder !== b.groupOrder) {\n\t\t\treturn a.groupOrder - b.groupOrder;\n\t\t} else if (a.renderOrder !== b.renderOrder) {\n\t\t\treturn a.renderOrder - b.renderOrder;\n\t\t} else if (a.program !== b.program) {\n\t\t\treturn a.program.id - b.program.id;\n\t\t} else if (a.material.id !== b.material.id) {\n\t\t\treturn a.material.id - b.material.id;\n\t\t} else if (a.z !== b.z) {\n\t\t\treturn a.z - b.z;\n\t\t} else {\n\t\t\treturn a.id - b.id;\n\t\t}\n\t}\n\n\tfunction reversePainterSortStable(a, b) {\n\t\tif (a.groupOrder !== b.groupOrder) {\n\t\t\treturn a.groupOrder - b.groupOrder;\n\t\t} else if (a.renderOrder !== b.renderOrder) {\n\t\t\treturn a.renderOrder - b.renderOrder;\n\t\t} else if (a.z !== b.z) {\n\t\t\treturn b.z - a.z;\n\t\t} else {\n\t\t\treturn a.id - b.id;\n\t\t}\n\t}\n\n\tfunction WebGLRenderList(properties) {\n\t\tvar renderItems = [];\n\t\tvar renderItemsIndex = 0;\n\t\tvar opaque = [];\n\t\tvar transparent = [];\n\t\tvar defaultProgram = {\n\t\t\tid: -1\n\t\t};\n\n\t\tfunction init() {\n\t\t\trenderItemsIndex = 0;\n\t\t\topaque.length = 0;\n\t\t\ttransparent.length = 0;\n\t\t}\n\n\t\tfunction getNextRenderItem(object, geometry, material, groupOrder, z, group) {\n\t\t\tvar renderItem = renderItems[renderItemsIndex];\n\t\t\tvar materialProperties = properties.get(material);\n\n\t\t\tif (renderItem === undefined) {\n\t\t\t\trenderItem = {\n\t\t\t\t\tid: object.id,\n\t\t\t\t\tobject: object,\n\t\t\t\t\tgeometry: geometry,\n\t\t\t\t\tmaterial: material,\n\t\t\t\t\tprogram: materialProperties.program || defaultProgram,\n\t\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\t\tz: z,\n\t\t\t\t\tgroup: group\n\t\t\t\t};\n\t\t\t\trenderItems[renderItemsIndex] = renderItem;\n\t\t\t} else {\n\t\t\t\trenderItem.id = object.id;\n\t\t\t\trenderItem.object = object;\n\t\t\t\trenderItem.geometry = geometry;\n\t\t\t\trenderItem.material = material;\n\t\t\t\trenderItem.program = materialProperties.program || defaultProgram;\n\t\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\t\trenderItem.z = z;\n\t\t\t\trenderItem.group = group;\n\t\t\t}\n\n\t\t\trenderItemsIndex++;\n\t\t\treturn renderItem;\n\t\t}\n\n\t\tfunction push(object, geometry, material, groupOrder, z, group) {\n\t\t\tvar renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\n\t\t\t(material.transparent === true ? transparent : opaque).push(renderItem);\n\t\t}\n\n\t\tfunction unshift(object, geometry, material, groupOrder, z, group) {\n\t\t\tvar renderItem = getNextRenderItem(object, geometry, material, groupOrder, z, group);\n\t\t\t(material.transparent === true ? transparent : opaque).unshift(renderItem);\n\t\t}\n\n\t\tfunction sort(customOpaqueSort, customTransparentSort) {\n\t\t\tif (opaque.length > 1) opaque.sort(customOpaqueSort || painterSortStable);\n\t\t\tif (transparent.length > 1) transparent.sort(customTransparentSort || reversePainterSortStable);\n\t\t}\n\n\t\tfunction finish() {\n\t\t\t// Clear references from inactive renderItems in the list\n\t\t\tfor (var i = renderItemsIndex, il = renderItems.length; i < il; i++) {\n\t\t\t\tvar renderItem = renderItems[i];\n\t\t\t\tif (renderItem.id === null) break;\n\t\t\t\trenderItem.id = null;\n\t\t\t\trenderItem.object = null;\n\t\t\t\trenderItem.geometry = null;\n\t\t\t\trenderItem.material = null;\n\t\t\t\trenderItem.program = null;\n\t\t\t\trenderItem.group = null;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\topaque: opaque,\n\t\t\ttransparent: transparent,\n\t\t\tinit: init,\n\t\t\tpush: push,\n\t\t\tunshift: unshift,\n\t\t\tfinish: finish,\n\t\t\tsort: sort\n\t\t};\n\t}\n\n\tfunction WebGLRenderLists(properties) {\n\t\tvar lists = new WeakMap();\n\n\t\tfunction get(scene, renderCallDepth) {\n\t\t\tvar list;\n\n\t\t\tif (lists.has(scene) === false) {\n\t\t\t\tlist = new WebGLRenderList(properties);\n\t\t\t\tlists.set(scene, [list]);\n\t\t\t} else {\n\t\t\t\tif (renderCallDepth >= lists.get(scene).length) {\n\t\t\t\t\tlist = new WebGLRenderList(properties);\n\t\t\t\t\tlists.get(scene).push(list);\n\t\t\t\t} else {\n\t\t\t\t\tlist = lists.get(scene)[renderCallDepth];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn list;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\tlists = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\tfunction UniformsCache() {\n\t\tvar lights = {};\n\t\treturn {\n\t\t\tget: function get(light) {\n\t\t\t\tif (lights[light.id] !== undefined) {\n\t\t\t\t\treturn lights[light.id];\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch (light.type) {\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tlights[light.id] = uniforms;\n\t\t\t\treturn uniforms;\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction ShadowUniformsCache() {\n\t\tvar lights = {};\n\t\treturn {\n\t\t\tget: function get(light) {\n\t\t\t\tif (lights[light.id] !== undefined) {\n\t\t\t\t\treturn lights[light.id];\n\t\t\t\t}\n\n\t\t\t\tvar uniforms;\n\n\t\t\t\tswitch (light.type) {\n\t\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpotLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'PointLight':\n\t\t\t\t\t\tuniforms = {\n\t\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\t\t\t\t}\n\n\t\t\t\tlights[light.id] = uniforms;\n\t\t\t\treturn uniforms;\n\t\t\t}\n\t\t};\n\t}\n\n\tvar nextVersion = 0;\n\n\tfunction shadowCastingLightsFirst(lightA, lightB) {\n\t\treturn (lightB.castShadow ? 1 : 0) - (lightA.castShadow ? 1 : 0);\n\t}\n\n\tfunction WebGLLights(extensions, capabilities) {\n\t\tvar cache = new UniformsCache();\n\t\tvar shadowCache = ShadowUniformsCache();\n\t\tvar state = {\n\t\t\tversion: 0,\n\t\t\thash: {\n\t\t\t\tdirectionalLength: -1,\n\t\t\t\tpointLength: -1,\n\t\t\t\tspotLength: -1,\n\t\t\t\trectAreaLength: -1,\n\t\t\t\themiLength: -1,\n\t\t\t\tnumDirectionalShadows: -1,\n\t\t\t\tnumPointShadows: -1,\n\t\t\t\tnumSpotShadows: -1\n\t\t\t},\n\t\t\tambient: [0, 0, 0],\n\t\t\tprobe: [],\n\t\t\tdirectional: [],\n\t\t\tdirectionalShadow: [],\n\t\t\tdirectionalShadowMap: [],\n\t\t\tdirectionalShadowMatrix: [],\n\t\t\tspot: [],\n\t\t\tspotShadow: [],\n\t\t\tspotShadowMap: [],\n\t\t\tspotShadowMatrix: [],\n\t\t\trectArea: [],\n\t\t\trectAreaLTC1: null,\n\t\t\trectAreaLTC2: null,\n\t\t\tpoint: [],\n\t\t\tpointShadow: [],\n\t\t\tpointShadowMap: [],\n\t\t\tpointShadowMatrix: [],\n\t\t\themi: []\n\t\t};\n\n\t\tfor (var i = 0; i < 9; i++) {\n\t\t\tstate.probe.push(new Vector3());\n\t\t}\n\n\t\tvar vector3 = new Vector3();\n\t\tvar matrix4 = new Matrix4();\n\t\tvar matrix42 = new Matrix4();\n\n\t\tfunction setup(lights) {\n\t\t\tvar r = 0,\n\t\t\t\t\tg = 0,\n\t\t\t\t\tb = 0;\n\n\t\t\tfor (var _i = 0; _i < 9; _i++) {\n\t\t\t\tstate.probe[_i].set(0, 0, 0);\n\t\t\t}\n\n\t\t\tvar directionalLength = 0;\n\t\t\tvar pointLength = 0;\n\t\t\tvar spotLength = 0;\n\t\t\tvar rectAreaLength = 0;\n\t\t\tvar hemiLength = 0;\n\t\t\tvar numDirectionalShadows = 0;\n\t\t\tvar numPointShadows = 0;\n\t\t\tvar numSpotShadows = 0;\n\t\t\tlights.sort(shadowCastingLightsFirst);\n\n\t\t\tfor (var _i2 = 0, l = lights.length; _i2 < l; _i2++) {\n\t\t\t\tvar light = lights[_i2];\n\t\t\t\tvar color = light.color;\n\t\t\t\tvar intensity = light.intensity;\n\t\t\t\tvar distance = light.distance;\n\t\t\t\tvar shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;\n\n\t\t\t\tif (light.isAmbientLight) {\n\t\t\t\t\tr += color.r * intensity;\n\t\t\t\t\tg += color.g * intensity;\n\t\t\t\t\tb += color.b * intensity;\n\t\t\t\t} else if (light.isLightProbe) {\n\t\t\t\t\tfor (var j = 0; j < 9; j++) {\n\t\t\t\t\t\tstate.probe[j].addScaledVector(light.sh.coefficients[j], intensity);\n\t\t\t\t\t}\n\t\t\t\t} else if (light.isDirectionalLight) {\n\t\t\t\t\tvar uniforms = cache.get(light);\n\t\t\t\t\tuniforms.color.copy(light.color).multiplyScalar(light.intensity);\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tvar shadow = light.shadow;\n\t\t\t\t\t\tvar shadowUniforms = shadowCache.get(light);\n\t\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\t\tstate.directionalShadow[directionalLength] = shadowUniforms;\n\t\t\t\t\t\tstate.directionalShadowMap[directionalLength] = shadowMap;\n\t\t\t\t\t\tstate.directionalShadowMatrix[directionalLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumDirectionalShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.directional[directionalLength] = uniforms;\n\t\t\t\t\tdirectionalLength++;\n\t\t\t\t} else if (light.isSpotLight) {\n\t\t\t\t\tvar _uniforms = cache.get(light);\n\n\t\t\t\t\t_uniforms.position.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\t_uniforms.color.copy(color).multiplyScalar(intensity);\n\n\t\t\t\t\t_uniforms.distance = distance;\n\t\t\t\t\t_uniforms.coneCos = Math.cos(light.angle);\n\t\t\t\t\t_uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));\n\t\t\t\t\t_uniforms.decay = light.decay;\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tvar _shadow = light.shadow;\n\n\t\t\t\t\t\tvar _shadowUniforms = shadowCache.get(light);\n\n\t\t\t\t\t\t_shadowUniforms.shadowBias = _shadow.bias;\n\t\t\t\t\t\t_shadowUniforms.shadowNormalBias = _shadow.normalBias;\n\t\t\t\t\t\t_shadowUniforms.shadowRadius = _shadow.radius;\n\t\t\t\t\t\t_shadowUniforms.shadowMapSize = _shadow.mapSize;\n\t\t\t\t\t\tstate.spotShadow[spotLength] = _shadowUniforms;\n\t\t\t\t\t\tstate.spotShadowMap[spotLength] = shadowMap;\n\t\t\t\t\t\tstate.spotShadowMatrix[spotLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumSpotShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.spot[spotLength] = _uniforms;\n\t\t\t\t\tspotLength++;\n\t\t\t\t} else if (light.isRectAreaLight) {\n\t\t\t\t\tvar _uniforms2 = cache.get(light); // (a) intensity is the total visible light emitted\n\t\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\t\t\t\t\t// (b) intensity is the brightness of the light\n\n\n\t\t\t\t\t_uniforms2.color.copy(color).multiplyScalar(intensity);\n\n\t\t\t\t\t_uniforms2.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n\n\t\t\t\t\t_uniforms2.halfHeight.set(0.0, light.height * 0.5, 0.0);\n\n\t\t\t\t\tstate.rectArea[rectAreaLength] = _uniforms2;\n\t\t\t\t\trectAreaLength++;\n\t\t\t\t} else if (light.isPointLight) {\n\t\t\t\t\tvar _uniforms3 = cache.get(light);\n\n\t\t\t\t\t_uniforms3.color.copy(light.color).multiplyScalar(light.intensity);\n\n\t\t\t\t\t_uniforms3.distance = light.distance;\n\t\t\t\t\t_uniforms3.decay = light.decay;\n\n\t\t\t\t\tif (light.castShadow) {\n\t\t\t\t\t\tvar _shadow2 = light.shadow;\n\n\t\t\t\t\t\tvar _shadowUniforms2 = shadowCache.get(light);\n\n\t\t\t\t\t\t_shadowUniforms2.shadowBias = _shadow2.bias;\n\t\t\t\t\t\t_shadowUniforms2.shadowNormalBias = _shadow2.normalBias;\n\t\t\t\t\t\t_shadowUniforms2.shadowRadius = _shadow2.radius;\n\t\t\t\t\t\t_shadowUniforms2.shadowMapSize = _shadow2.mapSize;\n\t\t\t\t\t\t_shadowUniforms2.shadowCameraNear = _shadow2.camera.near;\n\t\t\t\t\t\t_shadowUniforms2.shadowCameraFar = _shadow2.camera.far;\n\t\t\t\t\t\tstate.pointShadow[pointLength] = _shadowUniforms2;\n\t\t\t\t\t\tstate.pointShadowMap[pointLength] = shadowMap;\n\t\t\t\t\t\tstate.pointShadowMatrix[pointLength] = light.shadow.matrix;\n\t\t\t\t\t\tnumPointShadows++;\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.point[pointLength] = _uniforms3;\n\t\t\t\t\tpointLength++;\n\t\t\t\t} else if (light.isHemisphereLight) {\n\t\t\t\t\tvar _uniforms4 = cache.get(light);\n\n\t\t\t\t\t_uniforms4.skyColor.copy(light.color).multiplyScalar(intensity);\n\n\t\t\t\t\t_uniforms4.groundColor.copy(light.groundColor).multiplyScalar(intensity);\n\n\t\t\t\t\tstate.hemi[hemiLength] = _uniforms4;\n\t\t\t\t\themiLength++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (rectAreaLength > 0) {\n\t\t\t\tif (capabilities.isWebGL2) {\n\t\t\t\t\t// WebGL 2\n\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\t\t\t\t} else {\n\t\t\t\t\t// WebGL 1\n\t\t\t\t\tif (extensions.has('OES_texture_float_linear') === true) {\n\t\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\t\t\t\t\t} else if (extensions.has('OES_texture_half_float_linear') === true) {\n\t\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_HALF_1;\n\t\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_HALF_2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.ambient[0] = r;\n\t\t\tstate.ambient[1] = g;\n\t\t\tstate.ambient[2] = b;\n\t\t\tvar hash = state.hash;\n\n\t\t\tif (hash.directionalLength !== directionalLength || hash.pointLength !== pointLength || hash.spotLength !== spotLength || hash.rectAreaLength !== rectAreaLength || hash.hemiLength !== hemiLength || hash.numDirectionalShadows !== numDirectionalShadows || hash.numPointShadows !== numPointShadows || hash.numSpotShadows !== numSpotShadows) {\n\t\t\t\tstate.directional.length = directionalLength;\n\t\t\t\tstate.spot.length = spotLength;\n\t\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\t\tstate.point.length = pointLength;\n\t\t\t\tstate.hemi.length = hemiLength;\n\t\t\t\tstate.directionalShadow.length = numDirectionalShadows;\n\t\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadow.length = numPointShadows;\n\t\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\t\tstate.spotShadow.length = numSpotShadows;\n\t\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\n\t\t\t\thash.directionalLength = directionalLength;\n\t\t\t\thash.pointLength = pointLength;\n\t\t\t\thash.spotLength = spotLength;\n\t\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\t\thash.hemiLength = hemiLength;\n\t\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\t\thash.numPointShadows = numPointShadows;\n\t\t\t\thash.numSpotShadows = numSpotShadows;\n\t\t\t\tstate.version = nextVersion++;\n\t\t\t}\n\t\t}\n\n\t\tfunction setupView(lights, camera) {\n\t\t\tvar directionalLength = 0;\n\t\t\tvar pointLength = 0;\n\t\t\tvar spotLength = 0;\n\t\t\tvar rectAreaLength = 0;\n\t\t\tvar hemiLength = 0;\n\t\t\tvar viewMatrix = camera.matrixWorldInverse;\n\n\t\t\tfor (var _i3 = 0, l = lights.length; _i3 < l; _i3++) {\n\t\t\t\tvar light = lights[_i3];\n\n\t\t\t\tif (light.isDirectionalLight) {\n\t\t\t\t\tvar uniforms = state.directional[directionalLength];\n\t\t\t\t\tuniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\t\tvector3.setFromMatrixPosition(light.target.matrixWorld);\n\t\t\t\t\tuniforms.direction.sub(vector3);\n\t\t\t\t\tuniforms.direction.transformDirection(viewMatrix);\n\t\t\t\t\tdirectionalLength++;\n\t\t\t\t} else if (light.isSpotLight) {\n\t\t\t\t\tvar _uniforms5 = state.spot[spotLength];\n\n\t\t\t\t\t_uniforms5.position.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\t_uniforms5.position.applyMatrix4(viewMatrix);\n\n\t\t\t\t\t_uniforms5.direction.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\tvector3.setFromMatrixPosition(light.target.matrixWorld);\n\n\t\t\t\t\t_uniforms5.direction.sub(vector3);\n\n\t\t\t\t\t_uniforms5.direction.transformDirection(viewMatrix);\n\n\t\t\t\t\tspotLength++;\n\t\t\t\t} else if (light.isRectAreaLight) {\n\t\t\t\t\tvar _uniforms6 = state.rectArea[rectAreaLength];\n\n\t\t\t\t\t_uniforms6.position.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\t_uniforms6.position.applyMatrix4(viewMatrix); // extract local rotation of light to derive width/height half vectors\n\n\n\t\t\t\t\tmatrix42.identity();\n\t\t\t\t\tmatrix4.copy(light.matrixWorld);\n\t\t\t\t\tmatrix4.premultiply(viewMatrix);\n\t\t\t\t\tmatrix42.extractRotation(matrix4);\n\n\t\t\t\t\t_uniforms6.halfWidth.set(light.width * 0.5, 0.0, 0.0);\n\n\t\t\t\t\t_uniforms6.halfHeight.set(0.0, light.height * 0.5, 0.0);\n\n\t\t\t\t\t_uniforms6.halfWidth.applyMatrix4(matrix42);\n\n\t\t\t\t\t_uniforms6.halfHeight.applyMatrix4(matrix42);\n\n\t\t\t\t\trectAreaLength++;\n\t\t\t\t} else if (light.isPointLight) {\n\t\t\t\t\tvar _uniforms7 = state.point[pointLength];\n\n\t\t\t\t\t_uniforms7.position.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\t_uniforms7.position.applyMatrix4(viewMatrix);\n\n\t\t\t\t\tpointLength++;\n\t\t\t\t} else if (light.isHemisphereLight) {\n\t\t\t\t\tvar _uniforms8 = state.hemi[hemiLength];\n\n\t\t\t\t\t_uniforms8.direction.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\t\t\t_uniforms8.direction.transformDirection(viewMatrix);\n\n\t\t\t\t\t_uniforms8.direction.normalize();\n\n\t\t\t\t\themiLength++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: setup,\n\t\t\tsetupView: setupView,\n\t\t\tstate: state\n\t\t};\n\t}\n\n\tfunction WebGLRenderState(extensions, capabilities) {\n\t\tvar lights = new WebGLLights(extensions, capabilities);\n\t\tvar lightsArray = [];\n\t\tvar shadowsArray = [];\n\n\t\tfunction init() {\n\t\t\tlightsArray.length = 0;\n\t\t\tshadowsArray.length = 0;\n\t\t}\n\n\t\tfunction pushLight(light) {\n\t\t\tlightsArray.push(light);\n\t\t}\n\n\t\tfunction pushShadow(shadowLight) {\n\t\t\tshadowsArray.push(shadowLight);\n\t\t}\n\n\t\tfunction setupLights() {\n\t\t\tlights.setup(lightsArray);\n\t\t}\n\n\t\tfunction setupLightsView(camera) {\n\t\t\tlights.setupView(lightsArray, camera);\n\t\t}\n\n\t\tvar state = {\n\t\t\tlightsArray: lightsArray,\n\t\t\tshadowsArray: shadowsArray,\n\t\t\tlights: lights\n\t\t};\n\t\treturn {\n\t\t\tinit: init,\n\t\t\tstate: state,\n\t\t\tsetupLights: setupLights,\n\t\t\tsetupLightsView: setupLightsView,\n\t\t\tpushLight: pushLight,\n\t\t\tpushShadow: pushShadow\n\t\t};\n\t}\n\n\tfunction WebGLRenderStates(extensions, capabilities) {\n\t\tvar renderStates = new WeakMap();\n\n\t\tfunction get(scene, renderCallDepth) {\n\t\t\tif (renderCallDepth === void 0) {\n\t\t\t\trenderCallDepth = 0;\n\t\t\t}\n\n\t\t\tvar renderState;\n\n\t\t\tif (renderStates.has(scene) === false) {\n\t\t\t\trenderState = new WebGLRenderState(extensions, capabilities);\n\t\t\t\trenderStates.set(scene, [renderState]);\n\t\t\t} else {\n\t\t\t\tif (renderCallDepth >= renderStates.get(scene).length) {\n\t\t\t\t\trenderState = new WebGLRenderState(extensions, capabilities);\n\t\t\t\t\trenderStates.get(scene).push(renderState);\n\t\t\t\t} else {\n\t\t\t\t\trenderState = renderStates.get(scene)[renderCallDepth];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn renderState;\n\t\t}\n\n\t\tfunction dispose() {\n\t\t\trenderStates = new WeakMap();\n\t\t}\n\n\t\treturn {\n\t\t\tget: get,\n\t\t\tdispose: dispose\n\t\t};\n\t}\n\n\t/**\n\t * parameters = {\n\t *\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>\n\t * }\n\t */\n\n\tvar MeshDepthMaterial = /*#__PURE__*/function (_Material) {\n\t\t_inheritsLoose(MeshDepthMaterial, _Material);\n\n\t\tfunction MeshDepthMaterial(parameters) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Material.call(this) || this;\n\t\t\t_this.type = 'MeshDepthMaterial';\n\t\t\t_this.depthPacking = BasicDepthPacking;\n\t\t\t_this.skinning = false;\n\t\t\t_this.morphTargets = false;\n\t\t\t_this.map = null;\n\t\t\t_this.alphaMap = null;\n\t\t\t_this.displacementMap = null;\n\t\t\t_this.displacementScale = 1;\n\t\t\t_this.displacementBias = 0;\n\t\t\t_this.wireframe = false;\n\t\t\t_this.wireframeLinewidth = 1;\n\t\t\t_this.fog = false;\n\n\t\t\t_this.setValues(parameters);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = MeshDepthMaterial.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Material.prototype.copy.call(this, source);\n\n\t\t\tthis.depthPacking = source.depthPacking;\n\t\t\tthis.skinning = source.skinning;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn MeshDepthMaterial;\n\t}(Material);\n\n\tMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\n\t *\treferencePosition: <float>,\n\t *\tnearDistance: <float>,\n\t *\tfarDistance: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>\n\t *\n\t * }\n\t */\n\n\tvar MeshDistanceMaterial = /*#__PURE__*/function (_Material) {\n\t\t_inheritsLoose(MeshDistanceMaterial, _Material);\n\n\t\tfunction MeshDistanceMaterial(parameters) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Material.call(this) || this;\n\t\t\t_this.type = 'MeshDistanceMaterial';\n\t\t\t_this.referencePosition = new Vector3();\n\t\t\t_this.nearDistance = 1;\n\t\t\t_this.farDistance = 1000;\n\t\t\t_this.skinning = false;\n\t\t\t_this.morphTargets = false;\n\t\t\t_this.map = null;\n\t\t\t_this.alphaMap = null;\n\t\t\t_this.displacementMap = null;\n\t\t\t_this.displacementScale = 1;\n\t\t\t_this.displacementBias = 0;\n\t\t\t_this.fog = false;\n\n\t\t\t_this.setValues(parameters);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = MeshDistanceMaterial.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Material.prototype.copy.call(this, source);\n\n\t\t\tthis.referencePosition.copy(source.referencePosition);\n\t\t\tthis.nearDistance = source.nearDistance;\n\t\t\tthis.farDistance = source.farDistance;\n\t\t\tthis.skinning = source.skinning;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn MeshDistanceMaterial;\n\t}(Material);\n\n\tMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\n\tvar vsm_frag = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n\\tfloat mean = 0.0;\\n\\tfloat squared_mean = 0.0;\\n\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\\n\\tfor ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\\n\\t\\t#ifdef HORIZONTAL_PASS\\n\\t\\t\\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\\n\\t\\t\\tmean += distribution.x;\\n\\t\\t\\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n\\t\\t#else\\n\\t\\t\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\\n\\t\\t\\tmean += depth;\\n\\t\\t\\tsquared_mean += depth * depth;\\n\\t\\t#endif\\n\\t}\\n\\tmean = mean * HALF_SAMPLE_RATE;\\n\\tsquared_mean = squared_mean * HALF_SAMPLE_RATE;\\n\\tfloat std_dev = sqrt( squared_mean - mean * mean );\\n\\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\n\tvar vsm_vert = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\n\tfunction WebGLShadowMap(_renderer, _objects, maxTextureSize) {\n\t\tvar _frustum = new Frustum();\n\n\t\tvar _shadowMapSize = new Vector2(),\n\t\t\t\t_viewportSize = new Vector2(),\n\t\t\t\t_viewport = new Vector4(),\n\t\t\t\t_depthMaterials = [],\n\t\t\t\t_distanceMaterials = [],\n\t\t\t\t_materialCache = {};\n\n\t\tvar shadowSide = {\n\t\t\t0: BackSide,\n\t\t\t1: FrontSide,\n\t\t\t2: DoubleSide\n\t\t};\n\t\tvar shadowMaterialVertical = new ShaderMaterial({\n\t\t\tdefines: {\n\t\t\t\tSAMPLE_RATE: 2.0 / 8.0,\n\t\t\t\tHALF_SAMPLE_RATE: 1.0 / 8.0\n\t\t\t},\n\t\t\tuniforms: {\n\t\t\t\tshadow_pass: {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\tresolution: {\n\t\t\t\t\tvalue: new Vector2()\n\t\t\t\t},\n\t\t\t\tradius: {\n\t\t\t\t\tvalue: 4.0\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: vsm_vert,\n\t\t\tfragmentShader: vsm_frag\n\t\t});\n\t\tvar shadowMaterialHorizontal = shadowMaterialVertical.clone();\n\t\tshadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;\n\t\tvar fullScreenTri = new BufferGeometry();\n\t\tfullScreenTri.setAttribute('position', new BufferAttribute(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3));\n\t\tvar fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);\n\t\tvar scope = this;\n\t\tthis.enabled = false;\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\t\tthis.type = PCFShadowMap;\n\n\t\tthis.render = function (lights, scene, camera) {\n\t\t\tif (scope.enabled === false) return;\n\t\t\tif (scope.autoUpdate === false && scope.needsUpdate === false) return;\n\t\t\tif (lights.length === 0) return;\n\n\t\t\tvar currentRenderTarget = _renderer.getRenderTarget();\n\n\t\t\tvar activeCubeFace = _renderer.getActiveCubeFace();\n\n\t\t\tvar activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\t\tvar _state = _renderer.state; // Set GL state for depth map.\n\n\t\t\t_state.setBlending(NoBlending);\n\n\t\t\t_state.buffers.color.setClear(1, 1, 1, 1);\n\n\t\t\t_state.buffers.depth.setTest(true);\n\n\t\t\t_state.setScissorTest(false); // render depth map\n\n\n\t\t\tfor (var i = 0, il = lights.length; i < il; i++) {\n\t\t\t\tvar light = lights[i];\n\t\t\t\tvar shadow = light.shadow;\n\n\t\t\t\tif (shadow === undefined) {\n\t\t\t\t\tconsole.warn('THREE.WebGLShadowMap:', light, 'has no shadow.');\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (shadow.autoUpdate === false && shadow.needsUpdate === false) continue;\n\n\t\t\t\t_shadowMapSize.copy(shadow.mapSize);\n\n\t\t\t\tvar shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t\t_shadowMapSize.multiply(shadowFrameExtents);\n\n\t\t\t\t_viewportSize.copy(shadow.mapSize);\n\n\t\t\t\tif (_shadowMapSize.x > maxTextureSize || _shadowMapSize.y > maxTextureSize) {\n\t\t\t\t\tif (_shadowMapSize.x > maxTextureSize) {\n\t\t\t\t\t\t_viewportSize.x = Math.floor(maxTextureSize / shadowFrameExtents.x);\n\t\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_shadowMapSize.y > maxTextureSize) {\n\t\t\t\t\t\t_viewportSize.y = Math.floor(maxTextureSize / shadowFrameExtents.y);\n\t\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (shadow.map === null && !shadow.isPointLightShadow && this.type === VSMShadowMap) {\n\t\t\t\t\tvar pars = {\n\t\t\t\t\t\tminFilter: LinearFilter,\n\t\t\t\t\t\tmagFilter: LinearFilter,\n\t\t\t\t\t\tformat: RGBAFormat\n\t\t\t\t\t};\n\t\t\t\t\tshadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\t\t\t\t\tshadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\t\t\t\t}\n\n\t\t\t\tif (shadow.map === null) {\n\t\t\t\t\tvar _pars = {\n\t\t\t\t\t\tminFilter: NearestFilter,\n\t\t\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\t\t\tformat: RGBAFormat\n\t\t\t\t\t};\n\t\t\t\t\tshadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, _pars);\n\t\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\t\t\t\t\tshadow.camera.updateProjectionMatrix();\n\t\t\t\t}\n\n\t\t\t\t_renderer.setRenderTarget(shadow.map);\n\n\t\t\t\t_renderer.clear();\n\n\t\t\t\tvar viewportCount = shadow.getViewportCount();\n\n\t\t\t\tfor (var vp = 0; vp < viewportCount; vp++) {\n\t\t\t\t\tvar viewport = shadow.getViewport(vp);\n\n\t\t\t\t\t_viewport.set(_viewportSize.x * viewport.x, _viewportSize.y * viewport.y, _viewportSize.x * viewport.z, _viewportSize.y * viewport.w);\n\n\t\t\t\t\t_state.viewport(_viewport);\n\n\t\t\t\t\tshadow.updateMatrices(light, vp);\n\t\t\t\t\t_frustum = shadow.getFrustum();\n\t\t\t\t\trenderObject(scene, camera, shadow.camera, light, this.type);\n\t\t\t\t} // do blur pass for VSM\n\n\n\t\t\t\tif (!shadow.isPointLightShadow && this.type === VSMShadowMap) {\n\t\t\t\t\tVSMPass(shadow, camera);\n\t\t\t\t}\n\n\t\t\t\tshadow.needsUpdate = false;\n\t\t\t}\n\n\t\t\tscope.needsUpdate = false;\n\n\t\t\t_renderer.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);\n\t\t};\n\n\t\tfunction VSMPass(shadow, camera) {\n\t\t\tvar geometry = _objects.update(fullScreenMesh); // vertical pass\n\n\n\t\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\n\t\t\t_renderer.setRenderTarget(shadow.mapPass);\n\n\t\t\t_renderer.clear();\n\n\t\t\t_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null); // horizontal pass\n\n\n\t\t\tshadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\t\tshadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;\n\t\t\tshadowMaterialHorizontal.uniforms.radius.value = shadow.radius;\n\n\t\t\t_renderer.setRenderTarget(shadow.map);\n\n\t\t\t_renderer.clear();\n\n\t\t\t_renderer.renderBufferDirect(camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);\n\t\t}\n\n\t\tfunction getDepthMaterialVariant(useMorphing, useSkinning, useInstancing) {\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\t\t\tvar material = _depthMaterials[index];\n\n\t\t\tif (material === undefined) {\n\t\t\t\tmaterial = new MeshDepthMaterial({\n\t\t\t\t\tdepthPacking: RGBADepthPacking,\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\t\t\t\t});\n\t\t\t\t_depthMaterials[index] = material;\n\t\t\t}\n\n\t\t\treturn material;\n\t\t}\n\n\t\tfunction getDistanceMaterialVariant(useMorphing, useSkinning, useInstancing) {\n\t\t\tvar index = useMorphing << 0 | useSkinning << 1 | useInstancing << 2;\n\t\t\tvar material = _distanceMaterials[index];\n\n\t\t\tif (material === undefined) {\n\t\t\t\tmaterial = new MeshDistanceMaterial({\n\t\t\t\t\tmorphTargets: useMorphing,\n\t\t\t\t\tskinning: useSkinning\n\t\t\t\t});\n\t\t\t\t_distanceMaterials[index] = material;\n\t\t\t}\n\n\t\t\treturn material;\n\t\t}\n\n\t\tfunction getDepthMaterial(object, geometry, material, light, shadowCameraNear, shadowCameraFar, type) {\n\t\t\tvar result = null;\n\t\t\tvar getMaterialVariant = getDepthMaterialVariant;\n\t\t\tvar customMaterial = object.customDepthMaterial;\n\n\t\t\tif (light.isPointLight === true) {\n\t\t\t\tgetMaterialVariant = getDistanceMaterialVariant;\n\t\t\t\tcustomMaterial = object.customDistanceMaterial;\n\t\t\t}\n\n\t\t\tif (customMaterial === undefined) {\n\t\t\t\tvar useMorphing = false;\n\n\t\t\t\tif (material.morphTargets === true) {\n\t\t\t\t\tuseMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n\t\t\t\t}\n\n\t\t\t\tvar useSkinning = false;\n\n\t\t\t\tif (object.isSkinnedMesh === true) {\n\t\t\t\t\tif (material.skinning === true) {\n\t\t\t\t\t\tuseSkinning = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:', object);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar useInstancing = object.isInstancedMesh === true;\n\t\t\t\tresult = getMaterialVariant(useMorphing, useSkinning, useInstancing);\n\t\t\t} else {\n\t\t\t\tresult = customMaterial;\n\t\t\t}\n\n\t\t\tif (_renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0) {\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\t\t\t\tvar keyA = result.uuid,\n\t\t\t\t\t\tkeyB = material.uuid;\n\t\t\t\tvar materialsForVariant = _materialCache[keyA];\n\n\t\t\t\tif (materialsForVariant === undefined) {\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[keyA] = materialsForVariant;\n\t\t\t\t}\n\n\t\t\t\tvar cachedMaterial = materialsForVariant[keyB];\n\n\t\t\t\tif (cachedMaterial === undefined) {\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[keyB] = cachedMaterial;\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\t\t\t}\n\n\t\t\tresult.visible = material.visible;\n\t\t\tresult.wireframe = material.wireframe;\n\n\t\t\tif (type === VSMShadowMap) {\n\t\t\t\tresult.side = material.shadowSide !== null ? material.shadowSide : material.side;\n\t\t\t} else {\n\t\t\t\tresult.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];\n\t\t\t}\n\n\t\t\tresult.clipShadows = material.clipShadows;\n\t\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\t\tresult.clipIntersection = material.clipIntersection;\n\t\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\t\tresult.linewidth = material.linewidth;\n\n\t\t\tif (light.isPointLight === true && result.isMeshDistanceMaterial === true) {\n\t\t\t\tresult.referencePosition.setFromMatrixPosition(light.matrixWorld);\n\t\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\t\tresult.farDistance = shadowCameraFar;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\tfunction renderObject(object, camera, shadowCamera, light, type) {\n\t\t\tif (object.visible === false) return;\n\t\t\tvar visible = object.layers.test(camera.layers);\n\n\t\t\tif (visible && (object.isMesh || object.isLine || object.isPoints)) {\n\t\t\t\tif ((object.castShadow || object.receiveShadow && type === VSMShadowMap) && (!object.frustumCulled || _frustum.intersectsObject(object))) {\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);\n\n\t\t\t\t\tvar geometry = _objects.update(object);\n\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\t\tfor (var k = 0, kl = groups.length; k < kl; k++) {\n\t\t\t\t\t\t\tvar group = groups[k];\n\t\t\t\t\t\t\tvar groupMaterial = material[group.materialIndex];\n\n\t\t\t\t\t\t\tif (groupMaterial && groupMaterial.visible) {\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial(object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type);\n\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (material.visible) {\n\t\t\t\t\t\tvar _depthMaterial = getDepthMaterial(object, geometry, material, light, shadowCamera.near, shadowCamera.far, type);\n\n\t\t\t\t\t\t_renderer.renderBufferDirect(shadowCamera, null, geometry, _depthMaterial, object, null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\trenderObject(children[i], camera, shadowCamera, light, type);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction WebGLState(gl, extensions, capabilities) {\n\t\tvar _equationToGL, _factorToGL;\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction ColorBuffer() {\n\t\t\tvar locked = false;\n\t\t\tvar color = new Vector4();\n\t\t\tvar currentColorMask = null;\n\t\t\tvar currentColorClear = new Vector4(0, 0, 0, 0);\n\t\t\treturn {\n\t\t\t\tsetMask: function setMask(colorMask) {\n\t\t\t\t\tif (currentColorMask !== colorMask && !locked) {\n\t\t\t\t\t\tgl.colorMask(colorMask, colorMask, colorMask, colorMask);\n\t\t\t\t\t\tcurrentColorMask = colorMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function setLocked(lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function setClear(r, g, b, a, premultipliedAlpha) {\n\t\t\t\t\tif (premultipliedAlpha === true) {\n\t\t\t\t\t\tr *= a;\n\t\t\t\t\t\tg *= a;\n\t\t\t\t\t\tb *= a;\n\t\t\t\t\t}\n\n\t\t\t\t\tcolor.set(r, g, b, a);\n\n\t\t\t\t\tif (currentColorClear.equals(color) === false) {\n\t\t\t\t\t\tgl.clearColor(r, g, b, a);\n\t\t\t\t\t\tcurrentColorClear.copy(color);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function reset() {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentColorMask = null;\n\t\t\t\t\tcurrentColorClear.set(-1, 0, 0, 0); // set to invalid state\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction DepthBuffer() {\n\t\t\tvar locked = false;\n\t\t\tvar currentDepthMask = null;\n\t\t\tvar currentDepthFunc = null;\n\t\t\tvar currentDepthClear = null;\n\t\t\treturn {\n\t\t\t\tsetTest: function setTest(depthTest) {\n\t\t\t\t\tif (depthTest) {\n\t\t\t\t\t\tenable(2929);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdisable(2929);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetMask: function setMask(depthMask) {\n\t\t\t\t\tif (currentDepthMask !== depthMask && !locked) {\n\t\t\t\t\t\tgl.depthMask(depthMask);\n\t\t\t\t\t\tcurrentDepthMask = depthMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetFunc: function setFunc(depthFunc) {\n\t\t\t\t\tif (currentDepthFunc !== depthFunc) {\n\t\t\t\t\t\tif (depthFunc) {\n\t\t\t\t\t\t\tswitch (depthFunc) {\n\t\t\t\t\t\t\t\tcase NeverDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(512);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase AlwaysDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(519);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(513);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase LessEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(515);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase EqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(514);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(518);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase GreaterDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(516);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase NotEqualDepth:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(517);\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tgl.depthFunc(515);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tgl.depthFunc(515);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function setLocked(lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function setClear(depth) {\n\t\t\t\t\tif (currentDepthClear !== depth) {\n\t\t\t\t\t\tgl.clearDepth(depth);\n\t\t\t\t\t\tcurrentDepthClear = depth;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function reset() {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentDepthMask = null;\n\t\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\t\tcurrentDepthClear = null;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tfunction StencilBuffer() {\n\t\t\tvar locked = false;\n\t\t\tvar currentStencilMask = null;\n\t\t\tvar currentStencilFunc = null;\n\t\t\tvar currentStencilRef = null;\n\t\t\tvar currentStencilFuncMask = null;\n\t\t\tvar currentStencilFail = null;\n\t\t\tvar currentStencilZFail = null;\n\t\t\tvar currentStencilZPass = null;\n\t\t\tvar currentStencilClear = null;\n\t\t\treturn {\n\t\t\t\tsetTest: function setTest(stencilTest) {\n\t\t\t\t\tif (!locked) {\n\t\t\t\t\t\tif (stencilTest) {\n\t\t\t\t\t\t\tenable(2960);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdisable(2960);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetMask: function setMask(stencilMask) {\n\t\t\t\t\tif (currentStencilMask !== stencilMask && !locked) {\n\t\t\t\t\t\tgl.stencilMask(stencilMask);\n\t\t\t\t\t\tcurrentStencilMask = stencilMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetFunc: function setFunc(stencilFunc, stencilRef, stencilMask) {\n\t\t\t\t\tif (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {\n\t\t\t\t\t\tgl.stencilFunc(stencilFunc, stencilRef, stencilMask);\n\t\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetOp: function setOp(stencilFail, stencilZFail, stencilZPass) {\n\t\t\t\t\tif (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {\n\t\t\t\t\t\tgl.stencilOp(stencilFail, stencilZFail, stencilZPass);\n\t\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsetLocked: function setLocked(lock) {\n\t\t\t\t\tlocked = lock;\n\t\t\t\t},\n\t\t\t\tsetClear: function setClear(stencil) {\n\t\t\t\t\tif (currentStencilClear !== stencil) {\n\t\t\t\t\t\tgl.clearStencil(stencil);\n\t\t\t\t\t\tcurrentStencilClear = stencil;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\treset: function reset() {\n\t\t\t\t\tlocked = false;\n\t\t\t\t\tcurrentStencilMask = null;\n\t\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\t\tcurrentStencilRef = null;\n\t\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\t\tcurrentStencilFail = null;\n\t\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\t\tcurrentStencilClear = null;\n\t\t\t\t}\n\t\t\t};\n\t\t} //\n\n\n\t\tvar colorBuffer = new ColorBuffer();\n\t\tvar depthBuffer = new DepthBuffer();\n\t\tvar stencilBuffer = new StencilBuffer();\n\t\tvar enabledCapabilities = {};\n\t\tvar currentProgram = null;\n\t\tvar currentBlendingEnabled = false;\n\t\tvar currentBlending = null;\n\t\tvar currentBlendEquation = null;\n\t\tvar currentBlendSrc = null;\n\t\tvar currentBlendDst = null;\n\t\tvar currentBlendEquationAlpha = null;\n\t\tvar currentBlendSrcAlpha = null;\n\t\tvar currentBlendDstAlpha = null;\n\t\tvar currentPremultipledAlpha = false;\n\t\tvar currentFlipSided = null;\n\t\tvar currentCullFace = null;\n\t\tvar currentLineWidth = null;\n\t\tvar currentPolygonOffsetFactor = null;\n\t\tvar currentPolygonOffsetUnits = null;\n\t\tvar maxTextures = gl.getParameter(35661);\n\t\tvar lineWidthAvailable = false;\n\t\tvar version = 0;\n\t\tvar glVersion = gl.getParameter(7938);\n\n\t\tif (glVersion.indexOf('WebGL') !== -1) {\n\t\t\tversion = parseFloat(/^WebGL (\\d)/.exec(glVersion)[1]);\n\t\t\tlineWidthAvailable = version >= 1.0;\n\t\t} else if (glVersion.indexOf('OpenGL ES') !== -1) {\n\t\t\tversion = parseFloat(/^OpenGL ES (\\d)/.exec(glVersion)[1]);\n\t\t\tlineWidthAvailable = version >= 2.0;\n\t\t}\n\n\t\tvar currentTextureSlot = null;\n\t\tvar currentBoundTextures = {};\n\t\tvar currentScissor = new Vector4();\n\t\tvar currentViewport = new Vector4();\n\n\t\tfunction createTexture(type, target, count) {\n\t\t\tvar data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.\n\n\t\t\tvar texture = gl.createTexture();\n\t\t\tgl.bindTexture(type, texture);\n\t\t\tgl.texParameteri(type, 10241, 9728);\n\t\t\tgl.texParameteri(type, 10240, 9728);\n\n\t\t\tfor (var i = 0; i < count; i++) {\n\t\t\t\tgl.texImage2D(target + i, 0, 6408, 1, 1, 0, 6408, 5121, data);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\n\t\tvar emptyTextures = {};\n\t\temptyTextures[3553] = createTexture(3553, 3553, 1);\n\t\temptyTextures[34067] = createTexture(34067, 34069, 6); // init\n\n\t\tcolorBuffer.setClear(0, 0, 0, 1);\n\t\tdepthBuffer.setClear(1);\n\t\tstencilBuffer.setClear(0);\n\t\tenable(2929);\n\t\tdepthBuffer.setFunc(LessEqualDepth);\n\t\tsetFlipSided(false);\n\t\tsetCullFace(CullFaceBack);\n\t\tenable(2884);\n\t\tsetBlending(NoBlending); //\n\n\t\tfunction enable(id) {\n\t\t\tif (enabledCapabilities[id] !== true) {\n\t\t\t\tgl.enable(id);\n\t\t\t\tenabledCapabilities[id] = true;\n\t\t\t}\n\t\t}\n\n\t\tfunction disable(id) {\n\t\t\tif (enabledCapabilities[id] !== false) {\n\t\t\t\tgl.disable(id);\n\t\t\t\tenabledCapabilities[id] = false;\n\t\t\t}\n\t\t}\n\n\t\tfunction useProgram(program) {\n\t\t\tif (currentProgram !== program) {\n\t\t\t\tgl.useProgram(program);\n\t\t\t\tcurrentProgram = program;\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tvar equationToGL = (_equationToGL = {}, _equationToGL[AddEquation] = 32774, _equationToGL[SubtractEquation] = 32778, _equationToGL[ReverseSubtractEquation] = 32779, _equationToGL);\n\n\t\tif (isWebGL2) {\n\t\t\tequationToGL[MinEquation] = 32775;\n\t\t\tequationToGL[MaxEquation] = 32776;\n\t\t} else {\n\t\t\tvar extension = extensions.get('EXT_blend_minmax');\n\n\t\t\tif (extension !== null) {\n\t\t\t\tequationToGL[MinEquation] = extension.MIN_EXT;\n\t\t\t\tequationToGL[MaxEquation] = extension.MAX_EXT;\n\t\t\t}\n\t\t}\n\n\t\tvar factorToGL = (_factorToGL = {}, _factorToGL[ZeroFactor] = 0, _factorToGL[OneFactor] = 1, _factorToGL[SrcColorFactor] = 768, _factorToGL[SrcAlphaFactor] = 770, _factorToGL[SrcAlphaSaturateFactor] = 776, _factorToGL[DstColorFactor] = 774, _factorToGL[DstAlphaFactor] = 772, _factorToGL[OneMinusSrcColorFactor] = 769, _factorToGL[OneMinusSrcAlphaFactor] = 771, _factorToGL[OneMinusDstColorFactor] = 775, _factorToGL[OneMinusDstAlphaFactor] = 773, _factorToGL);\n\n\t\tfunction setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {\n\t\t\tif (blending === NoBlending) {\n\t\t\t\tif (currentBlendingEnabled === true) {\n\t\t\t\t\tdisable(3042);\n\t\t\t\t\tcurrentBlendingEnabled = false;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (currentBlendingEnabled === false) {\n\t\t\t\tenable(3042);\n\t\t\t\tcurrentBlendingEnabled = true;\n\t\t\t}\n\n\t\t\tif (blending !== CustomBlending) {\n\t\t\t\tif (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {\n\t\t\t\t\tif (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {\n\t\t\t\t\t\tgl.blendEquation(32774);\n\t\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (premultipliedAlpha) {\n\t\t\t\t\t\tswitch (blending) {\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(1, 771, 1, 771);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(1, 1);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(0, 0, 769, 771);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(0, 768, 0, 770);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error('THREE.WebGLState: Invalid blending: ', blending);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tswitch (blending) {\n\t\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\t\tgl.blendFuncSeparate(770, 771, 1, 771);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(770, 1);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(0, 769);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\t\tgl.blendFunc(0, 768);\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tconsole.error('THREE.WebGLState: Invalid blending: ', blending);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\t\tcurrentBlendDst = null;\n\t\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\t\tcurrentBlendDstAlpha = null;\n\t\t\t\t\tcurrentBlending = blending;\n\t\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t} // custom blending\n\n\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\t\tif (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {\n\t\t\t\tgl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);\n\t\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\t\t\t}\n\n\t\t\tif (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {\n\t\t\t\tgl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);\n\t\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\t\tcurrentBlendDst = blendDst;\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\t\t\t}\n\n\t\t\tcurrentBlending = blending;\n\t\t\tcurrentPremultipledAlpha = null;\n\t\t}\n\n\t\tfunction setMaterial(material, frontFaceCW) {\n\t\t\tmaterial.side === DoubleSide ? disable(2884) : enable(2884);\n\t\t\tvar flipSided = material.side === BackSide;\n\t\t\tif (frontFaceCW) flipSided = !flipSided;\n\t\t\tsetFlipSided(flipSided);\n\t\t\tmaterial.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);\n\t\t\tdepthBuffer.setFunc(material.depthFunc);\n\t\t\tdepthBuffer.setTest(material.depthTest);\n\t\t\tdepthBuffer.setMask(material.depthWrite);\n\t\t\tcolorBuffer.setMask(material.colorWrite);\n\t\t\tvar stencilWrite = material.stencilWrite;\n\t\t\tstencilBuffer.setTest(stencilWrite);\n\n\t\t\tif (stencilWrite) {\n\t\t\t\tstencilBuffer.setMask(material.stencilWriteMask);\n\t\t\t\tstencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);\n\t\t\t\tstencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);\n\t\t\t}\n\n\t\t\tsetPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);\n\t\t} //\n\n\n\t\tfunction setFlipSided(flipSided) {\n\t\t\tif (currentFlipSided !== flipSided) {\n\t\t\t\tif (flipSided) {\n\t\t\t\t\tgl.frontFace(2304);\n\t\t\t\t} else {\n\t\t\t\t\tgl.frontFace(2305);\n\t\t\t\t}\n\n\t\t\t\tcurrentFlipSided = flipSided;\n\t\t\t}\n\t\t}\n\n\t\tfunction setCullFace(cullFace) {\n\t\t\tif (cullFace !== CullFaceNone) {\n\t\t\t\tenable(2884);\n\n\t\t\t\tif (cullFace !== currentCullFace) {\n\t\t\t\t\tif (cullFace === CullFaceBack) {\n\t\t\t\t\t\tgl.cullFace(1029);\n\t\t\t\t\t} else if (cullFace === CullFaceFront) {\n\t\t\t\t\t\tgl.cullFace(1028);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgl.cullFace(1032);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdisable(2884);\n\t\t\t}\n\n\t\t\tcurrentCullFace = cullFace;\n\t\t}\n\n\t\tfunction setLineWidth(width) {\n\t\t\tif (width !== currentLineWidth) {\n\t\t\t\tif (lineWidthAvailable) gl.lineWidth(width);\n\t\t\t\tcurrentLineWidth = width;\n\t\t\t}\n\t\t}\n\n\t\tfunction setPolygonOffset(polygonOffset, factor, units) {\n\t\t\tif (polygonOffset) {\n\t\t\t\tenable(32823);\n\n\t\t\t\tif (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {\n\t\t\t\t\tgl.polygonOffset(factor, units);\n\t\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\t\tcurrentPolygonOffsetUnits = units;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdisable(32823);\n\t\t\t}\n\t\t}\n\n\t\tfunction setScissorTest(scissorTest) {\n\t\t\tif (scissorTest) {\n\t\t\t\tenable(3089);\n\t\t\t} else {\n\t\t\t\tdisable(3089);\n\t\t\t}\n\t\t} // texture\n\n\n\t\tfunction activeTexture(webglSlot) {\n\t\t\tif (webglSlot === undefined) webglSlot = 33984 + maxTextures - 1;\n\n\t\t\tif (currentTextureSlot !== webglSlot) {\n\t\t\t\tgl.activeTexture(webglSlot);\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\t\t\t}\n\t\t}\n\n\t\tfunction bindTexture(webglType, webglTexture) {\n\t\t\tif (currentTextureSlot === null) {\n\t\t\t\tactiveTexture();\n\t\t\t}\n\n\t\t\tvar boundTexture = currentBoundTextures[currentTextureSlot];\n\n\t\t\tif (boundTexture === undefined) {\n\t\t\t\tboundTexture = {\n\t\t\t\t\ttype: undefined,\n\t\t\t\t\ttexture: undefined\n\t\t\t\t};\n\t\t\t\tcurrentBoundTextures[currentTextureSlot] = boundTexture;\n\t\t\t}\n\n\t\t\tif (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {\n\t\t\t\tgl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);\n\t\t\t\tboundTexture.type = webglType;\n\t\t\t\tboundTexture.texture = webglTexture;\n\t\t\t}\n\t\t}\n\n\t\tfunction unbindTexture() {\n\t\t\tvar boundTexture = currentBoundTextures[currentTextureSlot];\n\n\t\t\tif (boundTexture !== undefined && boundTexture.type !== undefined) {\n\t\t\t\tgl.bindTexture(boundTexture.type, null);\n\t\t\t\tboundTexture.type = undefined;\n\t\t\t\tboundTexture.texture = undefined;\n\t\t\t}\n\t\t}\n\n\t\tfunction compressedTexImage2D() {\n\t\t\ttry {\n\t\t\t\tgl.compressedTexImage2D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t}\n\n\t\tfunction texImage2D() {\n\t\t\ttry {\n\t\t\t\tgl.texImage2D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t}\n\n\t\tfunction texImage3D() {\n\t\t\ttry {\n\t\t\t\tgl.texImage3D.apply(gl, arguments);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('THREE.WebGLState:', error);\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction scissor(scissor) {\n\t\t\tif (currentScissor.equals(scissor) === false) {\n\t\t\t\tgl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);\n\t\t\t\tcurrentScissor.copy(scissor);\n\t\t\t}\n\t\t}\n\n\t\tfunction viewport(viewport) {\n\t\t\tif (currentViewport.equals(viewport) === false) {\n\t\t\t\tgl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);\n\t\t\t\tcurrentViewport.copy(viewport);\n\t\t\t}\n\t\t} //\n\n\n\t\tfunction reset() {\n\t\t\t// reset state\n\t\t\tgl.disable(3042);\n\t\t\tgl.disable(2884);\n\t\t\tgl.disable(2929);\n\t\t\tgl.disable(32823);\n\t\t\tgl.disable(3089);\n\t\t\tgl.disable(2960);\n\t\t\tgl.blendEquation(32774);\n\t\t\tgl.blendFunc(1, 0);\n\t\t\tgl.blendFuncSeparate(1, 0, 1, 0);\n\t\t\tgl.colorMask(true, true, true, true);\n\t\t\tgl.clearColor(0, 0, 0, 0);\n\t\t\tgl.depthMask(true);\n\t\t\tgl.depthFunc(513);\n\t\t\tgl.clearDepth(1);\n\t\t\tgl.stencilMask(0xffffffff);\n\t\t\tgl.stencilFunc(519, 0, 0xffffffff);\n\t\t\tgl.stencilOp(7680, 7680, 7680);\n\t\t\tgl.clearStencil(0);\n\t\t\tgl.cullFace(1029);\n\t\t\tgl.frontFace(2305);\n\t\t\tgl.polygonOffset(0, 0);\n\t\t\tgl.activeTexture(33984);\n\t\t\tgl.useProgram(null);\n\t\t\tgl.lineWidth(1);\n\t\t\tgl.scissor(0, 0, gl.canvas.width, gl.canvas.height);\n\t\t\tgl.viewport(0, 0, gl.canvas.width, gl.canvas.height); // reset internals\n\n\t\t\tenabledCapabilities = {};\n\t\t\tcurrentTextureSlot = null;\n\t\t\tcurrentBoundTextures = {};\n\t\t\tcurrentProgram = null;\n\t\t\tcurrentBlendingEnabled = false;\n\t\t\tcurrentBlending = null;\n\t\t\tcurrentBlendEquation = null;\n\t\t\tcurrentBlendSrc = null;\n\t\t\tcurrentBlendDst = null;\n\t\t\tcurrentBlendEquationAlpha = null;\n\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\tcurrentBlendDstAlpha = null;\n\t\t\tcurrentPremultipledAlpha = false;\n\t\t\tcurrentFlipSided = null;\n\t\t\tcurrentCullFace = null;\n\t\t\tcurrentLineWidth = null;\n\t\t\tcurrentPolygonOffsetFactor = null;\n\t\t\tcurrentPolygonOffsetUnits = null;\n\t\t\tcolorBuffer.reset();\n\t\t\tdepthBuffer.reset();\n\t\t\tstencilBuffer.reset();\n\t\t}\n\n\t\treturn {\n\t\t\tbuffers: {\n\t\t\t\tcolor: colorBuffer,\n\t\t\t\tdepth: depthBuffer,\n\t\t\t\tstencil: stencilBuffer\n\t\t\t},\n\t\t\tenable: enable,\n\t\t\tdisable: disable,\n\t\t\tuseProgram: useProgram,\n\t\t\tsetBlending: setBlending,\n\t\t\tsetMaterial: setMaterial,\n\t\t\tsetFlipSided: setFlipSided,\n\t\t\tsetCullFace: setCullFace,\n\t\t\tsetLineWidth: setLineWidth,\n\t\t\tsetPolygonOffset: setPolygonOffset,\n\t\t\tsetScissorTest: setScissorTest,\n\t\t\tactiveTexture: activeTexture,\n\t\t\tbindTexture: bindTexture,\n\t\t\tunbindTexture: unbindTexture,\n\t\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\t\ttexImage2D: texImage2D,\n\t\t\ttexImage3D: texImage3D,\n\t\t\tscissor: scissor,\n\t\t\tviewport: viewport,\n\t\t\treset: reset\n\t\t};\n\t}\n\n\tfunction WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {\n\t\tvar _wrappingToGL, _filterToGL;\n\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\t\tvar maxTextures = capabilities.maxTextures;\n\t\tvar maxCubemapSize = capabilities.maxCubemapSize;\n\t\tvar maxTextureSize = capabilities.maxTextureSize;\n\t\tvar maxSamples = capabilities.maxSamples;\n\n\t\tvar _videoTextures = new WeakMap();\n\n\t\tvar _canvas; // cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\n\t\tvar useOffscreenCanvas = false;\n\n\t\ttry {\n\t\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined' && new OffscreenCanvas(1, 1).getContext('2d') !== null;\n\t\t} catch (err) {// Ignore any errors\n\t\t}\n\n\t\tfunction createCanvas(width, height) {\n\t\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\t\t\treturn useOffscreenCanvas ? new OffscreenCanvas(width, height) : document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\t}\n\n\t\tfunction resizeImage(image, needsPowerOfTwo, needsNewCanvas, maxSize) {\n\t\t\tvar scale = 1; // handle case if texture exceeds max size\n\n\t\t\tif (image.width > maxSize || image.height > maxSize) {\n\t\t\t\tscale = maxSize / Math.max(image.width, image.height);\n\t\t\t} // only perform resize if necessary\n\n\n\t\t\tif (scale < 1 || needsPowerOfTwo === true) {\n\t\t\t\t// only perform resize for certain image types\n\t\t\t\tif (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n\t\t\t\t\tvar floor = needsPowerOfTwo ? MathUtils.floorPowerOfTwo : Math.floor;\n\t\t\t\t\tvar width = floor(scale * image.width);\n\t\t\t\t\tvar height = floor(scale * image.height);\n\t\t\t\t\tif (_canvas === undefined) _canvas = createCanvas(width, height); // cube textures can't reuse the same canvas\n\n\t\t\t\t\tvar canvas = needsNewCanvas ? createCanvas(width, height) : _canvas;\n\t\t\t\t\tcanvas.width = width;\n\t\t\t\t\tcanvas.height = height;\n\t\t\t\t\tvar context = canvas.getContext('2d');\n\t\t\t\t\tcontext.drawImage(image, 0, 0, width, height);\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').');\n\t\t\t\t\treturn canvas;\n\t\t\t\t} else {\n\t\t\t\t\tif ('data' in image) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn image;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn image;\n\t\t}\n\n\t\tfunction isPowerOfTwo(image) {\n\t\t\treturn MathUtils.isPowerOfTwo(image.width) && MathUtils.isPowerOfTwo(image.height);\n\t\t}\n\n\t\tfunction textureNeedsPowerOfTwo(texture) {\n\t\t\tif (isWebGL2) return false;\n\t\t\treturn texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping || texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\t\t}\n\n\t\tfunction textureNeedsGenerateMipmaps(texture, supportsMips) {\n\t\t\treturn texture.generateMipmaps && supportsMips && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\t\t}\n\n\t\tfunction generateMipmap(target, texture, width, height) {\n\t\t\t_gl.generateMipmap(target);\n\n\t\t\tvar textureProperties = properties.get(texture);\n\t\t\ttextureProperties.__maxMipLevel = Math.log2(Math.max(width, height));\n\t\t}\n\n\t\tfunction getInternalFormat(internalFormatName, glFormat, glType) {\n\t\t\tif (isWebGL2 === false) return glFormat;\n\n\t\t\tif (internalFormatName !== null) {\n\t\t\t\tif (_gl[internalFormatName] !== undefined) return _gl[internalFormatName];\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'');\n\t\t\t}\n\n\t\t\tvar internalFormat = glFormat;\n\n\t\t\tif (glFormat === 6403) {\n\t\t\t\tif (glType === 5126) internalFormat = 33326;\n\t\t\t\tif (glType === 5131) internalFormat = 33325;\n\t\t\t\tif (glType === 5121) internalFormat = 33321;\n\t\t\t}\n\n\t\t\tif (glFormat === 6407) {\n\t\t\t\tif (glType === 5126) internalFormat = 34837;\n\t\t\t\tif (glType === 5131) internalFormat = 34843;\n\t\t\t\tif (glType === 5121) internalFormat = 32849;\n\t\t\t}\n\n\t\t\tif (glFormat === 6408) {\n\t\t\t\tif (glType === 5126) internalFormat = 34836;\n\t\t\t\tif (glType === 5131) internalFormat = 34842;\n\t\t\t\tif (glType === 5121) internalFormat = 32856;\n\t\t\t}\n\n\t\t\tif (internalFormat === 33325 || internalFormat === 33326 || internalFormat === 34842 || internalFormat === 34836) {\n\t\t\t\textensions.get('EXT_color_buffer_float');\n\t\t\t}\n\n\t\t\treturn internalFormat;\n\t\t} // Fallback filters for non-power-of-2 textures\n\n\n\t\tfunction filterFallback(f) {\n\t\t\tif (f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter) {\n\t\t\t\treturn 9728;\n\t\t\t}\n\n\t\t\treturn 9729;\n\t\t} //\n\n\n\t\tfunction onTextureDispose(event) {\n\t\t\tvar texture = event.target;\n\t\t\ttexture.removeEventListener('dispose', onTextureDispose);\n\t\t\tdeallocateTexture(texture);\n\n\t\t\tif (texture.isVideoTexture) {\n\t\t\t\t_videoTextures.delete(texture);\n\t\t\t}\n\n\t\t\tinfo.memory.textures--;\n\t\t}\n\n\t\tfunction onRenderTargetDispose(event) {\n\t\t\tvar renderTarget = event.target;\n\t\t\trenderTarget.removeEventListener('dispose', onRenderTargetDispose);\n\t\t\tdeallocateRenderTarget(renderTarget);\n\t\t\tinfo.memory.textures--;\n\t\t} //\n\n\n\t\tfunction deallocateTexture(texture) {\n\t\t\tvar textureProperties = properties.get(texture);\n\t\t\tif (textureProperties.__webglInit === undefined) return;\n\n\t\t\t_gl.deleteTexture(textureProperties.__webglTexture);\n\n\t\t\tproperties.remove(texture);\n\t\t}\n\n\t\tfunction deallocateRenderTarget(renderTarget) {\n\t\t\tvar texture = renderTarget.texture;\n\t\t\tvar renderTargetProperties = properties.get(renderTarget);\n\t\t\tvar textureProperties = properties.get(texture);\n\t\t\tif (!renderTarget) return;\n\n\t\t\tif (textureProperties.__webglTexture !== undefined) {\n\t\t\t\t_gl.deleteTexture(textureProperties.__webglTexture);\n\t\t\t}\n\n\t\t\tif (renderTarget.depthTexture) {\n\t\t\t\trenderTarget.depthTexture.dispose();\n\t\t\t}\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget) {\n\t\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\t\t_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);\n\n\t\t\t\t\tif (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t_gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);\n\n\t\t\t\tif (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);\n\t\t\t\tif (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);\n\t\t\t\tif (renderTargetProperties.__webglColorRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer);\n\t\t\t\tif (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);\n\t\t\t}\n\n\t\t\tproperties.remove(texture);\n\t\t\tproperties.remove(renderTarget);\n\t\t} //\n\n\n\t\tvar textureUnits = 0;\n\n\t\tfunction resetTextureUnits() {\n\t\t\ttextureUnits = 0;\n\t\t}\n\n\t\tfunction allocateTextureUnit() {\n\t\t\tvar textureUnit = textureUnits;\n\n\t\t\tif (textureUnit >= maxTextures) {\n\t\t\t\tconsole.warn('THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures);\n\t\t\t}\n\n\t\t\ttextureUnits += 1;\n\t\t\treturn textureUnit;\n\t\t} //\n\n\n\t\tfunction setTexture2D(texture, slot) {\n\t\t\tvar textureProperties = properties.get(texture);\n\t\t\tif (texture.isVideoTexture) updateVideoTexture(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tvar image = texture.image;\n\n\t\t\t\tif (image === undefined) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined');\n\t\t\t\t} else if (image.complete === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete');\n\t\t\t\t} else {\n\t\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(3553, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTexture2DArray(texture, slot) {\n\t\t\tvar textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(35866, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTexture3D(texture, slot) {\n\t\t\tvar textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(32879, textureProperties.__webglTexture);\n\t\t}\n\n\t\tfunction setTextureCube(texture, slot) {\n\t\t\tvar textureProperties = properties.get(texture);\n\n\t\t\tif (texture.version > 0 && textureProperties.__version !== texture.version) {\n\t\t\t\tuploadCubeTexture(textureProperties, texture, slot);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(34067, textureProperties.__webglTexture);\n\t\t}\n\n\t\tvar wrappingToGL = (_wrappingToGL = {}, _wrappingToGL[RepeatWrapping] = 10497, _wrappingToGL[ClampToEdgeWrapping] = 33071, _wrappingToGL[MirroredRepeatWrapping] = 33648, _wrappingToGL);\n\t\tvar filterToGL = (_filterToGL = {}, _filterToGL[NearestFilter] = 9728, _filterToGL[NearestMipmapNearestFilter] = 9984, _filterToGL[NearestMipmapLinearFilter] = 9986, _filterToGL[LinearFilter] = 9729, _filterToGL[LinearMipmapNearestFilter] = 9985, _filterToGL[LinearMipmapLinearFilter] = 9987, _filterToGL);\n\n\t\tfunction setTextureParameters(textureType, texture, supportsMips) {\n\t\t\tif (supportsMips) {\n\t\t\t\t_gl.texParameteri(textureType, 10242, wrappingToGL[texture.wrapS]);\n\n\t\t\t\t_gl.texParameteri(textureType, 10243, wrappingToGL[texture.wrapT]);\n\n\t\t\t\tif (textureType === 32879 || textureType === 35866) {\n\t\t\t\t\t_gl.texParameteri(textureType, 32882, wrappingToGL[texture.wrapR]);\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri(textureType, 10240, filterToGL[texture.magFilter]);\n\n\t\t\t\t_gl.texParameteri(textureType, 10241, filterToGL[texture.minFilter]);\n\t\t\t} else {\n\t\t\t\t_gl.texParameteri(textureType, 10242, 33071);\n\n\t\t\t\t_gl.texParameteri(textureType, 10243, 33071);\n\n\t\t\t\tif (textureType === 32879 || textureType === 35866) {\n\t\t\t\t\t_gl.texParameteri(textureType, 32882, 33071);\n\t\t\t\t}\n\n\t\t\t\tif (texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.');\n\t\t\t\t}\n\n\t\t\t\t_gl.texParameteri(textureType, 10240, filterFallback(texture.magFilter));\n\n\t\t\t\t_gl.texParameteri(textureType, 10241, filterFallback(texture.minFilter));\n\n\t\t\t\tif (texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter) {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (extensions.has('EXT_texture_filter_anisotropic') === true) {\n\t\t\t\tvar extension = extensions.get('EXT_texture_filter_anisotropic');\n\t\t\t\tif (texture.type === FloatType && extensions.has('OES_texture_float_linear') === false) return; // verify extension for WebGL 1 and WebGL 2\n\n\t\t\t\tif (isWebGL2 === false && texture.type === HalfFloatType && extensions.has('OES_texture_half_float_linear') === false) return; // verify extension for WebGL 1 only\n\n\t\t\t\tif (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {\n\t\t\t\t\t_gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));\n\n\t\t\t\t\tproperties.get(texture).__currentAnisotropy = texture.anisotropy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction initTexture(textureProperties, texture) {\n\t\t\tif (textureProperties.__webglInit === undefined) {\n\t\t\t\ttextureProperties.__webglInit = true;\n\t\t\t\ttexture.addEventListener('dispose', onTextureDispose);\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\t\t\tinfo.memory.textures++;\n\t\t\t}\n\t\t}\n\n\t\tfunction uploadTexture(textureProperties, texture, slot) {\n\t\t\tvar textureType = 3553;\n\t\t\tif (texture.isDataTexture2DArray) textureType = 35866;\n\t\t\tif (texture.isDataTexture3D) textureType = 32879;\n\t\t\tinitTexture(textureProperties, texture);\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(textureType, textureProperties.__webglTexture);\n\n\t\t\t_gl.pixelStorei(37440, texture.flipY);\n\n\t\t\t_gl.pixelStorei(37441, texture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(3317, texture.unpackAlignment);\n\n\t\t\t_gl.pixelStorei(37443, 0);\n\n\t\t\tvar needsPowerOfTwo = textureNeedsPowerOfTwo(texture) && isPowerOfTwo(texture.image) === false;\n\t\t\tvar image = resizeImage(texture.image, needsPowerOfTwo, false, maxTextureSize);\n\t\t\tvar supportsMips = isPowerOfTwo(image) || isWebGL2,\n\t\t\t\t\tglFormat = utils.convert(texture.format);\n\t\t\tvar glType = utils.convert(texture.type),\n\t\t\t\t\tglInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\tsetTextureParameters(textureType, texture, supportsMips);\n\t\t\tvar mipmap;\n\t\t\tvar mipmaps = texture.mipmaps;\n\n\t\t\tif (texture.isDepthTexture) {\n\t\t\t\t// populate depth texture with dummy data\n\t\t\t\tglInternalFormat = 6402;\n\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tif (texture.type === FloatType) {\n\t\t\t\t\t\tglInternalFormat = 36012;\n\t\t\t\t\t} else if (texture.type === UnsignedIntType) {\n\t\t\t\t\t\tglInternalFormat = 33190;\n\t\t\t\t\t} else if (texture.type === UnsignedInt248Type) {\n\t\t\t\t\t\tglInternalFormat = 35056;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tglInternalFormat = 33189; // WebGL2 requires sized internalformat for glTexImage2D\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (texture.type === FloatType) {\n\t\t\t\t\t\tconsole.error('WebGLRenderer: Floating point depth texture requires WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t} // validation checks for WebGL 1\n\n\n\t\t\t\tif (texture.format === DepthFormat && glInternalFormat === 6402) {\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif (texture.type !== UnsignedShortType && texture.type !== UnsignedIntType) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.');\n\t\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\t\tglType = utils.convert(texture.type);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (texture.format === DepthStencilFormat && glInternalFormat === 6402) {\n\t\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tglInternalFormat = 34041; // The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\n\t\t\t\t\tif (texture.type !== UnsignedInt248Type) {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.');\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert(texture.type);\n\t\t\t\t\t}\n\t\t\t\t} //\n\n\n\t\t\t\tstate.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);\n\t\t\t} else if (texture.isDataTexture) {\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\t\t\tif (mipmaps.length > 0 && supportsMips) {\n\t\t\t\t\tfor (var i = 0, il = mipmaps.length; i < il; i++) {\n\t\t\t\t\t\tmipmap = mipmaps[i];\n\t\t\t\t\t\tstate.texImage2D(3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t\t} else {\n\t\t\t\t\tstate.texImage2D(3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t\t}\n\t\t\t} else if (texture.isCompressedTexture) {\n\t\t\t\tfor (var _i = 0, _il = mipmaps.length; _i < _il; _i++) {\n\t\t\t\t\tmipmap = mipmaps[_i];\n\n\t\t\t\t\tif (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n\t\t\t\t\t\tif (glFormat !== null) {\n\t\t\t\t\t\t\tstate.compressedTexImage2D(3553, _i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()');\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.texImage2D(3553, _i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t} else if (texture.isDataTexture2DArray) {\n\t\t\t\tstate.texImage3D(35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t} else if (texture.isDataTexture3D) {\n\t\t\t\tstate.texImage3D(32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);\n\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t} else {\n\t\t\t\t// regular Texture (image, video, canvas)\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\t\t\t\tif (mipmaps.length > 0 && supportsMips) {\n\t\t\t\t\tfor (var _i2 = 0, _il2 = mipmaps.length; _i2 < _il2; _i2++) {\n\t\t\t\t\t\tmipmap = mipmaps[_i2];\n\t\t\t\t\t\tstate.texImage2D(3553, _i2, glInternalFormat, glFormat, glType, mipmap);\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t\t} else {\n\t\t\t\t\tstate.texImage2D(3553, 0, glInternalFormat, glFormat, glType, image);\n\t\t\t\t\ttextureProperties.__maxMipLevel = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\tgenerateMipmap(textureType, texture, image.width, image.height);\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tif (texture.onUpdate) texture.onUpdate(texture);\n\t\t}\n\n\t\tfunction uploadCubeTexture(textureProperties, texture, slot) {\n\t\t\tif (texture.image.length !== 6) return;\n\t\t\tinitTexture(textureProperties, texture);\n\t\t\tstate.activeTexture(33984 + slot);\n\t\t\tstate.bindTexture(34067, textureProperties.__webglTexture);\n\n\t\t\t_gl.pixelStorei(37440, texture.flipY);\n\n\t\t\t_gl.pixelStorei(37441, texture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(3317, texture.unpackAlignment);\n\n\t\t\t_gl.pixelStorei(37443, 0);\n\n\t\t\tvar isCompressed = texture && (texture.isCompressedTexture || texture.image[0].isCompressedTexture);\n\t\t\tvar isDataTexture = texture.image[0] && texture.image[0].isDataTexture;\n\t\t\tvar cubeImage = [];\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tif (!isCompressed && !isDataTexture) {\n\t\t\t\t\tcubeImage[i] = resizeImage(texture.image[i], false, true, maxCubemapSize);\n\t\t\t\t} else {\n\t\t\t\t\tcubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar image = cubeImage[0],\n\t\t\t\t\tsupportsMips = isPowerOfTwo(image) || isWebGL2,\n\t\t\t\t\tglFormat = utils.convert(texture.format),\n\t\t\t\t\tglType = utils.convert(texture.type),\n\t\t\t\t\tglInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\tsetTextureParameters(34067, texture, supportsMips);\n\t\t\tvar mipmaps;\n\n\t\t\tif (isCompressed) {\n\t\t\t\tfor (var _i3 = 0; _i3 < 6; _i3++) {\n\t\t\t\t\tmipmaps = cubeImage[_i3].mipmaps;\n\n\t\t\t\t\tfor (var j = 0; j < mipmaps.length; j++) {\n\t\t\t\t\t\tvar mipmap = mipmaps[j];\n\n\t\t\t\t\t\tif (texture.format !== RGBAFormat && texture.format !== RGBFormat) {\n\t\t\t\t\t\t\tif (glFormat !== null) {\n\t\t\t\t\t\t\t\tstate.compressedTexImage2D(34069 + _i3, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstate.texImage2D(34069 + _i3, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length - 1;\n\t\t\t} else {\n\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\tfor (var _i4 = 0; _i4 < 6; _i4++) {\n\t\t\t\t\tif (isDataTexture) {\n\t\t\t\t\t\tstate.texImage2D(34069 + _i4, 0, glInternalFormat, cubeImage[_i4].width, cubeImage[_i4].height, 0, glFormat, glType, cubeImage[_i4].data);\n\n\t\t\t\t\t\tfor (var _j = 0; _j < mipmaps.length; _j++) {\n\t\t\t\t\t\t\tvar _mipmap = mipmaps[_j];\n\t\t\t\t\t\t\tvar mipmapImage = _mipmap.image[_i4].image;\n\t\t\t\t\t\t\tstate.texImage2D(34069 + _i4, _j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstate.texImage2D(34069 + _i4, 0, glInternalFormat, glFormat, glType, cubeImage[_i4]);\n\n\t\t\t\t\t\tfor (var _j2 = 0; _j2 < mipmaps.length; _j2++) {\n\t\t\t\t\t\t\tvar _mipmap2 = mipmaps[_j2];\n\t\t\t\t\t\t\tstate.texImage2D(34069 + _i4, _j2 + 1, glInternalFormat, glFormat, glType, _mipmap2.image[_i4]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttextureProperties.__maxMipLevel = mipmaps.length;\n\t\t\t}\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\tgenerateMipmap(34067, texture, image.width, image.height);\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tif (texture.onUpdate) texture.onUpdate(texture);\n\t\t} // Render targets\n\t\t// Setup storage for target texture and bind it to correct framebuffer\n\n\n\t\tfunction setupFrameBufferTexture(framebuffer, renderTarget, attachment, textureTarget) {\n\t\t\tvar texture = renderTarget.texture;\n\t\t\tvar glFormat = utils.convert(texture.format);\n\t\t\tvar glType = utils.convert(texture.type);\n\t\t\tvar glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\n\t\t\tif (textureTarget === 32879 || textureTarget === 35866) {\n\t\t\t\tstate.texImage3D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null);\n\t\t\t} else {\n\t\t\t\tstate.texImage2D(textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);\n\t\t\t}\n\n\t\t\t_gl.bindFramebuffer(36160, framebuffer);\n\n\t\t\t_gl.framebufferTexture2D(36160, attachment, textureTarget, properties.get(texture).__webglTexture, 0);\n\n\t\t\t_gl.bindFramebuffer(36160, null);\n\t\t} // Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\n\n\t\tfunction setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {\n\t\t\t_gl.bindRenderbuffer(36161, renderbuffer);\n\n\t\t\tif (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {\n\t\t\t\tvar glInternalFormat = 33189;\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tvar depthTexture = renderTarget.depthTexture;\n\n\t\t\t\t\tif (depthTexture && depthTexture.isDepthTexture) {\n\t\t\t\t\t\tif (depthTexture.type === FloatType) {\n\t\t\t\t\t\t\tglInternalFormat = 36012;\n\t\t\t\t\t\t} else if (depthTexture.type === UnsignedIntType) {\n\t\t\t\t\t\t\tglInternalFormat = 33190;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tvar samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(36161, glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer(36160, 36096, 36161, renderbuffer);\n\t\t\t} else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tvar _samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(36161, _samples, 35056, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(36161, 34041, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\t_gl.framebufferRenderbuffer(36160, 33306, 36161, renderbuffer);\n\t\t\t} else {\n\t\t\t\tvar texture = renderTarget.texture;\n\t\t\t\tvar glFormat = utils.convert(texture.format);\n\t\t\t\tvar glType = utils.convert(texture.type);\n\n\t\t\t\tvar _glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tvar _samples2 = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample(36161, _samples2, _glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.renderbufferStorage(36161, _glInternalFormat, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_gl.bindRenderbuffer(36161, null);\n\t\t} // Setup resources for a Depth Texture for a FBO (needs an extension)\n\n\n\t\tfunction setupDepthTexture(framebuffer, renderTarget) {\n\t\t\tvar isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;\n\t\t\tif (isCube) throw new Error('Depth Texture with cube render targets is not supported');\n\n\t\t\t_gl.bindFramebuffer(36160, framebuffer);\n\n\t\t\tif (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {\n\t\t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n\t\t\t} // upload an empty depth texture with framebuffer size\n\n\n\t\t\tif (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {\n\t\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\t\t\t}\n\n\t\t\tsetTexture2D(renderTarget.depthTexture, 0);\n\n\t\t\tvar webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;\n\n\t\t\tif (renderTarget.depthTexture.format === DepthFormat) {\n\t\t\t\t_gl.framebufferTexture2D(36160, 36096, 3553, webglDepthTexture, 0);\n\t\t\t} else if (renderTarget.depthTexture.format === DepthStencilFormat) {\n\t\t\t\t_gl.framebufferTexture2D(36160, 33306, 3553, webglDepthTexture, 0);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Unknown depthTexture format');\n\t\t\t}\n\t\t} // Setup GL resources for a non-texture depth buffer\n\n\n\t\tfunction setupDepthRenderbuffer(renderTarget) {\n\t\t\tvar renderTargetProperties = properties.get(renderTarget);\n\t\t\tvar isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\n\t\t\tif (renderTarget.depthTexture) {\n\t\t\t\tif (isCube) throw new Error('target.depthTexture not supported in Cube render targets');\n\t\t\t\tsetupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);\n\t\t\t} else {\n\t\t\t\tif (isCube) {\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\t\t\t_gl.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer[i]);\n\n\t\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget, false);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_gl.bindFramebuffer(36160, renderTargetProperties.__webglFramebuffer);\n\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_gl.bindFramebuffer(36160, null);\n\t\t} // Set up GL resources for the render target\n\n\n\t\tfunction setupRenderTarget(renderTarget) {\n\t\t\tvar texture = renderTarget.texture;\n\t\t\tvar renderTargetProperties = properties.get(renderTarget);\n\t\t\tvar textureProperties = properties.get(texture);\n\t\t\trenderTarget.addEventListener('dispose', onRenderTargetDispose);\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\t\t\tinfo.memory.textures++;\n\t\t\tvar isCube = renderTarget.isWebGLCubeRenderTarget === true;\n\t\t\tvar isMultisample = renderTarget.isWebGLMultisampleRenderTarget === true;\n\t\t\tvar isRenderTarget3D = texture.isDataTexture3D || texture.isDataTexture2DArray;\n\t\t\tvar supportsMips = isPowerOfTwo(renderTarget) || isWebGL2; // Handles WebGL2 RGBFormat fallback - #18858\n\n\t\t\tif (isWebGL2 && texture.format === RGBFormat && (texture.type === FloatType || texture.type === HalfFloatType)) {\n\t\t\t\ttexture.format = RGBAFormat;\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.');\n\t\t\t} // Setup framebuffer\n\n\n\t\t\tif (isCube) {\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t\tif (isMultisample) {\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t\t\t_gl.bindRenderbuffer(36161, renderTargetProperties.__webglColorRenderbuffer);\n\n\t\t\t\t\t\tvar glFormat = utils.convert(texture.format);\n\t\t\t\t\t\tvar glType = utils.convert(texture.type);\n\t\t\t\t\t\tvar glInternalFormat = getInternalFormat(texture.internalFormat, glFormat, glType);\n\t\t\t\t\t\tvar samples = getRenderTargetSamples(renderTarget);\n\n\t\t\t\t\t\t_gl.renderbufferStorageMultisample(36161, samples, glInternalFormat, renderTarget.width, renderTarget.height);\n\n\t\t\t\t\t\t_gl.bindFramebuffer(36160, renderTargetProperties.__webglMultisampledFramebuffer);\n\n\t\t\t\t\t\t_gl.framebufferRenderbuffer(36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer);\n\n\t\t\t\t\t\t_gl.bindRenderbuffer(36161, null);\n\n\t\t\t\t\t\tif (renderTarget.depthBuffer) {\n\t\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\t\t\tsetupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_gl.bindFramebuffer(36160, null);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // Setup color buffer\n\n\n\t\t\tif (isCube) {\n\t\t\t\tstate.bindTexture(34067, textureProperties.__webglTexture);\n\t\t\t\tsetTextureParameters(34067, texture, supportsMips);\n\n\t\t\t\tfor (var _i5 = 0; _i5 < 6; _i5++) {\n\t\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[_i5], renderTarget, 36064, 34069 + _i5);\n\t\t\t\t}\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t\tgenerateMipmap(34067, texture, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(34067, null);\n\t\t\t} else {\n\t\t\t\tvar glTextureType = 3553;\n\n\t\t\t\tif (isRenderTarget3D) {\n\t\t\t\t\t// Render targets containing layers, i.e: Texture 3D and 2d arrays\n\t\t\t\t\tif (isWebGL2) {\n\t\t\t\t\t\tvar isTexture3D = texture.isDataTexture3D;\n\t\t\t\t\t\tglTextureType = isTexture3D ? 32879 : 35866;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(glTextureType, textureProperties.__webglTexture);\n\t\t\t\tsetTextureParameters(glTextureType, texture, supportsMips);\n\t\t\t\tsetupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, 36064, glTextureType);\n\n\t\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\t\tgenerateMipmap(3553, texture, renderTarget.width, renderTarget.height);\n\t\t\t\t}\n\n\t\t\t\tstate.bindTexture(3553, null);\n\t\t\t} // Setup depth and stencil buffers\n\n\n\t\t\tif (renderTarget.depthBuffer) {\n\t\t\t\tsetupDepthRenderbuffer(renderTarget);\n\t\t\t}\n\t\t}\n\n\t\tfunction updateRenderTargetMipmap(renderTarget) {\n\t\t\tvar texture = renderTarget.texture;\n\t\t\tvar supportsMips = isPowerOfTwo(renderTarget) || isWebGL2;\n\n\t\t\tif (textureNeedsGenerateMipmaps(texture, supportsMips)) {\n\t\t\t\tvar target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;\n\n\t\t\t\tvar webglTexture = properties.get(texture).__webglTexture;\n\n\t\t\t\tstate.bindTexture(target, webglTexture);\n\t\t\t\tgenerateMipmap(target, texture, renderTarget.width, renderTarget.height);\n\t\t\t\tstate.bindTexture(target, null);\n\t\t\t}\n\t\t}\n\n\t\tfunction updateMultisampleRenderTarget(renderTarget) {\n\t\t\tif (renderTarget.isWebGLMultisampleRenderTarget) {\n\t\t\t\tif (isWebGL2) {\n\t\t\t\t\tvar renderTargetProperties = properties.get(renderTarget);\n\n\t\t\t\t\t_gl.bindFramebuffer(36008, renderTargetProperties.__webglMultisampledFramebuffer);\n\n\t\t\t\t\t_gl.bindFramebuffer(36009, renderTargetProperties.__webglFramebuffer);\n\n\t\t\t\t\tvar width = renderTarget.width;\n\t\t\t\t\tvar height = renderTarget.height;\n\t\t\t\t\tvar mask = 16384;\n\t\t\t\t\tif (renderTarget.depthBuffer) mask |= 256;\n\t\t\t\t\tif (renderTarget.stencilBuffer) mask |= 1024;\n\n\t\t\t\t\t_gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, 9728);\n\n\t\t\t\t\t_gl.bindFramebuffer(36160, renderTargetProperties.__webglMultisampledFramebuffer); // see #18905\n\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction getRenderTargetSamples(renderTarget) {\n\t\t\treturn isWebGL2 && renderTarget.isWebGLMultisampleRenderTarget ? Math.min(maxSamples, renderTarget.samples) : 0;\n\t\t}\n\n\t\tfunction updateVideoTexture(texture) {\n\t\t\tvar frame = info.render.frame; // Check the last frame we updated the VideoTexture\n\n\t\t\tif (_videoTextures.get(texture) !== frame) {\n\t\t\t\t_videoTextures.set(texture, frame);\n\n\t\t\t\ttexture.update();\n\t\t\t}\n\t\t} // backwards compatibility\n\n\n\t\tvar warnedTexture2D = false;\n\t\tvar warnedTextureCube = false;\n\n\t\tfunction safeSetTexture2D(texture, slot) {\n\t\t\tif (texture && texture.isWebGLRenderTarget) {\n\t\t\t\tif (warnedTexture2D === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLTextures.safeSetTexture2D: don\\'t use render targets as textures. Use their .texture property instead.');\n\t\t\t\t\twarnedTexture2D = true;\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\t\t\t}\n\n\t\t\tsetTexture2D(texture, slot);\n\t\t}\n\n\t\tfunction safeSetTextureCube(texture, slot) {\n\t\t\tif (texture && texture.isWebGLCubeRenderTarget) {\n\t\t\t\tif (warnedTextureCube === false) {\n\t\t\t\t\tconsole.warn('THREE.WebGLTextures.safeSetTextureCube: don\\'t use cube render targets as textures. Use their .texture property instead.');\n\t\t\t\t\twarnedTextureCube = true;\n\t\t\t\t}\n\n\t\t\t\ttexture = texture.texture;\n\t\t\t}\n\n\t\t\tsetTextureCube(texture, slot);\n\t\t} //\n\n\n\t\tthis.allocateTextureUnit = allocateTextureUnit;\n\t\tthis.resetTextureUnits = resetTextureUnits;\n\t\tthis.setTexture2D = setTexture2D;\n\t\tthis.setTexture2DArray = setTexture2DArray;\n\t\tthis.setTexture3D = setTexture3D;\n\t\tthis.setTextureCube = setTextureCube;\n\t\tthis.setupRenderTarget = setupRenderTarget;\n\t\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\t\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\t\tthis.safeSetTexture2D = safeSetTexture2D;\n\t\tthis.safeSetTextureCube = safeSetTextureCube;\n\t}\n\n\tfunction WebGLUtils(gl, extensions, capabilities) {\n\t\tvar isWebGL2 = capabilities.isWebGL2;\n\n\t\tfunction convert(p) {\n\t\t\tvar extension;\n\t\t\tif (p === UnsignedByteType) return 5121;\n\t\t\tif (p === UnsignedShort4444Type) return 32819;\n\t\t\tif (p === UnsignedShort5551Type) return 32820;\n\t\t\tif (p === UnsignedShort565Type) return 33635;\n\t\t\tif (p === ByteType) return 5120;\n\t\t\tif (p === ShortType) return 5122;\n\t\t\tif (p === UnsignedShortType) return 5123;\n\t\t\tif (p === IntType) return 5124;\n\t\t\tif (p === UnsignedIntType) return 5125;\n\t\t\tif (p === FloatType) return 5126;\n\n\t\t\tif (p === HalfFloatType) {\n\t\t\t\tif (isWebGL2) return 5131;\n\t\t\t\textension = extensions.get('OES_texture_half_float');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.HALF_FLOAT_OES;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === AlphaFormat) return 6406;\n\t\t\tif (p === RGBFormat) return 6407;\n\t\t\tif (p === RGBAFormat) return 6408;\n\t\t\tif (p === LuminanceFormat) return 6409;\n\t\t\tif (p === LuminanceAlphaFormat) return 6410;\n\t\t\tif (p === DepthFormat) return 6402;\n\t\t\tif (p === DepthStencilFormat) return 34041;\n\t\t\tif (p === RedFormat) return 6403; // WebGL2 formats.\n\n\t\t\tif (p === RedIntegerFormat) return 36244;\n\t\t\tif (p === RGFormat) return 33319;\n\t\t\tif (p === RGIntegerFormat) return 33320;\n\t\t\tif (p === RGBIntegerFormat) return 36248;\n\t\t\tif (p === RGBAIntegerFormat) return 36249;\n\n\t\t\tif (p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_s3tc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\t\tif (p === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_pvrtc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif (p === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\t\tif (p === RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\t\tif (p === RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_ETC1_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_etc1');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_etc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\tif (p === RGB_ETC2_Format) return extension.COMPRESSED_RGB8_ETC2;\n\t\t\t\t\tif (p === RGBA_ETC2_EAC_Format) return extension.COMPRESSED_RGBA8_ETC2_EAC;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format || p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format || p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format || p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format || p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format || p === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format || p === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format || p === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format || p === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format || p === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format) {\n\t\t\t\textension = extensions.get('WEBGL_compressed_texture_astc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\t// TODO Complete?\n\t\t\t\t\treturn p;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === RGBA_BPTC_Format) {\n\t\t\t\textension = extensions.get('EXT_texture_compression_bptc');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\t// TODO Complete?\n\t\t\t\t\treturn p;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (p === UnsignedInt248Type) {\n\t\t\t\tif (isWebGL2) return 34042;\n\t\t\t\textension = extensions.get('WEBGL_depth_texture');\n\n\t\t\t\tif (extension !== null) {\n\t\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tconvert: convert\n\t\t};\n\t}\n\n\tfunction ArrayCamera(array) {\n\t\tif (array === void 0) {\n\t\t\tarray = [];\n\t\t}\n\n\t\tPerspectiveCamera.call(this);\n\t\tthis.cameras = array;\n\t}\n\n\tArrayCamera.prototype = Object.assign(Object.create(PerspectiveCamera.prototype), {\n\t\tconstructor: ArrayCamera,\n\t\tisArrayCamera: true\n\t});\n\n\tvar Group = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(Group, _Object3D);\n\n\t\tfunction Group() {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.type = 'Group';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn Group;\n\t}(Object3D);\n\n\tGroup.prototype.isGroup = true;\n\n\tfunction WebXRController() {\n\t\tthis._targetRay = null;\n\t\tthis._grip = null;\n\t\tthis._hand = null;\n\t}\n\n\tObject.assign(WebXRController.prototype, {\n\t\tconstructor: WebXRController,\n\t\tgetHandSpace: function getHandSpace() {\n\t\t\tif (this._hand === null) {\n\t\t\t\tthis._hand = new Group();\n\t\t\t\tthis._hand.matrixAutoUpdate = false;\n\t\t\t\tthis._hand.visible = false;\n\t\t\t\tthis._hand.joints = {};\n\t\t\t\tthis._hand.inputState = {\n\t\t\t\t\tpinching: false\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn this._hand;\n\t\t},\n\t\tgetTargetRaySpace: function getTargetRaySpace() {\n\t\t\tif (this._targetRay === null) {\n\t\t\t\tthis._targetRay = new Group();\n\t\t\t\tthis._targetRay.matrixAutoUpdate = false;\n\t\t\t\tthis._targetRay.visible = false;\n\t\t\t}\n\n\t\t\treturn this._targetRay;\n\t\t},\n\t\tgetGripSpace: function getGripSpace() {\n\t\t\tif (this._grip === null) {\n\t\t\t\tthis._grip = new Group();\n\t\t\t\tthis._grip.matrixAutoUpdate = false;\n\t\t\t\tthis._grip.visible = false;\n\t\t\t}\n\n\t\t\treturn this._grip;\n\t\t},\n\t\tdispatchEvent: function dispatchEvent(event) {\n\t\t\tif (this._targetRay !== null) {\n\t\t\t\tthis._targetRay.dispatchEvent(event);\n\t\t\t}\n\n\t\t\tif (this._grip !== null) {\n\t\t\t\tthis._grip.dispatchEvent(event);\n\t\t\t}\n\n\t\t\tif (this._hand !== null) {\n\t\t\t\tthis._hand.dispatchEvent(event);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tdisconnect: function disconnect(inputSource) {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'disconnected',\n\t\t\t\tdata: inputSource\n\t\t\t});\n\n\t\t\tif (this._targetRay !== null) {\n\t\t\t\tthis._targetRay.visible = false;\n\t\t\t}\n\n\t\t\tif (this._grip !== null) {\n\t\t\t\tthis._grip.visible = false;\n\t\t\t}\n\n\t\t\tif (this._hand !== null) {\n\t\t\t\tthis._hand.visible = false;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tupdate: function update(inputSource, frame, referenceSpace) {\n\t\t\tvar inputPose = null;\n\t\t\tvar gripPose = null;\n\t\t\tvar handPose = null;\n\t\t\tvar targetRay = this._targetRay;\n\t\t\tvar grip = this._grip;\n\t\t\tvar hand = this._hand;\n\n\t\t\tif (inputSource && frame.session.visibilityState !== 'visible-blurred') {\n\t\t\t\tif (hand && inputSource.hand) {\n\t\t\t\t\thandPose = true;\n\n\t\t\t\t\tfor (var _iterator = _createForOfIteratorHelperLoose(inputSource.hand.values()), _step; !(_step = _iterator()).done;) {\n\t\t\t\t\t\tvar inputjoint = _step.value;\n\t\t\t\t\t\t// Update the joints groups with the XRJoint poses\n\t\t\t\t\t\tvar jointPose = frame.getJointPose(inputjoint, referenceSpace);\n\n\t\t\t\t\t\tif (hand.joints[inputjoint.jointName] === undefined) {\n\t\t\t\t\t\t\t// The transform of this joint will be updated with the joint pose on each frame\n\t\t\t\t\t\t\tvar _joint = new Group();\n\n\t\t\t\t\t\t\t_joint.matrixAutoUpdate = false;\n\t\t\t\t\t\t\t_joint.visible = false;\n\t\t\t\t\t\t\thand.joints[inputjoint.jointName] = _joint; // ??\n\n\t\t\t\t\t\t\thand.add(_joint);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar joint = hand.joints[inputjoint.jointName];\n\n\t\t\t\t\t\tif (jointPose !== null) {\n\t\t\t\t\t\t\tjoint.matrix.fromArray(jointPose.transform.matrix);\n\t\t\t\t\t\t\tjoint.matrix.decompose(joint.position, joint.rotation, joint.scale);\n\t\t\t\t\t\t\tjoint.jointRadius = jointPose.radius;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tjoint.visible = jointPose !== null;\n\t\t\t\t\t} // Custom events\n\t\t\t\t\t// Check pinchz\n\n\n\t\t\t\t\tvar indexTip = hand.joints['index-finger-tip'];\n\t\t\t\t\tvar thumbTip = hand.joints['thumb-tip'];\n\t\t\t\t\tvar distance = indexTip.position.distanceTo(thumbTip.position);\n\t\t\t\t\tvar distanceToPinch = 0.02;\n\t\t\t\t\tvar threshold = 0.005;\n\n\t\t\t\t\tif (hand.inputState.pinching && distance > distanceToPinch + threshold) {\n\t\t\t\t\t\thand.inputState.pinching = false;\n\t\t\t\t\t\tthis.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'pinchend',\n\t\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\t\ttarget: this\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (!hand.inputState.pinching && distance <= distanceToPinch - threshold) {\n\t\t\t\t\t\thand.inputState.pinching = true;\n\t\t\t\t\t\tthis.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'pinchstart',\n\t\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\t\ttarget: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (targetRay !== null) {\n\t\t\t\t\t\tinputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);\n\n\t\t\t\t\t\tif (inputPose !== null) {\n\t\t\t\t\t\t\ttargetRay.matrix.fromArray(inputPose.transform.matrix);\n\t\t\t\t\t\t\ttargetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (grip !== null && inputSource.gripSpace) {\n\t\t\t\t\t\tgripPose = frame.getPose(inputSource.gripSpace, referenceSpace);\n\n\t\t\t\t\t\tif (gripPose !== null) {\n\t\t\t\t\t\t\tgrip.matrix.fromArray(gripPose.transform.matrix);\n\t\t\t\t\t\t\tgrip.matrix.decompose(grip.position, grip.rotation, grip.scale);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (targetRay !== null) {\n\t\t\t\ttargetRay.visible = inputPose !== null;\n\t\t\t}\n\n\t\t\tif (grip !== null) {\n\t\t\t\tgrip.visible = gripPose !== null;\n\t\t\t}\n\n\t\t\tif (hand !== null) {\n\t\t\t\thand.visible = handPose !== null;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction WebXRManager(renderer, gl) {\n\t\tvar scope = this;\n\t\tvar session = null;\n\t\tvar framebufferScaleFactor = 1.0;\n\t\tvar referenceSpace = null;\n\t\tvar referenceSpaceType = 'local-floor';\n\t\tvar pose = null;\n\t\tvar controllers = [];\n\t\tvar inputSourcesMap = new Map(); //\n\n\t\tvar cameraL = new PerspectiveCamera();\n\t\tcameraL.layers.enable(1);\n\t\tcameraL.viewport = new Vector4();\n\t\tvar cameraR = new PerspectiveCamera();\n\t\tcameraR.layers.enable(2);\n\t\tcameraR.viewport = new Vector4();\n\t\tvar cameras = [cameraL, cameraR];\n\t\tvar cameraVR = new ArrayCamera();\n\t\tcameraVR.layers.enable(1);\n\t\tcameraVR.layers.enable(2);\n\t\tvar _currentDepthNear = null;\n\t\tvar _currentDepthFar = null; //\n\n\t\tthis.enabled = false;\n\t\tthis.isPresenting = false;\n\n\t\tthis.getController = function (index) {\n\t\t\tvar controller = controllers[index];\n\n\t\t\tif (controller === undefined) {\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[index] = controller;\n\t\t\t}\n\n\t\t\treturn controller.getTargetRaySpace();\n\t\t};\n\n\t\tthis.getControllerGrip = function (index) {\n\t\t\tvar controller = controllers[index];\n\n\t\t\tif (controller === undefined) {\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[index] = controller;\n\t\t\t}\n\n\t\t\treturn controller.getGripSpace();\n\t\t};\n\n\t\tthis.getHand = function (index) {\n\t\t\tvar controller = controllers[index];\n\n\t\t\tif (controller === undefined) {\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[index] = controller;\n\t\t\t}\n\n\t\t\treturn controller.getHandSpace();\n\t\t}; //\n\n\n\t\tfunction onSessionEvent(event) {\n\t\t\tvar controller = inputSourcesMap.get(event.inputSource);\n\n\t\t\tif (controller) {\n\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\ttype: event.type,\n\t\t\t\t\tdata: event.inputSource\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tfunction onSessionEnd() {\n\t\t\tinputSourcesMap.forEach(function (controller, inputSource) {\n\t\t\t\tcontroller.disconnect(inputSource);\n\t\t\t});\n\t\t\tinputSourcesMap.clear();\n\t\t\t_currentDepthNear = null;\n\t\t\t_currentDepthFar = null; //\n\n\t\t\trenderer.setFramebuffer(null);\n\t\t\trenderer.setRenderTarget(renderer.getRenderTarget()); // Hack #15830\n\n\t\t\tanimation.stop();\n\t\t\tscope.isPresenting = false;\n\t\t\tscope.dispatchEvent({\n\t\t\t\ttype: 'sessionend'\n\t\t\t});\n\t\t}\n\n\t\tthis.setFramebufferScaleFactor = function (value) {\n\t\t\tframebufferScaleFactor = value;\n\n\t\t\tif (scope.isPresenting === true) {\n\t\t\t\tconsole.warn('THREE.WebXRManager: Cannot change framebuffer scale while presenting.');\n\t\t\t}\n\t\t};\n\n\t\tthis.setReferenceSpaceType = function (value) {\n\t\t\treferenceSpaceType = value;\n\n\t\t\tif (scope.isPresenting === true) {\n\t\t\t\tconsole.warn('THREE.WebXRManager: Cannot change reference space type while presenting.');\n\t\t\t}\n\t\t};\n\n\t\tthis.getReferenceSpace = function () {\n\t\t\treturn referenceSpace;\n\t\t};\n\n\t\tthis.getSession = function () {\n\t\t\treturn session;\n\t\t};\n\n\t\tthis.setSession = /*#__PURE__*/function () {\n\t\t\tvar _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(value) {\n\t\t\t\tvar attributes, layerInit, baseLayer;\n\t\t\t\treturn regeneratorRuntime.wrap(function _callee$(_context) {\n\t\t\t\t\twhile (1) {\n\t\t\t\t\t\tswitch (_context.prev = _context.next) {\n\t\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\t\tsession = value;\n\n\t\t\t\t\t\t\t\tif (!(session !== null)) {\n\t\t\t\t\t\t\t\t\t_context.next = 24;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tsession.addEventListener('select', onSessionEvent);\n\t\t\t\t\t\t\t\tsession.addEventListener('selectstart', onSessionEvent);\n\t\t\t\t\t\t\t\tsession.addEventListener('selectend', onSessionEvent);\n\t\t\t\t\t\t\t\tsession.addEventListener('squeeze', onSessionEvent);\n\t\t\t\t\t\t\t\tsession.addEventListener('squeezestart', onSessionEvent);\n\t\t\t\t\t\t\t\tsession.addEventListener('squeezeend', onSessionEvent);\n\t\t\t\t\t\t\t\tsession.addEventListener('end', onSessionEnd);\n\t\t\t\t\t\t\t\tsession.addEventListener('inputsourceschange', onInputSourcesChange);\n\t\t\t\t\t\t\t\tattributes = gl.getContextAttributes();\n\n\t\t\t\t\t\t\t\tif (!(attributes.xrCompatible !== true)) {\n\t\t\t\t\t\t\t\t\t_context.next = 14;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t_context.next = 14;\n\t\t\t\t\t\t\t\treturn gl.makeXRCompatible();\n\n\t\t\t\t\t\t\tcase 14:\n\t\t\t\t\t\t\t\tlayerInit = {\n\t\t\t\t\t\t\t\t\tantialias: attributes.antialias,\n\t\t\t\t\t\t\t\t\talpha: attributes.alpha,\n\t\t\t\t\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t\t\t\t\t}; // eslint-disable-next-line no-undef\n\n\t\t\t\t\t\t\t\tbaseLayer = new XRWebGLLayer(session, gl, layerInit);\n\t\t\t\t\t\t\t\tsession.updateRenderState({\n\t\t\t\t\t\t\t\t\tbaseLayer: baseLayer\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t_context.next = 19;\n\t\t\t\t\t\t\t\treturn session.requestReferenceSpace(referenceSpaceType);\n\n\t\t\t\t\t\t\tcase 19:\n\t\t\t\t\t\t\t\treferenceSpace = _context.sent;\n\t\t\t\t\t\t\t\tanimation.setContext(session);\n\t\t\t\t\t\t\t\tanimation.start();\n\t\t\t\t\t\t\t\tscope.isPresenting = true;\n\t\t\t\t\t\t\t\tscope.dispatchEvent({\n\t\t\t\t\t\t\t\t\ttype: 'sessionstart'\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tcase 24:\n\t\t\t\t\t\t\tcase \"end\":\n\t\t\t\t\t\t\t\treturn _context.stop();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, _callee);\n\t\t\t}));\n\n\t\t\treturn function (_x) {\n\t\t\t\treturn _ref.apply(this, arguments);\n\t\t\t};\n\t\t}();\n\n\t\tfunction onInputSourcesChange(event) {\n\t\t\tvar inputSources = session.inputSources; // Assign inputSources to available controllers\n\n\t\t\tfor (var i = 0; i < controllers.length; i++) {\n\t\t\t\tinputSourcesMap.set(inputSources[i], controllers[i]);\n\t\t\t} // Notify disconnected\n\n\n\t\t\tfor (var _i = 0; _i < event.removed.length; _i++) {\n\t\t\t\tvar inputSource = event.removed[_i];\n\t\t\t\tvar controller = inputSourcesMap.get(inputSource);\n\n\t\t\t\tif (controller) {\n\t\t\t\t\tcontroller.dispatchEvent({\n\t\t\t\t\t\ttype: 'disconnected',\n\t\t\t\t\t\tdata: inputSource\n\t\t\t\t\t});\n\t\t\t\t\tinputSourcesMap.delete(inputSource);\n\t\t\t\t}\n\t\t\t} // Notify connected\n\n\n\t\t\tfor (var _i2 = 0; _i2 < event.added.length; _i2++) {\n\t\t\t\tvar _inputSource = event.added[_i2];\n\n\t\t\t\tvar _controller = inputSourcesMap.get(_inputSource);\n\n\t\t\t\tif (_controller) {\n\t\t\t\t\t_controller.dispatchEvent({\n\t\t\t\t\t\ttype: 'connected',\n\t\t\t\t\t\tdata: _inputSource\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t} //\n\n\n\t\tvar cameraLPos = new Vector3();\n\t\tvar cameraRPos = new Vector3();\n\t\t/**\n\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t\t * the cameras' projection and world matrices have already been set.\n\t\t * And that near and far planes are identical for both cameras.\n\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t\t */\n\n\t\tfunction setProjectionFromUnion(camera, cameraL, cameraR) {\n\t\t\tcameraLPos.setFromMatrixPosition(cameraL.matrixWorld);\n\t\t\tcameraRPos.setFromMatrixPosition(cameraR.matrixWorld);\n\t\t\tvar ipd = cameraLPos.distanceTo(cameraRPos);\n\t\t\tvar projL = cameraL.projectionMatrix.elements;\n\t\t\tvar projR = cameraR.projectionMatrix.elements; // VR systems will have identical far and near planes, and\n\t\t\t// most likely identical top and bottom frustum extents.\n\t\t\t// Use the left camera for these values.\n\n\t\t\tvar near = projL[14] / (projL[10] - 1);\n\t\t\tvar far = projL[14] / (projL[10] + 1);\n\t\t\tvar topFov = (projL[9] + 1) / projL[5];\n\t\t\tvar bottomFov = (projL[9] - 1) / projL[5];\n\t\t\tvar leftFov = (projL[8] - 1) / projL[0];\n\t\t\tvar rightFov = (projR[8] + 1) / projR[0];\n\t\t\tvar left = near * leftFov;\n\t\t\tvar right = near * rightFov; // Calculate the new camera's position offset from the\n\t\t\t// left camera. xOffset should be roughly half `ipd`.\n\n\t\t\tvar zOffset = ipd / (-leftFov + rightFov);\n\t\t\tvar xOffset = zOffset * -leftFov; // TODO: Better way to apply this offset?\n\n\t\t\tcameraL.matrixWorld.decompose(camera.position, camera.quaternion, camera.scale);\n\t\t\tcamera.translateX(xOffset);\n\t\t\tcamera.translateZ(zOffset);\n\t\t\tcamera.matrixWorld.compose(camera.position, camera.quaternion, camera.scale);\n\t\t\tcamera.matrixWorldInverse.copy(camera.matrixWorld).invert(); // Find the union of the frustum values of the cameras and scale\n\t\t\t// the values so that the near plane's position does not change in world space,\n\t\t\t// although must now be relative to the new union camera.\n\n\t\t\tvar near2 = near + zOffset;\n\t\t\tvar far2 = far + zOffset;\n\t\t\tvar left2 = left - xOffset;\n\t\t\tvar right2 = right + (ipd - xOffset);\n\t\t\tvar top2 = topFov * far / far2 * near2;\n\t\t\tvar bottom2 = bottomFov * far / far2 * near2;\n\t\t\tcamera.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);\n\t\t}\n\n\t\tfunction updateCamera(camera, parent) {\n\t\t\tif (parent === null) {\n\t\t\t\tcamera.matrixWorld.copy(camera.matrix);\n\t\t\t} else {\n\t\t\t\tcamera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);\n\t\t\t}\n\n\t\t\tcamera.matrixWorldInverse.copy(camera.matrixWorld).invert();\n\t\t}\n\n\t\tthis.getCamera = function (camera) {\n\t\t\tcameraVR.near = cameraR.near = cameraL.near = camera.near;\n\t\t\tcameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n\t\t\tif (_currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far) {\n\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\t\t\t\tsession.updateRenderState({\n\t\t\t\t\tdepthNear: cameraVR.near,\n\t\t\t\t\tdepthFar: cameraVR.far\n\t\t\t\t});\n\t\t\t\t_currentDepthNear = cameraVR.near;\n\t\t\t\t_currentDepthFar = cameraVR.far;\n\t\t\t}\n\n\t\t\tvar parent = camera.parent;\n\t\t\tvar cameras = cameraVR.cameras;\n\t\t\tupdateCamera(cameraVR, parent);\n\n\t\t\tfor (var i = 0; i < cameras.length; i++) {\n\t\t\t\tupdateCamera(cameras[i], parent);\n\t\t\t} // update camera and its children\n\n\n\t\t\tcamera.matrixWorld.copy(cameraVR.matrixWorld);\n\t\t\tcamera.matrix.copy(cameraVR.matrix);\n\t\t\tcamera.matrix.decompose(camera.position, camera.quaternion, camera.scale);\n\t\t\tvar children = camera.children;\n\n\t\t\tfor (var _i3 = 0, l = children.length; _i3 < l; _i3++) {\n\t\t\t\tchildren[_i3].updateMatrixWorld(true);\n\t\t\t} // update projection matrix for proper view frustum culling\n\n\n\t\t\tif (cameras.length === 2) {\n\t\t\t\tsetProjectionFromUnion(cameraVR, cameraL, cameraR);\n\t\t\t} else {\n\t\t\t\t// assume single camera setup (AR)\n\t\t\t\tcameraVR.projectionMatrix.copy(cameraL.projectionMatrix);\n\t\t\t}\n\n\t\t\treturn cameraVR;\n\t\t}; // Animation Loop\n\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame(time, frame) {\n\t\t\tpose = frame.getViewerPose(referenceSpace);\n\n\t\t\tif (pose !== null) {\n\t\t\t\tvar views = pose.views;\n\t\t\t\tvar baseLayer = session.renderState.baseLayer;\n\t\t\t\trenderer.setFramebuffer(baseLayer.framebuffer);\n\t\t\t\tvar cameraVRNeedsUpdate = false; // check if it's necessary to rebuild cameraVR's camera list\n\n\t\t\t\tif (views.length !== cameraVR.cameras.length) {\n\t\t\t\t\tcameraVR.cameras.length = 0;\n\t\t\t\t\tcameraVRNeedsUpdate = true;\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0; i < views.length; i++) {\n\t\t\t\t\tvar view = views[i];\n\t\t\t\t\tvar viewport = baseLayer.getViewport(view);\n\t\t\t\t\tvar camera = cameras[i];\n\t\t\t\t\tcamera.matrix.fromArray(view.transform.matrix);\n\t\t\t\t\tcamera.projectionMatrix.fromArray(view.projectionMatrix);\n\t\t\t\t\tcamera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);\n\n\t\t\t\t\tif (i === 0) {\n\t\t\t\t\t\tcameraVR.matrix.copy(camera.matrix);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (cameraVRNeedsUpdate === true) {\n\t\t\t\t\t\tcameraVR.cameras.push(camera);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} //\n\n\n\t\t\tvar inputSources = session.inputSources;\n\n\t\t\tfor (var _i4 = 0; _i4 < controllers.length; _i4++) {\n\t\t\t\tvar controller = controllers[_i4];\n\t\t\t\tvar inputSource = inputSources[_i4];\n\t\t\t\tcontroller.update(inputSource, frame, referenceSpace);\n\t\t\t}\n\n\t\t\tif (onAnimationFrameCallback) onAnimationFrameCallback(time, frame);\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop(onAnimationFrame);\n\n\t\tthis.setAnimationLoop = function (callback) {\n\t\t\tonAnimationFrameCallback = callback;\n\t\t};\n\n\t\tthis.dispose = function () {};\n\t}\n\n\tObject.assign(WebXRManager.prototype, EventDispatcher.prototype);\n\n\tfunction WebGLMaterials(properties) {\n\t\tfunction refreshFogUniforms(uniforms, fog) {\n\t\t\tuniforms.fogColor.value.copy(fog.color);\n\n\t\t\tif (fog.isFog) {\n\t\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\t\tuniforms.fogFar.value = fog.far;\n\t\t\t} else if (fog.isFogExp2) {\n\t\t\t\tuniforms.fogDensity.value = fog.density;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshMaterialUniforms(uniforms, material, pixelRatio, height) {\n\t\t\tif (material.isMeshBasicMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t} else if (material.isMeshLambertMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsLambert(uniforms, material);\n\t\t\t} else if (material.isMeshToonMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsToon(uniforms, material);\n\t\t\t} else if (material.isMeshPhongMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsPhong(uniforms, material);\n\t\t\t} else if (material.isMeshStandardMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\n\t\t\t\tif (material.isMeshPhysicalMaterial) {\n\t\t\t\t\trefreshUniformsPhysical(uniforms, material);\n\t\t\t\t} else {\n\t\t\t\t\trefreshUniformsStandard(uniforms, material);\n\t\t\t\t}\n\t\t\t} else if (material.isMeshMatcapMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsMatcap(uniforms, material);\n\t\t\t} else if (material.isMeshDepthMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsDepth(uniforms, material);\n\t\t\t} else if (material.isMeshDistanceMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsDistance(uniforms, material);\n\t\t\t} else if (material.isMeshNormalMaterial) {\n\t\t\t\trefreshUniformsCommon(uniforms, material);\n\t\t\t\trefreshUniformsNormal(uniforms, material);\n\t\t\t} else if (material.isLineBasicMaterial) {\n\t\t\t\trefreshUniformsLine(uniforms, material);\n\n\t\t\t\tif (material.isLineDashedMaterial) {\n\t\t\t\t\trefreshUniformsDash(uniforms, material);\n\t\t\t\t}\n\t\t\t} else if (material.isPointsMaterial) {\n\t\t\t\trefreshUniformsPoints(uniforms, material, pixelRatio, height);\n\t\t\t} else if (material.isSpriteMaterial) {\n\t\t\t\trefreshUniformsSprites(uniforms, material);\n\t\t\t} else if (material.isShadowMaterial) {\n\t\t\t\tuniforms.color.value.copy(material.color);\n\t\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\t} else if (material.isShaderMaterial) {\n\t\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsCommon(uniforms, material) {\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\tif (material.color) {\n\t\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\t}\n\n\t\t\tif (material.emissive) {\n\t\t\t\tuniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);\n\t\t\t}\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (material.specularMap) {\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\n\t\t\t}\n\n\t\t\tvar envMap = properties.get(material).envMap;\n\n\t\t\tif (envMap) {\n\t\t\t\tuniforms.envMap.value = envMap;\n\t\t\t\tuniforms.flipEnvMap.value = envMap.isCubeTexture && envMap._needsFlipEnvMap ? -1 : 1;\n\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\t\tvar maxMipLevel = properties.get(envMap).__maxMipLevel;\n\n\t\t\t\tif (maxMipLevel !== undefined) {\n\t\t\t\t\tuniforms.maxMipLevel.value = maxMipLevel;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (material.lightMap) {\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\t\t\t}\n\n\t\t\tif (material.aoMap) {\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. specular map\n\t\t\t// 3. displacementMap map\n\t\t\t// 4. normal map\n\t\t\t// 5. bump map\n\t\t\t// 6. roughnessMap map\n\t\t\t// 7. metalnessMap map\n\t\t\t// 8. alphaMap map\n\t\t\t// 9. emissiveMap map\n\t\t\t// 10. clearcoat map\n\t\t\t// 11. clearcoat normal map\n\t\t\t// 12. clearcoat roughnessMap map\n\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.specularMap) {\n\t\t\t\tuvScaleMap = material.specularMap;\n\t\t\t} else if (material.displacementMap) {\n\t\t\t\tuvScaleMap = material.displacementMap;\n\t\t\t} else if (material.normalMap) {\n\t\t\t\tuvScaleMap = material.normalMap;\n\t\t\t} else if (material.bumpMap) {\n\t\t\t\tuvScaleMap = material.bumpMap;\n\t\t\t} else if (material.roughnessMap) {\n\t\t\t\tuvScaleMap = material.roughnessMap;\n\t\t\t} else if (material.metalnessMap) {\n\t\t\t\tuvScaleMap = material.metalnessMap;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t} else if (material.emissiveMap) {\n\t\t\t\tuvScaleMap = material.emissiveMap;\n\t\t\t} else if (material.clearcoatMap) {\n\t\t\t\tuvScaleMap = material.clearcoatMap;\n\t\t\t} else if (material.clearcoatNormalMap) {\n\t\t\t\tuvScaleMap = material.clearcoatNormalMap;\n\t\t\t} else if (material.clearcoatRoughnessMap) {\n\t\t\t\tuvScaleMap = material.clearcoatRoughnessMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\t// backwards compatibility\n\t\t\t\tif (uvScaleMap.isWebGLRenderTarget) {\n\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\t\t\t\t}\n\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t} // uv repeat and offset setting priorities for uv2\n\t\t\t// 1. ao map\n\t\t\t// 2. light map\n\n\n\t\t\tvar uv2ScaleMap;\n\n\t\t\tif (material.aoMap) {\n\t\t\t\tuv2ScaleMap = material.aoMap;\n\t\t\t} else if (material.lightMap) {\n\t\t\t\tuv2ScaleMap = material.lightMap;\n\t\t\t}\n\n\t\t\tif (uv2ScaleMap !== undefined) {\n\t\t\t\t// backwards compatibility\n\t\t\t\tif (uv2ScaleMap.isWebGLRenderTarget) {\n\t\t\t\t\tuv2ScaleMap = uv2ScaleMap.texture;\n\t\t\t\t}\n\n\t\t\t\tif (uv2ScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuv2ScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uv2Transform.value.copy(uv2ScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsLine(uniforms, material) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t}\n\n\t\tfunction refreshUniformsDash(uniforms, material) {\n\t\t\tuniforms.dashSize.value = material.dashSize;\n\t\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\t\tuniforms.scale.value = material.scale;\n\t\t}\n\n\t\tfunction refreshUniformsPoints(uniforms, material, pixelRatio, height) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.size.value = material.size * pixelRatio;\n\t\t\tuniforms.scale.value = height * 0.5;\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsSprites(uniforms, material) {\n\t\t\tuniforms.diffuse.value.copy(material.color);\n\t\t\tuniforms.opacity.value = material.opacity;\n\t\t\tuniforms.rotation.value = material.rotation;\n\n\t\t\tif (material.map) {\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t}\n\n\t\t\tif (material.alphaMap) {\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\t\t\t} // uv repeat and offset setting priorities\n\t\t\t// 1. color map\n\t\t\t// 2. alpha map\n\n\n\t\t\tvar uvScaleMap;\n\n\t\t\tif (material.map) {\n\t\t\t\tuvScaleMap = material.map;\n\t\t\t} else if (material.alphaMap) {\n\t\t\t\tuvScaleMap = material.alphaMap;\n\t\t\t}\n\n\t\t\tif (uvScaleMap !== undefined) {\n\t\t\t\tif (uvScaleMap.matrixAutoUpdate === true) {\n\t\t\t\t\tuvScaleMap.updateMatrix();\n\t\t\t\t}\n\n\t\t\t\tuniforms.uvTransform.value.copy(uvScaleMap.matrix);\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsLambert(uniforms, material) {\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsPhong(uniforms, material) {\n\t\t\tuniforms.specular.value.copy(material.specular);\n\t\t\tuniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsToon(uniforms, material) {\n\t\t\tif (material.gradientMap) {\n\t\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\t\t\t}\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsStandard(uniforms, material) {\n\t\t\tuniforms.roughness.value = material.roughness;\n\t\t\tuniforms.metalness.value = material.metalness;\n\n\t\t\tif (material.roughnessMap) {\n\t\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\t\t\t}\n\n\t\t\tif (material.metalnessMap) {\n\t\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\t\t\t}\n\n\t\t\tif (material.emissiveMap) {\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\n\t\t\tvar envMap = properties.get(material).envMap;\n\n\t\t\tif (envMap) {\n\t\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsPhysical(uniforms, material) {\n\t\t\trefreshUniformsStandard(uniforms, material);\n\t\t\tuniforms.reflectivity.value = material.reflectivity; // also part of uniforms common\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\t\t\tif (material.sheen) uniforms.sheen.value.copy(material.sheen);\n\n\t\t\tif (material.clearcoatMap) {\n\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\t\t\t}\n\n\t\t\tif (material.clearcoatRoughnessMap) {\n\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\t\t\t}\n\n\t\t\tif (material.clearcoatNormalMap) {\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\tif (material.side === BackSide) {\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tuniforms.transmission.value = material.transmission;\n\n\t\t\tif (material.transmissionMap) {\n\t\t\t\tuniforms.transmissionMap.value = material.transmissionMap;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsMatcap(uniforms, material) {\n\t\t\tif (material.matcap) {\n\t\t\t\tuniforms.matcap.value = material.matcap;\n\t\t\t}\n\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsDepth(uniforms, material) {\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\tfunction refreshUniformsDistance(uniforms, material) {\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\n\t\t\tuniforms.referencePosition.value.copy(material.referencePosition);\n\t\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\t\tuniforms.farDistance.value = material.farDistance;\n\t\t}\n\n\t\tfunction refreshUniformsNormal(uniforms, material) {\n\t\t\tif (material.bumpMap) {\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\t\tif (material.side === BackSide) uniforms.bumpScale.value *= -1;\n\t\t\t}\n\n\t\t\tif (material.normalMap) {\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\t\tuniforms.normalScale.value.copy(material.normalScale);\n\t\t\t\tif (material.side === BackSide) uniforms.normalScale.value.negate();\n\t\t\t}\n\n\t\t\tif (material.displacementMap) {\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\trefreshFogUniforms: refreshFogUniforms,\n\t\t\trefreshMaterialUniforms: refreshMaterialUniforms\n\t\t};\n\t}\n\n\tfunction createCanvasElement() {\n\t\tvar canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\t\tcanvas.style.display = 'block';\n\t\treturn canvas;\n\t}\n\n\tfunction WebGLRenderer(parameters) {\n\t\tparameters = parameters || {};\n\n\t\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : createCanvasElement(),\n\t\t\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\t\t\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\t\tvar currentRenderList = null;\n\t\tvar currentRenderState = null; // render() can be called from within a callback triggered by another render.\n\t\t// We track this so that the nested render call gets its list and state isolated from the parent render call.\n\n\t\tvar renderListStack = [];\n\t\tvar renderStateStack = []; // public properties\n\n\t\tthis.domElement = _canvas; // Debug configuration container\n\n\t\tthis.debug = {\n\t\t\t/**\n\t\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t\t * @type {boolean}\n\t\t\t */\n\t\t\tcheckShaderErrors: true\n\t\t}; // clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true; // scene graph\n\n\t\tthis.sortObjects = true; // user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false; // physically based shading\n\n\t\tthis.gammaFactor = 2.0; // for backwards compatibility\n\n\t\tthis.outputEncoding = LinearEncoding; // physical lights\n\n\t\tthis.physicallyCorrectLights = false; // tone mapping\n\n\t\tthis.toneMapping = NoToneMapping;\n\t\tthis.toneMappingExposure = 1.0; // morphs\n\n\t\tthis.maxMorphTargets = 8;\n\t\tthis.maxMorphNormals = 4; // internal properties\n\n\t\tvar _this = this;\n\n\t\tvar _isContextLost = false; // internal state cache\n\n\t\tvar _framebuffer = null;\n\t\tvar _currentActiveCubeFace = 0;\n\t\tvar _currentActiveMipmapLevel = 0;\n\t\tvar _currentRenderTarget = null;\n\t\tvar _currentFramebuffer = null;\n\n\t\tvar _currentMaterialId = -1;\n\n\t\tvar _currentCamera = null;\n\n\t\tvar _currentViewport = new Vector4();\n\n\t\tvar _currentScissor = new Vector4();\n\n\t\tvar _currentScissorTest = null; //\n\n\t\tvar _width = _canvas.width;\n\t\tvar _height = _canvas.height;\n\t\tvar _pixelRatio = 1;\n\t\tvar _opaqueSort = null;\n\t\tvar _transparentSort = null;\n\n\t\tvar _viewport = new Vector4(0, 0, _width, _height);\n\n\t\tvar _scissor = new Vector4(0, 0, _width, _height);\n\n\t\tvar _scissorTest = false; // frustum\n\n\t\tvar _frustum = new Frustum(); // clipping\n\n\n\t\tvar _clippingEnabled = false;\n\t\tvar _localClippingEnabled = false; // camera matrices cache\n\n\t\tvar _projScreenMatrix = new Matrix4();\n\n\t\tvar _vector3 = new Vector3();\n\n\t\tvar _emptyScene = {\n\t\t\tbackground: null,\n\t\t\tfog: null,\n\t\t\tenvironment: null,\n\t\t\toverrideMaterial: null,\n\t\t\tisScene: true\n\t\t};\n\n\t\tfunction getTargetPixelRatio() {\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\t\t} // initialize\n\n\n\t\tvar _gl = _context;\n\n\t\tfunction getContext(contextNames, contextAttributes) {\n\t\t\tfor (var i = 0; i < contextNames.length; i++) {\n\t\t\t\tvar contextName = contextNames[i];\n\n\t\t\t\tvar context = _canvas.getContext(contextName, contextAttributes);\n\n\t\t\t\tif (context !== null) return context;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\ttry {\n\t\t\tvar contextAttributes = {\n\t\t\t\talpha: _alpha,\n\t\t\t\tdepth: _depth,\n\t\t\t\tstencil: _stencil,\n\t\t\t\tantialias: _antialias,\n\t\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\t\tpowerPreference: _powerPreference,\n\t\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat\n\t\t\t}; // event listeners must be registered before WebGL context is created, see #12753\n\n\t\t\t_canvas.addEventListener('webglcontextlost', onContextLost, false);\n\n\t\t\t_canvas.addEventListener('webglcontextrestored', onContextRestore, false);\n\n\t\t\tif (_gl === null) {\n\t\t\t\tvar contextNames = ['webgl2', 'webgl', 'experimental-webgl'];\n\n\t\t\t\tif (_this.isWebGL1Renderer === true) {\n\t\t\t\t\tcontextNames.shift();\n\t\t\t\t}\n\n\t\t\t\t_gl = getContext(contextNames, contextAttributes);\n\n\t\t\t\tif (_gl === null) {\n\t\t\t\t\tif (getContext(contextNames)) {\n\t\t\t\t\t\tthrow new Error('Error creating WebGL context with your selected attributes.');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error('Error creating WebGL context.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\n\t\t\tif (_gl.getShaderPrecisionFormat === undefined) {\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t'rangeMin': 1,\n\t\t\t\t\t\t'rangeMax': 1,\n\t\t\t\t\t\t'precision': 1\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.error('THREE.WebGLRenderer: ' + error.message);\n\t\t\tthrow error;\n\t\t}\n\n\t\tvar extensions, capabilities, state, info;\n\t\tvar properties, textures, cubemaps, attributes, geometries, objects;\n\t\tvar programCache, materials, renderLists, renderStates, clipping;\n\t\tvar background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\t\tvar utils, bindingStates;\n\n\t\tfunction initGLContext() {\n\t\t\textensions = new WebGLExtensions(_gl);\n\t\t\tcapabilities = new WebGLCapabilities(_gl, extensions, parameters);\n\t\t\textensions.init(capabilities);\n\t\t\tutils = new WebGLUtils(_gl, extensions, capabilities);\n\t\t\tstate = new WebGLState(_gl, extensions, capabilities);\n\t\t\tstate.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());\n\t\t\tstate.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());\n\t\t\tinfo = new WebGLInfo(_gl);\n\t\t\tproperties = new WebGLProperties();\n\t\t\ttextures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);\n\t\t\tcubemaps = new WebGLCubeMaps(_this);\n\t\t\tattributes = new WebGLAttributes(_gl, capabilities);\n\t\t\tbindingStates = new WebGLBindingStates(_gl, extensions, attributes, capabilities);\n\t\t\tgeometries = new WebGLGeometries(_gl, attributes, info, bindingStates);\n\t\t\tobjects = new WebGLObjects(_gl, geometries, attributes, info);\n\t\t\tmorphtargets = new WebGLMorphtargets(_gl);\n\t\t\tclipping = new WebGLClipping(properties);\n\t\t\tprogramCache = new WebGLPrograms(_this, cubemaps, extensions, capabilities, bindingStates, clipping);\n\t\t\tmaterials = new WebGLMaterials(properties);\n\t\t\trenderLists = new WebGLRenderLists(properties);\n\t\t\trenderStates = new WebGLRenderStates(extensions, capabilities);\n\t\t\tbackground = new WebGLBackground(_this, cubemaps, state, objects, _premultipliedAlpha);\n\t\t\tbufferRenderer = new WebGLBufferRenderer(_gl, extensions, info, capabilities);\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info, capabilities);\n\t\t\tinfo.programs = programCache.programs;\n\t\t\t_this.capabilities = capabilities;\n\t\t\t_this.extensions = extensions;\n\t\t\t_this.properties = properties;\n\t\t\t_this.renderLists = renderLists;\n\t\t\t_this.state = state;\n\t\t\t_this.info = info;\n\t\t}\n\n\t\tinitGLContext(); // xr\n\n\t\tvar xr = new WebXRManager(_this, _gl);\n\t\tthis.xr = xr; // shadow map\n\n\t\tvar shadowMap = new WebGLShadowMap(_this, objects, capabilities.maxTextureSize);\n\t\tthis.shadowMap = shadowMap; // API\n\n\t\tthis.getContext = function () {\n\t\t\treturn _gl;\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\t\t\treturn _gl.getContextAttributes();\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\t\t\tvar extension = extensions.get('WEBGL_lose_context');\n\t\t\tif (extension) extension.loseContext();\n\t\t};\n\n\t\tthis.forceContextRestore = function () {\n\t\t\tvar extension = extensions.get('WEBGL_lose_context');\n\t\t\tif (extension) extension.restoreContext();\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\t\t\treturn _pixelRatio;\n\t\t};\n\n\t\tthis.setPixelRatio = function (value) {\n\t\t\tif (value === undefined) return;\n\t\t\t_pixelRatio = value;\n\t\t\tthis.setSize(_width, _height, false);\n\t\t};\n\n\t\tthis.getSize = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getsize() now requires a Vector2 as an argument');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set(_width, _height);\n\t\t};\n\n\t\tthis.setSize = function (width, height, updateStyle) {\n\t\t\tif (xr.isPresenting) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\t\t_canvas.width = Math.floor(width * _pixelRatio);\n\t\t\t_canvas.height = Math.floor(height * _pixelRatio);\n\n\t\t\tif (updateStyle !== false) {\n\t\t\t\t_canvas.style.width = width + 'px';\n\t\t\t\t_canvas.style.height = height + 'px';\n\t\t\t}\n\n\t\t\tthis.setViewport(0, 0, width, height);\n\t\t};\n\n\t\tthis.getDrawingBufferSize = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set(_width * _pixelRatio, _height * _pixelRatio).floor();\n\t\t};\n\n\t\tthis.setDrawingBufferSize = function (width, height, pixelRatio) {\n\t\t\t_width = width;\n\t\t\t_height = height;\n\t\t\t_pixelRatio = pixelRatio;\n\t\t\t_canvas.width = Math.floor(width * pixelRatio);\n\t\t\t_canvas.height = Math.floor(height * pixelRatio);\n\t\t\tthis.setViewport(0, 0, width, height);\n\t\t};\n\n\t\tthis.getCurrentViewport = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument');\n\t\t\t\ttarget = new Vector4();\n\t\t\t}\n\n\t\t\treturn target.copy(_currentViewport);\n\t\t};\n\n\t\tthis.getViewport = function (target) {\n\t\t\treturn target.copy(_viewport);\n\t\t};\n\n\t\tthis.setViewport = function (x, y, width, height) {\n\t\t\tif (x.isVector4) {\n\t\t\t\t_viewport.set(x.x, x.y, x.z, x.w);\n\t\t\t} else {\n\t\t\t\t_viewport.set(x, y, width, height);\n\t\t\t}\n\n\t\t\tstate.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor());\n\t\t};\n\n\t\tthis.getScissor = function (target) {\n\t\t\treturn target.copy(_scissor);\n\t\t};\n\n\t\tthis.setScissor = function (x, y, width, height) {\n\t\t\tif (x.isVector4) {\n\t\t\t\t_scissor.set(x.x, x.y, x.z, x.w);\n\t\t\t} else {\n\t\t\t\t_scissor.set(x, y, width, height);\n\t\t\t}\n\n\t\t\tstate.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor());\n\t\t};\n\n\t\tthis.getScissorTest = function () {\n\t\t\treturn _scissorTest;\n\t\t};\n\n\t\tthis.setScissorTest = function (boolean) {\n\t\t\tstate.setScissorTest(_scissorTest = boolean);\n\t\t};\n\n\t\tthis.setOpaqueSort = function (method) {\n\t\t\t_opaqueSort = method;\n\t\t};\n\n\t\tthis.setTransparentSort = function (method) {\n\t\t\t_transparentSort = method;\n\t\t}; // Clearing\n\n\n\t\tthis.getClearColor = function (target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('WebGLRenderer: .getClearColor() now requires a Color as an argument');\n\t\t\t\ttarget = new Color();\n\t\t\t}\n\n\t\t\treturn target.copy(background.getClearColor());\n\t\t};\n\n\t\tthis.setClearColor = function () {\n\t\t\tbackground.setClearColor.apply(background, arguments);\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\t\t\treturn background.getClearAlpha();\n\t\t};\n\n\t\tthis.setClearAlpha = function () {\n\t\t\tbackground.setClearAlpha.apply(background, arguments);\n\t\t};\n\n\t\tthis.clear = function (color, depth, stencil) {\n\t\t\tvar bits = 0;\n\t\t\tif (color === undefined || color) bits |= 16384;\n\t\t\tif (depth === undefined || depth) bits |= 256;\n\t\t\tif (stencil === undefined || stencil) bits |= 1024;\n\n\t\t\t_gl.clear(bits);\n\t\t};\n\n\t\tthis.clearColor = function () {\n\t\t\tthis.clear(true, false, false);\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\t\t\tthis.clear(false, true, false);\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\t\t\tthis.clear(false, false, true);\n\t\t}; //\n\n\n\t\tthis.dispose = function () {\n\t\t\t_canvas.removeEventListener('webglcontextlost', onContextLost, false);\n\n\t\t\t_canvas.removeEventListener('webglcontextrestored', onContextRestore, false);\n\n\t\t\trenderLists.dispose();\n\t\t\trenderStates.dispose();\n\t\t\tproperties.dispose();\n\t\t\tcubemaps.dispose();\n\t\t\tobjects.dispose();\n\t\t\tbindingStates.dispose();\n\t\t\txr.dispose();\n\t\t\tanimation.stop();\n\t\t}; // Events\n\n\n\t\tfunction onContextLost(event) {\n\t\t\tevent.preventDefault();\n\t\t\tconsole.log('THREE.WebGLRenderer: Context Lost.');\n\t\t\t_isContextLost = true;\n\t\t}\n\n\t\tfunction onContextRestore()\n\t\t/* event */\n\t\t{\n\t\t\tconsole.log('THREE.WebGLRenderer: Context Restored.');\n\t\t\t_isContextLost = false;\n\t\t\tinitGLContext();\n\t\t}\n\n\t\tfunction onMaterialDispose(event) {\n\t\t\tvar material = event.target;\n\t\t\tmaterial.removeEventListener('dispose', onMaterialDispose);\n\t\t\tdeallocateMaterial(material);\n\t\t} // Buffer deallocation\n\n\n\t\tfunction deallocateMaterial(material) {\n\t\t\treleaseMaterialProgramReference(material);\n\t\t\tproperties.remove(material);\n\t\t}\n\n\t\tfunction releaseMaterialProgramReference(material) {\n\t\t\tvar programInfo = properties.get(material).program;\n\n\t\t\tif (programInfo !== undefined) {\n\t\t\t\tprogramCache.releaseProgram(programInfo);\n\t\t\t}\n\t\t} // Buffer rendering\n\n\n\t\tfunction renderObjectImmediate(object, program) {\n\t\t\tobject.render(function (object) {\n\t\t\t\t_this.renderBufferImmediate(object, program);\n\t\t\t});\n\t\t}\n\n\t\tthis.renderBufferImmediate = function (object, program) {\n\t\t\tbindingStates.initAttributes();\n\t\t\tvar buffers = properties.get(object);\n\t\t\tif (object.hasPositions && !buffers.position) buffers.position = _gl.createBuffer();\n\t\t\tif (object.hasNormals && !buffers.normal) buffers.normal = _gl.createBuffer();\n\t\t\tif (object.hasUvs && !buffers.uv) buffers.uv = _gl.createBuffer();\n\t\t\tif (object.hasColors && !buffers.color) buffers.color = _gl.createBuffer();\n\t\t\tvar programAttributes = program.getAttributes();\n\n\t\t\tif (object.hasPositions) {\n\t\t\t\t_gl.bindBuffer(34962, buffers.position);\n\n\t\t\t\t_gl.bufferData(34962, object.positionArray, 35048);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.position);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.position, 3, 5126, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasNormals) {\n\t\t\t\t_gl.bindBuffer(34962, buffers.normal);\n\n\t\t\t\t_gl.bufferData(34962, object.normalArray, 35048);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.normal);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.normal, 3, 5126, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasUvs) {\n\t\t\t\t_gl.bindBuffer(34962, buffers.uv);\n\n\t\t\t\t_gl.bufferData(34962, object.uvArray, 35048);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.uv);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.uv, 2, 5126, false, 0, 0);\n\t\t\t}\n\n\t\t\tif (object.hasColors) {\n\t\t\t\t_gl.bindBuffer(34962, buffers.color);\n\n\t\t\t\t_gl.bufferData(34962, object.colorArray, 35048);\n\n\t\t\t\tbindingStates.enableAttribute(programAttributes.color);\n\n\t\t\t\t_gl.vertexAttribPointer(programAttributes.color, 3, 5126, false, 0, 0);\n\t\t\t}\n\n\t\t\tbindingStates.disableUnusedAttributes();\n\n\t\t\t_gl.drawArrays(4, 0, object.count);\n\n\t\t\tobject.count = 0;\n\t\t};\n\n\t\tthis.renderBufferDirect = function (camera, scene, geometry, material, object, group) {\n\t\t\tif (scene === null) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\t\tvar frontFaceCW = object.isMesh && object.matrixWorld.determinant() < 0;\n\t\t\tvar program = setProgram(camera, scene, material, object);\n\t\t\tstate.setMaterial(material, frontFaceCW); //\n\n\t\t\tvar index = geometry.index;\n\t\t\tvar position = geometry.attributes.position; //\n\n\t\t\tif (index === null) {\n\t\t\t\tif (position === undefined || position.count === 0) return;\n\t\t\t} else if (index.count === 0) {\n\t\t\t\treturn;\n\t\t\t} //\n\n\n\t\t\tvar rangeFactor = 1;\n\n\t\t\tif (material.wireframe === true) {\n\t\t\t\tindex = geometries.getWireframeAttribute(geometry);\n\t\t\t\trangeFactor = 2;\n\t\t\t}\n\n\t\t\tif (material.morphTargets || material.morphNormals) {\n\t\t\t\tmorphtargets.update(object, geometry, material, program);\n\t\t\t}\n\n\t\t\tbindingStates.setup(object, material, program, geometry, index);\n\t\t\tvar attribute;\n\t\t\tvar renderer = bufferRenderer;\n\n\t\t\tif (index !== null) {\n\t\t\t\tattribute = attributes.get(index);\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex(attribute);\n\t\t\t} //\n\n\n\t\t\tvar dataCount = index !== null ? index.count : position.count;\n\t\t\tvar rangeStart = geometry.drawRange.start * rangeFactor;\n\t\t\tvar rangeCount = geometry.drawRange.count * rangeFactor;\n\t\t\tvar groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\t\tvar groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\t\t\tvar drawStart = Math.max(rangeStart, groupStart);\n\t\t\tvar drawEnd = Math.min(dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;\n\t\t\tvar drawCount = Math.max(0, drawEnd - drawStart + 1);\n\t\t\tif (drawCount === 0) return; //\n\n\t\t\tif (object.isMesh) {\n\t\t\t\tif (material.wireframe === true) {\n\t\t\t\t\tstate.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());\n\t\t\t\t\trenderer.setMode(1);\n\t\t\t\t} else {\n\t\t\t\t\trenderer.setMode(4);\n\t\t\t\t}\n\t\t\t} else if (object.isLine) {\n\t\t\t\tvar lineWidth = material.linewidth;\n\t\t\t\tif (lineWidth === undefined) lineWidth = 1; // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth(lineWidth * getTargetPixelRatio());\n\n\t\t\t\tif (object.isLineSegments) {\n\t\t\t\t\trenderer.setMode(1);\n\t\t\t\t} else if (object.isLineLoop) {\n\t\t\t\t\trenderer.setMode(2);\n\t\t\t\t} else {\n\t\t\t\t\trenderer.setMode(3);\n\t\t\t\t}\n\t\t\t} else if (object.isPoints) {\n\t\t\t\trenderer.setMode(0);\n\t\t\t} else if (object.isSprite) {\n\t\t\t\trenderer.setMode(4);\n\t\t\t}\n\n\t\t\tif (object.isInstancedMesh) {\n\t\t\t\trenderer.renderInstances(drawStart, drawCount, object.count);\n\t\t\t} else if (geometry.isInstancedBufferGeometry) {\n\t\t\t\tvar instanceCount = Math.min(geometry.instanceCount, geometry._maxInstanceCount);\n\t\t\t\trenderer.renderInstances(drawStart, drawCount, instanceCount);\n\t\t\t} else {\n\t\t\t\trenderer.render(drawStart, drawCount);\n\t\t\t}\n\t\t}; // Compile\n\n\n\t\tthis.compile = function (scene, camera) {\n\t\t\tcurrentRenderState = renderStates.get(scene);\n\t\t\tcurrentRenderState.init();\n\t\t\tscene.traverseVisible(function (object) {\n\t\t\t\tif (object.isLight && object.layers.test(camera.layers)) {\n\t\t\t\t\tcurrentRenderState.pushLight(object);\n\n\t\t\t\t\tif (object.castShadow) {\n\t\t\t\t\t\tcurrentRenderState.pushShadow(object);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tcurrentRenderState.setupLights();\n\t\t\tvar compiled = new WeakMap();\n\t\t\tscene.traverse(function (object) {\n\t\t\t\tvar material = object.material;\n\n\t\t\t\tif (material) {\n\t\t\t\t\tif (Array.isArray(material)) {\n\t\t\t\t\t\tfor (var i = 0; i < material.length; i++) {\n\t\t\t\t\t\t\tvar material2 = material[i];\n\n\t\t\t\t\t\t\tif (compiled.has(material2) === false) {\n\t\t\t\t\t\t\t\tinitMaterial(material2, scene, object);\n\t\t\t\t\t\t\t\tcompiled.set(material2);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (compiled.has(material) === false) {\n\t\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t\t\tcompiled.set(material);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}; // Animation Loop\n\n\n\t\tvar onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame(time) {\n\t\t\tif (xr.isPresenting) return;\n\t\t\tif (onAnimationFrameCallback) onAnimationFrameCallback(time);\n\t\t}\n\n\t\tvar animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop(onAnimationFrame);\n\t\tif (typeof window !== 'undefined') animation.setContext(window);\n\n\t\tthis.setAnimationLoop = function (callback) {\n\t\t\tonAnimationFrameCallback = callback;\n\t\t\txr.setAnimationLoop(callback);\n\t\t\tcallback === null ? animation.stop() : animation.start();\n\t\t}; // Rendering\n\n\n\t\tthis.render = function (scene, camera) {\n\t\t\tvar renderTarget, forceClear;\n\n\t\t\tif (arguments[2] !== undefined) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.');\n\t\t\t\trenderTarget = arguments[2];\n\t\t\t}\n\n\t\t\tif (arguments[3] !== undefined) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead.');\n\t\t\t\tforceClear = arguments[3];\n\t\t\t}\n\n\t\t\tif (camera !== undefined && camera.isCamera !== true) {\n\t\t\t\tconsole.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (_isContextLost === true) return; // reset caching for this frame\n\n\t\t\tbindingStates.resetDefaultState();\n\t\t\t_currentMaterialId = -1;\n\t\t\t_currentCamera = null; // update scene graph\n\n\t\t\tif (scene.autoUpdate === true) scene.updateMatrixWorld(); // update camera matrices and frustum\n\n\t\t\tif (camera.parent === null) camera.updateMatrixWorld();\n\n\t\t\tif (xr.enabled === true && xr.isPresenting === true) {\n\t\t\t\tcamera = xr.getCamera(camera);\n\t\t\t} //\n\n\n\t\t\tif (scene.isScene === true) scene.onBeforeRender(_this, scene, camera, renderTarget || _currentRenderTarget);\n\t\t\tcurrentRenderState = renderStates.get(scene, renderStateStack.length);\n\t\t\tcurrentRenderState.init();\n\t\t\trenderStateStack.push(currentRenderState);\n\n\t\t\t_projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n\t\t\t_frustum.setFromProjectionMatrix(_projScreenMatrix);\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = clipping.init(this.clippingPlanes, _localClippingEnabled, camera);\n\t\t\tcurrentRenderList = renderLists.get(scene, renderListStack.length);\n\t\t\tcurrentRenderList.init();\n\t\t\trenderListStack.push(currentRenderList);\n\t\t\tprojectObject(scene, camera, 0, _this.sortObjects);\n\t\t\tcurrentRenderList.finish();\n\n\t\t\tif (_this.sortObjects === true) {\n\t\t\t\tcurrentRenderList.sort(_opaqueSort, _transparentSort);\n\t\t\t} //\n\n\n\t\t\tif (_clippingEnabled === true) clipping.beginShadows();\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\t\t\tshadowMap.render(shadowsArray, scene, camera);\n\t\t\tcurrentRenderState.setupLights();\n\t\t\tcurrentRenderState.setupLightsView(camera);\n\t\t\tif (_clippingEnabled === true) clipping.endShadows(); //\n\n\t\t\tif (this.info.autoReset === true) this.info.reset();\n\n\t\t\tif (renderTarget !== undefined) {\n\t\t\t\tthis.setRenderTarget(renderTarget);\n\t\t\t} //\n\n\n\t\t\tbackground.render(currentRenderList, scene, camera, forceClear); // render scene\n\n\t\t\tvar opaqueObjects = currentRenderList.opaque;\n\t\t\tvar transparentObjects = currentRenderList.transparent;\n\t\t\tif (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene, camera);\n\t\t\tif (transparentObjects.length > 0) renderObjects(transparentObjects, scene, camera); //\n\n\t\t\tif (scene.isScene === true) scene.onAfterRender(_this, scene, camera); //\n\n\t\t\tif (_currentRenderTarget !== null) {\n\t\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\t\t\t\ttextures.updateRenderTargetMipmap(_currentRenderTarget); // resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\t\ttextures.updateMultisampleRenderTarget(_currentRenderTarget);\n\t\t\t} // Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\n\t\t\tstate.buffers.depth.setTest(true);\n\t\t\tstate.buffers.depth.setMask(true);\n\t\t\tstate.buffers.color.setMask(true);\n\t\t\tstate.setPolygonOffset(false); // _gl.finish();\n\n\t\t\trenderStateStack.pop();\n\n\t\t\tif (renderStateStack.length > 0) {\n\t\t\t\tcurrentRenderState = renderStateStack[renderStateStack.length - 1];\n\t\t\t} else {\n\t\t\t\tcurrentRenderState = null;\n\t\t\t}\n\n\t\t\trenderListStack.pop();\n\n\t\t\tif (renderListStack.length > 0) {\n\t\t\t\tcurrentRenderList = renderListStack[renderListStack.length - 1];\n\t\t\t} else {\n\t\t\t\tcurrentRenderList = null;\n\t\t\t}\n\t\t};\n\n\t\tfunction projectObject(object, camera, groupOrder, sortObjects) {\n\t\t\tif (object.visible === false) return;\n\t\t\tvar visible = object.layers.test(camera.layers);\n\n\t\t\tif (visible) {\n\t\t\t\tif (object.isGroup) {\n\t\t\t\t\tgroupOrder = object.renderOrder;\n\t\t\t\t} else if (object.isLOD) {\n\t\t\t\t\tif (object.autoUpdate === true) object.update(camera);\n\t\t\t\t} else if (object.isLight) {\n\t\t\t\t\tcurrentRenderState.pushLight(object);\n\n\t\t\t\t\tif (object.castShadow) {\n\t\t\t\t\t\tcurrentRenderState.pushShadow(object);\n\t\t\t\t\t}\n\t\t\t\t} else if (object.isSprite) {\n\t\t\t\t\tif (!object.frustumCulled || _frustum.intersectsSprite(object)) {\n\t\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar geometry = objects.update(object);\n\t\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\t\tif (material.visible) {\n\t\t\t\t\t\t\tcurrentRenderList.push(object, geometry, material, groupOrder, _vector3.z, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (object.isImmediateRenderObject) {\n\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentRenderList.push(object, null, object.material, groupOrder, _vector3.z, null);\n\t\t\t\t} else if (object.isMesh || object.isLine || object.isPoints) {\n\t\t\t\t\tif (object.isSkinnedMesh) {\n\t\t\t\t\t\t// update skeleton only once in a frame\n\t\t\t\t\t\tif (object.skeleton.frame !== info.render.frame) {\n\t\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!object.frustumCulled || _frustum.intersectsObject(object)) {\n\t\t\t\t\t\tif (sortObjects) {\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition(object.matrixWorld).applyMatrix4(_projScreenMatrix);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar _geometry = objects.update(object);\n\n\t\t\t\t\t\tvar _material = object.material;\n\n\t\t\t\t\t\tif (Array.isArray(_material)) {\n\t\t\t\t\t\t\tvar groups = _geometry.groups;\n\n\t\t\t\t\t\t\tfor (var i = 0, l = groups.length; i < l; i++) {\n\t\t\t\t\t\t\t\tvar group = groups[i];\n\t\t\t\t\t\t\t\tvar groupMaterial = _material[group.materialIndex];\n\n\t\t\t\t\t\t\t\tif (groupMaterial && groupMaterial.visible) {\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push(object, _geometry, groupMaterial, groupOrder, _vector3.z, group);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (_material.visible) {\n\t\t\t\t\t\t\tcurrentRenderList.push(object, _geometry, _material, groupOrder, _vector3.z, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar children = object.children;\n\n\t\t\tfor (var _i = 0, _l = children.length; _i < _l; _i++) {\n\t\t\t\tprojectObject(children[_i], camera, groupOrder, sortObjects);\n\t\t\t}\n\t\t}\n\n\t\tfunction renderObjects(renderList, scene, camera) {\n\t\t\tvar overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n\n\t\t\tfor (var i = 0, l = renderList.length; i < l; i++) {\n\t\t\t\tvar renderItem = renderList[i];\n\t\t\t\tvar object = renderItem.object;\n\t\t\t\tvar geometry = renderItem.geometry;\n\t\t\t\tvar material = overrideMaterial === null ? renderItem.material : overrideMaterial;\n\t\t\t\tvar group = renderItem.group;\n\n\t\t\t\tif (camera.isArrayCamera) {\n\t\t\t\t\tvar cameras = camera.cameras;\n\n\t\t\t\t\tfor (var j = 0, jl = cameras.length; j < jl; j++) {\n\t\t\t\t\t\tvar camera2 = cameras[j];\n\n\t\t\t\t\t\tif (object.layers.test(camera2.layers)) {\n\t\t\t\t\t\t\tstate.viewport(_currentViewport.copy(camera2.viewport));\n\t\t\t\t\t\t\tcurrentRenderState.setupLightsView(camera2);\n\t\t\t\t\t\t\trenderObject(object, scene, camera2, geometry, material, group);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\trenderObject(object, scene, camera, geometry, material, group);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction renderObject(object, scene, camera, geometry, material, group) {\n\t\t\tobject.onBeforeRender(_this, scene, camera, geometry, material, group);\n\t\t\tobject.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n\t\t\tobject.normalMatrix.getNormalMatrix(object.modelViewMatrix);\n\n\t\t\tif (object.isImmediateRenderObject) {\n\t\t\t\tvar program = setProgram(camera, scene, material, object);\n\t\t\t\tstate.setMaterial(material);\n\t\t\t\tbindingStates.reset();\n\t\t\t\trenderObjectImmediate(object, program);\n\t\t\t} else {\n\t\t\t\t_this.renderBufferDirect(camera, scene, geometry, material, object, group);\n\t\t\t}\n\n\t\t\tobject.onAfterRender(_this, scene, camera, geometry, material, group);\n\t\t}\n\n\t\tfunction initMaterial(material, scene, object) {\n\t\t\tif (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\tvar materialProperties = properties.get(material);\n\t\t\tvar lights = currentRenderState.state.lights;\n\t\t\tvar shadowsArray = currentRenderState.state.shadowsArray;\n\t\t\tvar lightsStateVersion = lights.state.version;\n\t\t\tvar parameters = programCache.getParameters(material, lights.state, shadowsArray, scene, object);\n\t\t\tvar programCacheKey = programCache.getProgramCacheKey(parameters);\n\t\t\tvar program = materialProperties.program;\n\t\t\tvar programChange = true; // always update environment and fog - changing these trigger an initMaterial call, but it's possible that the program doesn't change\n\n\t\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tmaterialProperties.fog = scene.fog;\n\t\t\tmaterialProperties.envMap = cubemaps.get(material.envMap || materialProperties.environment);\n\n\t\t\tif (program === undefined) {\n\t\t\t\t// new material\n\t\t\t\tmaterial.addEventListener('dispose', onMaterialDispose);\n\t\t\t} else if (program.cacheKey !== programCacheKey) {\n\t\t\t\t// changed glsl or parameters\n\t\t\t\treleaseMaterialProgramReference(material);\n\t\t\t} else if (materialProperties.lightsStateVersion !== lightsStateVersion) {\n\t\t\t\tprogramChange = false;\n\t\t\t} else if (parameters.shaderID !== undefined) {\n\t\t\t\t// same glsl and uniform list\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\t// only rebuild uniform list\n\t\t\t\tprogramChange = false;\n\t\t\t}\n\n\t\t\tif (programChange) {\n\t\t\t\tparameters.uniforms = programCache.getUniforms(material);\n\t\t\t\tmaterial.onBeforeCompile(parameters, _this);\n\t\t\t\tprogram = programCache.acquireProgram(parameters, programCacheKey);\n\t\t\t\tmaterialProperties.program = program;\n\t\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\t\t\t\tmaterialProperties.outputEncoding = parameters.outputEncoding;\n\t\t\t}\n\n\t\t\tvar uniforms = materialProperties.uniforms;\n\n\t\t\tif (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {\n\t\t\t\tmaterialProperties.numClippingPlanes = clipping.numPlanes;\n\t\t\t\tmaterialProperties.numIntersection = clipping.numIntersection;\n\t\t\t\tuniforms.clippingPlanes = clipping.uniform;\n\t\t\t} // store the light setup it was created for\n\n\n\t\t\tmaterialProperties.needsLights = materialNeedsLights(material);\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\tif (materialProperties.needsLights) {\n\t\t\t\t// wire up the material to this renderer's lighting state\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\t\tuniforms.directionalLightShadows.value = lights.state.directionalShadow;\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\t\tuniforms.spotLightShadows.value = lights.state.spotShadow;\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\t\tuniforms.ltc_1.value = lights.state.rectAreaLTC1;\n\t\t\t\tuniforms.ltc_2.value = lights.state.rectAreaLTC2;\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\t\tuniforms.pointLightShadows.value = lights.state.pointShadow;\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix; // TODO (abelnation): add area lights shadow info to uniforms\n\t\t\t}\n\n\t\t\tvar progUniforms = materialProperties.program.getUniforms();\n\t\t\tvar uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);\n\t\t\tmaterialProperties.uniformsList = uniformsList;\n\t\t}\n\n\t\tfunction setProgram(camera, scene, material, object) {\n\t\t\tif (scene.isScene !== true) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\ttextures.resetTextureUnits();\n\t\t\tvar fog = scene.fog;\n\t\t\tvar environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tvar encoding = _currentRenderTarget === null ? _this.outputEncoding : _currentRenderTarget.texture.encoding;\n\t\t\tvar envMap = cubemaps.get(material.envMap || environment);\n\t\t\tvar materialProperties = properties.get(material);\n\t\t\tvar lights = currentRenderState.state.lights;\n\n\t\t\tif (_clippingEnabled === true) {\n\t\t\t\tif (_localClippingEnabled === true || camera !== _currentCamera) {\n\t\t\t\t\tvar useCache = camera === _currentCamera && material.id === _currentMaterialId; // we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\n\t\t\t\t\tclipping.setState(material, camera, useCache);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (material.version === materialProperties.__version) {\n\t\t\t\tif (material.fog && materialProperties.fog !== fog) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t} else if (materialProperties.environment !== environment) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t} else if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights.state.version) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t} else if (materialProperties.numClippingPlanes !== undefined && (materialProperties.numClippingPlanes !== clipping.numPlanes || materialProperties.numIntersection !== clipping.numIntersection)) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t} else if (materialProperties.outputEncoding !== encoding) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t} else if (materialProperties.envMap !== envMap) {\n\t\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tinitMaterial(material, scene, object);\n\t\t\t\tmaterialProperties.__version = material.version;\n\t\t\t}\n\n\t\t\tvar refreshProgram = false;\n\t\t\tvar refreshMaterial = false;\n\t\t\tvar refreshLights = false;\n\t\t\tvar program = materialProperties.program,\n\t\t\t\t\tp_uniforms = program.getUniforms(),\n\t\t\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\t\tif (state.useProgram(program.program)) {\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\t\t\t}\n\n\t\t\tif (material.id !== _currentMaterialId) {\n\t\t\t\t_currentMaterialId = material.id;\n\t\t\t\trefreshMaterial = true;\n\t\t\t}\n\n\t\t\tif (refreshProgram || _currentCamera !== camera) {\n\t\t\t\tp_uniforms.setValue(_gl, 'projectionMatrix', camera.projectionMatrix);\n\n\t\t\t\tif (capabilities.logarithmicDepthBuffer) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'logDepthBufFC', 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));\n\t\t\t\t}\n\n\t\t\t\tif (_currentCamera !== camera) {\n\t\t\t\t\t_currentCamera = camera; // lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true; // set to true on material change\n\n\t\t\t\t\trefreshLights = true; // remains set until update done\n\t\t\t\t} // load material specific uniforms\n\t\t\t\t// (shader material also gets them for the sake of genericity)\n\n\n\t\t\t\tif (material.isShaderMaterial || material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshStandardMaterial || material.envMap) {\n\t\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\t\tif (uCamPos !== undefined) {\n\t\t\t\t\t\tuCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'isOrthographic', camera.isOrthographicCamera === true);\n\t\t\t\t}\n\n\t\t\t\tif (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial || material.isShadowMaterial || material.skinning) {\n\t\t\t\t\tp_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);\n\t\t\t\t}\n\t\t\t} // skinning uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone texture must go before other textures\n\t\t\t// otherwise textures used for skinning can take over texture units reserved for other material textures\n\n\n\t\t\tif (material.skinning) {\n\t\t\t\tp_uniforms.setOptional(_gl, object, 'bindMatrix');\n\t\t\t\tp_uniforms.setOptional(_gl, object, 'bindMatrixInverse');\n\t\t\t\tvar skeleton = object.skeleton;\n\n\t\t\t\tif (skeleton) {\n\t\t\t\t\tvar bones = skeleton.bones;\n\n\t\t\t\t\tif (capabilities.floatVertexTextures) {\n\t\t\t\t\t\tif (skeleton.boneTexture === null) {\n\t\t\t\t\t\t\t// layout (1 matrix = 4 pixels)\n\t\t\t\t\t\t\t//\t\t\tRGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t\t\t\t\t\t//\twith\t8x8\tpixel texture max\t 16 bones * 4 pixels =\t(8 * 8)\n\t\t\t\t\t\t\t//\t\t\t 16x16 pixel texture max\t 64 bones * 4 pixels = (16 * 16)\n\t\t\t\t\t\t\t//\t\t\t 32x32 pixel texture max\t256 bones * 4 pixels = (32 * 32)\n\t\t\t\t\t\t\t//\t\t\t 64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\t\t\t\t\t\t\tvar size = Math.sqrt(bones.length * 4); // 4 pixels needed for 1 matrix\n\n\t\t\t\t\t\t\tsize = MathUtils.ceilPowerOfTwo(size);\n\t\t\t\t\t\t\tsize = Math.max(size, 4);\n\t\t\t\t\t\t\tvar boneMatrices = new Float32Array(size * size * 4); // 4 floats per RGBA pixel\n\n\t\t\t\t\t\t\tboneMatrices.set(skeleton.boneMatrices); // copy current values\n\n\t\t\t\t\t\t\tvar boneTexture = new DataTexture(boneMatrices, size, size, RGBAFormat, FloatType);\n\t\t\t\t\t\t\tskeleton.boneMatrices = boneMatrices;\n\t\t\t\t\t\t\tskeleton.boneTexture = boneTexture;\n\t\t\t\t\t\t\tskeleton.boneTextureSize = size;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tp_uniforms.setValue(_gl, 'boneTexture', skeleton.boneTexture, textures);\n\t\t\t\t\t\tp_uniforms.setValue(_gl, 'boneTextureSize', skeleton.boneTextureSize);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tp_uniforms.setOptional(_gl, skeleton, 'boneMatrices');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow) {\n\t\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\t\tp_uniforms.setValue(_gl, 'receiveShadow', object.receiveShadow);\n\t\t\t}\n\n\t\t\tif (refreshMaterial) {\n\t\t\t\tp_uniforms.setValue(_gl, 'toneMappingExposure', _this.toneMappingExposure);\n\n\t\t\t\tif (materialProperties.needsLights) {\n\t\t\t\t\t// the current material requires lighting info\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate(m_uniforms, refreshLights);\n\t\t\t\t} // refresh uniforms common to several materials\n\n\n\t\t\t\tif (fog && material.fog) {\n\t\t\t\t\tmaterials.refreshFogUniforms(m_uniforms, fog);\n\t\t\t\t}\n\n\t\t\t\tmaterials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height);\n\t\t\t\tWebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n\t\t\t}\n\n\t\t\tif (material.isShaderMaterial && material.uniformsNeedUpdate === true) {\n\t\t\t\tWebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, textures);\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\n\t\t\t}\n\n\t\t\tif (material.isSpriteMaterial) {\n\t\t\t\tp_uniforms.setValue(_gl, 'center', object.center);\n\t\t\t} // common matrices\n\n\n\t\t\tp_uniforms.setValue(_gl, 'modelViewMatrix', object.modelViewMatrix);\n\t\t\tp_uniforms.setValue(_gl, 'normalMatrix', object.normalMatrix);\n\t\t\tp_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld);\n\t\t\treturn program;\n\t\t} // If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\n\t\tfunction markUniformsLightsNeedsUpdate(uniforms, value) {\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\t\tuniforms.lightProbe.needsUpdate = value;\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.directionalLightShadows.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.pointLightShadows.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.spotLightShadows.needsUpdate = value;\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\t\t}\n\n\t\tfunction materialNeedsLights(material) {\n\t\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;\n\t\t} //\n\n\n\t\tthis.setFramebuffer = function (value) {\n\t\t\tif (_framebuffer !== value && _currentRenderTarget === null) _gl.bindFramebuffer(36160, value);\n\t\t\t_framebuffer = value;\n\t\t};\n\n\t\tthis.getActiveCubeFace = function () {\n\t\t\treturn _currentActiveCubeFace;\n\t\t};\n\n\t\tthis.getActiveMipmapLevel = function () {\n\t\t\treturn _currentActiveMipmapLevel;\n\t\t};\n\n\t\tthis.getRenderTarget = function () {\n\t\t\treturn _currentRenderTarget;\n\t\t};\n\n\t\tthis.setRenderTarget = function (renderTarget, activeCubeFace, activeMipmapLevel) {\n\t\t\tif (activeCubeFace === void 0) {\n\t\t\t\tactiveCubeFace = 0;\n\t\t\t}\n\n\t\t\tif (activeMipmapLevel === void 0) {\n\t\t\t\tactiveMipmapLevel = 0;\n\t\t\t}\n\n\t\t\t_currentRenderTarget = renderTarget;\n\t\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\t\tif (renderTarget && properties.get(renderTarget).__webglFramebuffer === undefined) {\n\t\t\t\ttextures.setupRenderTarget(renderTarget);\n\t\t\t}\n\n\t\t\tvar framebuffer = _framebuffer;\n\t\t\tvar isCube = false;\n\t\t\tvar isRenderTarget3D = false;\n\n\t\t\tif (renderTarget) {\n\t\t\t\tvar texture = renderTarget.texture;\n\n\t\t\t\tif (texture.isDataTexture3D || texture.isDataTexture2DArray) {\n\t\t\t\t\tisRenderTarget3D = true;\n\t\t\t\t}\n\n\t\t\t\tvar __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n\t\t\t\tif (renderTarget.isWebGLCubeRenderTarget) {\n\t\t\t\t\tframebuffer = __webglFramebuffer[activeCubeFace];\n\t\t\t\t\tisCube = true;\n\t\t\t\t} else if (renderTarget.isWebGLMultisampleRenderTarget) {\n\t\t\t\t\tframebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;\n\t\t\t\t} else {\n\t\t\t\t\tframebuffer = __webglFramebuffer;\n\t\t\t\t}\n\n\t\t\t\t_currentViewport.copy(renderTarget.viewport);\n\n\t\t\t\t_currentScissor.copy(renderTarget.scissor);\n\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\t\t\t} else {\n\t\t\t\t_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio).floor();\n\n\t\t\t\t_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();\n\n\t\t\t\t_currentScissorTest = _scissorTest;\n\t\t\t}\n\n\t\t\tif (_currentFramebuffer !== framebuffer) {\n\t\t\t\t_gl.bindFramebuffer(36160, framebuffer);\n\n\t\t\t\t_currentFramebuffer = framebuffer;\n\t\t\t}\n\n\t\t\tstate.viewport(_currentViewport);\n\t\t\tstate.scissor(_currentScissor);\n\t\t\tstate.setScissorTest(_currentScissorTest);\n\n\t\t\tif (isCube) {\n\t\t\t\tvar textureProperties = properties.get(renderTarget.texture);\n\n\t\t\t\t_gl.framebufferTexture2D(36160, 36064, 34069 + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);\n\t\t\t} else if (isRenderTarget3D) {\n\t\t\t\tvar _textureProperties = properties.get(renderTarget.texture);\n\n\t\t\t\tvar layer = activeCubeFace || 0;\n\n\t\t\t\t_gl.framebufferTextureLayer(36160, 36064, _textureProperties.__webglTexture, activeMipmapLevel || 0, layer);\n\t\t\t}\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function (renderTarget, x, y, width, height, buffer, activeCubeFaceIndex) {\n\t\t\tif (!(renderTarget && renderTarget.isWebGLRenderTarget)) {\n\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar framebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n\t\t\tif (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined) {\n\t\t\t\tframebuffer = framebuffer[activeCubeFaceIndex];\n\t\t\t}\n\n\t\t\tif (framebuffer) {\n\t\t\t\tvar restore = false;\n\n\t\t\t\tif (framebuffer !== _currentFramebuffer) {\n\t\t\t\t\t_gl.bindFramebuffer(36160, framebuffer);\n\n\t\t\t\t\trestore = true;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tvar texture = renderTarget.texture;\n\t\t\t\t\tvar textureFormat = texture.format;\n\t\t\t\t\tvar textureType = texture.type;\n\n\t\t\t\t\tif (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== _gl.getParameter(35739)) {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar halfFloatSupportedByExt = textureType === HalfFloatType && (extensions.has('EXT_color_buffer_half_float') || capabilities.isWebGL2 && extensions.has('EXT_color_buffer_float'));\n\n\t\t\t\t\tif (textureType !== UnsignedByteType && utils.convert(textureType) !== _gl.getParameter(35738) && // Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t!(textureType === FloatType && (capabilities.isWebGL2 || extensions.has('OES_texture_float') || extensions.has('WEBGL_color_buffer_float'))) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t!halfFloatSupportedByExt) {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (_gl.checkFramebufferStatus(36160) === 36053) {\n\t\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\t\t\t\t\t\tif (x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height) {\n\t\t\t\t\t\t\t_gl.readPixels(x, y, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.');\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (restore) {\n\t\t\t\t\t\t_gl.bindFramebuffer(36160, _currentFramebuffer);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.copyFramebufferToTexture = function (position, texture, level) {\n\t\t\tif (level === void 0) {\n\t\t\t\tlevel = 0;\n\t\t\t}\n\n\t\t\tvar levelScale = Math.pow(2, -level);\n\t\t\tvar width = Math.floor(texture.image.width * levelScale);\n\t\t\tvar height = Math.floor(texture.image.height * levelScale);\n\t\t\tvar glFormat = utils.convert(texture.format);\n\t\t\ttextures.setTexture2D(texture, 0);\n\n\t\t\t_gl.copyTexImage2D(3553, level, glFormat, position.x, position.y, width, height, 0);\n\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.copyTextureToTexture = function (position, srcTexture, dstTexture, level) {\n\t\t\tif (level === void 0) {\n\t\t\t\tlevel = 0;\n\t\t\t}\n\n\t\t\tvar width = srcTexture.image.width;\n\t\t\tvar height = srcTexture.image.height;\n\t\t\tvar glFormat = utils.convert(dstTexture.format);\n\t\t\tvar glType = utils.convert(dstTexture.type);\n\t\t\ttextures.setTexture2D(dstTexture, 0); // As another texture upload may have changed pixelStorei\n\t\t\t// parameters, make sure they are correct for the dstTexture\n\n\t\t\t_gl.pixelStorei(37440, dstTexture.flipY);\n\n\t\t\t_gl.pixelStorei(37441, dstTexture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(3317, dstTexture.unpackAlignment);\n\n\t\t\tif (srcTexture.isDataTexture) {\n\t\t\t\t_gl.texSubImage2D(3553, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data);\n\t\t\t} else {\n\t\t\t\tif (srcTexture.isCompressedTexture) {\n\t\t\t\t\t_gl.compressedTexSubImage2D(3553, level, position.x, position.y, srcTexture.mipmaps[0].width, srcTexture.mipmaps[0].height, glFormat, srcTexture.mipmaps[0].data);\n\t\t\t\t} else {\n\t\t\t\t\t_gl.texSubImage2D(3553, level, position.x, position.y, glFormat, glType, srcTexture.image);\n\t\t\t\t}\n\t\t\t} // Generate mipmaps only when copying level 0\n\n\n\t\t\tif (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(3553);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.copyTextureToTexture3D = function (sourceBox, position, srcTexture, dstTexture, level) {\n\t\t\tif (level === void 0) {\n\t\t\t\tlevel = 0;\n\t\t\t}\n\n\t\t\tif (_this.isWebGL1Renderer) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar _srcTexture$image = srcTexture.image,\n\t\t\t\t\twidth = _srcTexture$image.width,\n\t\t\t\t\theight = _srcTexture$image.height,\n\t\t\t\t\tdata = _srcTexture$image.data;\n\t\t\tvar glFormat = utils.convert(dstTexture.format);\n\t\t\tvar glType = utils.convert(dstTexture.type);\n\t\t\tvar glTarget;\n\n\t\t\tif (dstTexture.isDataTexture3D) {\n\t\t\t\ttextures.setTexture3D(dstTexture, 0);\n\t\t\t\tglTarget = 32879;\n\t\t\t} else if (dstTexture.isDataTexture2DArray) {\n\t\t\t\ttextures.setTexture2DArray(dstTexture, 0);\n\t\t\t\tglTarget = 35866;\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_gl.pixelStorei(37440, dstTexture.flipY);\n\n\t\t\t_gl.pixelStorei(37441, dstTexture.premultiplyAlpha);\n\n\t\t\t_gl.pixelStorei(3317, dstTexture.unpackAlignment);\n\n\t\t\tvar unpackRowLen = _gl.getParameter(3314);\n\n\t\t\tvar unpackImageHeight = _gl.getParameter(32878);\n\n\t\t\tvar unpackSkipPixels = _gl.getParameter(3316);\n\n\t\t\tvar unpackSkipRows = _gl.getParameter(3315);\n\n\t\t\tvar unpackSkipImages = _gl.getParameter(32877);\n\n\t\t\t_gl.pixelStorei(3314, width);\n\n\t\t\t_gl.pixelStorei(32878, height);\n\n\t\t\t_gl.pixelStorei(3316, sourceBox.min.x);\n\n\t\t\t_gl.pixelStorei(3315, sourceBox.min.y);\n\n\t\t\t_gl.pixelStorei(32877, sourceBox.min.z);\n\n\t\t\t_gl.texSubImage3D(glTarget, level, position.x, position.y, position.z, sourceBox.max.x - sourceBox.min.x + 1, sourceBox.max.y - sourceBox.min.y + 1, sourceBox.max.z - sourceBox.min.z + 1, glFormat, glType, data);\n\n\t\t\t_gl.pixelStorei(3314, unpackRowLen);\n\n\t\t\t_gl.pixelStorei(32878, unpackImageHeight);\n\n\t\t\t_gl.pixelStorei(3316, unpackSkipPixels);\n\n\t\t\t_gl.pixelStorei(3315, unpackSkipRows);\n\n\t\t\t_gl.pixelStorei(32877, unpackSkipImages); // Generate mipmaps only when copying level 0\n\n\n\t\t\tif (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(glTarget);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.initTexture = function (texture) {\n\t\t\ttextures.setTexture2D(texture, 0);\n\t\t\tstate.unbindTexture();\n\t\t};\n\n\t\tthis.resetState = function () {\n\t\t\tstate.reset();\n\t\t\tbindingStates.reset();\n\t\t};\n\n\t\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n\t\t\t\tdetail: this\n\t\t\t})); // eslint-disable-line no-undef\n\n\t\t}\n\t}\n\n\tvar WebGL1Renderer = /*#__PURE__*/function (_WebGLRenderer) {\n\t\t_inheritsLoose(WebGL1Renderer, _WebGLRenderer);\n\n\t\tfunction WebGL1Renderer() {\n\t\t\treturn _WebGLRenderer.apply(this, arguments) || this;\n\t\t}\n\n\t\treturn WebGL1Renderer;\n\t}(WebGLRenderer);\n\n\tWebGL1Renderer.prototype.isWebGL1Renderer = true;\n\n\tvar FogExp2 = /*#__PURE__*/function () {\n\t\tfunction FogExp2(color, density) {\n\t\t\tthis.name = '';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.density = density !== undefined ? density : 0.00025;\n\t\t}\n\n\t\tvar _proto = FogExp2.prototype;\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new FogExp2(this.color, this.density);\n\t\t};\n\n\t\t_proto.toJSON = function toJSON()\n\t\t/* meta */\n\t\t{\n\t\t\treturn {\n\t\t\t\ttype: 'FogExp2',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tdensity: this.density\n\t\t\t};\n\t\t};\n\n\t\treturn FogExp2;\n\t}();\n\n\tFogExp2.prototype.isFogExp2 = true;\n\n\tvar Fog = /*#__PURE__*/function () {\n\t\tfunction Fog(color, near, far) {\n\t\t\tthis.name = '';\n\t\t\tthis.color = new Color(color);\n\t\t\tthis.near = near !== undefined ? near : 1;\n\t\t\tthis.far = far !== undefined ? far : 1000;\n\t\t}\n\n\t\tvar _proto = Fog.prototype;\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new Fog(this.color, this.near, this.far);\n\t\t};\n\n\t\t_proto.toJSON = function toJSON()\n\t\t/* meta */\n\t\t{\n\t\t\treturn {\n\t\t\t\ttype: 'Fog',\n\t\t\t\tcolor: this.color.getHex(),\n\t\t\t\tnear: this.near,\n\t\t\t\tfar: this.far\n\t\t\t};\n\t\t};\n\n\t\treturn Fog;\n\t}();\n\n\tFog.prototype.isFog = true;\n\n\tvar Scene = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(Scene, _Object3D);\n\n\t\tfunction Scene() {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.type = 'Scene';\n\t\t\t_this.background = null;\n\t\t\t_this.environment = null;\n\t\t\t_this.fog = null;\n\t\t\t_this.overrideMaterial = null;\n\t\t\t_this.autoUpdate = true; // checked by the renderer\n\n\t\t\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('observe', {\n\t\t\t\t\tdetail: _assertThisInitialized(_this)\n\t\t\t\t})); // eslint-disable-line no-undef\n\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = Scene.prototype;\n\n\t\t_proto.copy = function copy(source, recursive) {\n\t\t\t_Object3D.prototype.copy.call(this, source, recursive);\n\n\t\t\tif (source.background !== null) this.background = source.background.clone();\n\t\t\tif (source.environment !== null) this.environment = source.environment.clone();\n\t\t\tif (source.fog !== null) this.fog = source.fog.clone();\n\t\t\tif (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON(meta) {\n\t\t\tvar data = _Object3D.prototype.toJSON.call(this, meta);\n\n\t\t\tif (this.background !== null) data.object.background = this.background.toJSON(meta);\n\t\t\tif (this.environment !== null) data.object.environment = this.environment.toJSON(meta);\n\t\t\tif (this.fog !== null) data.object.fog = this.fog.toJSON();\n\t\t\treturn data;\n\t\t};\n\n\t\treturn Scene;\n\t}(Object3D);\n\n\tScene.prototype.isScene = true;\n\n\tfunction InterleavedBuffer(array, stride) {\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = {\n\t\t\toffset: 0,\n\t\t\tcount: -1\n\t\t};\n\t\tthis.version = 0;\n\t\tthis.uuid = MathUtils.generateUUID();\n\t}\n\n\tObject.defineProperty(InterleavedBuffer.prototype, 'needsUpdate', {\n\t\tset: function set(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\tObject.assign(InterleavedBuffer.prototype, {\n\t\tisInterleavedBuffer: true,\n\t\tonUploadCallback: function onUploadCallback() {},\n\t\tsetUsage: function setUsage(value) {\n\t\t\tthis.usage = value;\n\t\t\treturn this;\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.array = new source.array.constructor(source.array);\n\t\t\tthis.count = source.count;\n\t\t\tthis.stride = source.stride;\n\t\t\tthis.usage = source.usage;\n\t\t\treturn this;\n\t\t},\n\t\tcopyAt: function copyAt(index1, attribute, index2) {\n\t\t\tindex1 *= this.stride;\n\t\t\tindex2 *= attribute.stride;\n\n\t\t\tfor (var i = 0, l = this.stride; i < l; i++) {\n\t\t\t\tthis.array[index1 + i] = attribute.array[index2 + i];\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tset: function set(value, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tthis.array.set(value, offset);\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone(data) {\n\t\t\tif (data.arrayBuffers === undefined) {\n\t\t\t\tdata.arrayBuffers = {};\n\t\t\t}\n\n\t\t\tif (this.array.buffer._uuid === undefined) {\n\t\t\t\tthis.array.buffer._uuid = MathUtils.generateUUID();\n\t\t\t}\n\n\t\t\tif (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n\t\t\t\tdata.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;\n\t\t\t}\n\n\t\t\tvar array = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);\n\t\t\tvar ib = new InterleavedBuffer(array, this.stride);\n\t\t\tib.setUsage(this.usage);\n\t\t\treturn ib;\n\t\t},\n\t\tonUpload: function onUpload(callback) {\n\t\t\tthis.onUploadCallback = callback;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON(data) {\n\t\t\tif (data.arrayBuffers === undefined) {\n\t\t\t\tdata.arrayBuffers = {};\n\t\t\t} // generate UUID for array buffer if necessary\n\n\n\t\t\tif (this.array.buffer._uuid === undefined) {\n\t\t\t\tthis.array.buffer._uuid = MathUtils.generateUUID();\n\t\t\t}\n\n\t\t\tif (data.arrayBuffers[this.array.buffer._uuid] === undefined) {\n\t\t\t\tdata.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer));\n\t\t\t} //\n\n\n\t\t\treturn {\n\t\t\t\tuuid: this.uuid,\n\t\t\t\tbuffer: this.array.buffer._uuid,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tstride: this.stride\n\t\t\t};\n\t\t}\n\t});\n\n\tvar _vector$6 = new Vector3();\n\n\tfunction InterleavedBufferAttribute(interleavedBuffer, itemSize, offset, normalized) {\n\t\tthis.name = '';\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\t\tthis.normalized = normalized === true;\n\t}\n\n\tObject.defineProperties(InterleavedBufferAttribute.prototype, {\n\t\tcount: {\n\t\t\tget: function get() {\n\t\t\t\treturn this.data.count;\n\t\t\t}\n\t\t},\n\t\tarray: {\n\t\t\tget: function get() {\n\t\t\t\treturn this.data.array;\n\t\t\t}\n\t\t},\n\t\tneedsUpdate: {\n\t\t\tset: function set(value) {\n\t\t\t\tthis.data.needsUpdate = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.assign(InterleavedBufferAttribute.prototype, {\n\t\tisInterleavedBufferAttribute: true,\n\t\tapplyMatrix4: function applyMatrix4(m) {\n\t\t\tfor (var i = 0, l = this.data.count; i < l; i++) {\n\t\t\t\t_vector$6.x = this.getX(i);\n\t\t\t\t_vector$6.y = this.getY(i);\n\t\t\t\t_vector$6.z = this.getZ(i);\n\n\t\t\t\t_vector$6.applyMatrix4(m);\n\n\t\t\t\tthis.setXYZ(i, _vector$6.x, _vector$6.y, _vector$6.z);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\tsetX: function setX(index, x) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset] = x;\n\t\t\treturn this;\n\t\t},\n\t\tsetY: function setY(index, y) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 1] = y;\n\t\t\treturn this;\n\t\t},\n\t\tsetZ: function setZ(index, z) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 2] = z;\n\t\t\treturn this;\n\t\t},\n\t\tsetW: function setW(index, w) {\n\t\t\tthis.data.array[index * this.data.stride + this.offset + 3] = w;\n\t\t\treturn this;\n\t\t},\n\t\tgetX: function getX(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset];\n\t\t},\n\t\tgetY: function getY(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 1];\n\t\t},\n\t\tgetZ: function getZ(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 2];\n\t\t},\n\t\tgetW: function getW(index) {\n\t\t\treturn this.data.array[index * this.data.stride + this.offset + 3];\n\t\t},\n\t\tsetXY: function setXY(index, x, y) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\treturn this;\n\t\t},\n\t\tsetXYZ: function setXYZ(index, x, y, z) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\tthis.data.array[index + 2] = z;\n\t\t\treturn this;\n\t\t},\n\t\tsetXYZW: function setXYZW(index, x, y, z, w) {\n\t\t\tindex = index * this.data.stride + this.offset;\n\t\t\tthis.data.array[index + 0] = x;\n\t\t\tthis.data.array[index + 1] = y;\n\t\t\tthis.data.array[index + 2] = z;\n\t\t\tthis.data.array[index + 3] = w;\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone(data) {\n\t\t\tif (data === undefined) {\n\t\t\t\tconsole.log('THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.');\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor (var i = 0; i < this.count; i++) {\n\t\t\t\t\tvar index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor (var j = 0; j < this.itemSize; j++) {\n\t\t\t\t\t\tarray.push(this.data.array[index + j]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn new BufferAttribute(new this.array.constructor(array), this.itemSize, this.normalized);\n\t\t\t} else {\n\t\t\t\tif (data.interleavedBuffers === undefined) {\n\t\t\t\t\tdata.interleavedBuffers = {};\n\t\t\t\t}\n\n\t\t\t\tif (data.interleavedBuffers[this.data.uuid] === undefined) {\n\t\t\t\t\tdata.interleavedBuffers[this.data.uuid] = this.data.clone(data);\n\t\t\t\t}\n\n\t\t\t\treturn new InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);\n\t\t\t}\n\t\t},\n\t\ttoJSON: function toJSON(data) {\n\t\t\tif (data === undefined) {\n\t\t\t\tconsole.log('THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.');\n\t\t\t\tvar array = [];\n\n\t\t\t\tfor (var i = 0; i < this.count; i++) {\n\t\t\t\t\tvar index = i * this.data.stride + this.offset;\n\n\t\t\t\t\tfor (var j = 0; j < this.itemSize; j++) {\n\t\t\t\t\t\tarray.push(this.data.array[index + j]);\n\t\t\t\t\t}\n\t\t\t\t} // deinterleave data and save it as an ordinary buffer attribute for now\n\n\n\t\t\t\treturn {\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\t\tarray: array,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\t// save as true interlaved attribtue\n\t\t\t\tif (data.interleavedBuffers === undefined) {\n\t\t\t\t\tdata.interleavedBuffers = {};\n\t\t\t\t}\n\n\t\t\t\tif (data.interleavedBuffers[this.data.uuid] === undefined) {\n\t\t\t\t\tdata.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tisInterleavedBufferAttribute: true,\n\t\t\t\t\titemSize: this.itemSize,\n\t\t\t\t\tdata: this.data.uuid,\n\t\t\t\t\toffset: this.offset,\n\t\t\t\t\tnormalized: this.normalized\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\trotation: <float>,\n\t *\tsizeAttenuation: <bool>\n\t * }\n\t */\n\n\tvar SpriteMaterial = /*#__PURE__*/function (_Material) {\n\t\t_inheritsLoose(SpriteMaterial, _Material);\n\n\t\tfunction SpriteMaterial(parameters) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Material.call(this) || this;\n\t\t\t_this.type = 'SpriteMaterial';\n\t\t\t_this.color = new Color(0xffffff);\n\t\t\t_this.map = null;\n\t\t\t_this.alphaMap = null;\n\t\t\t_this.rotation = 0;\n\t\t\t_this.sizeAttenuation = true;\n\t\t\t_this.transparent = true;\n\n\t\t\t_this.setValues(parameters);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = SpriteMaterial.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Material.prototype.copy.call(this, source);\n\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.rotation = source.rotation;\n\t\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn SpriteMaterial;\n\t}(Material);\n\n\tSpriteMaterial.prototype.isSpriteMaterial = true;\n\n\tvar _geometry;\n\n\tvar _intersectPoint = /*@__PURE__*/new Vector3();\n\n\tvar _worldScale = /*@__PURE__*/new Vector3();\n\n\tvar _mvPosition = /*@__PURE__*/new Vector3();\n\n\tvar _alignedPosition = /*@__PURE__*/new Vector2();\n\n\tvar _rotatedPosition = /*@__PURE__*/new Vector2();\n\n\tvar _viewWorldMatrix = /*@__PURE__*/new Matrix4();\n\n\tvar _vA$1 = /*@__PURE__*/new Vector3();\n\n\tvar _vB$1 = /*@__PURE__*/new Vector3();\n\n\tvar _vC$1 = /*@__PURE__*/new Vector3();\n\n\tvar _uvA$1 = /*@__PURE__*/new Vector2();\n\n\tvar _uvB$1 = /*@__PURE__*/new Vector2();\n\n\tvar _uvC$1 = /*@__PURE__*/new Vector2();\n\n\tvar Sprite = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(Sprite, _Object3D);\n\n\t\tfunction Sprite(material) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.type = 'Sprite';\n\n\t\t\tif (_geometry === undefined) {\n\t\t\t\t_geometry = new BufferGeometry();\n\t\t\t\tvar float32Array = new Float32Array([-0.5, -0.5, 0, 0, 0, 0.5, -0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, -0.5, 0.5, 0, 0, 1]);\n\t\t\t\tvar interleavedBuffer = new InterleavedBuffer(float32Array, 5);\n\n\t\t\t\t_geometry.setIndex([0, 1, 2, 0, 2, 3]);\n\n\t\t\t\t_geometry.setAttribute('position', new InterleavedBufferAttribute(interleavedBuffer, 3, 0, false));\n\n\t\t\t\t_geometry.setAttribute('uv', new InterleavedBufferAttribute(interleavedBuffer, 2, 3, false));\n\t\t\t}\n\n\t\t\t_this.geometry = _geometry;\n\t\t\t_this.material = material !== undefined ? material : new SpriteMaterial();\n\t\t\t_this.center = new Vector2(0.5, 0.5);\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = Sprite.prototype;\n\n\t\t_proto.raycast = function raycast(raycaster, intersects) {\n\t\t\tif (raycaster.camera === null) {\n\t\t\t\tconsole.error('THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.');\n\t\t\t}\n\n\t\t\t_worldScale.setFromMatrixScale(this.matrixWorld);\n\n\t\t\t_viewWorldMatrix.copy(raycaster.camera.matrixWorld);\n\n\t\t\tthis.modelViewMatrix.multiplyMatrices(raycaster.camera.matrixWorldInverse, this.matrixWorld);\n\n\t\t\t_mvPosition.setFromMatrixPosition(this.modelViewMatrix);\n\n\t\t\tif (raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false) {\n\t\t\t\t_worldScale.multiplyScalar(-_mvPosition.z);\n\t\t\t}\n\n\t\t\tvar rotation = this.material.rotation;\n\t\t\tvar sin, cos;\n\n\t\t\tif (rotation !== 0) {\n\t\t\t\tcos = Math.cos(rotation);\n\t\t\t\tsin = Math.sin(rotation);\n\t\t\t}\n\n\t\t\tvar center = this.center;\n\t\t\ttransformVertex(_vA$1.set(-0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\t\t\ttransformVertex(_vB$1.set(0.5, -0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\t\t\ttransformVertex(_vC$1.set(0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n\t\t\t_uvA$1.set(0, 0);\n\n\t\t\t_uvB$1.set(1, 0);\n\n\t\t\t_uvC$1.set(1, 1); // check first triangle\n\n\n\t\t\tvar intersect = raycaster.ray.intersectTriangle(_vA$1, _vB$1, _vC$1, false, _intersectPoint);\n\n\t\t\tif (intersect === null) {\n\t\t\t\t// check second triangle\n\t\t\t\ttransformVertex(_vB$1.set(-0.5, 0.5, 0), _mvPosition, center, _worldScale, sin, cos);\n\n\t\t\t\t_uvB$1.set(0, 1);\n\n\t\t\t\tintersect = raycaster.ray.intersectTriangle(_vA$1, _vC$1, _vB$1, false, _intersectPoint);\n\n\t\t\t\tif (intersect === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar distance = raycaster.ray.origin.distanceTo(_intersectPoint);\n\t\t\tif (distance < raycaster.near || distance > raycaster.far) return;\n\t\t\tintersects.push({\n\t\t\t\tdistance: distance,\n\t\t\t\tpoint: _intersectPoint.clone(),\n\t\t\t\tuv: Triangle.getUV(_intersectPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2()),\n\t\t\t\tface: null,\n\t\t\t\tobject: this\n\t\t\t});\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Object3D.prototype.copy.call(this, source);\n\n\t\t\tif (source.center !== undefined) this.center.copy(source.center);\n\t\t\tthis.material = source.material;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Sprite;\n\t}(Object3D);\n\n\tSprite.prototype.isSprite = true;\n\n\tfunction transformVertex(vertexPosition, mvPosition, center, scale, sin, cos) {\n\t\t// compute position in camera space\n\t\t_alignedPosition.subVectors(vertexPosition, center).addScalar(0.5).multiply(scale); // to check if rotation is not zero\n\n\n\t\tif (sin !== undefined) {\n\t\t\t_rotatedPosition.x = cos * _alignedPosition.x - sin * _alignedPosition.y;\n\t\t\t_rotatedPosition.y = sin * _alignedPosition.x + cos * _alignedPosition.y;\n\t\t} else {\n\t\t\t_rotatedPosition.copy(_alignedPosition);\n\t\t}\n\n\t\tvertexPosition.copy(mvPosition);\n\t\tvertexPosition.x += _rotatedPosition.x;\n\t\tvertexPosition.y += _rotatedPosition.y; // transform to world space\n\n\t\tvertexPosition.applyMatrix4(_viewWorldMatrix);\n\t}\n\n\tvar _v1$4 = /*@__PURE__*/new Vector3();\n\n\tvar _v2$2 = /*@__PURE__*/new Vector3();\n\n\tvar LOD = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(LOD, _Object3D);\n\n\t\tfunction LOD() {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this._currentLevel = 0;\n\t\t\t_this.type = 'LOD';\n\t\t\tObject.defineProperties(_assertThisInitialized(_this), {\n\t\t\t\tlevels: {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tvalue: []\n\t\t\t\t},\n\t\t\t\tisLOD: {\n\t\t\t\t\tvalue: true\n\t\t\t\t}\n\t\t\t});\n\t\t\t_this.autoUpdate = true;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = LOD.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Object3D.prototype.copy.call(this, source, false);\n\n\t\t\tvar levels = source.levels;\n\n\t\t\tfor (var i = 0, l = levels.length; i < l; i++) {\n\t\t\t\tvar level = levels[i];\n\t\t\t\tthis.addLevel(level.object.clone(), level.distance);\n\t\t\t}\n\n\t\t\tthis.autoUpdate = source.autoUpdate;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addLevel = function addLevel(object, distance) {\n\t\t\tif (distance === void 0) {\n\t\t\t\tdistance = 0;\n\t\t\t}\n\n\t\t\tdistance = Math.abs(distance);\n\t\t\tvar levels = this.levels;\n\t\t\tvar l;\n\n\t\t\tfor (l = 0; l < levels.length; l++) {\n\t\t\t\tif (distance < levels[l].distance) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlevels.splice(l, 0, {\n\t\t\t\tdistance: distance,\n\t\t\t\tobject: object\n\t\t\t});\n\t\t\tthis.add(object);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getCurrentLevel = function getCurrentLevel() {\n\t\t\treturn this._currentLevel;\n\t\t};\n\n\t\t_proto.getObjectForDistance = function getObjectForDistance(distance) {\n\t\t\tvar levels = this.levels;\n\n\t\t\tif (levels.length > 0) {\n\t\t\t\tvar i, l;\n\n\t\t\t\tfor (i = 1, l = levels.length; i < l; i++) {\n\t\t\t\t\tif (distance < levels[i].distance) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn levels[i - 1].object;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\n\t\t_proto.raycast = function raycast(raycaster, intersects) {\n\t\t\tvar levels = this.levels;\n\n\t\t\tif (levels.length > 0) {\n\t\t\t\t_v1$4.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\t\tvar distance = raycaster.ray.origin.distanceTo(_v1$4);\n\t\t\t\tthis.getObjectForDistance(distance).raycast(raycaster, intersects);\n\t\t\t}\n\t\t};\n\n\t\t_proto.update = function update(camera) {\n\t\t\tvar levels = this.levels;\n\n\t\t\tif (levels.length > 1) {\n\t\t\t\t_v1$4.setFromMatrixPosition(camera.matrixWorld);\n\n\t\t\t\t_v2$2.setFromMatrixPosition(this.matrixWorld);\n\n\t\t\t\tvar distance = _v1$4.distanceTo(_v2$2) / camera.zoom;\n\t\t\t\tlevels[0].object.visible = true;\n\t\t\t\tvar i, l;\n\n\t\t\t\tfor (i = 1, l = levels.length; i < l; i++) {\n\t\t\t\t\tif (distance >= levels[i].distance) {\n\t\t\t\t\t\tlevels[i - 1].object.visible = false;\n\t\t\t\t\t\tlevels[i].object.visible = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._currentLevel = i - 1;\n\n\t\t\t\tfor (; i < l; i++) {\n\t\t\t\t\tlevels[i].object.visible = false;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t_proto.toJSON = function toJSON(meta) {\n\t\t\tvar data = _Object3D.prototype.toJSON.call(this, meta);\n\n\t\t\tif (this.autoUpdate === false) data.object.autoUpdate = false;\n\t\t\tdata.object.levels = [];\n\t\t\tvar levels = this.levels;\n\n\t\t\tfor (var i = 0, l = levels.length; i < l; i++) {\n\t\t\t\tvar level = levels[i];\n\t\t\t\tdata.object.levels.push({\n\t\t\t\t\tobject: level.object.uuid,\n\t\t\t\t\tdistance: level.distance\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn data;\n\t\t};\n\n\t\treturn LOD;\n\t}(Object3D);\n\n\tvar _basePosition = new Vector3();\n\n\tvar _skinIndex = new Vector4();\n\n\tvar _skinWeight = new Vector4();\n\n\tvar _vector$7 = new Vector3();\n\n\tvar _matrix$1 = new Matrix4();\n\n\tfunction SkinnedMesh(geometry, material) {\n\t\tMesh.call(this, geometry, material);\n\t\tthis.type = 'SkinnedMesh';\n\t\tthis.bindMode = 'attached';\n\t\tthis.bindMatrix = new Matrix4();\n\t\tthis.bindMatrixInverse = new Matrix4();\n\t}\n\n\tSkinnedMesh.prototype = Object.assign(Object.create(Mesh.prototype), {\n\t\tconstructor: SkinnedMesh,\n\t\tisSkinnedMesh: true,\n\t\tcopy: function copy(source) {\n\t\t\tMesh.prototype.copy.call(this, source);\n\t\t\tthis.bindMode = source.bindMode;\n\t\t\tthis.bindMatrix.copy(source.bindMatrix);\n\t\t\tthis.bindMatrixInverse.copy(source.bindMatrixInverse);\n\t\t\tthis.skeleton = source.skeleton;\n\t\t\treturn this;\n\t\t},\n\t\tbind: function bind(skeleton, bindMatrix) {\n\t\t\tthis.skeleton = skeleton;\n\n\t\t\tif (bindMatrix === undefined) {\n\t\t\t\tthis.updateMatrixWorld(true);\n\t\t\t\tthis.skeleton.calculateInverses();\n\t\t\t\tbindMatrix = this.matrixWorld;\n\t\t\t}\n\n\t\t\tthis.bindMatrix.copy(bindMatrix);\n\t\t\tthis.bindMatrixInverse.copy(bindMatrix).invert();\n\t\t},\n\t\tpose: function pose() {\n\t\t\tthis.skeleton.pose();\n\t\t},\n\t\tnormalizeSkinWeights: function normalizeSkinWeights() {\n\t\t\tvar vector = new Vector4();\n\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\n\n\t\t\tfor (var i = 0, l = skinWeight.count; i < l; i++) {\n\t\t\t\tvector.x = skinWeight.getX(i);\n\t\t\t\tvector.y = skinWeight.getY(i);\n\t\t\t\tvector.z = skinWeight.getZ(i);\n\t\t\t\tvector.w = skinWeight.getW(i);\n\t\t\t\tvar scale = 1.0 / vector.manhattanLength();\n\n\t\t\t\tif (scale !== Infinity) {\n\t\t\t\t\tvector.multiplyScalar(scale);\n\t\t\t\t} else {\n\t\t\t\t\tvector.set(1, 0, 0, 0); // do something reasonable\n\t\t\t\t}\n\n\t\t\t\tskinWeight.setXYZW(i, vector.x, vector.y, vector.z, vector.w);\n\t\t\t}\n\t\t},\n\t\tupdateMatrixWorld: function updateMatrixWorld(force) {\n\t\t\tMesh.prototype.updateMatrixWorld.call(this, force);\n\n\t\t\tif (this.bindMode === 'attached') {\n\t\t\t\tthis.bindMatrixInverse.copy(this.matrixWorld).invert();\n\t\t\t} else if (this.bindMode === 'detached') {\n\t\t\t\tthis.bindMatrixInverse.copy(this.bindMatrix).invert();\n\t\t\t} else {\n\t\t\t\tconsole.warn('THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode);\n\t\t\t}\n\t\t},\n\t\tboneTransform: function boneTransform(index, target) {\n\t\t\tvar skeleton = this.skeleton;\n\t\t\tvar geometry = this.geometry;\n\n\t\t\t_skinIndex.fromBufferAttribute(geometry.attributes.skinIndex, index);\n\n\t\t\t_skinWeight.fromBufferAttribute(geometry.attributes.skinWeight, index);\n\n\t\t\t_basePosition.fromBufferAttribute(geometry.attributes.position, index).applyMatrix4(this.bindMatrix);\n\n\t\t\ttarget.set(0, 0, 0);\n\n\t\t\tfor (var i = 0; i < 4; i++) {\n\t\t\t\tvar weight = _skinWeight.getComponent(i);\n\n\t\t\t\tif (weight !== 0) {\n\t\t\t\t\tvar boneIndex = _skinIndex.getComponent(i);\n\n\t\t\t\t\t_matrix$1.multiplyMatrices(skeleton.bones[boneIndex].matrixWorld, skeleton.boneInverses[boneIndex]);\n\n\t\t\t\t\ttarget.addScaledVector(_vector$7.copy(_basePosition).applyMatrix4(_matrix$1), weight);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn target.applyMatrix4(this.bindMatrixInverse);\n\t\t}\n\t});\n\n\tfunction Bone() {\n\t\tObject3D.call(this);\n\t\tthis.type = 'Bone';\n\t}\n\n\tBone.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Bone,\n\t\tisBone: true\n\t});\n\n\tvar _offsetMatrix = /*@__PURE__*/new Matrix4();\n\n\tvar _identityMatrix = /*@__PURE__*/new Matrix4();\n\n\tvar Skeleton = /*#__PURE__*/function () {\n\t\tfunction Skeleton(bones, boneInverses) {\n\t\t\tif (bones === void 0) {\n\t\t\t\tbones = [];\n\t\t\t}\n\n\t\t\tif (boneInverses === void 0) {\n\t\t\t\tboneInverses = [];\n\t\t\t}\n\n\t\t\tthis.uuid = MathUtils.generateUUID();\n\t\t\tthis.bones = bones.slice(0);\n\t\t\tthis.boneInverses = boneInverses;\n\t\t\tthis.boneMatrices = null;\n\t\t\tthis.boneTexture = null;\n\t\t\tthis.boneTextureSize = 0;\n\t\t\tthis.frame = -1;\n\t\t\tthis.init();\n\t\t}\n\n\t\tvar _proto = Skeleton.prototype;\n\n\t\t_proto.init = function init() {\n\t\t\tvar bones = this.bones;\n\t\t\tvar boneInverses = this.boneInverses;\n\t\t\tthis.boneMatrices = new Float32Array(bones.length * 16); // calculate inverse bone matrices if necessary\n\n\t\t\tif (boneInverses.length === 0) {\n\t\t\t\tthis.calculateInverses();\n\t\t\t} else {\n\t\t\t\t// handle special case\n\t\t\t\tif (bones.length !== boneInverses.length) {\n\t\t\t\t\tconsole.warn('THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.');\n\t\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\t\tfor (var i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\t\t\tthis.boneInverses.push(new Matrix4());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t_proto.calculateInverses = function calculateInverses() {\n\t\t\tthis.boneInverses.length = 0;\n\n\t\t\tfor (var i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tvar inverse = new Matrix4();\n\n\t\t\t\tif (this.bones[i]) {\n\t\t\t\t\tinverse.copy(this.bones[i].matrixWorld).invert();\n\t\t\t\t}\n\n\t\t\t\tthis.boneInverses.push(inverse);\n\t\t\t}\n\t\t};\n\n\t\t_proto.pose = function pose() {\n\t\t\t// recover the bind-time world matrices\n\t\t\tfor (var i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tvar bone = this.bones[i];\n\n\t\t\t\tif (bone) {\n\t\t\t\t\tbone.matrixWorld.copy(this.boneInverses[i]).invert();\n\t\t\t\t}\n\t\t\t} // compute the local matrices, positions, rotations and scales\n\n\n\t\t\tfor (var _i = 0, _il = this.bones.length; _i < _il; _i++) {\n\t\t\t\tvar _bone = this.bones[_i];\n\n\t\t\t\tif (_bone) {\n\t\t\t\t\tif (_bone.parent && _bone.parent.isBone) {\n\t\t\t\t\t\t_bone.matrix.copy(_bone.parent.matrixWorld).invert();\n\n\t\t\t\t\t\t_bone.matrix.multiply(_bone.matrixWorld);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_bone.matrix.copy(_bone.matrixWorld);\n\t\t\t\t\t}\n\n\t\t\t\t\t_bone.matrix.decompose(_bone.position, _bone.quaternion, _bone.scale);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t_proto.update = function update() {\n\t\t\tvar bones = this.bones;\n\t\t\tvar boneInverses = this.boneInverses;\n\t\t\tvar boneMatrices = this.boneMatrices;\n\t\t\tvar boneTexture = this.boneTexture; // flatten bone matrices to array\n\n\t\t\tfor (var i = 0, il = bones.length; i < il; i++) {\n\t\t\t\t// compute the offset between the current and the original transform\n\t\t\t\tvar matrix = bones[i] ? bones[i].matrixWorld : _identityMatrix;\n\n\t\t\t\t_offsetMatrix.multiplyMatrices(matrix, boneInverses[i]);\n\n\t\t\t\t_offsetMatrix.toArray(boneMatrices, i * 16);\n\t\t\t}\n\n\t\t\tif (boneTexture !== null) {\n\t\t\t\tboneTexture.needsUpdate = true;\n\t\t\t}\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new Skeleton(this.bones, this.boneInverses);\n\t\t};\n\n\t\t_proto.getBoneByName = function getBoneByName(name) {\n\t\t\tfor (var i = 0, il = this.bones.length; i < il; i++) {\n\t\t\t\tvar bone = this.bones[i];\n\n\t\t\t\tif (bone.name === name) {\n\t\t\t\t\treturn bone;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t};\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tif (this.boneTexture !== null) {\n\t\t\t\tthis.boneTexture.dispose();\n\t\t\t\tthis.boneTexture = null;\n\t\t\t}\n\t\t};\n\n\t\t_proto.fromJSON = function fromJSON(json, bones) {\n\t\t\tthis.uuid = json.uuid;\n\n\t\t\tfor (var i = 0, l = json.bones.length; i < l; i++) {\n\t\t\t\tvar uuid = json.bones[i];\n\t\t\t\tvar bone = bones[uuid];\n\n\t\t\t\tif (bone === undefined) {\n\t\t\t\t\tconsole.warn('THREE.Skeleton: No bone found with UUID:', uuid);\n\t\t\t\t\tbone = new Bone();\n\t\t\t\t}\n\n\t\t\t\tthis.bones.push(bone);\n\t\t\t\tthis.boneInverses.push(new Matrix4().fromArray(json.boneInverses[i]));\n\t\t\t}\n\n\t\t\tthis.init();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Skeleton',\n\t\t\t\t\tgenerator: 'Skeleton.toJSON'\n\t\t\t\t},\n\t\t\t\tbones: [],\n\t\t\t\tboneInverses: []\n\t\t\t};\n\t\t\tdata.uuid = this.uuid;\n\t\t\tvar bones = this.bones;\n\t\t\tvar boneInverses = this.boneInverses;\n\n\t\t\tfor (var i = 0, l = bones.length; i < l; i++) {\n\t\t\t\tvar bone = bones[i];\n\t\t\t\tdata.bones.push(bone.uuid);\n\t\t\t\tvar boneInverse = boneInverses[i];\n\t\t\t\tdata.boneInverses.push(boneInverse.toArray());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t};\n\n\t\treturn Skeleton;\n\t}();\n\n\tvar _instanceLocalMatrix = new Matrix4();\n\n\tvar _instanceWorldMatrix = new Matrix4();\n\n\tvar _instanceIntersects = [];\n\n\tvar _mesh = new Mesh();\n\n\tfunction InstancedMesh(geometry, material, count) {\n\t\tMesh.call(this, geometry, material);\n\t\tthis.instanceMatrix = new BufferAttribute(new Float32Array(count * 16), 16);\n\t\tthis.instanceColor = null;\n\t\tthis.count = count;\n\t\tthis.frustumCulled = false;\n\t}\n\n\tInstancedMesh.prototype = Object.assign(Object.create(Mesh.prototype), {\n\t\tconstructor: InstancedMesh,\n\t\tisInstancedMesh: true,\n\t\tcopy: function copy(source) {\n\t\t\tMesh.prototype.copy.call(this, source);\n\t\t\tthis.instanceMatrix.copy(source.instanceMatrix);\n\t\t\tif (source.instanceColor !== null) this.instanceColor = source.instanceColor.clone();\n\t\t\tthis.count = source.count;\n\t\t\treturn this;\n\t\t},\n\t\tgetColorAt: function getColorAt(index, color) {\n\t\t\tcolor.fromArray(this.instanceColor.array, index * 3);\n\t\t},\n\t\tgetMatrixAt: function getMatrixAt(index, matrix) {\n\t\t\tmatrix.fromArray(this.instanceMatrix.array, index * 16);\n\t\t},\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar raycastTimes = this.count;\n\t\t\t_mesh.geometry = this.geometry;\n\t\t\t_mesh.material = this.material;\n\t\t\tif (_mesh.material === undefined) return;\n\n\t\t\tfor (var instanceId = 0; instanceId < raycastTimes; instanceId++) {\n\t\t\t\t// calculate the world matrix for each instance\n\t\t\t\tthis.getMatrixAt(instanceId, _instanceLocalMatrix);\n\n\t\t\t\t_instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix); // the mesh represents this single instance\n\n\n\t\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t\t_mesh.raycast(raycaster, _instanceIntersects); // process the result of raycast\n\n\n\t\t\t\tfor (var i = 0, l = _instanceIntersects.length; i < l; i++) {\n\t\t\t\t\tvar intersect = _instanceIntersects[i];\n\t\t\t\t\tintersect.instanceId = instanceId;\n\t\t\t\t\tintersect.object = this;\n\t\t\t\t\tintersects.push(intersect);\n\t\t\t\t}\n\n\t\t\t\t_instanceIntersects.length = 0;\n\t\t\t}\n\t\t},\n\t\tsetColorAt: function setColorAt(index, color) {\n\t\t\tif (this.instanceColor === null) {\n\t\t\t\tthis.instanceColor = new BufferAttribute(new Float32Array(this.count * 3), 3);\n\t\t\t}\n\n\t\t\tcolor.toArray(this.instanceColor.array, index * 3);\n\t\t},\n\t\tsetMatrixAt: function setMatrixAt(index, matrix) {\n\t\t\tmatrix.toArray(this.instanceMatrix.array, index * 16);\n\t\t},\n\t\tupdateMorphTargets: function updateMorphTargets() {},\n\t\tdispose: function dispose() {\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'dispose'\n\t\t\t});\n\t\t}\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tlinewidth: <float>,\n\t *\tlinecap: \"round\",\n\t *\tlinejoin: \"round\"\n\t * }\n\t */\n\n\tvar LineBasicMaterial = /*#__PURE__*/function (_Material) {\n\t\t_inheritsLoose(LineBasicMaterial, _Material);\n\n\t\tfunction LineBasicMaterial(parameters) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Material.call(this) || this;\n\t\t\t_this.type = 'LineBasicMaterial';\n\t\t\t_this.color = new Color(0xffffff);\n\t\t\t_this.linewidth = 1;\n\t\t\t_this.linecap = 'round';\n\t\t\t_this.linejoin = 'round';\n\t\t\t_this.morphTargets = false;\n\n\t\t\t_this.setValues(parameters);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = LineBasicMaterial.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Material.prototype.copy.call(this, source);\n\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.linewidth = source.linewidth;\n\t\t\tthis.linecap = source.linecap;\n\t\t\tthis.linejoin = source.linejoin;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn LineBasicMaterial;\n\t}(Material);\n\n\tLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\n\tvar _start = new Vector3();\n\n\tvar _end = new Vector3();\n\n\tvar _inverseMatrix$1 = new Matrix4();\n\n\tvar _ray$1 = new Ray();\n\n\tvar _sphere$2 = new Sphere();\n\n\tfunction Line(geometry, material) {\n\t\tif (geometry === void 0) {\n\t\t\tgeometry = new BufferGeometry();\n\t\t}\n\n\t\tif (material === void 0) {\n\t\t\tmaterial = new LineBasicMaterial();\n\t\t}\n\n\t\tObject3D.call(this);\n\t\tthis.type = 'Line';\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\t\tthis.updateMorphTargets();\n\t}\n\n\tLine.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Line,\n\t\tisLine: true,\n\t\tcopy: function copy(source) {\n\t\t\tObject3D.prototype.copy.call(this, source);\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t},\n\t\tcomputeLineDistances: function computeLineDistances() {\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\t// we assume non-indexed geometry\n\t\t\t\tif (geometry.index === null) {\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [0];\n\n\t\t\t\t\tfor (var i = 1, l = positionAttribute.count; i < l; i++) {\n\t\t\t\t\t\t_start.fromBufferAttribute(positionAttribute, i - 1);\n\n\t\t\t\t\t\t_end.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\tlineDistances[i] = lineDistances[i - 1];\n\t\t\t\t\t\tlineDistances[i] += _start.distanceTo(_end);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\n\t\t\treturn this;\n\t\t},\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Line.threshold; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$2.copy(geometry.boundingSphere);\n\n\t\t\t_sphere$2.applyMatrix4(matrixWorld);\n\n\t\t\t_sphere$2.radius += threshold;\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere$2) === false) return; //\n\n\t\t\t_inverseMatrix$1.copy(matrixWorld).invert();\n\n\t\t\t_ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);\n\n\t\t\tvar localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\t\t\tvar vStart = new Vector3();\n\t\t\tvar vEnd = new Vector3();\n\t\t\tvar interSegment = new Vector3();\n\t\t\tvar interRay = new Vector3();\n\t\t\tvar step = this.isLineSegments ? 2 : 1;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positionAttribute = attributes.position;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor (var i = 0, l = indices.length - 1; i < l; i += step) {\n\t\t\t\t\t\tvar a = indices[i];\n\t\t\t\t\t\tvar b = indices[i + 1];\n\t\t\t\t\t\tvStart.fromBufferAttribute(positionAttribute, a);\n\t\t\t\t\t\tvEnd.fromBufferAttribute(positionAttribute, b);\n\n\t\t\t\t\t\tvar distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n\n\t\t\t\t\t\tif (distSq > localThresholdSq) continue;\n\t\t\t\t\t\tinterRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo(interRay);\n\t\t\t\t\t\tif (distance < raycaster.near || distance > raycaster.far) continue;\n\t\t\t\t\t\tintersects.push({\n\t\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4(this.matrixWorld),\n\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (var _i = 0, _l = positionAttribute.count - 1; _i < _l; _i += step) {\n\t\t\t\t\t\tvStart.fromBufferAttribute(positionAttribute, _i);\n\t\t\t\t\t\tvEnd.fromBufferAttribute(positionAttribute, _i + 1);\n\n\t\t\t\t\t\tvar _distSq = _ray$1.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n\n\t\t\t\t\t\tif (_distSq > localThresholdSq) continue;\n\t\t\t\t\t\tinterRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n\t\t\t\t\t\tvar _distance = raycaster.ray.origin.distanceTo(interRay);\n\n\t\t\t\t\t\tif (_distance < raycaster.near || _distance > raycaster.far) continue;\n\t\t\t\t\t\tintersects.push({\n\t\t\t\t\t\t\tdistance: _distance,\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4(this.matrixWorld),\n\t\t\t\t\t\t\tindex: _i,\n\t\t\t\t\t\t\tface: null,\n\t\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\t\tobject: this\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t},\n\t\tupdateMorphTargets: function updateMorphTargets() {\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tvar morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (var m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tvar name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tvar _start$1 = new Vector3();\n\n\tvar _end$1 = new Vector3();\n\n\tfunction LineSegments(geometry, material) {\n\t\tLine.call(this, geometry, material);\n\t\tthis.type = 'LineSegments';\n\t}\n\n\tLineSegments.prototype = Object.assign(Object.create(Line.prototype), {\n\t\tconstructor: LineSegments,\n\t\tisLineSegments: true,\n\t\tcomputeLineDistances: function computeLineDistances() {\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\t// we assume non-indexed geometry\n\t\t\t\tif (geometry.index === null) {\n\t\t\t\t\tvar positionAttribute = geometry.attributes.position;\n\t\t\t\t\tvar lineDistances = [];\n\n\t\t\t\t\tfor (var i = 0, l = positionAttribute.count; i < l; i += 2) {\n\t\t\t\t\t\t_start$1.fromBufferAttribute(positionAttribute, i);\n\n\t\t\t\t\t\t_end$1.fromBufferAttribute(positionAttribute, i + 1);\n\n\t\t\t\t\t\tlineDistances[i] = i === 0 ? 0 : lineDistances[i - 1];\n\t\t\t\t\t\tlineDistances[i + 1] = lineDistances[i] + _start$1.distanceTo(_end$1);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute('lineDistance', new Float32BufferAttribute(lineDistances, 1));\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.');\n\t\t\t\t}\n\t\t\t} else if (geometry.isGeometry) {\n\t\t\t\tconsole.error('THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tvar LineLoop = /*#__PURE__*/function (_Line) {\n\t\t_inheritsLoose(LineLoop, _Line);\n\n\t\tfunction LineLoop(geometry, material) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Line.call(this, geometry, material) || this;\n\t\t\t_this.type = 'LineLoop';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn LineLoop;\n\t}(Line);\n\n\tLineLoop.prototype.isLineLoop = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tsize: <float>,\n\t *\tsizeAttenuation: <bool>\n\t *\n\t *\tmorphTargets: <bool>\n\t * }\n\t */\n\n\tvar PointsMaterial = /*#__PURE__*/function (_Material) {\n\t\t_inheritsLoose(PointsMaterial, _Material);\n\n\t\tfunction PointsMaterial(parameters) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Material.call(this) || this;\n\t\t\t_this.type = 'PointsMaterial';\n\t\t\t_this.color = new Color(0xffffff);\n\t\t\t_this.map = null;\n\t\t\t_this.alphaMap = null;\n\t\t\t_this.size = 1;\n\t\t\t_this.sizeAttenuation = true;\n\t\t\t_this.morphTargets = false;\n\n\t\t\t_this.setValues(parameters);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = PointsMaterial.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Material.prototype.copy.call(this, source);\n\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.size = source.size;\n\t\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn PointsMaterial;\n\t}(Material);\n\n\tPointsMaterial.prototype.isPointsMaterial = true;\n\n\tvar _inverseMatrix$2 = new Matrix4();\n\n\tvar _ray$2 = new Ray();\n\n\tvar _sphere$3 = new Sphere();\n\n\tvar _position$1 = new Vector3();\n\n\tfunction Points(geometry, material) {\n\t\tif (geometry === void 0) {\n\t\t\tgeometry = new BufferGeometry();\n\t\t}\n\n\t\tif (material === void 0) {\n\t\t\tmaterial = new PointsMaterial();\n\t\t}\n\n\t\tObject3D.call(this);\n\t\tthis.type = 'Points';\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\t\tthis.updateMorphTargets();\n\t}\n\n\tPoints.prototype = Object.assign(Object.create(Object3D.prototype), {\n\t\tconstructor: Points,\n\t\tisPoints: true,\n\t\tcopy: function copy(source) {\n\t\t\tObject3D.prototype.copy.call(this, source);\n\t\t\tthis.material = source.material;\n\t\t\tthis.geometry = source.geometry;\n\t\t\treturn this;\n\t\t},\n\t\traycast: function raycast(raycaster, intersects) {\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar matrixWorld = this.matrixWorld;\n\t\t\tvar threshold = raycaster.params.Points.threshold; // Checking boundingSphere distance to ray\n\n\t\t\tif (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$3.copy(geometry.boundingSphere);\n\n\t\t\t_sphere$3.applyMatrix4(matrixWorld);\n\n\t\t\t_sphere$3.radius += threshold;\n\t\t\tif (raycaster.ray.intersectsSphere(_sphere$3) === false) return; //\n\n\t\t\t_inverseMatrix$2.copy(matrixWorld).invert();\n\n\t\t\t_ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2);\n\n\t\t\tvar localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar index = geometry.index;\n\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\tvar positionAttribute = attributes.position;\n\n\t\t\t\tif (index !== null) {\n\t\t\t\t\tvar indices = index.array;\n\n\t\t\t\t\tfor (var i = 0, il = indices.length; i < il; i++) {\n\t\t\t\t\t\tvar a = indices[i];\n\n\t\t\t\t\t\t_position$1.fromBufferAttribute(positionAttribute, a);\n\n\t\t\t\t\t\ttestPoint(_position$1, a, localThresholdSq, matrixWorld, raycaster, intersects, this);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (var _i = 0, l = positionAttribute.count; _i < l; _i++) {\n\t\t\t\t\t\t_position$1.fromBufferAttribute(positionAttribute, _i);\n\n\t\t\t\t\t\ttestPoint(_position$1, _i, localThresholdSq, matrixWorld, raycaster, intersects, this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t}\n\t\t},\n\t\tupdateMorphTargets: function updateMorphTargets() {\n\t\t\tvar geometry = this.geometry;\n\n\t\t\tif (geometry.isBufferGeometry) {\n\t\t\t\tvar morphAttributes = geometry.morphAttributes;\n\t\t\t\tvar keys = Object.keys(morphAttributes);\n\n\t\t\t\tif (keys.length > 0) {\n\t\t\t\t\tvar morphAttribute = morphAttributes[keys[0]];\n\n\t\t\t\t\tif (morphAttribute !== undefined) {\n\t\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\t\tfor (var m = 0, ml = morphAttribute.length; m < ml; m++) {\n\t\t\t\t\t\t\tvar name = morphAttribute[m].name || String(m);\n\t\t\t\t\t\t\tthis.morphTargetInfluences.push(0);\n\t\t\t\t\t\t\tthis.morphTargetDictionary[name] = m;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar morphTargets = geometry.morphTargets;\n\n\t\t\t\tif (morphTargets !== undefined && morphTargets.length > 0) {\n\t\t\t\t\tconsole.error('THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction testPoint(point, index, localThresholdSq, matrixWorld, raycaster, intersects, object) {\n\t\tvar rayPointDistanceSq = _ray$2.distanceSqToPoint(point);\n\n\t\tif (rayPointDistanceSq < localThresholdSq) {\n\t\t\tvar intersectPoint = new Vector3();\n\n\t\t\t_ray$2.closestPointToPoint(point, intersectPoint);\n\n\t\t\tintersectPoint.applyMatrix4(matrixWorld);\n\t\t\tvar distance = raycaster.ray.origin.distanceTo(intersectPoint);\n\t\t\tif (distance < raycaster.near || distance > raycaster.far) return;\n\t\t\tintersects.push({\n\t\t\t\tdistance: distance,\n\t\t\t\tdistanceToRay: Math.sqrt(rayPointDistanceSq),\n\t\t\t\tpoint: intersectPoint,\n\t\t\t\tindex: index,\n\t\t\t\tface: null,\n\t\t\t\tobject: object\n\t\t\t});\n\t\t}\n\t}\n\n\tvar VideoTexture = /*#__PURE__*/function (_Texture) {\n\t\t_inheritsLoose(VideoTexture, _Texture);\n\n\t\tfunction VideoTexture(video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Texture.call(this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) || this;\n\t\t\t_this.format = format !== undefined ? format : RGBFormat;\n\t\t\t_this.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\t\t\t_this.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\t\t\t_this.generateMipmaps = false;\n\n\t\t\tvar scope = _assertThisInitialized(_this);\n\n\t\t\tfunction updateVideo() {\n\t\t\t\tscope.needsUpdate = true;\n\t\t\t\tvideo.requestVideoFrameCallback(updateVideo);\n\t\t\t}\n\n\t\t\tif ('requestVideoFrameCallback' in video) {\n\t\t\t\tvideo.requestVideoFrameCallback(updateVideo);\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = VideoTexture.prototype;\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor(this.image).copy(this);\n\t\t};\n\n\t\t_proto.update = function update() {\n\t\t\tvar video = this.image;\n\t\t\tvar hasVideoFrameCallback = ('requestVideoFrameCallback' in video);\n\n\t\t\tif (hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA) {\n\t\t\t\tthis.needsUpdate = true;\n\t\t\t}\n\t\t};\n\n\t\treturn VideoTexture;\n\t}(Texture);\n\n\tVideoTexture.prototype.isVideoTexture = true;\n\n\tvar CompressedTexture = /*#__PURE__*/function (_Texture) {\n\t\t_inheritsLoose(CompressedTexture, _Texture);\n\n\t\tfunction CompressedTexture(mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) || this;\n\t\t\t_this.image = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\t\t\t_this.mipmaps = mipmaps; // no flipping for cube textures\n\t\t\t// (also flipping doesn't work for compressed textures )\n\n\t\t\t_this.flipY = false; // can't generate mipmaps for compressed textures\n\t\t\t// mips must be embedded in DDS files\n\n\t\t\t_this.generateMipmaps = false;\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn CompressedTexture;\n\t}(Texture);\n\n\tCompressedTexture.prototype.isCompressedTexture = true;\n\n\tvar CanvasTexture = /*#__PURE__*/function (_Texture) {\n\t\t_inheritsLoose(CanvasTexture, _Texture);\n\n\t\tfunction CanvasTexture(canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Texture.call(this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) || this;\n\t\t\t_this.needsUpdate = true;\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn CanvasTexture;\n\t}(Texture);\n\n\tCanvasTexture.prototype.isCanvasTexture = true;\n\n\tvar DepthTexture = /*#__PURE__*/function (_Texture) {\n\t\t_inheritsLoose(DepthTexture, _Texture);\n\n\t\tfunction DepthTexture(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format) {\n\t\t\tvar _this;\n\n\t\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\t\tif (format !== DepthFormat && format !== DepthStencilFormat) {\n\t\t\t\tthrow new Error('DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat');\n\t\t\t}\n\n\t\t\tif (type === undefined && format === DepthFormat) type = UnsignedShortType;\n\t\t\tif (type === undefined && format === DepthStencilFormat) type = UnsignedInt248Type;\n\t\t\t_this = _Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) || this;\n\t\t\t_this.image = {\n\t\t\t\twidth: width,\n\t\t\t\theight: height\n\t\t\t};\n\t\t\t_this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\t\t_this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\t\t\t_this.flipY = false;\n\t\t\t_this.generateMipmaps = false;\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn DepthTexture;\n\t}(Texture);\n\n\tDepthTexture.prototype.isDepthTexture = true;\n\n\tvar CircleGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(CircleGeometry, _BufferGeometry);\n\n\t\tfunction CircleGeometry(radius, segments, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (segments === void 0) {\n\t\t\t\tsegments = 8;\n\t\t\t}\n\n\t\t\tif (thetaStart === void 0) {\n\t\t\t\tthetaStart = 0;\n\t\t\t}\n\n\t\t\tif (thetaLength === void 0) {\n\t\t\t\tthetaLength = Math.PI * 2;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'CircleGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tsegments: segments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tsegments = Math.max(3, segments); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar uv = new Vector2(); // center point\n\n\t\t\tvertices.push(0, 0, 0);\n\t\t\tnormals.push(0, 0, 1);\n\t\t\tuvs.push(0.5, 0.5);\n\n\t\t\tfor (var s = 0, i = 3; s <= segments; s++, i += 3) {\n\t\t\t\tvar segment = thetaStart + s / segments * thetaLength; // vertex\n\n\t\t\t\tvertex.x = radius * Math.cos(segment);\n\t\t\t\tvertex.y = radius * Math.sin(segment);\n\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\tnormals.push(0, 0, 1); // uvs\n\n\t\t\t\tuv.x = (vertices[i] / radius + 1) / 2;\n\t\t\t\tuv.y = (vertices[i + 1] / radius + 1) / 2;\n\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t} // indices\n\n\n\t\t\tfor (var _i = 1; _i <= segments; _i++) {\n\t\t\t\tindices.push(_i, _i + 1, 0);\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn CircleGeometry;\n\t}(BufferGeometry);\n\n\tvar CylinderGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(CylinderGeometry, _BufferGeometry);\n\n\t\tfunction CylinderGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\tif (radiusTop === void 0) {\n\t\t\t\tradiusTop = 1;\n\t\t\t}\n\n\t\t\tif (radiusBottom === void 0) {\n\t\t\t\tradiusBottom = 1;\n\t\t\t}\n\n\t\t\tif (height === void 0) {\n\t\t\t\theight = 1;\n\t\t\t}\n\n\t\t\tif (radialSegments === void 0) {\n\t\t\t\tradialSegments = 8;\n\t\t\t}\n\n\t\t\tif (heightSegments === void 0) {\n\t\t\t\theightSegments = 1;\n\t\t\t}\n\n\t\t\tif (openEnded === void 0) {\n\t\t\t\topenEnded = false;\n\t\t\t}\n\n\t\t\tif (thetaStart === void 0) {\n\t\t\t\tthetaStart = 0;\n\t\t\t}\n\n\t\t\tif (thetaLength === void 0) {\n\t\t\t\tthetaLength = Math.PI * 2;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'CylinderGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradiusTop: radiusTop,\n\t\t\t\tradiusBottom: radiusBottom,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\n\t\t\tvar scope = _assertThisInitialized(_this);\n\n\t\t\tradialSegments = Math.floor(radialSegments);\n\t\t\theightSegments = Math.floor(heightSegments); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar index = 0;\n\t\t\tvar indexArray = [];\n\t\t\tvar halfHeight = height / 2;\n\t\t\tvar groupStart = 0; // generate geometry\n\n\t\t\tgenerateTorso();\n\n\t\t\tif (openEnded === false) {\n\t\t\t\tif (radiusTop > 0) generateCap(true);\n\t\t\t\tif (radiusBottom > 0) generateCap(false);\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\tfunction generateTorso() {\n\t\t\t\tvar normal = new Vector3();\n\t\t\t\tvar vertex = new Vector3();\n\t\t\t\tvar groupCount = 0; // this will be used to calculate the normal\n\n\t\t\t\tvar slope = (radiusBottom - radiusTop) / height; // generate vertices, normals and uvs\n\n\t\t\t\tfor (var y = 0; y <= heightSegments; y++) {\n\t\t\t\t\tvar indexRow = [];\n\t\t\t\t\tvar v = y / heightSegments; // calculate the radius of the current row\n\n\t\t\t\t\tvar radius = v * (radiusBottom - radiusTop) + radiusTop;\n\n\t\t\t\t\tfor (var x = 0; x <= radialSegments; x++) {\n\t\t\t\t\t\tvar u = x / radialSegments;\n\t\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\t\t\t\t\t\tvar sinTheta = Math.sin(theta);\n\t\t\t\t\t\tvar cosTheta = Math.cos(theta); // vertex\n\n\t\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\t\tvertex.y = -v * height + halfHeight;\n\t\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\t\tnormal.set(sinTheta, slope, cosTheta).normalize();\n\t\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\t\tuvs.push(u, 1 - v); // save index of vertex in respective row\n\n\t\t\t\t\t\tindexRow.push(index++);\n\t\t\t\t\t} // now save vertices of the row in our index array\n\n\n\t\t\t\t\tindexArray.push(indexRow);\n\t\t\t\t} // generate indices\n\n\n\t\t\t\tfor (var _x = 0; _x < radialSegments; _x++) {\n\t\t\t\t\tfor (var _y = 0; _y < heightSegments; _y++) {\n\t\t\t\t\t\t// we use the index array to access the correct indices\n\t\t\t\t\t\tvar a = indexArray[_y][_x];\n\t\t\t\t\t\tvar b = indexArray[_y + 1][_x];\n\t\t\t\t\t\tvar c = indexArray[_y + 1][_x + 1];\n\t\t\t\t\t\tvar d = indexArray[_y][_x + 1]; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d); // update group counter\n\n\t\t\t\t\t\tgroupCount += 6;\n\t\t\t\t\t}\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, 0); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t}\n\n\t\t\tfunction generateCap(top) {\n\t\t\t\t// save the index of the first center vertex\n\t\t\t\tvar centerIndexStart = index;\n\t\t\t\tvar uv = new Vector2();\n\t\t\t\tvar vertex = new Vector3();\n\t\t\t\tvar groupCount = 0;\n\t\t\t\tvar radius = top === true ? radiusTop : radiusBottom;\n\t\t\t\tvar sign = top === true ? 1 : -1; // first we generate the center vertex data of the cap.\n\t\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\t\tfor (var x = 1; x <= radialSegments; x++) {\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertices.push(0, halfHeight * sign, 0); // normal\n\n\t\t\t\t\tnormals.push(0, sign, 0); // uv\n\n\t\t\t\t\tuvs.push(0.5, 0.5); // increase index\n\n\t\t\t\t\tindex++;\n\t\t\t\t} // save the index of the last center vertex\n\n\n\t\t\t\tvar centerIndexEnd = index; // now we generate the surrounding vertices, normals and uvs\n\n\t\t\t\tfor (var _x2 = 0; _x2 <= radialSegments; _x2++) {\n\t\t\t\t\tvar u = _x2 / radialSegments;\n\t\t\t\t\tvar theta = u * thetaLength + thetaStart;\n\t\t\t\t\tvar cosTheta = Math.cos(theta);\n\t\t\t\t\tvar sinTheta = Math.sin(theta); // vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormals.push(0, sign, 0); // uv\n\n\t\t\t\t\tuv.x = cosTheta * 0.5 + 0.5;\n\t\t\t\t\tuv.y = sinTheta * 0.5 * sign + 0.5;\n\t\t\t\t\tuvs.push(uv.x, uv.y); // increase index\n\n\t\t\t\t\tindex++;\n\t\t\t\t} // generate indices\n\n\n\t\t\t\tfor (var _x3 = 0; _x3 < radialSegments; _x3++) {\n\t\t\t\t\tvar c = centerIndexStart + _x3;\n\t\t\t\t\tvar i = centerIndexEnd + _x3;\n\n\t\t\t\t\tif (top === true) {\n\t\t\t\t\t\t// face top\n\t\t\t\t\t\tindices.push(i, i + 1, c);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// face bottom\n\t\t\t\t\t\tindices.push(i + 1, i, c);\n\t\t\t\t\t}\n\n\t\t\t\t\tgroupCount += 3;\n\t\t\t\t} // add a group to the geometry. this will ensure multi material support\n\n\n\t\t\t\tscope.addGroup(groupStart, groupCount, top === true ? 1 : 2); // calculate new start value for groups\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn CylinderGeometry;\n\t}(BufferGeometry);\n\n\tvar ConeGeometry = /*#__PURE__*/function (_CylinderGeometry) {\n\t\t_inheritsLoose(ConeGeometry, _CylinderGeometry);\n\n\t\tfunction ConeGeometry(radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (height === void 0) {\n\t\t\t\theight = 1;\n\t\t\t}\n\n\t\t\tif (radialSegments === void 0) {\n\t\t\t\tradialSegments = 8;\n\t\t\t}\n\n\t\t\tif (heightSegments === void 0) {\n\t\t\t\theightSegments = 1;\n\t\t\t}\n\n\t\t\tif (openEnded === void 0) {\n\t\t\t\topenEnded = false;\n\t\t\t}\n\n\t\t\tif (thetaStart === void 0) {\n\t\t\t\tthetaStart = 0;\n\t\t\t}\n\n\t\t\tif (thetaLength === void 0) {\n\t\t\t\tthetaLength = Math.PI * 2;\n\t\t\t}\n\n\t\t\t_this = _CylinderGeometry.call(this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) || this;\n\t\t\t_this.type = 'ConeGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\theight: height,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\topenEnded: openEnded,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn ConeGeometry;\n\t}(CylinderGeometry);\n\n\tvar PolyhedronGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(PolyhedronGeometry, _BufferGeometry);\n\n\t\tfunction PolyhedronGeometry(vertices, indices, radius, detail) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (detail === void 0) {\n\t\t\t\tdetail = 0;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'PolyhedronGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tvertices: vertices,\n\t\t\t\tindices: indices,\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t}; // default buffer data\n\n\t\t\tvar vertexBuffer = [];\n\t\t\tvar uvBuffer = []; // the subdivision creates the vertex buffer data\n\n\t\t\tsubdivide(detail); // all vertices should lie on a conceptual sphere with a given radius\n\n\t\t\tapplyRadius(radius); // finally, create the uv data\n\n\t\t\tgenerateUVs(); // build non-indexed geometry\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertexBuffer, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(vertexBuffer.slice(), 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvBuffer, 2));\n\n\t\t\tif (detail === 0) {\n\t\t\t\t_this.computeVertexNormals(); // flat normals\n\n\t\t\t} else {\n\t\t\t\t_this.normalizeNormals(); // smooth normals\n\n\t\t\t} // helper functions\n\n\n\t\t\tfunction subdivide(detail) {\n\t\t\t\tvar a = new Vector3();\n\t\t\t\tvar b = new Vector3();\n\t\t\t\tvar c = new Vector3(); // iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\t\tfor (var i = 0; i < indices.length; i += 3) {\n\t\t\t\t\t// get the vertices of the face\n\t\t\t\t\tgetVertexByIndex(indices[i + 0], a);\n\t\t\t\t\tgetVertexByIndex(indices[i + 1], b);\n\t\t\t\t\tgetVertexByIndex(indices[i + 2], c); // perform subdivision\n\n\t\t\t\t\tsubdivideFace(a, b, c, detail);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction subdivideFace(a, b, c, detail) {\n\t\t\t\tvar cols = detail + 1; // we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\t\tvar v = []; // construct all of the vertices for this subdivision\n\n\t\t\t\tfor (var i = 0; i <= cols; i++) {\n\t\t\t\t\tv[i] = [];\n\t\t\t\t\tvar aj = a.clone().lerp(c, i / cols);\n\t\t\t\t\tvar bj = b.clone().lerp(c, i / cols);\n\t\t\t\t\tvar rows = cols - i;\n\n\t\t\t\t\tfor (var j = 0; j <= rows; j++) {\n\t\t\t\t\t\tif (j === 0 && i === cols) {\n\t\t\t\t\t\t\tv[i][j] = aj;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tv[i][j] = aj.clone().lerp(bj, j / rows);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // construct all of the faces\n\n\n\t\t\t\tfor (var _i = 0; _i < cols; _i++) {\n\t\t\t\t\tfor (var _j = 0; _j < 2 * (cols - _i) - 1; _j++) {\n\t\t\t\t\t\tvar k = Math.floor(_j / 2);\n\n\t\t\t\t\t\tif (_j % 2 === 0) {\n\t\t\t\t\t\t\tpushVertex(v[_i][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[_i + 1][k]);\n\t\t\t\t\t\t\tpushVertex(v[_i][k]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpushVertex(v[_i][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[_i + 1][k + 1]);\n\t\t\t\t\t\t\tpushVertex(v[_i + 1][k]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction applyRadius(radius) {\n\t\t\t\tvar vertex = new Vector3(); // iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\t\tfor (var i = 0; i < vertexBuffer.length; i += 3) {\n\t\t\t\t\tvertex.x = vertexBuffer[i + 0];\n\t\t\t\t\tvertex.y = vertexBuffer[i + 1];\n\t\t\t\t\tvertex.z = vertexBuffer[i + 2];\n\t\t\t\t\tvertex.normalize().multiplyScalar(radius);\n\t\t\t\t\tvertexBuffer[i + 0] = vertex.x;\n\t\t\t\t\tvertexBuffer[i + 1] = vertex.y;\n\t\t\t\t\tvertexBuffer[i + 2] = vertex.z;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateUVs() {\n\t\t\t\tvar vertex = new Vector3();\n\n\t\t\t\tfor (var i = 0; i < vertexBuffer.length; i += 3) {\n\t\t\t\t\tvertex.x = vertexBuffer[i + 0];\n\t\t\t\t\tvertex.y = vertexBuffer[i + 1];\n\t\t\t\t\tvertex.z = vertexBuffer[i + 2];\n\t\t\t\t\tvar u = azimuth(vertex) / 2 / Math.PI + 0.5;\n\t\t\t\t\tvar v = inclination(vertex) / Math.PI + 0.5;\n\t\t\t\t\tuvBuffer.push(u, 1 - v);\n\t\t\t\t}\n\n\t\t\t\tcorrectUVs();\n\t\t\t\tcorrectSeam();\n\t\t\t}\n\n\t\t\tfunction correctSeam() {\n\t\t\t\t// handle case when face straddles the seam, see #3269\n\t\t\t\tfor (var i = 0; i < uvBuffer.length; i += 6) {\n\t\t\t\t\t// uv data of a single face\n\t\t\t\t\tvar x0 = uvBuffer[i + 0];\n\t\t\t\t\tvar x1 = uvBuffer[i + 2];\n\t\t\t\t\tvar x2 = uvBuffer[i + 4];\n\t\t\t\t\tvar max = Math.max(x0, x1, x2);\n\t\t\t\t\tvar min = Math.min(x0, x1, x2); // 0.9 is somewhat arbitrary\n\n\t\t\t\t\tif (max > 0.9 && min < 0.1) {\n\t\t\t\t\t\tif (x0 < 0.2) uvBuffer[i + 0] += 1;\n\t\t\t\t\t\tif (x1 < 0.2) uvBuffer[i + 2] += 1;\n\t\t\t\t\t\tif (x2 < 0.2) uvBuffer[i + 4] += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction pushVertex(vertex) {\n\t\t\t\tvertexBuffer.push(vertex.x, vertex.y, vertex.z);\n\t\t\t}\n\n\t\t\tfunction getVertexByIndex(index, vertex) {\n\t\t\t\tvar stride = index * 3;\n\t\t\t\tvertex.x = vertices[stride + 0];\n\t\t\t\tvertex.y = vertices[stride + 1];\n\t\t\t\tvertex.z = vertices[stride + 2];\n\t\t\t}\n\n\t\t\tfunction correctUVs() {\n\t\t\t\tvar a = new Vector3();\n\t\t\t\tvar b = new Vector3();\n\t\t\t\tvar c = new Vector3();\n\t\t\t\tvar centroid = new Vector3();\n\t\t\t\tvar uvA = new Vector2();\n\t\t\t\tvar uvB = new Vector2();\n\t\t\t\tvar uvC = new Vector2();\n\n\t\t\t\tfor (var i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6) {\n\t\t\t\t\ta.set(vertexBuffer[i + 0], vertexBuffer[i + 1], vertexBuffer[i + 2]);\n\t\t\t\t\tb.set(vertexBuffer[i + 3], vertexBuffer[i + 4], vertexBuffer[i + 5]);\n\t\t\t\t\tc.set(vertexBuffer[i + 6], vertexBuffer[i + 7], vertexBuffer[i + 8]);\n\t\t\t\t\tuvA.set(uvBuffer[j + 0], uvBuffer[j + 1]);\n\t\t\t\t\tuvB.set(uvBuffer[j + 2], uvBuffer[j + 3]);\n\t\t\t\t\tuvC.set(uvBuffer[j + 4], uvBuffer[j + 5]);\n\t\t\t\t\tcentroid.copy(a).add(b).add(c).divideScalar(3);\n\t\t\t\t\tvar azi = azimuth(centroid);\n\t\t\t\t\tcorrectUV(uvA, j + 0, a, azi);\n\t\t\t\t\tcorrectUV(uvB, j + 2, b, azi);\n\t\t\t\t\tcorrectUV(uvC, j + 4, c, azi);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction correctUV(uv, stride, vector, azimuth) {\n\t\t\t\tif (azimuth < 0 && uv.x === 1) {\n\t\t\t\t\tuvBuffer[stride] = uv.x - 1;\n\t\t\t\t}\n\n\t\t\t\tif (vector.x === 0 && vector.z === 0) {\n\t\t\t\t\tuvBuffer[stride] = azimuth / 2 / Math.PI + 0.5;\n\t\t\t\t}\n\t\t\t} // Angle around the Y axis, counter-clockwise when looking from above.\n\n\n\t\t\tfunction azimuth(vector) {\n\t\t\t\treturn Math.atan2(vector.z, -vector.x);\n\t\t\t} // Angle above the XZ plane.\n\n\n\t\t\tfunction inclination(vector) {\n\t\t\t\treturn Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn PolyhedronGeometry;\n\t}(BufferGeometry);\n\n\tvar DodecahedronGeometry = /*#__PURE__*/function (_PolyhedronGeometry) {\n\t\t_inheritsLoose(DodecahedronGeometry, _PolyhedronGeometry);\n\n\t\tfunction DodecahedronGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (detail === void 0) {\n\t\t\t\tdetail = 0;\n\t\t\t}\n\n\t\t\tvar t = (1 + Math.sqrt(5)) / 2;\n\t\t\tvar r = 1 / t;\n\t\t\tvar vertices = [// (±1, ±1, ±1)\n\t\t\t-1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, // (0, ±1/φ, ±φ)\n\t\t\t0, -r, -t, 0, -r, t, 0, r, -t, 0, r, t, // (±1/φ, ±φ, 0)\n\t\t\t-r, -t, 0, -r, t, 0, r, -t, 0, r, t, 0, // (±φ, 0, ±1/φ)\n\t\t\t-t, 0, -r, t, 0, -r, -t, 0, r, t, 0, r];\n\t\t\tvar indices = [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9];\n\t\t\t_this = _PolyhedronGeometry.call(this, vertices, indices, radius, detail) || this;\n\t\t\t_this.type = 'DodecahedronGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn DodecahedronGeometry;\n\t}(PolyhedronGeometry);\n\n\tvar _v0$2 = new Vector3();\n\n\tvar _v1$5 = new Vector3();\n\n\tvar _normal$1 = new Vector3();\n\n\tvar _triangle = new Triangle();\n\n\tvar EdgesGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(EdgesGeometry, _BufferGeometry);\n\n\t\tfunction EdgesGeometry(geometry, thresholdAngle) {\n\t\t\tvar _this;\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'EdgesGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tthresholdAngle: thresholdAngle\n\t\t\t};\n\t\t\tthresholdAngle = thresholdAngle !== undefined ? thresholdAngle : 1;\n\n\t\t\tif (geometry.isGeometry === true) {\n\t\t\t\tconsole.error('THREE.EdgesGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\treturn _assertThisInitialized(_this);\n\t\t\t}\n\n\t\t\tvar precisionPoints = 4;\n\t\t\tvar precision = Math.pow(10, precisionPoints);\n\t\t\tvar thresholdDot = Math.cos(MathUtils.DEG2RAD * thresholdAngle);\n\t\t\tvar indexAttr = geometry.getIndex();\n\t\t\tvar positionAttr = geometry.getAttribute('position');\n\t\t\tvar indexCount = indexAttr ? indexAttr.count : positionAttr.count;\n\t\t\tvar indexArr = [0, 0, 0];\n\t\t\tvar vertKeys = ['a', 'b', 'c'];\n\t\t\tvar hashes = new Array(3);\n\t\t\tvar edgeData = {};\n\t\t\tvar vertices = [];\n\n\t\t\tfor (var i = 0; i < indexCount; i += 3) {\n\t\t\t\tif (indexAttr) {\n\t\t\t\t\tindexArr[0] = indexAttr.getX(i);\n\t\t\t\t\tindexArr[1] = indexAttr.getX(i + 1);\n\t\t\t\t\tindexArr[2] = indexAttr.getX(i + 2);\n\t\t\t\t} else {\n\t\t\t\t\tindexArr[0] = i;\n\t\t\t\t\tindexArr[1] = i + 1;\n\t\t\t\t\tindexArr[2] = i + 2;\n\t\t\t\t}\n\n\t\t\t\tvar a = _triangle.a,\n\t\t\t\t\t\tb = _triangle.b,\n\t\t\t\t\t\tc = _triangle.c;\n\t\t\t\ta.fromBufferAttribute(positionAttr, indexArr[0]);\n\t\t\t\tb.fromBufferAttribute(positionAttr, indexArr[1]);\n\t\t\t\tc.fromBufferAttribute(positionAttr, indexArr[2]);\n\n\t\t\t\t_triangle.getNormal(_normal$1); // create hashes for the edge from the vertices\n\n\n\t\t\t\thashes[0] = Math.round(a.x * precision) + \",\" + Math.round(a.y * precision) + \",\" + Math.round(a.z * precision);\n\t\t\t\thashes[1] = Math.round(b.x * precision) + \",\" + Math.round(b.y * precision) + \",\" + Math.round(b.z * precision);\n\t\t\t\thashes[2] = Math.round(c.x * precision) + \",\" + Math.round(c.y * precision) + \",\" + Math.round(c.z * precision); // skip degenerate triangles\n\n\t\t\t\tif (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t} // iterate over every edge\n\n\n\t\t\t\tfor (var j = 0; j < 3; j++) {\n\t\t\t\t\t// get the first and next vertex making up the edge\n\t\t\t\t\tvar jNext = (j + 1) % 3;\n\t\t\t\t\tvar vecHash0 = hashes[j];\n\t\t\t\t\tvar vecHash1 = hashes[jNext];\n\t\t\t\t\tvar v0 = _triangle[vertKeys[j]];\n\t\t\t\t\tvar v1 = _triangle[vertKeys[jNext]];\n\t\t\t\t\tvar hash = vecHash0 + \"_\" + vecHash1;\n\t\t\t\t\tvar reverseHash = vecHash1 + \"_\" + vecHash0;\n\n\t\t\t\t\tif (reverseHash in edgeData && edgeData[reverseHash]) {\n\t\t\t\t\t\t// if we found a sibling edge add it into the vertex array if\n\t\t\t\t\t\t// it meets the angle threshold and delete the edge from the map.\n\t\t\t\t\t\tif (_normal$1.dot(edgeData[reverseHash].normal) <= thresholdDot) {\n\t\t\t\t\t\t\tvertices.push(v0.x, v0.y, v0.z);\n\t\t\t\t\t\t\tvertices.push(v1.x, v1.y, v1.z);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedgeData[reverseHash] = null;\n\t\t\t\t\t} else if (!(hash in edgeData)) {\n\t\t\t\t\t\t// if we've already got an edge here then skip adding a new one\n\t\t\t\t\t\tedgeData[hash] = {\n\t\t\t\t\t\t\tindex0: indexArr[j],\n\t\t\t\t\t\t\tindex1: indexArr[jNext],\n\t\t\t\t\t\t\tnormal: _normal$1.clone()\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // iterate over all remaining, unmatched edges and add them to the vertex array\n\n\n\t\t\tfor (var key in edgeData) {\n\t\t\t\tif (edgeData[key]) {\n\t\t\t\t\tvar _edgeData$key = edgeData[key],\n\t\t\t\t\t\t\tindex0 = _edgeData$key.index0,\n\t\t\t\t\t\t\tindex1 = _edgeData$key.index1;\n\n\t\t\t\t\t_v0$2.fromBufferAttribute(positionAttr, index0);\n\n\t\t\t\t\t_v1$5.fromBufferAttribute(positionAttr, index1);\n\n\t\t\t\t\tvertices.push(_v0$2.x, _v0$2.y, _v0$2.z);\n\t\t\t\t\tvertices.push(_v1$5.x, _v1$5.y, _v1$5.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn EdgesGeometry;\n\t}(BufferGeometry);\n\n\t/**\n\t * Port from https://github.com/mapbox/earcut (v2.2.2)\n\t */\n\tvar Earcut = {\n\t\ttriangulate: function triangulate(data, holeIndices, dim) {\n\t\t\tdim = dim || 2;\n\t\t\tvar hasHoles = holeIndices && holeIndices.length;\n\t\t\tvar outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\t\t\tvar outerNode = linkedList(data, 0, outerLen, dim, true);\n\t\t\tvar triangles = [];\n\t\t\tif (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\t\t\tvar minX, minY, maxX, maxY, x, y, invSize;\n\t\t\tif (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim); // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\n\t\t\tif (data.length > 80 * dim) {\n\t\t\t\tminX = maxX = data[0];\n\t\t\t\tminY = maxY = data[1];\n\n\t\t\t\tfor (var i = dim; i < outerLen; i += dim) {\n\t\t\t\t\tx = data[i];\n\t\t\t\t\ty = data[i + 1];\n\t\t\t\t\tif (x < minX) minX = x;\n\t\t\t\t\tif (y < minY) minY = y;\n\t\t\t\t\tif (x > maxX) maxX = x;\n\t\t\t\t\tif (y > maxY) maxY = y;\n\t\t\t\t} // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\n\n\t\t\t\tinvSize = Math.max(maxX - minX, maxY - minY);\n\t\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\t\t\t}\n\n\t\t\tearcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n\t\t\treturn triangles;\n\t\t}\n\t}; // create a circular doubly linked list from polygon points in the specified winding order\n\n\tfunction linkedList(data, start, end, dim, clockwise) {\n\t\tvar i, last;\n\n\t\tif (clockwise === signedArea(data, start, end, dim) > 0) {\n\t\t\tfor (i = start; i < end; i += dim) {\n\t\t\t\tlast = insertNode(i, data[i], data[i + 1], last);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (i = end - dim; i >= start; i -= dim) {\n\t\t\t\tlast = insertNode(i, data[i], data[i + 1], last);\n\t\t\t}\n\t\t}\n\n\t\tif (last && equals(last, last.next)) {\n\t\t\tremoveNode(last);\n\t\t\tlast = last.next;\n\t\t}\n\n\t\treturn last;\n\t} // eliminate colinear or duplicate points\n\n\n\tfunction filterPoints(start, end) {\n\t\tif (!start) return start;\n\t\tif (!end) end = start;\n\t\tvar p = start,\n\t\t\t\tagain;\n\n\t\tdo {\n\t\t\tagain = false;\n\n\t\t\tif (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n\t\t\t\tremoveNode(p);\n\t\t\t\tp = end = p.prev;\n\t\t\t\tif (p === p.next) break;\n\t\t\t\tagain = true;\n\t\t\t} else {\n\t\t\t\tp = p.next;\n\t\t\t}\n\t\t} while (again || p !== end);\n\n\t\treturn end;\n\t} // main ear slicing loop which triangulates a polygon (given as a linked list)\n\n\n\tfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n\t\tif (!ear) return; // interlink polygon nodes in z-order\n\n\t\tif (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\t\tvar stop = ear,\n\t\t\t\tprev,\n\t\t\t\tnext; // iterate through ears, slicing them one by one\n\n\t\twhile (ear.prev !== ear.next) {\n\t\t\tprev = ear.prev;\n\t\t\tnext = ear.next;\n\n\t\t\tif (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n\t\t\t\t// cut off the triangle\n\t\t\t\ttriangles.push(prev.i / dim);\n\t\t\t\ttriangles.push(ear.i / dim);\n\t\t\t\ttriangles.push(next.i / dim);\n\t\t\t\tremoveNode(ear); // skipping the next vertex leads to less sliver triangles\n\n\t\t\t\tear = next.next;\n\t\t\t\tstop = next.next;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tear = next; // if we looped through the whole remaining polygon and can't find any more ears\n\n\t\t\tif (ear === stop) {\n\t\t\t\t// try filtering points and slicing again\n\t\t\t\tif (!pass) {\n\t\t\t\t\tearcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1); // if this didn't work, try curing all small self-intersections locally\n\t\t\t\t} else if (pass === 1) {\n\t\t\t\t\tear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n\t\t\t\t\tearcutLinked(ear, triangles, dim, minX, minY, invSize, 2); // as a last resort, try splitting the remaining polygon into two\n\t\t\t\t} else if (pass === 2) {\n\t\t\t\t\tsplitEarcut(ear, triangles, dim, minX, minY, invSize);\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} // check whether a polygon node forms a valid ear with adjacent nodes\n\n\n\tfunction isEar(ear) {\n\t\tvar a = ear.prev,\n\t\t\t\tb = ear,\n\t\t\t\tc = ear.next;\n\t\tif (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\t\t// now make sure we don't have other points inside the potential ear\n\n\t\tvar p = ear.next.next;\n\n\t\twhile (p !== ear.prev) {\n\t\t\tif (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.next;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tfunction isEarHashed(ear, minX, minY, invSize) {\n\t\tvar a = ear.prev,\n\t\t\t\tb = ear,\n\t\t\t\tc = ear.next;\n\t\tif (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\t\t// triangle bbox; min & max are calculated like this for speed\n\n\t\tvar minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x,\n\t\t\t\tminTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y,\n\t\t\t\tmaxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x,\n\t\t\t\tmaxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y; // z-order range for the current triangle bbox;\n\n\t\tvar minZ = zOrder(minTX, minTY, minX, minY, invSize),\n\t\t\t\tmaxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n\t\tvar p = ear.prevZ,\n\t\t\t\tn = ear.nextZ; // look for points inside the triangle in both directions\n\n\t\twhile (p && p.z >= minZ && n && n.z <= maxZ) {\n\t\t\tif (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.prevZ;\n\t\t\tif (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n\t\t\tn = n.nextZ;\n\t\t} // look for remaining points in decreasing z-order\n\n\n\t\twhile (p && p.z >= minZ) {\n\t\t\tif (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n\t\t\tp = p.prevZ;\n\t\t} // look for remaining points in increasing z-order\n\n\n\t\twhile (n && n.z <= maxZ) {\n\t\t\tif (n !== ear.prev && n !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n\t\t\tn = n.nextZ;\n\t\t}\n\n\t\treturn true;\n\t} // go through all polygon nodes and cure small local self-intersections\n\n\n\tfunction cureLocalIntersections(start, triangles, dim) {\n\t\tvar p = start;\n\n\t\tdo {\n\t\t\tvar a = p.prev,\n\t\t\t\t\tb = p.next.next;\n\n\t\t\tif (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\t\t\t\ttriangles.push(a.i / dim);\n\t\t\t\ttriangles.push(p.i / dim);\n\t\t\t\ttriangles.push(b.i / dim); // remove two nodes involved\n\n\t\t\t\tremoveNode(p);\n\t\t\t\tremoveNode(p.next);\n\t\t\t\tp = start = b;\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\treturn filterPoints(p);\n\t} // try splitting polygon into two and triangulate them independently\n\n\n\tfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n\t\t// look for a valid diagonal that divides the polygon into two\n\t\tvar a = start;\n\n\t\tdo {\n\t\t\tvar b = a.next.next;\n\n\t\t\twhile (b !== a.prev) {\n\t\t\t\tif (a.i !== b.i && isValidDiagonal(a, b)) {\n\t\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\t\tvar c = splitPolygon(a, b); // filter colinear points around the cuts\n\n\t\t\t\t\ta = filterPoints(a, a.next);\n\t\t\t\t\tc = filterPoints(c, c.next); // run earcut on each half\n\n\t\t\t\t\tearcutLinked(a, triangles, dim, minX, minY, invSize);\n\t\t\t\t\tearcutLinked(c, triangles, dim, minX, minY, invSize);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tb = b.next;\n\t\t\t}\n\n\t\t\ta = a.next;\n\t\t} while (a !== start);\n\t} // link every hole into the outer loop, producing a single-ring polygon without holes\n\n\n\tfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n\t\tvar queue = [];\n\t\tvar i, len, start, end, list;\n\n\t\tfor (i = 0, len = holeIndices.length; i < len; i++) {\n\t\t\tstart = holeIndices[i] * dim;\n\t\t\tend = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n\t\t\tlist = linkedList(data, start, end, dim, false);\n\t\t\tif (list === list.next) list.steiner = true;\n\t\t\tqueue.push(getLeftmost(list));\n\t\t}\n\n\t\tqueue.sort(compareX); // process holes from left to right\n\n\t\tfor (i = 0; i < queue.length; i++) {\n\t\t\teliminateHole(queue[i], outerNode);\n\t\t\touterNode = filterPoints(outerNode, outerNode.next);\n\t\t}\n\n\t\treturn outerNode;\n\t}\n\n\tfunction compareX(a, b) {\n\t\treturn a.x - b.x;\n\t} // find a bridge between vertices that connects hole with an outer ring and and link it\n\n\n\tfunction eliminateHole(hole, outerNode) {\n\t\touterNode = findHoleBridge(hole, outerNode);\n\n\t\tif (outerNode) {\n\t\t\tvar b = splitPolygon(outerNode, hole); // filter collinear points around the cuts\n\n\t\t\tfilterPoints(outerNode, outerNode.next);\n\t\t\tfilterPoints(b, b.next);\n\t\t}\n\t} // David Eberly's algorithm for finding a bridge between hole and outer polygon\n\n\n\tfunction findHoleBridge(hole, outerNode) {\n\t\tvar p = outerNode;\n\t\tvar hx = hole.x;\n\t\tvar hy = hole.y;\n\t\tvar qx = -Infinity,\n\t\t\t\tm; // find a segment intersected by a ray from the hole's leftmost point to the left;\n\t\t// segment's endpoint with lesser x will be potential connection point\n\n\t\tdo {\n\t\t\tif (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n\t\t\t\tvar x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n\n\t\t\t\tif (x <= hx && x > qx) {\n\t\t\t\t\tqx = x;\n\n\t\t\t\t\tif (x === hx) {\n\t\t\t\t\t\tif (hy === p.y) return p;\n\t\t\t\t\t\tif (hy === p.next.y) return p.next;\n\t\t\t\t\t}\n\n\t\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== outerNode);\n\n\t\tif (!m) return null;\n\t\tif (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\n\t\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t\t// if there are no points found, we have a valid connection;\n\t\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\t\tvar stop = m,\n\t\t\t\tmx = m.x,\n\t\t\t\tmy = m.y;\n\t\tvar tanMin = Infinity,\n\t\t\t\ttan;\n\t\tp = m;\n\n\t\tdo {\n\t\t\tif (hx >= p.x && p.x >= mx && hx !== p.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\t\t\t\ttan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n\t\t\t\tif (locallyInside(p, hole) && (tan < tanMin || tan === tanMin && (p.x > m.x || p.x === m.x && sectorContainsSector(m, p)))) {\n\t\t\t\t\tm = p;\n\t\t\t\t\ttanMin = tan;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tp = p.next;\n\t\t} while (p !== stop);\n\n\t\treturn m;\n\t} // whether sector in vertex m contains sector in vertex p in the same coordinates\n\n\n\tfunction sectorContainsSector(m, p) {\n\t\treturn area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n\t} // interlink polygon nodes in z-order\n\n\n\tfunction indexCurve(start, minX, minY, invSize) {\n\t\tvar p = start;\n\n\t\tdo {\n\t\t\tif (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n\t\t\tp.prevZ = p.prev;\n\t\t\tp.nextZ = p.next;\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\tp.prevZ.nextZ = null;\n\t\tp.prevZ = null;\n\t\tsortLinked(p);\n\t} // Simon Tatham's linked list merge sort algorithm\n\t// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\n\n\n\tfunction sortLinked(list) {\n\t\tvar i,\n\t\t\t\tp,\n\t\t\t\tq,\n\t\t\t\te,\n\t\t\t\ttail,\n\t\t\t\tnumMerges,\n\t\t\t\tpSize,\n\t\t\t\tqSize,\n\t\t\t\tinSize = 1;\n\n\t\tdo {\n\t\t\tp = list;\n\t\t\tlist = null;\n\t\t\ttail = null;\n\t\t\tnumMerges = 0;\n\n\t\t\twhile (p) {\n\t\t\t\tnumMerges++;\n\t\t\t\tq = p;\n\t\t\t\tpSize = 0;\n\n\t\t\t\tfor (i = 0; i < inSize; i++) {\n\t\t\t\t\tpSize++;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tif (!q) break;\n\t\t\t\t}\n\n\t\t\t\tqSize = inSize;\n\n\t\t\t\twhile (pSize > 0 || qSize > 0 && q) {\n\t\t\t\t\tif (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n\t\t\t\t\t\te = p;\n\t\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\t\tpSize--;\n\t\t\t\t\t} else {\n\t\t\t\t\t\te = q;\n\t\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\t\tqSize--;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (tail) tail.nextZ = e;else list = e;\n\t\t\t\t\te.prevZ = tail;\n\t\t\t\t\ttail = e;\n\t\t\t\t}\n\n\t\t\t\tp = q;\n\t\t\t}\n\n\t\t\ttail.nextZ = null;\n\t\t\tinSize *= 2;\n\t\t} while (numMerges > 1);\n\n\t\treturn list;\n\t} // z-order of a point given coords and inverse of the longer side of data bbox\n\n\n\tfunction zOrder(x, y, minX, minY, invSize) {\n\t\t// coords are transformed into non-negative 15-bit integer range\n\t\tx = 32767 * (x - minX) * invSize;\n\t\ty = 32767 * (y - minY) * invSize;\n\t\tx = (x | x << 8) & 0x00FF00FF;\n\t\tx = (x | x << 4) & 0x0F0F0F0F;\n\t\tx = (x | x << 2) & 0x33333333;\n\t\tx = (x | x << 1) & 0x55555555;\n\t\ty = (y | y << 8) & 0x00FF00FF;\n\t\ty = (y | y << 4) & 0x0F0F0F0F;\n\t\ty = (y | y << 2) & 0x33333333;\n\t\ty = (y | y << 1) & 0x55555555;\n\t\treturn x | y << 1;\n\t} // find the leftmost node of a polygon ring\n\n\n\tfunction getLeftmost(start) {\n\t\tvar p = start,\n\t\t\t\tleftmost = start;\n\n\t\tdo {\n\t\t\tif (p.x < leftmost.x || p.x === leftmost.x && p.y < leftmost.y) leftmost = p;\n\t\t\tp = p.next;\n\t\t} while (p !== start);\n\n\t\treturn leftmost;\n\t} // check if a point lies within a convex triangle\n\n\n\tfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n\t\treturn (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n\t} // check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n\n\n\tfunction isValidDiagonal(a, b) {\n\t\treturn a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && ( // dones't intersect other edges\n\t\tlocallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && ( // locally visible\n\t\tarea(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n\t\tequals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n\t} // signed area of a triangle\n\n\n\tfunction area(p, q, r) {\n\t\treturn (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n\t} // check if two points are equal\n\n\n\tfunction equals(p1, p2) {\n\t\treturn p1.x === p2.x && p1.y === p2.y;\n\t} // check if two segments intersect\n\n\n\tfunction intersects(p1, q1, p2, q2) {\n\t\tvar o1 = sign(area(p1, q1, p2));\n\t\tvar o2 = sign(area(p1, q1, q2));\n\t\tvar o3 = sign(area(p2, q2, p1));\n\t\tvar o4 = sign(area(p2, q2, q1));\n\t\tif (o1 !== o2 && o3 !== o4) return true; // general case\n\n\t\tif (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n\n\t\tif (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n\n\t\tif (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n\n\t\tif (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n\t\treturn false;\n\t} // for collinear points p, q, r, check if point q lies on segment pr\n\n\n\tfunction onSegment(p, q, r) {\n\t\treturn q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n\t}\n\n\tfunction sign(num) {\n\t\treturn num > 0 ? 1 : num < 0 ? -1 : 0;\n\t} // check if a polygon diagonal intersects any polygon segments\n\n\n\tfunction intersectsPolygon(a, b) {\n\t\tvar p = a;\n\n\t\tdo {\n\t\t\tif (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) return true;\n\t\t\tp = p.next;\n\t\t} while (p !== a);\n\n\t\treturn false;\n\t} // check if a polygon diagonal is locally inside the polygon\n\n\n\tfunction locallyInside(a, b) {\n\t\treturn area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n\t} // check if the middle point of a polygon diagonal is inside the polygon\n\n\n\tfunction middleInside(a, b) {\n\t\tvar p = a,\n\t\t\t\tinside = false;\n\t\tvar px = (a.x + b.x) / 2,\n\t\t\t\tpy = (a.y + b.y) / 2;\n\n\t\tdo {\n\t\t\tif (p.y > py !== p.next.y > py && p.next.y !== p.y && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) inside = !inside;\n\t\t\tp = p.next;\n\t\t} while (p !== a);\n\n\t\treturn inside;\n\t} // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n\t// if one belongs to the outer ring and another to a hole, it merges it into a single ring\n\n\n\tfunction splitPolygon(a, b) {\n\t\tvar a2 = new Node(a.i, a.x, a.y),\n\t\t\t\tb2 = new Node(b.i, b.x, b.y),\n\t\t\t\tan = a.next,\n\t\t\t\tbp = b.prev;\n\t\ta.next = b;\n\t\tb.prev = a;\n\t\ta2.next = an;\n\t\tan.prev = a2;\n\t\tb2.next = a2;\n\t\ta2.prev = b2;\n\t\tbp.next = b2;\n\t\tb2.prev = bp;\n\t\treturn b2;\n\t} // create a node and optionally link it with previous one (in a circular doubly linked list)\n\n\n\tfunction insertNode(i, x, y, last) {\n\t\tvar p = new Node(i, x, y);\n\n\t\tif (!last) {\n\t\t\tp.prev = p;\n\t\t\tp.next = p;\n\t\t} else {\n\t\t\tp.next = last.next;\n\t\t\tp.prev = last;\n\t\t\tlast.next.prev = p;\n\t\t\tlast.next = p;\n\t\t}\n\n\t\treturn p;\n\t}\n\n\tfunction removeNode(p) {\n\t\tp.next.prev = p.prev;\n\t\tp.prev.next = p.next;\n\t\tif (p.prevZ) p.prevZ.nextZ = p.nextZ;\n\t\tif (p.nextZ) p.nextZ.prevZ = p.prevZ;\n\t}\n\n\tfunction Node(i, x, y) {\n\t\t// vertex index in coordinates array\n\t\tthis.i = i; // vertex coordinates\n\n\t\tthis.x = x;\n\t\tthis.y = y; // previous and next vertex nodes in a polygon ring\n\n\t\tthis.prev = null;\n\t\tthis.next = null; // z-order curve value\n\n\t\tthis.z = null; // previous and next nodes in z-order\n\n\t\tthis.prevZ = null;\n\t\tthis.nextZ = null; // indicates whether this is a steiner point\n\n\t\tthis.steiner = false;\n\t}\n\n\tfunction signedArea(data, start, end, dim) {\n\t\tvar sum = 0;\n\n\t\tfor (var i = start, j = end - dim; i < end; i += dim) {\n\t\t\tsum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n\t\t\tj = i;\n\t\t}\n\n\t\treturn sum;\n\t}\n\n\tvar ShapeUtils = {\n\t\t// calculate area of the contour polygon\n\t\tarea: function area(contour) {\n\t\t\tvar n = contour.length;\n\t\t\tvar a = 0.0;\n\n\t\t\tfor (var p = n - 1, q = 0; q < n; p = q++) {\n\t\t\t\ta += contour[p].x * contour[q].y - contour[q].x * contour[p].y;\n\t\t\t}\n\n\t\t\treturn a * 0.5;\n\t\t},\n\t\tisClockWise: function isClockWise(pts) {\n\t\t\treturn ShapeUtils.area(pts) < 0;\n\t\t},\n\t\ttriangulateShape: function triangulateShape(contour, holes) {\n\t\t\tvar vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\n\t\t\tvar holeIndices = []; // array of hole indices\n\n\t\t\tvar faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\t\tremoveDupEndPts(contour);\n\t\t\taddContour(vertices, contour); //\n\n\t\t\tvar holeIndex = contour.length;\n\t\t\tholes.forEach(removeDupEndPts);\n\n\t\t\tfor (var i = 0; i < holes.length; i++) {\n\t\t\t\tholeIndices.push(holeIndex);\n\t\t\t\tholeIndex += holes[i].length;\n\t\t\t\taddContour(vertices, holes[i]);\n\t\t\t} //\n\n\n\t\t\tvar triangles = Earcut.triangulate(vertices, holeIndices); //\n\n\t\t\tfor (var _i = 0; _i < triangles.length; _i += 3) {\n\t\t\t\tfaces.push(triangles.slice(_i, _i + 3));\n\t\t\t}\n\n\t\t\treturn faces;\n\t\t}\n\t};\n\n\tfunction removeDupEndPts(points) {\n\t\tvar l = points.length;\n\n\t\tif (l > 2 && points[l - 1].equals(points[0])) {\n\t\t\tpoints.pop();\n\t\t}\n\t}\n\n\tfunction addContour(vertices, contour) {\n\t\tfor (var i = 0; i < contour.length; i++) {\n\t\t\tvertices.push(contour[i].x);\n\t\t\tvertices.push(contour[i].y);\n\t\t}\n\t}\n\n\tvar ExtrudeGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(ExtrudeGeometry, _BufferGeometry);\n\n\t\tfunction ExtrudeGeometry(shapes, options) {\n\t\t\tvar _this;\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'ExtrudeGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\toptions: options\n\t\t\t};\n\t\t\tshapes = Array.isArray(shapes) ? shapes : [shapes];\n\n\t\t\tvar scope = _assertThisInitialized(_this);\n\n\t\t\tvar verticesArray = [];\n\t\t\tvar uvArray = [];\n\n\t\t\tfor (var i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tvar shape = shapes[i];\n\t\t\t\taddShape(shape);\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(verticesArray, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvArray, 2));\n\n\t\t\t_this.computeVertexNormals(); // functions\n\n\n\t\t\tfunction addShape(shape) {\n\t\t\t\tvar placeholder = []; // options\n\n\t\t\t\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\t\tvar steps = options.steps !== undefined ? options.steps : 1;\n\t\t\t\tvar depth = options.depth !== undefined ? options.depth : 100;\n\t\t\t\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\t\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6;\n\t\t\t\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2;\n\t\t\t\tvar bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\t\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\t\t\t\tvar extrudePath = options.extrudePath;\n\t\t\t\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator; // deprecated options\n\n\t\t\t\tif (options.amount !== undefined) {\n\t\t\t\t\tconsole.warn('THREE.ExtrudeBufferGeometry: amount has been renamed to depth.');\n\t\t\t\t\tdepth = options.amount;\n\t\t\t\t} //\n\n\n\t\t\t\tvar extrudePts,\n\t\t\t\t\t\textrudeByPath = false;\n\t\t\t\tvar splineTube, binormal, normal, position2;\n\n\t\t\t\tif (extrudePath) {\n\t\t\t\t\textrudePts = extrudePath.getSpacedPoints(steps);\n\t\t\t\t\textrudeByPath = true;\n\t\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\t\t\t\t\t// SETUP TNB variables\n\t\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\t\tsplineTube = extrudePath.computeFrenetFrames(steps, false); // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\t\tbinormal = new Vector3();\n\t\t\t\t\tnormal = new Vector3();\n\t\t\t\t\tposition2 = new Vector3();\n\t\t\t\t} // Safeguards if bevels are not enabled\n\n\n\t\t\t\tif (!bevelEnabled) {\n\t\t\t\t\tbevelSegments = 0;\n\t\t\t\t\tbevelThickness = 0;\n\t\t\t\t\tbevelSize = 0;\n\t\t\t\t\tbevelOffset = 0;\n\t\t\t\t} // Variables initialization\n\n\n\t\t\t\tvar shapePoints = shape.extractPoints(curveSegments);\n\t\t\t\tvar vertices = shapePoints.shape;\n\t\t\t\tvar holes = shapePoints.holes;\n\t\t\t\tvar reverse = !ShapeUtils.isClockWise(vertices);\n\n\t\t\t\tif (reverse) {\n\t\t\t\t\tvertices = vertices.reverse(); // Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\t\tfor (var h = 0, hl = holes.length; h < hl; h++) {\n\t\t\t\t\t\tvar ahole = holes[h];\n\n\t\t\t\t\t\tif (ShapeUtils.isClockWise(ahole)) {\n\t\t\t\t\t\t\tholes[h] = ahole.reverse();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar faces = ShapeUtils.triangulateShape(vertices, holes);\n\t\t\t\t/* Vertices */\n\n\t\t\t\tvar contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\t\tfor (var _h = 0, _hl = holes.length; _h < _hl; _h++) {\n\t\t\t\t\tvar _ahole = holes[_h];\n\t\t\t\t\tvertices = vertices.concat(_ahole);\n\t\t\t\t}\n\n\t\t\t\tfunction scalePt2(pt, vec, size) {\n\t\t\t\t\tif (!vec) console.error('THREE.ExtrudeGeometry: vec does not exist');\n\t\t\t\t\treturn vec.clone().multiplyScalar(size).add(pt);\n\t\t\t\t}\n\n\t\t\t\tvar vlen = vertices.length,\n\t\t\t\t\t\tflen = faces.length; // Find directions for point movement\n\n\t\t\t\tfunction getBevelVec(inPt, inPrev, inNext) {\n\t\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t\t//\t shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t\t//\n\t\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t\t//\tadjacent edges of inPt at a distance of 1 unit on the left side.\n\t\t\t\t\tvar v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\t\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\t\tvar v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\t\tvar v_next_x = inNext.x - inPt.x,\n\t\t\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\t\t\t\t\tvar v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y; // check for collinear edges\n\n\t\t\t\t\tvar collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;\n\n\t\t\t\t\tif (Math.abs(collinear0) > Number.EPSILON) {\n\t\t\t\t\t\t// not collinear\n\t\t\t\t\t\t// length of vectors for normalizing\n\t\t\t\t\t\tvar v_prev_len = Math.sqrt(v_prev_lensq);\n\t\t\t\t\t\tvar v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y); // shift adjacent points by unit vectors to the left\n\n\t\t\t\t\t\tvar ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;\n\t\t\t\t\t\tvar ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;\n\t\t\t\t\t\tvar ptNextShift_x = inNext.x - v_next_y / v_next_len;\n\t\t\t\t\t\tvar ptNextShift_y = inNext.y + v_next_x / v_next_len; // scaling factor for v_prev to intersection point\n\n\t\t\t\t\t\tvar sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x); // vector from inPt to intersection point\n\n\t\t\t\t\t\tv_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;\n\t\t\t\t\t\tv_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y; // Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t\t//\tbut prevent crazy spikes\n\n\t\t\t\t\t\tvar v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;\n\n\t\t\t\t\t\tif (v_trans_lensq <= 2) {\n\t\t\t\t\t\t\treturn new Vector2(v_trans_x, v_trans_y);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_trans_lensq / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// handle special case of collinear edges\n\t\t\t\t\t\tvar direction_eq = false; // assumes: opposite\n\n\t\t\t\t\t\tif (v_prev_x > Number.EPSILON) {\n\t\t\t\t\t\t\tif (v_next_x > Number.EPSILON) {\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (v_prev_x < -Number.EPSILON) {\n\t\t\t\t\t\t\t\tif (v_next_x < -Number.EPSILON) {\n\t\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (Math.sign(v_prev_y) === Math.sign(v_next_y)) {\n\t\t\t\t\t\t\t\t\tdirection_eq = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (direction_eq) {\n\t\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\t\tv_trans_x = -v_prev_y;\n\t\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_prev_lensq);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\t\tshrink_by = Math.sqrt(v_prev_lensq / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);\n\t\t\t\t}\n\n\t\t\t\tvar contourMovements = [];\n\n\t\t\t\tfor (var _i = 0, il = contour.length, j = il - 1, k = _i + 1; _i < il; _i++, j++, k++) {\n\t\t\t\t\tif (j === il) j = 0;\n\t\t\t\t\tif (k === il) k = 0; //\t(j)---(i)---(k)\n\t\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\t\tcontourMovements[_i] = getBevelVec(contour[_i], contour[j], contour[k]);\n\t\t\t\t}\n\n\t\t\t\tvar holesMovements = [];\n\t\t\t\tvar oneHoleMovements,\n\t\t\t\t\t\tverticesMovements = contourMovements.concat();\n\n\t\t\t\tfor (var _h2 = 0, _hl2 = holes.length; _h2 < _hl2; _h2++) {\n\t\t\t\t\tvar _ahole2 = holes[_h2];\n\t\t\t\t\toneHoleMovements = [];\n\n\t\t\t\t\tfor (var _i2 = 0, _il = _ahole2.length, _j = _il - 1, _k = _i2 + 1; _i2 < _il; _i2++, _j++, _k++) {\n\t\t\t\t\t\tif (_j === _il) _j = 0;\n\t\t\t\t\t\tif (_k === _il) _k = 0; //\t(j)---(i)---(k)\n\n\t\t\t\t\t\toneHoleMovements[_i2] = getBevelVec(_ahole2[_i2], _ahole2[_j], _ahole2[_k]);\n\t\t\t\t\t}\n\n\t\t\t\t\tholesMovements.push(oneHoleMovements);\n\t\t\t\t\tverticesMovements = verticesMovements.concat(oneHoleMovements);\n\t\t\t\t} // Loop bevelSegments, 1 for the front, 1 for the back\n\n\n\t\t\t\tfor (var b = 0; b < bevelSegments; b++) {\n\t\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\t\t\t\t\tvar t = b / bevelSegments;\n\t\t\t\t\tvar z = bevelThickness * Math.cos(t * Math.PI / 2);\n\n\t\t\t\t\tvar _bs = bevelSize * Math.sin(t * Math.PI / 2) + bevelOffset; // contract shape\n\n\n\t\t\t\t\tfor (var _i3 = 0, _il2 = contour.length; _i3 < _il2; _i3++) {\n\t\t\t\t\t\tvar vert = scalePt2(contour[_i3], contourMovements[_i3], _bs);\n\t\t\t\t\t\tv(vert.x, vert.y, -z);\n\t\t\t\t\t} // expand holes\n\n\n\t\t\t\t\tfor (var _h3 = 0, _hl3 = holes.length; _h3 < _hl3; _h3++) {\n\t\t\t\t\t\tvar _ahole3 = holes[_h3];\n\t\t\t\t\t\toneHoleMovements = holesMovements[_h3];\n\n\t\t\t\t\t\tfor (var _i4 = 0, _il3 = _ahole3.length; _i4 < _il3; _i4++) {\n\t\t\t\t\t\t\tvar _vert = scalePt2(_ahole3[_i4], oneHoleMovements[_i4], _bs);\n\n\t\t\t\t\t\t\tv(_vert.x, _vert.y, -z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar bs = bevelSize + bevelOffset; // Back facing vertices\n\n\t\t\t\tfor (var _i5 = 0; _i5 < vlen; _i5++) {\n\t\t\t\t\tvar _vert2 = bevelEnabled ? scalePt2(vertices[_i5], verticesMovements[_i5], bs) : vertices[_i5];\n\n\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\tv(_vert2.x, _vert2.y, 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\t\t\t\t\t\tnormal.copy(splineTube.normals[0]).multiplyScalar(_vert2.x);\n\t\t\t\t\t\tbinormal.copy(splineTube.binormals[0]).multiplyScalar(_vert2.y);\n\t\t\t\t\t\tposition2.copy(extrudePts[0]).add(normal).add(binormal);\n\t\t\t\t\t\tv(position2.x, position2.y, position2.z);\n\t\t\t\t\t}\n\t\t\t\t} // Add stepped vertices...\n\t\t\t\t// Including front facing vertices\n\n\n\t\t\t\tfor (var s = 1; s <= steps; s++) {\n\t\t\t\t\tfor (var _i6 = 0; _i6 < vlen; _i6++) {\n\t\t\t\t\t\tvar _vert3 = bevelEnabled ? scalePt2(vertices[_i6], verticesMovements[_i6], bs) : vertices[_i6];\n\n\t\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\t\tv(_vert3.x, _vert3.y, depth / steps * s);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\t\t\t\t\t\t\tnormal.copy(splineTube.normals[s]).multiplyScalar(_vert3.x);\n\t\t\t\t\t\t\tbinormal.copy(splineTube.binormals[s]).multiplyScalar(_vert3.y);\n\t\t\t\t\t\t\tposition2.copy(extrudePts[s]).add(normal).add(binormal);\n\t\t\t\t\t\t\tv(position2.x, position2.y, position2.z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // Add bevel segments planes\n\t\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\n\n\t\t\t\tfor (var _b = bevelSegments - 1; _b >= 0; _b--) {\n\t\t\t\t\tvar _t = _b / bevelSegments;\n\n\t\t\t\t\tvar _z = bevelThickness * Math.cos(_t * Math.PI / 2);\n\n\t\t\t\t\tvar _bs2 = bevelSize * Math.sin(_t * Math.PI / 2) + bevelOffset; // contract shape\n\n\n\t\t\t\t\tfor (var _i7 = 0, _il4 = contour.length; _i7 < _il4; _i7++) {\n\t\t\t\t\t\tvar _vert4 = scalePt2(contour[_i7], contourMovements[_i7], _bs2);\n\n\t\t\t\t\t\tv(_vert4.x, _vert4.y, depth + _z);\n\t\t\t\t\t} // expand holes\n\n\n\t\t\t\t\tfor (var _h4 = 0, _hl4 = holes.length; _h4 < _hl4; _h4++) {\n\t\t\t\t\t\tvar _ahole4 = holes[_h4];\n\t\t\t\t\t\toneHoleMovements = holesMovements[_h4];\n\n\t\t\t\t\t\tfor (var _i8 = 0, _il5 = _ahole4.length; _i8 < _il5; _i8++) {\n\t\t\t\t\t\t\tvar _vert5 = scalePt2(_ahole4[_i8], oneHoleMovements[_i8], _bs2);\n\n\t\t\t\t\t\t\tif (!extrudeByPath) {\n\t\t\t\t\t\t\t\tv(_vert5.x, _vert5.y, depth + _z);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tv(_vert5.x, _vert5.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + _z);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/* Faces */\n\t\t\t\t// Top and bottom faces\n\n\n\t\t\t\tbuildLidFaces(); // Sides faces\n\n\t\t\t\tbuildSideFaces(); /////\tInternal functions\n\n\t\t\t\tfunction buildLidFaces() {\n\t\t\t\t\tvar start = verticesArray.length / 3;\n\n\t\t\t\t\tif (bevelEnabled) {\n\t\t\t\t\t\tvar layer = 0; // steps + 1\n\n\t\t\t\t\t\tvar offset = vlen * layer; // Bottom faces\n\n\t\t\t\t\t\tfor (var _i9 = 0; _i9 < flen; _i9++) {\n\t\t\t\t\t\t\tvar face = faces[_i9];\n\t\t\t\t\t\t\tf3(face[2] + offset, face[1] + offset, face[0] + offset);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\t\toffset = vlen * layer; // Top faces\n\n\t\t\t\t\t\tfor (var _i10 = 0; _i10 < flen; _i10++) {\n\t\t\t\t\t\t\tvar _face = faces[_i10];\n\t\t\t\t\t\t\tf3(_face[0] + offset, _face[1] + offset, _face[2] + offset);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Bottom faces\n\t\t\t\t\t\tfor (var _i11 = 0; _i11 < flen; _i11++) {\n\t\t\t\t\t\t\tvar _face2 = faces[_i11];\n\t\t\t\t\t\t\tf3(_face2[2], _face2[1], _face2[0]);\n\t\t\t\t\t\t} // Top faces\n\n\n\t\t\t\t\t\tfor (var _i12 = 0; _i12 < flen; _i12++) {\n\t\t\t\t\t\t\tvar _face3 = faces[_i12];\n\t\t\t\t\t\t\tf3(_face3[0] + vlen * steps, _face3[1] + vlen * steps, _face3[2] + vlen * steps);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addGroup(start, verticesArray.length / 3 - start, 0);\n\t\t\t\t} // Create faces for the z-sides of the shape\n\n\n\t\t\t\tfunction buildSideFaces() {\n\t\t\t\t\tvar start = verticesArray.length / 3;\n\t\t\t\t\tvar layeroffset = 0;\n\t\t\t\t\tsidewalls(contour, layeroffset);\n\t\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\t\tfor (var _h5 = 0, _hl5 = holes.length; _h5 < _hl5; _h5++) {\n\t\t\t\t\t\tvar _ahole5 = holes[_h5];\n\t\t\t\t\t\tsidewalls(_ahole5, layeroffset); //, true\n\n\t\t\t\t\t\tlayeroffset += _ahole5.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.addGroup(start, verticesArray.length / 3 - start, 1);\n\t\t\t\t}\n\n\t\t\t\tfunction sidewalls(contour, layeroffset) {\n\t\t\t\t\tvar i = contour.length;\n\n\t\t\t\t\twhile (--i >= 0) {\n\t\t\t\t\t\tvar _j2 = i;\n\n\t\t\t\t\t\tvar _k2 = i - 1;\n\n\t\t\t\t\t\tif (_k2 < 0) _k2 = contour.length - 1; //console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\t\tfor (var _s = 0, sl = steps + bevelSegments * 2; _s < sl; _s++) {\n\t\t\t\t\t\t\tvar slen1 = vlen * _s;\n\t\t\t\t\t\t\tvar slen2 = vlen * (_s + 1);\n\n\t\t\t\t\t\t\tvar a = layeroffset + _j2 + slen1,\n\t\t\t\t\t\t\t\t\t_b2 = layeroffset + _k2 + slen1,\n\t\t\t\t\t\t\t\t\tc = layeroffset + _k2 + slen2,\n\t\t\t\t\t\t\t\t\td = layeroffset + _j2 + slen2;\n\n\t\t\t\t\t\t\tf4(a, _b2, c, d);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfunction v(x, y, z) {\n\t\t\t\t\tplaceholder.push(x);\n\t\t\t\t\tplaceholder.push(y);\n\t\t\t\t\tplaceholder.push(z);\n\t\t\t\t}\n\n\t\t\t\tfunction f3(a, b, c) {\n\t\t\t\t\taddVertex(a);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(c);\n\t\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\t\tvar uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n\t\t\t\t\taddUV(uvs[0]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[2]);\n\t\t\t\t}\n\n\t\t\t\tfunction f4(a, b, c, d) {\n\t\t\t\t\taddVertex(a);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(d);\n\t\t\t\t\taddVertex(b);\n\t\t\t\t\taddVertex(c);\n\t\t\t\t\taddVertex(d);\n\t\t\t\t\tvar nextIndex = verticesArray.length / 3;\n\t\t\t\t\tvar uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);\n\t\t\t\t\taddUV(uvs[0]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[3]);\n\t\t\t\t\taddUV(uvs[1]);\n\t\t\t\t\taddUV(uvs[2]);\n\t\t\t\t\taddUV(uvs[3]);\n\t\t\t\t}\n\n\t\t\t\tfunction addVertex(index) {\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 0]);\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 1]);\n\t\t\t\t\tverticesArray.push(placeholder[index * 3 + 2]);\n\t\t\t\t}\n\n\t\t\t\tfunction addUV(vector2) {\n\t\t\t\t\tuvArray.push(vector2.x);\n\t\t\t\t\tuvArray.push(vector2.y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = ExtrudeGeometry.prototype;\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call(this);\n\t\t\tvar shapes = this.parameters.shapes;\n\t\t\tvar options = this.parameters.options;\n\t\t\treturn _toJSON(shapes, options, data);\n\t\t};\n\n\t\treturn ExtrudeGeometry;\n\t}(BufferGeometry);\n\n\tvar WorldUVGenerator = {\n\t\tgenerateTopUV: function generateTopUV(geometry, vertices, indexA, indexB, indexC) {\n\t\t\tvar a_x = vertices[indexA * 3];\n\t\t\tvar a_y = vertices[indexA * 3 + 1];\n\t\t\tvar b_x = vertices[indexB * 3];\n\t\t\tvar b_y = vertices[indexB * 3 + 1];\n\t\t\tvar c_x = vertices[indexC * 3];\n\t\t\tvar c_y = vertices[indexC * 3 + 1];\n\t\t\treturn [new Vector2(a_x, a_y), new Vector2(b_x, b_y), new Vector2(c_x, c_y)];\n\t\t},\n\t\tgenerateSideWallUV: function generateSideWallUV(geometry, vertices, indexA, indexB, indexC, indexD) {\n\t\t\tvar a_x = vertices[indexA * 3];\n\t\t\tvar a_y = vertices[indexA * 3 + 1];\n\t\t\tvar a_z = vertices[indexA * 3 + 2];\n\t\t\tvar b_x = vertices[indexB * 3];\n\t\t\tvar b_y = vertices[indexB * 3 + 1];\n\t\t\tvar b_z = vertices[indexB * 3 + 2];\n\t\t\tvar c_x = vertices[indexC * 3];\n\t\t\tvar c_y = vertices[indexC * 3 + 1];\n\t\t\tvar c_z = vertices[indexC * 3 + 2];\n\t\t\tvar d_x = vertices[indexD * 3];\n\t\t\tvar d_y = vertices[indexD * 3 + 1];\n\t\t\tvar d_z = vertices[indexD * 3 + 2];\n\n\t\t\tif (Math.abs(a_y - b_y) < 0.01) {\n\t\t\t\treturn [new Vector2(a_x, 1 - a_z), new Vector2(b_x, 1 - b_z), new Vector2(c_x, 1 - c_z), new Vector2(d_x, 1 - d_z)];\n\t\t\t} else {\n\t\t\t\treturn [new Vector2(a_y, 1 - a_z), new Vector2(b_y, 1 - b_z), new Vector2(c_y, 1 - c_z), new Vector2(d_y, 1 - d_z)];\n\t\t\t}\n\t\t}\n\t};\n\n\tfunction _toJSON(shapes, options, data) {\n\t\tdata.shapes = [];\n\n\t\tif (Array.isArray(shapes)) {\n\t\t\tfor (var i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tvar shape = shapes[i];\n\t\t\t\tdata.shapes.push(shape.uuid);\n\t\t\t}\n\t\t} else {\n\t\t\tdata.shapes.push(shapes.uuid);\n\t\t}\n\n\t\tif (options.extrudePath !== undefined) data.options.extrudePath = options.extrudePath.toJSON();\n\t\treturn data;\n\t}\n\n\tvar IcosahedronGeometry = /*#__PURE__*/function (_PolyhedronGeometry) {\n\t\t_inheritsLoose(IcosahedronGeometry, _PolyhedronGeometry);\n\n\t\tfunction IcosahedronGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (detail === void 0) {\n\t\t\t\tdetail = 0;\n\t\t\t}\n\n\t\t\tvar t = (1 + Math.sqrt(5)) / 2;\n\t\t\tvar vertices = [-1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, 0, 0, -1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, t, 0, -1, t, 0, 1, -t, 0, -1, -t, 0, 1];\n\t\t\tvar indices = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1];\n\t\t\t_this = _PolyhedronGeometry.call(this, vertices, indices, radius, detail) || this;\n\t\t\t_this.type = 'IcosahedronGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn IcosahedronGeometry;\n\t}(PolyhedronGeometry);\n\n\tvar LatheGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(LatheGeometry, _BufferGeometry);\n\n\t\tfunction LatheGeometry(points, segments, phiStart, phiLength) {\n\t\t\tvar _this;\n\n\t\t\tif (segments === void 0) {\n\t\t\t\tsegments = 12;\n\t\t\t}\n\n\t\t\tif (phiStart === void 0) {\n\t\t\t\tphiStart = 0;\n\t\t\t}\n\n\t\t\tif (phiLength === void 0) {\n\t\t\t\tphiLength = Math.PI * 2;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'LatheGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tpoints: points,\n\t\t\t\tsegments: segments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength\n\t\t\t};\n\t\t\tsegments = Math.floor(segments); // clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\t\tphiLength = MathUtils.clamp(phiLength, 0, Math.PI * 2); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar inverseSegments = 1.0 / segments;\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar uv = new Vector2(); // generate vertices and uvs\n\n\t\t\tfor (var i = 0; i <= segments; i++) {\n\t\t\t\tvar phi = phiStart + i * inverseSegments * phiLength;\n\t\t\t\tvar sin = Math.sin(phi);\n\t\t\t\tvar cos = Math.cos(phi);\n\n\t\t\t\tfor (var j = 0; j <= points.length - 1; j++) {\n\t\t\t\t\t// vertex\n\t\t\t\t\tvertex.x = points[j].x * sin;\n\t\t\t\t\tvertex.y = points[j].y;\n\t\t\t\t\tvertex.z = points[j].x * cos;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // uv\n\n\t\t\t\t\tuv.x = i / segments;\n\t\t\t\t\tuv.y = j / (points.length - 1);\n\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t}\n\t\t\t} // indices\n\n\n\t\t\tfor (var _i = 0; _i < segments; _i++) {\n\t\t\t\tfor (var _j = 0; _j < points.length - 1; _j++) {\n\t\t\t\t\tvar base = _j + _i * points.length;\n\t\t\t\t\tvar a = base;\n\t\t\t\t\tvar b = base + points.length;\n\t\t\t\t\tvar c = base + points.length + 1;\n\t\t\t\t\tvar d = base + 1; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // generate normals\n\n\n\t\t\t_this.computeVertexNormals(); // if the geometry is closed, we need to average the normals along the seam.\n\t\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\n\t\t\tif (phiLength === Math.PI * 2) {\n\t\t\t\tvar normals = _this.attributes.normal.array;\n\t\t\t\tvar n1 = new Vector3();\n\t\t\t\tvar n2 = new Vector3();\n\t\t\t\tvar n = new Vector3(); // this is the buffer offset for the last line of vertices\n\n\t\t\t\tvar _base = segments * points.length * 3;\n\n\t\t\t\tfor (var _i2 = 0, _j2 = 0; _i2 < points.length; _i2++, _j2 += 3) {\n\t\t\t\t\t// select the normal of the vertex in the first line\n\t\t\t\t\tn1.x = normals[_j2 + 0];\n\t\t\t\t\tn1.y = normals[_j2 + 1];\n\t\t\t\t\tn1.z = normals[_j2 + 2]; // select the normal of the vertex in the last line\n\n\t\t\t\t\tn2.x = normals[_base + _j2 + 0];\n\t\t\t\t\tn2.y = normals[_base + _j2 + 1];\n\t\t\t\t\tn2.z = normals[_base + _j2 + 2]; // average normals\n\n\t\t\t\t\tn.addVectors(n1, n2).normalize(); // assign the new values to both normals\n\n\t\t\t\t\tnormals[_j2 + 0] = normals[_base + _j2 + 0] = n.x;\n\t\t\t\t\tnormals[_j2 + 1] = normals[_base + _j2 + 1] = n.y;\n\t\t\t\t\tnormals[_j2 + 2] = normals[_base + _j2 + 2] = n.z;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn LatheGeometry;\n\t}(BufferGeometry);\n\n\tvar OctahedronGeometry = /*#__PURE__*/function (_PolyhedronGeometry) {\n\t\t_inheritsLoose(OctahedronGeometry, _PolyhedronGeometry);\n\n\t\tfunction OctahedronGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (detail === void 0) {\n\t\t\t\tdetail = 0;\n\t\t\t}\n\n\t\t\tvar vertices = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1];\n\t\t\tvar indices = [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2];\n\t\t\t_this = _PolyhedronGeometry.call(this, vertices, indices, radius, detail) || this;\n\t\t\t_this.type = 'OctahedronGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn OctahedronGeometry;\n\t}(PolyhedronGeometry);\n\n\t/**\n\t * Parametric Surfaces Geometry\n\t * based on the brilliant article by @prideout https://prideout.net/blog/old/blog/index.html@p=44.html\n\t */\n\n\tfunction ParametricGeometry(func, slices, stacks) {\n\t\tBufferGeometry.call(this);\n\t\tthis.type = 'ParametricGeometry';\n\t\tthis.parameters = {\n\t\t\tfunc: func,\n\t\t\tslices: slices,\n\t\t\tstacks: stacks\n\t\t}; // buffers\n\n\t\tvar indices = [];\n\t\tvar vertices = [];\n\t\tvar normals = [];\n\t\tvar uvs = [];\n\t\tvar EPS = 0.00001;\n\t\tvar normal = new Vector3();\n\t\tvar p0 = new Vector3(),\n\t\t\t\tp1 = new Vector3();\n\t\tvar pu = new Vector3(),\n\t\t\t\tpv = new Vector3();\n\n\t\tif (func.length < 3) {\n\t\t\tconsole.error('THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.');\n\t\t} // generate vertices, normals and uvs\n\n\n\t\tvar sliceCount = slices + 1;\n\n\t\tfor (var i = 0; i <= stacks; i++) {\n\t\t\tvar v = i / stacks;\n\n\t\t\tfor (var j = 0; j <= slices; j++) {\n\t\t\t\tvar u = j / slices; // vertex\n\n\t\t\t\tfunc(u, v, p0);\n\t\t\t\tvertices.push(p0.x, p0.y, p0.z); // normal\n\t\t\t\t// approximate tangent vectors via finite differences\n\n\t\t\t\tif (u - EPS >= 0) {\n\t\t\t\t\tfunc(u - EPS, v, p1);\n\t\t\t\t\tpu.subVectors(p0, p1);\n\t\t\t\t} else {\n\t\t\t\t\tfunc(u + EPS, v, p1);\n\t\t\t\t\tpu.subVectors(p1, p0);\n\t\t\t\t}\n\n\t\t\t\tif (v - EPS >= 0) {\n\t\t\t\t\tfunc(u, v - EPS, p1);\n\t\t\t\t\tpv.subVectors(p0, p1);\n\t\t\t\t} else {\n\t\t\t\t\tfunc(u, v + EPS, p1);\n\t\t\t\t\tpv.subVectors(p1, p0);\n\t\t\t\t} // cross product of tangent vectors returns surface normal\n\n\n\t\t\t\tnormal.crossVectors(pu, pv).normalize();\n\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\tuvs.push(u, v);\n\t\t\t}\n\t\t} // generate indices\n\n\n\t\tfor (var _i = 0; _i < stacks; _i++) {\n\t\t\tfor (var _j = 0; _j < slices; _j++) {\n\t\t\t\tvar a = _i * sliceCount + _j;\n\t\t\t\tvar b = _i * sliceCount + _j + 1;\n\t\t\t\tvar c = (_i + 1) * sliceCount + _j + 1;\n\t\t\t\tvar d = (_i + 1) * sliceCount + _j; // faces one and two\n\n\t\t\t\tindices.push(a, b, d);\n\t\t\t\tindices.push(b, c, d);\n\t\t\t}\n\t\t} // build geometry\n\n\n\t\tthis.setIndex(indices);\n\t\tthis.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\tthis.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\t\tthis.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\t}\n\n\tParametricGeometry.prototype = Object.create(BufferGeometry.prototype);\n\tParametricGeometry.prototype.constructor = ParametricGeometry;\n\n\tvar RingGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(RingGeometry, _BufferGeometry);\n\n\t\tfunction RingGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\tif (innerRadius === void 0) {\n\t\t\t\tinnerRadius = 0.5;\n\t\t\t}\n\n\t\t\tif (outerRadius === void 0) {\n\t\t\t\touterRadius = 1;\n\t\t\t}\n\n\t\t\tif (thetaSegments === void 0) {\n\t\t\t\tthetaSegments = 8;\n\t\t\t}\n\n\t\t\tif (phiSegments === void 0) {\n\t\t\t\tphiSegments = 1;\n\t\t\t}\n\n\t\t\tif (thetaStart === void 0) {\n\t\t\t\tthetaStart = 0;\n\t\t\t}\n\n\t\t\tif (thetaLength === void 0) {\n\t\t\t\tthetaLength = Math.PI * 2;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'RingGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tinnerRadius: innerRadius,\n\t\t\t\touterRadius: outerRadius,\n\t\t\t\tthetaSegments: thetaSegments,\n\t\t\t\tphiSegments: phiSegments,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\tthetaSegments = Math.max(3, thetaSegments);\n\t\t\tphiSegments = Math.max(1, phiSegments); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // some helper variables\n\n\t\t\tvar radius = innerRadius;\n\t\t\tvar radiusStep = (outerRadius - innerRadius) / phiSegments;\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar uv = new Vector2(); // generate vertices, normals and uvs\n\n\t\t\tfor (var j = 0; j <= phiSegments; j++) {\n\t\t\t\tfor (var i = 0; i <= thetaSegments; i++) {\n\t\t\t\t\t// values are generate from the inside of the ring to the outside\n\t\t\t\t\tvar segment = thetaStart + i / thetaSegments * thetaLength; // vertex\n\n\t\t\t\t\tvertex.x = radius * Math.cos(segment);\n\t\t\t\t\tvertex.y = radius * Math.sin(segment);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormals.push(0, 0, 1); // uv\n\n\t\t\t\t\tuv.x = (vertex.x / outerRadius + 1) / 2;\n\t\t\t\t\tuv.y = (vertex.y / outerRadius + 1) / 2;\n\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t} // increase the radius for next row of vertices\n\n\n\t\t\t\tradius += radiusStep;\n\t\t\t} // indices\n\n\n\t\t\tfor (var _j = 0; _j < phiSegments; _j++) {\n\t\t\t\tvar thetaSegmentLevel = _j * (thetaSegments + 1);\n\n\t\t\t\tfor (var _i = 0; _i < thetaSegments; _i++) {\n\t\t\t\t\tvar _segment = _i + thetaSegmentLevel;\n\n\t\t\t\t\tvar a = _segment;\n\t\t\t\t\tvar b = _segment + thetaSegments + 1;\n\t\t\t\t\tvar c = _segment + thetaSegments + 2;\n\t\t\t\t\tvar d = _segment + 1; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn RingGeometry;\n\t}(BufferGeometry);\n\n\tvar ShapeGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(ShapeGeometry, _BufferGeometry);\n\n\t\tfunction ShapeGeometry(shapes, curveSegments) {\n\t\t\tvar _this;\n\n\t\t\tif (curveSegments === void 0) {\n\t\t\t\tcurveSegments = 12;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'ShapeGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tshapes: shapes,\n\t\t\t\tcurveSegments: curveSegments\n\t\t\t}; // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar groupStart = 0;\n\t\t\tvar groupCount = 0; // allow single and array values for \"shapes\" parameter\n\n\t\t\tif (Array.isArray(shapes) === false) {\n\t\t\t\taddShape(shapes);\n\t\t\t} else {\n\t\t\t\tfor (var i = 0; i < shapes.length; i++) {\n\t\t\t\t\taddShape(shapes[i]);\n\n\t\t\t\t\t_this.addGroup(groupStart, groupCount, i); // enables MultiMaterial support\n\n\n\t\t\t\t\tgroupStart += groupCount;\n\t\t\t\t\tgroupCount = 0;\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // helper functions\n\n\n\t\t\tfunction addShape(shape) {\n\t\t\t\tvar indexOffset = vertices.length / 3;\n\t\t\t\tvar points = shape.extractPoints(curveSegments);\n\t\t\t\tvar shapeVertices = points.shape;\n\t\t\t\tvar shapeHoles = points.holes; // check direction of vertices\n\n\t\t\t\tif (ShapeUtils.isClockWise(shapeVertices) === false) {\n\t\t\t\t\tshapeVertices = shapeVertices.reverse();\n\t\t\t\t}\n\n\t\t\t\tfor (var _i = 0, l = shapeHoles.length; _i < l; _i++) {\n\t\t\t\t\tvar shapeHole = shapeHoles[_i];\n\n\t\t\t\t\tif (ShapeUtils.isClockWise(shapeHole) === true) {\n\t\t\t\t\t\tshapeHoles[_i] = shapeHole.reverse();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles); // join vertices of inner and outer paths to a single array\n\n\t\t\t\tfor (var _i2 = 0, _l = shapeHoles.length; _i2 < _l; _i2++) {\n\t\t\t\t\tvar _shapeHole = shapeHoles[_i2];\n\t\t\t\t\tshapeVertices = shapeVertices.concat(_shapeHole);\n\t\t\t\t} // vertices, normals, uvs\n\n\n\t\t\t\tfor (var _i3 = 0, _l2 = shapeVertices.length; _i3 < _l2; _i3++) {\n\t\t\t\t\tvar vertex = shapeVertices[_i3];\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, 0);\n\t\t\t\t\tnormals.push(0, 0, 1);\n\t\t\t\t\tuvs.push(vertex.x, vertex.y); // world uvs\n\t\t\t\t} // incides\n\n\n\t\t\t\tfor (var _i4 = 0, _l3 = faces.length; _i4 < _l3; _i4++) {\n\t\t\t\t\tvar face = faces[_i4];\n\t\t\t\t\tvar a = face[0] + indexOffset;\n\t\t\t\t\tvar b = face[1] + indexOffset;\n\t\t\t\t\tvar c = face[2] + indexOffset;\n\t\t\t\t\tindices.push(a, b, c);\n\t\t\t\t\tgroupCount += 3;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = ShapeGeometry.prototype;\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call(this);\n\t\t\tvar shapes = this.parameters.shapes;\n\t\t\treturn _toJSON$1(shapes, data);\n\t\t};\n\n\t\treturn ShapeGeometry;\n\t}(BufferGeometry);\n\n\tfunction _toJSON$1(shapes, data) {\n\t\tdata.shapes = [];\n\n\t\tif (Array.isArray(shapes)) {\n\t\t\tfor (var i = 0, l = shapes.length; i < l; i++) {\n\t\t\t\tvar shape = shapes[i];\n\t\t\t\tdata.shapes.push(shape.uuid);\n\t\t\t}\n\t\t} else {\n\t\t\tdata.shapes.push(shapes.uuid);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tvar SphereGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(SphereGeometry, _BufferGeometry);\n\n\t\tfunction SphereGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (widthSegments === void 0) {\n\t\t\t\twidthSegments = 8;\n\t\t\t}\n\n\t\t\tif (heightSegments === void 0) {\n\t\t\t\theightSegments = 6;\n\t\t\t}\n\n\t\t\tif (phiStart === void 0) {\n\t\t\t\tphiStart = 0;\n\t\t\t}\n\n\t\t\tif (phiLength === void 0) {\n\t\t\t\tphiLength = Math.PI * 2;\n\t\t\t}\n\n\t\t\tif (thetaStart === void 0) {\n\t\t\t\tthetaStart = 0;\n\t\t\t}\n\n\t\t\tif (thetaLength === void 0) {\n\t\t\t\tthetaLength = Math.PI;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'SphereGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\twidthSegments: widthSegments,\n\t\t\t\theightSegments: heightSegments,\n\t\t\t\tphiStart: phiStart,\n\t\t\t\tphiLength: phiLength,\n\t\t\t\tthetaStart: thetaStart,\n\t\t\t\tthetaLength: thetaLength\n\t\t\t};\n\t\t\twidthSegments = Math.max(3, Math.floor(widthSegments));\n\t\t\theightSegments = Math.max(2, Math.floor(heightSegments));\n\t\t\tvar thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);\n\t\t\tvar index = 0;\n\t\t\tvar grid = [];\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar normal = new Vector3(); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // generate vertices, normals and uvs\n\n\t\t\tfor (var iy = 0; iy <= heightSegments; iy++) {\n\t\t\t\tvar verticesRow = [];\n\t\t\t\tvar v = iy / heightSegments; // special case for the poles\n\n\t\t\t\tvar uOffset = 0;\n\n\t\t\t\tif (iy == 0 && thetaStart == 0) {\n\t\t\t\t\tuOffset = 0.5 / widthSegments;\n\t\t\t\t} else if (iy == heightSegments && thetaEnd == Math.PI) {\n\t\t\t\t\tuOffset = -0.5 / widthSegments;\n\t\t\t\t}\n\n\t\t\t\tfor (var ix = 0; ix <= widthSegments; ix++) {\n\t\t\t\t\tvar u = ix / widthSegments; // vertex\n\n\t\t\t\t\tvertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n\t\t\t\t\tvertex.y = radius * Math.cos(thetaStart + v * thetaLength);\n\t\t\t\t\tvertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tnormal.copy(vertex).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(u + uOffset, 1 - v);\n\t\t\t\t\tverticesRow.push(index++);\n\t\t\t\t}\n\n\t\t\t\tgrid.push(verticesRow);\n\t\t\t} // indices\n\n\n\t\t\tfor (var _iy = 0; _iy < heightSegments; _iy++) {\n\t\t\t\tfor (var _ix = 0; _ix < widthSegments; _ix++) {\n\t\t\t\t\tvar a = grid[_iy][_ix + 1];\n\t\t\t\t\tvar b = grid[_iy][_ix];\n\t\t\t\t\tvar c = grid[_iy + 1][_ix];\n\t\t\t\t\tvar d = grid[_iy + 1][_ix + 1];\n\t\t\t\t\tif (_iy !== 0 || thetaStart > 0) indices.push(a, b, d);\n\t\t\t\t\tif (_iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn SphereGeometry;\n\t}(BufferGeometry);\n\n\tvar TetrahedronGeometry = /*#__PURE__*/function (_PolyhedronGeometry) {\n\t\t_inheritsLoose(TetrahedronGeometry, _PolyhedronGeometry);\n\n\t\tfunction TetrahedronGeometry(radius, detail) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (detail === void 0) {\n\t\t\t\tdetail = 0;\n\t\t\t}\n\n\t\t\tvar vertices = [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1];\n\t\t\tvar indices = [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1];\n\t\t\t_this = _PolyhedronGeometry.call(this, vertices, indices, radius, detail) || this;\n\t\t\t_this.type = 'TetrahedronGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\tdetail: detail\n\t\t\t};\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TetrahedronGeometry;\n\t}(PolyhedronGeometry);\n\n\tvar TextGeometry = /*#__PURE__*/function (_ExtrudeGeometry) {\n\t\t_inheritsLoose(TextGeometry, _ExtrudeGeometry);\n\n\t\tfunction TextGeometry(text, parameters) {\n\t\t\tvar _this;\n\n\t\t\tif (parameters === void 0) {\n\t\t\t\tparameters = {};\n\t\t\t}\n\n\t\t\tvar font = parameters.font;\n\n\t\t\tif (!(font && font.isFont)) {\n\t\t\t\tconsole.error('THREE.TextGeometry: font parameter is not an instance of THREE.Font.');\n\t\t\t\treturn new BufferGeometry() || _assertThisInitialized(_this);\n\t\t\t}\n\n\t\t\tvar shapes = font.generateShapes(text, parameters.size); // translate parameters to ExtrudeGeometry API\n\n\t\t\tparameters.depth = parameters.height !== undefined ? parameters.height : 50; // defaults\n\n\t\t\tif (parameters.bevelThickness === undefined) parameters.bevelThickness = 10;\n\t\t\tif (parameters.bevelSize === undefined) parameters.bevelSize = 8;\n\t\t\tif (parameters.bevelEnabled === undefined) parameters.bevelEnabled = false;\n\t\t\t_this = _ExtrudeGeometry.call(this, shapes, parameters) || this;\n\t\t\t_this.type = 'TextGeometry';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TextGeometry;\n\t}(ExtrudeGeometry);\n\n\tvar TorusGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(TorusGeometry, _BufferGeometry);\n\n\t\tfunction TorusGeometry(radius, tube, radialSegments, tubularSegments, arc) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (tube === void 0) {\n\t\t\t\ttube = 0.4;\n\t\t\t}\n\n\t\t\tif (radialSegments === void 0) {\n\t\t\t\tradialSegments = 8;\n\t\t\t}\n\n\t\t\tif (tubularSegments === void 0) {\n\t\t\t\ttubularSegments = 6;\n\t\t\t}\n\n\t\t\tif (arc === void 0) {\n\t\t\t\tarc = Math.PI * 2;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'TorusGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tarc: arc\n\t\t\t};\n\t\t\tradialSegments = Math.floor(radialSegments);\n\t\t\ttubularSegments = Math.floor(tubularSegments); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar center = new Vector3();\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar normal = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\tfor (var j = 0; j <= radialSegments; j++) {\n\t\t\t\tfor (var i = 0; i <= tubularSegments; i++) {\n\t\t\t\t\tvar u = i / tubularSegments * arc;\n\t\t\t\t\tvar v = j / radialSegments * Math.PI * 2; // vertex\n\n\t\t\t\t\tvertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\n\t\t\t\t\tvertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\n\t\t\t\t\tvertex.z = tube * Math.sin(v);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal\n\n\t\t\t\t\tcenter.x = radius * Math.cos(u);\n\t\t\t\t\tcenter.y = radius * Math.sin(u);\n\t\t\t\t\tnormal.subVectors(vertex, center).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(i / tubularSegments);\n\t\t\t\t\tuvs.push(j / radialSegments);\n\t\t\t\t}\n\t\t\t} // generate indices\n\n\n\t\t\tfor (var _j = 1; _j <= radialSegments; _j++) {\n\t\t\t\tfor (var _i = 1; _i <= tubularSegments; _i++) {\n\t\t\t\t\t// indices\n\t\t\t\t\tvar a = (tubularSegments + 1) * _j + _i - 1;\n\t\t\t\t\tvar b = (tubularSegments + 1) * (_j - 1) + _i - 1;\n\t\t\t\t\tvar c = (tubularSegments + 1) * (_j - 1) + _i;\n\t\t\t\t\tvar d = (tubularSegments + 1) * _j + _i; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TorusGeometry;\n\t}(BufferGeometry);\n\n\tvar TorusKnotGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(TorusKnotGeometry, _BufferGeometry);\n\n\t\tfunction TorusKnotGeometry(radius, tube, tubularSegments, radialSegments, p, q) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (tube === void 0) {\n\t\t\t\ttube = 0.4;\n\t\t\t}\n\n\t\t\tif (tubularSegments === void 0) {\n\t\t\t\ttubularSegments = 64;\n\t\t\t}\n\n\t\t\tif (radialSegments === void 0) {\n\t\t\t\tradialSegments = 8;\n\t\t\t}\n\n\t\t\tif (p === void 0) {\n\t\t\t\tp = 2;\n\t\t\t}\n\n\t\t\tif (q === void 0) {\n\t\t\t\tq = 3;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'TorusKnotGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tradius: radius,\n\t\t\t\ttube: tube,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tp: p,\n\t\t\t\tq: q\n\t\t\t};\n\t\t\ttubularSegments = Math.floor(tubularSegments);\n\t\t\tradialSegments = Math.floor(radialSegments); // buffers\n\n\t\t\tvar indices = [];\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = []; // helper variables\n\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar normal = new Vector3();\n\t\t\tvar P1 = new Vector3();\n\t\t\tvar P2 = new Vector3();\n\t\t\tvar B = new Vector3();\n\t\t\tvar T = new Vector3();\n\t\t\tvar N = new Vector3(); // generate vertices, normals and uvs\n\n\t\t\tfor (var i = 0; i <= tubularSegments; ++i) {\n\t\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\t\t\t\tvar u = i / tubularSegments * p * Math.PI * 2; // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\t\tcalculatePositionOnCurve(u, p, q, radius, P1);\n\t\t\t\tcalculatePositionOnCurve(u + 0.01, p, q, radius, P2); // calculate orthonormal basis\n\n\t\t\t\tT.subVectors(P2, P1);\n\t\t\t\tN.addVectors(P2, P1);\n\t\t\t\tB.crossVectors(T, N);\n\t\t\t\tN.crossVectors(B, T); // normalize B, N. T can be ignored, we don't use it\n\n\t\t\t\tB.normalize();\n\t\t\t\tN.normalize();\n\n\t\t\t\tfor (var j = 0; j <= radialSegments; ++j) {\n\t\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\t\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\t\t\tvar cx = -tube * Math.cos(v);\n\t\t\t\t\tvar cy = tube * Math.sin(v); // now calculate the final vertex position.\n\t\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\t\tvertex.x = P1.x + (cx * N.x + cy * B.x);\n\t\t\t\t\tvertex.y = P1.y + (cx * N.y + cy * B.y);\n\t\t\t\t\tvertex.z = P1.z + (cx * N.z + cy * B.z);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z); // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\t\tnormal.subVectors(vertex, P1).normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // uv\n\n\t\t\t\t\tuvs.push(i / tubularSegments);\n\t\t\t\t\tuvs.push(j / radialSegments);\n\t\t\t\t}\n\t\t\t} // generate indices\n\n\n\t\t\tfor (var _j = 1; _j <= tubularSegments; _j++) {\n\t\t\t\tfor (var _i = 1; _i <= radialSegments; _i++) {\n\t\t\t\t\t// indices\n\t\t\t\t\tvar a = (radialSegments + 1) * (_j - 1) + (_i - 1);\n\t\t\t\t\tvar b = (radialSegments + 1) * _j + (_i - 1);\n\t\t\t\t\tvar c = (radialSegments + 1) * _j + _i;\n\t\t\t\t\tvar d = (radialSegments + 1) * (_j - 1) + _i; // faces\n\n\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // this function calculates the current position on the torus curve\n\n\n\t\t\tfunction calculatePositionOnCurve(u, p, q, radius, position) {\n\t\t\t\tvar cu = Math.cos(u);\n\t\t\t\tvar su = Math.sin(u);\n\t\t\t\tvar quOverP = q / p * u;\n\t\t\t\tvar cs = Math.cos(quOverP);\n\t\t\t\tposition.x = radius * (2 + cs) * 0.5 * cu;\n\t\t\t\tposition.y = radius * (2 + cs) * su * 0.5;\n\t\t\t\tposition.z = radius * Math.sin(quOverP) * 0.5;\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn TorusKnotGeometry;\n\t}(BufferGeometry);\n\n\tvar TubeGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(TubeGeometry, _BufferGeometry);\n\n\t\tfunction TubeGeometry(path, tubularSegments, radius, radialSegments, closed) {\n\t\t\tvar _this;\n\n\t\t\tif (tubularSegments === void 0) {\n\t\t\t\ttubularSegments = 64;\n\t\t\t}\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (radialSegments === void 0) {\n\t\t\t\tradialSegments = 8;\n\t\t\t}\n\n\t\t\tif (closed === void 0) {\n\t\t\t\tclosed = false;\n\t\t\t}\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'TubeGeometry';\n\t\t\t_this.parameters = {\n\t\t\t\tpath: path,\n\t\t\t\ttubularSegments: tubularSegments,\n\t\t\t\tradius: radius,\n\t\t\t\tradialSegments: radialSegments,\n\t\t\t\tclosed: closed\n\t\t\t};\n\t\t\tvar frames = path.computeFrenetFrames(tubularSegments, closed); // expose internals\n\n\t\t\t_this.tangents = frames.tangents;\n\t\t\t_this.normals = frames.normals;\n\t\t\t_this.binormals = frames.binormals; // helper variables\n\n\t\t\tvar vertex = new Vector3();\n\t\t\tvar normal = new Vector3();\n\t\t\tvar uv = new Vector2();\n\t\t\tvar P = new Vector3(); // buffer\n\n\t\t\tvar vertices = [];\n\t\t\tvar normals = [];\n\t\t\tvar uvs = [];\n\t\t\tvar indices = []; // create buffer data\n\n\t\t\tgenerateBufferData(); // build geometry\n\n\t\t\t_this.setIndex(indices);\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\t_this.setAttribute('normal', new Float32BufferAttribute(normals, 3));\n\n\t\t\t_this.setAttribute('uv', new Float32BufferAttribute(uvs, 2)); // functions\n\n\n\t\t\tfunction generateBufferData() {\n\t\t\t\tfor (var i = 0; i < tubularSegments; i++) {\n\t\t\t\t\tgenerateSegment(i);\n\t\t\t\t} // if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t\t// at the regular position on the given path\n\t\t\t\t//\n\t\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\n\t\t\t\tgenerateSegment(closed === false ? tubularSegments : 0); // uvs are generated in a separate function.\n\t\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\t\tgenerateUVs(); // finally create faces\n\n\t\t\t\tgenerateIndices();\n\t\t\t}\n\n\t\t\tfunction generateSegment(i) {\n\t\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\t\t\t\tP = path.getPointAt(i / tubularSegments, P); // retrieve corresponding normal and binormal\n\n\t\t\t\tvar N = frames.normals[i];\n\t\t\t\tvar B = frames.binormals[i]; // generate normals and vertices for the current segment\n\n\t\t\t\tfor (var j = 0; j <= radialSegments; j++) {\n\t\t\t\t\tvar v = j / radialSegments * Math.PI * 2;\n\t\t\t\t\tvar sin = Math.sin(v);\n\t\t\t\t\tvar cos = -Math.cos(v); // normal\n\n\t\t\t\t\tnormal.x = cos * N.x + sin * B.x;\n\t\t\t\t\tnormal.y = cos * N.y + sin * B.y;\n\t\t\t\t\tnormal.z = cos * N.z + sin * B.z;\n\t\t\t\t\tnormal.normalize();\n\t\t\t\t\tnormals.push(normal.x, normal.y, normal.z); // vertex\n\n\t\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\t\tvertex.z = P.z + radius * normal.z;\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateIndices() {\n\t\t\t\tfor (var j = 1; j <= tubularSegments; j++) {\n\t\t\t\t\tfor (var i = 1; i <= radialSegments; i++) {\n\t\t\t\t\t\tvar a = (radialSegments + 1) * (j - 1) + (i - 1);\n\t\t\t\t\t\tvar b = (radialSegments + 1) * j + (i - 1);\n\t\t\t\t\t\tvar c = (radialSegments + 1) * j + i;\n\t\t\t\t\t\tvar d = (radialSegments + 1) * (j - 1) + i; // faces\n\n\t\t\t\t\t\tindices.push(a, b, d);\n\t\t\t\t\t\tindices.push(b, c, d);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction generateUVs() {\n\t\t\t\tfor (var i = 0; i <= tubularSegments; i++) {\n\t\t\t\t\tfor (var j = 0; j <= radialSegments; j++) {\n\t\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\t\tuv.y = j / radialSegments;\n\t\t\t\t\t\tuvs.push(uv.x, uv.y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = TubeGeometry.prototype;\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call(this);\n\t\t\tdata.path = this.parameters.path.toJSON();\n\t\t\treturn data;\n\t\t};\n\n\t\treturn TubeGeometry;\n\t}(BufferGeometry);\n\n\tvar WireframeGeometry = /*#__PURE__*/function (_BufferGeometry) {\n\t\t_inheritsLoose(WireframeGeometry, _BufferGeometry);\n\n\t\tfunction WireframeGeometry(geometry) {\n\t\t\tvar _this;\n\n\t\t\t_this = _BufferGeometry.call(this) || this;\n\t\t\t_this.type = 'WireframeGeometry';\n\n\t\t\tif (geometry.isGeometry === true) {\n\t\t\t\tconsole.error('THREE.WireframeGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.');\n\t\t\t\treturn _assertThisInitialized(_this);\n\t\t\t} // buffer\n\n\n\t\t\tvar vertices = []; // helper variables\n\n\t\t\tvar edge = [0, 0],\n\t\t\t\t\tedges = {};\n\t\t\tvar vertex = new Vector3();\n\n\t\t\tif (geometry.index !== null) {\n\t\t\t\t// indexed BufferGeometry\n\t\t\t\tvar position = geometry.attributes.position;\n\t\t\t\tvar indices = geometry.index;\n\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\tif (groups.length === 0) {\n\t\t\t\t\tgroups = [{\n\t\t\t\t\t\tstart: 0,\n\t\t\t\t\t\tcount: indices.count,\n\t\t\t\t\t\tmaterialIndex: 0\n\t\t\t\t\t}];\n\t\t\t\t} // create a data structure that contains all eges without duplicates\n\n\n\t\t\t\tfor (var o = 0, ol = groups.length; o < ol; ++o) {\n\t\t\t\t\tvar group = groups[o];\n\t\t\t\t\tvar start = group.start;\n\t\t\t\t\tvar count = group.count;\n\n\t\t\t\t\tfor (var i = start, l = start + count; i < l; i += 3) {\n\t\t\t\t\t\tfor (var j = 0; j < 3; j++) {\n\t\t\t\t\t\t\tvar edge1 = indices.getX(i + j);\n\t\t\t\t\t\t\tvar edge2 = indices.getX(i + (j + 1) % 3);\n\t\t\t\t\t\t\tedge[0] = Math.min(edge1, edge2); // sorting prevents duplicates\n\n\t\t\t\t\t\t\tedge[1] = Math.max(edge1, edge2);\n\t\t\t\t\t\t\tvar key = edge[0] + ',' + edge[1];\n\n\t\t\t\t\t\t\tif (edges[key] === undefined) {\n\t\t\t\t\t\t\t\tedges[key] = {\n\t\t\t\t\t\t\t\t\tindex1: edge[0],\n\t\t\t\t\t\t\t\t\tindex2: edge[1]\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // generate vertices\n\n\n\t\t\t\tfor (var _key in edges) {\n\t\t\t\t\tvar e = edges[_key];\n\t\t\t\t\tvertex.fromBufferAttribute(position, e.index1);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t\tvertex.fromBufferAttribute(position, e.index2);\n\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// non-indexed BufferGeometry\n\t\t\t\tvar _position = geometry.attributes.position;\n\n\t\t\t\tfor (var _i = 0, _l = _position.count / 3; _i < _l; _i++) {\n\t\t\t\t\tfor (var _j = 0; _j < 3; _j++) {\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\t\t\t\t\t\tvar index1 = 3 * _i + _j;\n\t\t\t\t\t\tvertex.fromBufferAttribute(_position, index1);\n\t\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t\t\tvar index2 = 3 * _i + (_j + 1) % 3;\n\t\t\t\t\t\tvertex.fromBufferAttribute(_position, index2);\n\t\t\t\t\t\tvertices.push(vertex.x, vertex.y, vertex.z);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // build geometry\n\n\n\t\t\t_this.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn WireframeGeometry;\n\t}(BufferGeometry);\n\n\tvar Geometries = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tBoxGeometry: BoxGeometry,\n\t\tBoxBufferGeometry: BoxGeometry,\n\t\tCircleGeometry: CircleGeometry,\n\t\tCircleBufferGeometry: CircleGeometry,\n\t\tConeGeometry: ConeGeometry,\n\t\tConeBufferGeometry: ConeGeometry,\n\t\tCylinderGeometry: CylinderGeometry,\n\t\tCylinderBufferGeometry: CylinderGeometry,\n\t\tDodecahedronGeometry: DodecahedronGeometry,\n\t\tDodecahedronBufferGeometry: DodecahedronGeometry,\n\t\tEdgesGeometry: EdgesGeometry,\n\t\tExtrudeGeometry: ExtrudeGeometry,\n\t\tExtrudeBufferGeometry: ExtrudeGeometry,\n\t\tIcosahedronGeometry: IcosahedronGeometry,\n\t\tIcosahedronBufferGeometry: IcosahedronGeometry,\n\t\tLatheGeometry: LatheGeometry,\n\t\tLatheBufferGeometry: LatheGeometry,\n\t\tOctahedronGeometry: OctahedronGeometry,\n\t\tOctahedronBufferGeometry: OctahedronGeometry,\n\t\tParametricGeometry: ParametricGeometry,\n\t\tParametricBufferGeometry: ParametricGeometry,\n\t\tPlaneGeometry: PlaneGeometry,\n\t\tPlaneBufferGeometry: PlaneGeometry,\n\t\tPolyhedronGeometry: PolyhedronGeometry,\n\t\tPolyhedronBufferGeometry: PolyhedronGeometry,\n\t\tRingGeometry: RingGeometry,\n\t\tRingBufferGeometry: RingGeometry,\n\t\tShapeGeometry: ShapeGeometry,\n\t\tShapeBufferGeometry: ShapeGeometry,\n\t\tSphereGeometry: SphereGeometry,\n\t\tSphereBufferGeometry: SphereGeometry,\n\t\tTetrahedronGeometry: TetrahedronGeometry,\n\t\tTetrahedronBufferGeometry: TetrahedronGeometry,\n\t\tTextGeometry: TextGeometry,\n\t\tTextBufferGeometry: TextGeometry,\n\t\tTorusGeometry: TorusGeometry,\n\t\tTorusBufferGeometry: TorusGeometry,\n\t\tTorusKnotGeometry: TorusKnotGeometry,\n\t\tTorusKnotBufferGeometry: TorusKnotGeometry,\n\t\tTubeGeometry: TubeGeometry,\n\t\tTubeBufferGeometry: TubeGeometry,\n\t\tWireframeGeometry: WireframeGeometry\n\t});\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <THREE.Color>\n\t * }\n\t */\n\n\tvar ShadowMaterial = /*#__PURE__*/function (_Material) {\n\t\t_inheritsLoose(ShadowMaterial, _Material);\n\n\t\tfunction ShadowMaterial(parameters) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Material.call(this) || this;\n\t\t\t_this.type = 'ShadowMaterial';\n\t\t\t_this.color = new Color(0x000000);\n\t\t\t_this.transparent = true;\n\n\t\t\t_this.setValues(parameters);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = ShadowMaterial.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Material.prototype.copy.call(this, source);\n\n\t\t\tthis.color.copy(source.color);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn ShadowMaterial;\n\t}(Material);\n\n\tShadowMaterial.prototype.isShadowMaterial = true;\n\n\tvar RawShaderMaterial = /*#__PURE__*/function (_ShaderMaterial) {\n\t\t_inheritsLoose(RawShaderMaterial, _ShaderMaterial);\n\n\t\tfunction RawShaderMaterial(parameters) {\n\t\t\tvar _this;\n\n\t\t\t_this = _ShaderMaterial.call(this, parameters) || this;\n\t\t\t_this.type = 'RawShaderMaterial';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn RawShaderMaterial;\n\t}(ShaderMaterial);\n\n\tRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\troughness: <float>,\n\t *\tmetalness: <float>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\troughnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tmetalnessMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tenvMapIntensity: <float>\n\t *\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>,\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tfunction MeshStandardMaterial(parameters) {\n\t\tMaterial.call(this);\n\t\tthis.defines = {\n\t\t\t'STANDARD': ''\n\t\t};\n\t\tthis.type = 'MeshStandardMaterial';\n\t\tthis.color = new Color(0xffffff); // diffuse\n\n\t\tthis.roughness = 1.0;\n\t\tthis.metalness = 0.0;\n\t\tthis.map = null;\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\t\tthis.emissive = new Color(0x000000);\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2(1, 1);\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\t\tthis.roughnessMap = null;\n\t\tthis.metalnessMap = null;\n\t\tthis.alphaMap = null;\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\t\tthis.refractionRatio = 0.98;\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\t\tthis.skinning = false;\n\t\tthis.morphTargets = false;\n\t\tthis.morphNormals = false;\n\t\tthis.flatShading = false;\n\t\tthis.vertexTangents = false;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshStandardMaterial.prototype = Object.create(Material.prototype);\n\tMeshStandardMaterial.prototype.constructor = MeshStandardMaterial;\n\tMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n\tMeshStandardMaterial.prototype.copy = function (source) {\n\t\tMaterial.prototype.copy.call(this, source);\n\t\tthis.defines = {\n\t\t\t'STANDARD': ''\n\t\t};\n\t\tthis.color.copy(source.color);\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\t\tthis.map = source.map;\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\tthis.emissive.copy(source.emissive);\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy(source.normalScale);\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\t\tthis.roughnessMap = source.roughnessMap;\n\t\tthis.metalnessMap = source.metalnessMap;\n\t\tthis.alphaMap = source.alphaMap;\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\tthis.skinning = source.skinning;\n\t\tthis.morphTargets = source.morphTargets;\n\t\tthis.morphNormals = source.morphNormals;\n\t\tthis.flatShading = source.flatShading;\n\t\tthis.vertexTangents = source.vertexTangents;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\tclearcoat: <float>,\n\t *\tclearcoatMap: new THREE.Texture( <Image> ),\n\t *\tclearcoatRoughness: <float>,\n\t *\tclearcoatRoughnessMap: new THREE.Texture( <Image> ),\n\t *\tclearcoatNormalScale: <Vector2>,\n\t *\tclearcoatNormalMap: new THREE.Texture( <Image> ),\n\t *\n\t *\treflectivity: <float>,\n\t *\tior: <float>,\n\t *\n\t *\tsheen: <Color>,\n\t *\n\t *\ttransmission: <float>,\n\t *\ttransmissionMap: new THREE.Texture( <Image> )\n\t * }\n\t */\n\n\tfunction MeshPhysicalMaterial(parameters) {\n\t\tMeshStandardMaterial.call(this);\n\t\tthis.defines = {\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\t\t};\n\t\tthis.type = 'MeshPhysicalMaterial';\n\t\tthis.clearcoat = 0.0;\n\t\tthis.clearcoatMap = null;\n\t\tthis.clearcoatRoughness = 0.0;\n\t\tthis.clearcoatRoughnessMap = null;\n\t\tthis.clearcoatNormalScale = new Vector2(1, 1);\n\t\tthis.clearcoatNormalMap = null;\n\t\tthis.reflectivity = 0.5; // maps to F0 = 0.04\n\n\t\tObject.defineProperty(this, 'ior', {\n\t\t\tget: function get() {\n\t\t\t\treturn (1 + 0.4 * this.reflectivity) / (1 - 0.4 * this.reflectivity);\n\t\t\t},\n\t\t\tset: function set(ior) {\n\t\t\t\tthis.reflectivity = MathUtils.clamp(2.5 * (ior - 1) / (ior + 1), 0, 1);\n\t\t\t}\n\t\t});\n\t\tthis.sheen = null; // null will disable sheen bsdf\n\n\t\tthis.transmission = 0.0;\n\t\tthis.transmissionMap = null;\n\t\tthis.setValues(parameters);\n\t}\n\n\tMeshPhysicalMaterial.prototype = Object.create(MeshStandardMaterial.prototype);\n\tMeshPhysicalMaterial.prototype.constructor = MeshPhysicalMaterial;\n\tMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n\tMeshPhysicalMaterial.prototype.copy = function (source) {\n\t\tMeshStandardMaterial.prototype.copy.call(this, source);\n\t\tthis.defines = {\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\t\t};\n\t\tthis.clearcoat = source.clearcoat;\n\t\tthis.clearcoatMap = source.clearcoatMap;\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\tthis.clearcoatNormalScale.copy(source.clearcoatNormalScale);\n\t\tthis.reflectivity = source.reflectivity;\n\n\t\tif (source.sheen) {\n\t\t\tthis.sheen = (this.sheen || new Color()).copy(source.sheen);\n\t\t} else {\n\t\t\tthis.sheen = null;\n\t\t}\n\n\t\tthis.transmission = source.transmission;\n\t\tthis.transmissionMap = source.transmissionMap;\n\t\treturn this;\n\t};\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\tspecular: <hex>,\n\t *\tshininess: <float>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.MultiplyOperation,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>,\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tvar MeshPhongMaterial = /*#__PURE__*/function (_Material) {\n\t\t_inheritsLoose(MeshPhongMaterial, _Material);\n\n\t\tfunction MeshPhongMaterial(parameters) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Material.call(this) || this;\n\t\t\t_this.type = 'MeshPhongMaterial';\n\t\t\t_this.color = new Color(0xffffff); // diffuse\n\n\t\t\t_this.specular = new Color(0x111111);\n\t\t\t_this.shininess = 30;\n\t\t\t_this.map = null;\n\t\t\t_this.lightMap = null;\n\t\t\t_this.lightMapIntensity = 1.0;\n\t\t\t_this.aoMap = null;\n\t\t\t_this.aoMapIntensity = 1.0;\n\t\t\t_this.emissive = new Color(0x000000);\n\t\t\t_this.emissiveIntensity = 1.0;\n\t\t\t_this.emissiveMap = null;\n\t\t\t_this.bumpMap = null;\n\t\t\t_this.bumpScale = 1;\n\t\t\t_this.normalMap = null;\n\t\t\t_this.normalMapType = TangentSpaceNormalMap;\n\t\t\t_this.normalScale = new Vector2(1, 1);\n\t\t\t_this.displacementMap = null;\n\t\t\t_this.displacementScale = 1;\n\t\t\t_this.displacementBias = 0;\n\t\t\t_this.specularMap = null;\n\t\t\t_this.alphaMap = null;\n\t\t\t_this.envMap = null;\n\t\t\t_this.combine = MultiplyOperation;\n\t\t\t_this.reflectivity = 1;\n\t\t\t_this.refractionRatio = 0.98;\n\t\t\t_this.wireframe = false;\n\t\t\t_this.wireframeLinewidth = 1;\n\t\t\t_this.wireframeLinecap = 'round';\n\t\t\t_this.wireframeLinejoin = 'round';\n\t\t\t_this.skinning = false;\n\t\t\t_this.morphTargets = false;\n\t\t\t_this.morphNormals = false;\n\t\t\t_this.flatShading = false;\n\n\t\t\t_this.setValues(parameters);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = MeshPhongMaterial.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Material.prototype.copy.call(this, source);\n\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.specular.copy(source.specular);\n\t\t\tthis.shininess = source.shininess;\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.specularMap = source.specularMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.combine = source.combine;\n\t\t\tthis.reflectivity = source.reflectivity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.skinning = source.skinning;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn MeshPhongMaterial;\n\t}(Material);\n\n\tMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\tgradientMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tvar MeshToonMaterial = /*#__PURE__*/function (_Material) {\n\t\t_inheritsLoose(MeshToonMaterial, _Material);\n\n\t\tfunction MeshToonMaterial(parameters) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Material.call(this) || this;\n\t\t\t_this.defines = {\n\t\t\t\t'TOON': ''\n\t\t\t};\n\t\t\t_this.type = 'MeshToonMaterial';\n\t\t\t_this.color = new Color(0xffffff);\n\t\t\t_this.map = null;\n\t\t\t_this.gradientMap = null;\n\t\t\t_this.lightMap = null;\n\t\t\t_this.lightMapIntensity = 1.0;\n\t\t\t_this.aoMap = null;\n\t\t\t_this.aoMapIntensity = 1.0;\n\t\t\t_this.emissive = new Color(0x000000);\n\t\t\t_this.emissiveIntensity = 1.0;\n\t\t\t_this.emissiveMap = null;\n\t\t\t_this.bumpMap = null;\n\t\t\t_this.bumpScale = 1;\n\t\t\t_this.normalMap = null;\n\t\t\t_this.normalMapType = TangentSpaceNormalMap;\n\t\t\t_this.normalScale = new Vector2(1, 1);\n\t\t\t_this.displacementMap = null;\n\t\t\t_this.displacementScale = 1;\n\t\t\t_this.displacementBias = 0;\n\t\t\t_this.alphaMap = null;\n\t\t\t_this.wireframe = false;\n\t\t\t_this.wireframeLinewidth = 1;\n\t\t\t_this.wireframeLinecap = 'round';\n\t\t\t_this.wireframeLinejoin = 'round';\n\t\t\t_this.skinning = false;\n\t\t\t_this.morphTargets = false;\n\t\t\t_this.morphNormals = false;\n\n\t\t\t_this.setValues(parameters);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = MeshToonMaterial.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Material.prototype.copy.call(this, source);\n\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.gradientMap = source.gradientMap;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.skinning = source.skinning;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn MeshToonMaterial;\n\t}(Material);\n\n\tMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\topacity: <float>,\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>,\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tvar MeshNormalMaterial = /*#__PURE__*/function (_Material) {\n\t\t_inheritsLoose(MeshNormalMaterial, _Material);\n\n\t\tfunction MeshNormalMaterial(parameters) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Material.call(this) || this;\n\t\t\t_this.type = 'MeshNormalMaterial';\n\t\t\t_this.bumpMap = null;\n\t\t\t_this.bumpScale = 1;\n\t\t\t_this.normalMap = null;\n\t\t\t_this.normalMapType = TangentSpaceNormalMap;\n\t\t\t_this.normalScale = new Vector2(1, 1);\n\t\t\t_this.displacementMap = null;\n\t\t\t_this.displacementScale = 1;\n\t\t\t_this.displacementBias = 0;\n\t\t\t_this.wireframe = false;\n\t\t\t_this.wireframeLinewidth = 1;\n\t\t\t_this.fog = false;\n\t\t\t_this.skinning = false;\n\t\t\t_this.morphTargets = false;\n\t\t\t_this.morphNormals = false;\n\t\t\t_this.flatShading = false;\n\n\t\t\t_this.setValues(parameters);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = MeshNormalMaterial.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Material.prototype.copy.call(this, source);\n\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.skinning = source.skinning;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn MeshNormalMaterial;\n\t}(Material);\n\n\tMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tlightMap: new THREE.Texture( <Image> ),\n\t *\tlightMapIntensity: <float>\n\t *\n\t *\taoMap: new THREE.Texture( <Image> ),\n\t *\taoMapIntensity: <float>\n\t *\n\t *\temissive: <hex>,\n\t *\temissiveIntensity: <float>\n\t *\temissiveMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tspecularMap: new THREE.Texture( <Image> ),\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tenvMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n\t *\tcombine: THREE.Multiply,\n\t *\treflectivity: <float>,\n\t *\trefractionRatio: <float>,\n\t *\n\t *\twireframe: <boolean>,\n\t *\twireframeLinewidth: <float>,\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t * }\n\t */\n\n\tvar MeshLambertMaterial = /*#__PURE__*/function (_Material) {\n\t\t_inheritsLoose(MeshLambertMaterial, _Material);\n\n\t\tfunction MeshLambertMaterial(parameters) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Material.call(this) || this;\n\t\t\t_this.type = 'MeshLambertMaterial';\n\t\t\t_this.color = new Color(0xffffff); // diffuse\n\n\t\t\t_this.map = null;\n\t\t\t_this.lightMap = null;\n\t\t\t_this.lightMapIntensity = 1.0;\n\t\t\t_this.aoMap = null;\n\t\t\t_this.aoMapIntensity = 1.0;\n\t\t\t_this.emissive = new Color(0x000000);\n\t\t\t_this.emissiveIntensity = 1.0;\n\t\t\t_this.emissiveMap = null;\n\t\t\t_this.specularMap = null;\n\t\t\t_this.alphaMap = null;\n\t\t\t_this.envMap = null;\n\t\t\t_this.combine = MultiplyOperation;\n\t\t\t_this.reflectivity = 1;\n\t\t\t_this.refractionRatio = 0.98;\n\t\t\t_this.wireframe = false;\n\t\t\t_this.wireframeLinewidth = 1;\n\t\t\t_this.wireframeLinecap = 'round';\n\t\t\t_this.wireframeLinejoin = 'round';\n\t\t\t_this.skinning = false;\n\t\t\t_this.morphTargets = false;\n\t\t\t_this.morphNormals = false;\n\n\t\t\t_this.setValues(parameters);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = MeshLambertMaterial.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Material.prototype.copy.call(this, source);\n\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.map = source.map;\n\t\t\tthis.lightMap = source.lightMap;\n\t\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\t\t\tthis.aoMap = source.aoMap;\n\t\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\t\t\tthis.emissive.copy(source.emissive);\n\t\t\tthis.emissiveMap = source.emissiveMap;\n\t\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\t\t\tthis.specularMap = source.specularMap;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.envMap = source.envMap;\n\t\t\tthis.combine = source.combine;\n\t\t\tthis.reflectivity = source.reflectivity;\n\t\t\tthis.refractionRatio = source.refractionRatio;\n\t\t\tthis.wireframe = source.wireframe;\n\t\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\t\t\tthis.skinning = source.skinning;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn MeshLambertMaterial;\n\t}(Material);\n\n\tMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tmatcap: new THREE.Texture( <Image> ),\n\t *\n\t *\tmap: new THREE.Texture( <Image> ),\n\t *\n\t *\tbumpMap: new THREE.Texture( <Image> ),\n\t *\tbumpScale: <float>,\n\t *\n\t *\tnormalMap: new THREE.Texture( <Image> ),\n\t *\tnormalMapType: THREE.TangentSpaceNormalMap,\n\t *\tnormalScale: <Vector2>,\n\t *\n\t *\tdisplacementMap: new THREE.Texture( <Image> ),\n\t *\tdisplacementScale: <float>,\n\t *\tdisplacementBias: <float>,\n\t *\n\t *\talphaMap: new THREE.Texture( <Image> ),\n\t *\n\t *\tskinning: <bool>,\n\t *\tmorphTargets: <bool>,\n\t *\tmorphNormals: <bool>\n\t *\n\t *\tflatShading: <bool>\n\t * }\n\t */\n\n\tvar MeshMatcapMaterial = /*#__PURE__*/function (_Material) {\n\t\t_inheritsLoose(MeshMatcapMaterial, _Material);\n\n\t\tfunction MeshMatcapMaterial(parameters) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Material.call(this) || this;\n\t\t\t_this.defines = {\n\t\t\t\t'MATCAP': ''\n\t\t\t};\n\t\t\t_this.type = 'MeshMatcapMaterial';\n\t\t\t_this.color = new Color(0xffffff); // diffuse\n\n\t\t\t_this.matcap = null;\n\t\t\t_this.map = null;\n\t\t\t_this.bumpMap = null;\n\t\t\t_this.bumpScale = 1;\n\t\t\t_this.normalMap = null;\n\t\t\t_this.normalMapType = TangentSpaceNormalMap;\n\t\t\t_this.normalScale = new Vector2(1, 1);\n\t\t\t_this.displacementMap = null;\n\t\t\t_this.displacementScale = 1;\n\t\t\t_this.displacementBias = 0;\n\t\t\t_this.alphaMap = null;\n\t\t\t_this.skinning = false;\n\t\t\t_this.morphTargets = false;\n\t\t\t_this.morphNormals = false;\n\t\t\t_this.flatShading = false;\n\n\t\t\t_this.setValues(parameters);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = MeshMatcapMaterial.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Material.prototype.copy.call(this, source);\n\n\t\t\tthis.defines = {\n\t\t\t\t'MATCAP': ''\n\t\t\t};\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.matcap = source.matcap;\n\t\t\tthis.map = source.map;\n\t\t\tthis.bumpMap = source.bumpMap;\n\t\t\tthis.bumpScale = source.bumpScale;\n\t\t\tthis.normalMap = source.normalMap;\n\t\t\tthis.normalMapType = source.normalMapType;\n\t\t\tthis.normalScale.copy(source.normalScale);\n\t\t\tthis.displacementMap = source.displacementMap;\n\t\t\tthis.displacementScale = source.displacementScale;\n\t\t\tthis.displacementBias = source.displacementBias;\n\t\t\tthis.alphaMap = source.alphaMap;\n\t\t\tthis.skinning = source.skinning;\n\t\t\tthis.morphTargets = source.morphTargets;\n\t\t\tthis.morphNormals = source.morphNormals;\n\t\t\tthis.flatShading = source.flatShading;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn MeshMatcapMaterial;\n\t}(Material);\n\n\tMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\n\n\t/**\n\t * parameters = {\n\t *\tcolor: <hex>,\n\t *\topacity: <float>,\n\t *\n\t *\tlinewidth: <float>,\n\t *\n\t *\tscale: <float>,\n\t *\tdashSize: <float>,\n\t *\tgapSize: <float>\n\t * }\n\t */\n\n\tvar LineDashedMaterial = /*#__PURE__*/function (_LineBasicMaterial) {\n\t\t_inheritsLoose(LineDashedMaterial, _LineBasicMaterial);\n\n\t\tfunction LineDashedMaterial(parameters) {\n\t\t\tvar _this;\n\n\t\t\t_this = _LineBasicMaterial.call(this) || this;\n\t\t\t_this.type = 'LineDashedMaterial';\n\t\t\t_this.scale = 1;\n\t\t\t_this.dashSize = 3;\n\t\t\t_this.gapSize = 1;\n\n\t\t\t_this.setValues(parameters);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = LineDashedMaterial.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_LineBasicMaterial.prototype.copy.call(this, source);\n\n\t\t\tthis.scale = source.scale;\n\t\t\tthis.dashSize = source.dashSize;\n\t\t\tthis.gapSize = source.gapSize;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn LineDashedMaterial;\n\t}(LineBasicMaterial);\n\n\tLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\n\tvar Materials = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tShadowMaterial: ShadowMaterial,\n\t\tSpriteMaterial: SpriteMaterial,\n\t\tRawShaderMaterial: RawShaderMaterial,\n\t\tShaderMaterial: ShaderMaterial,\n\t\tPointsMaterial: PointsMaterial,\n\t\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\t\tMeshStandardMaterial: MeshStandardMaterial,\n\t\tMeshPhongMaterial: MeshPhongMaterial,\n\t\tMeshToonMaterial: MeshToonMaterial,\n\t\tMeshNormalMaterial: MeshNormalMaterial,\n\t\tMeshLambertMaterial: MeshLambertMaterial,\n\t\tMeshDepthMaterial: MeshDepthMaterial,\n\t\tMeshDistanceMaterial: MeshDistanceMaterial,\n\t\tMeshBasicMaterial: MeshBasicMaterial,\n\t\tMeshMatcapMaterial: MeshMatcapMaterial,\n\t\tLineDashedMaterial: LineDashedMaterial,\n\t\tLineBasicMaterial: LineBasicMaterial,\n\t\tMaterial: Material\n\t});\n\n\tvar AnimationUtils = {\n\t\t// same as Array.prototype.slice, but also works on typed arrays\n\t\tarraySlice: function arraySlice(array, from, to) {\n\t\t\tif (AnimationUtils.isTypedArray(array)) {\n\t\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\t\treturn new array.constructor(array.subarray(from, to !== undefined ? to : array.length));\n\t\t\t}\n\n\t\t\treturn array.slice(from, to);\n\t\t},\n\t\t// converts an array to a specific type\n\t\tconvertArray: function convertArray(array, type, forceClone) {\n\t\t\tif (!array || // let 'undefined' and 'null' pass\n\t\t\t!forceClone && array.constructor === type) return array;\n\n\t\t\tif (typeof type.BYTES_PER_ELEMENT === 'number') {\n\t\t\t\treturn new type(array); // create typed array\n\t\t\t}\n\n\t\t\treturn Array.prototype.slice.call(array); // create Array\n\t\t},\n\t\tisTypedArray: function isTypedArray(object) {\n\t\t\treturn ArrayBuffer.isView(object) && !(object instanceof DataView);\n\t\t},\n\t\t// returns an array by which times and values can be sorted\n\t\tgetKeyframeOrder: function getKeyframeOrder(times) {\n\t\t\tfunction compareTime(i, j) {\n\t\t\t\treturn times[i] - times[j];\n\t\t\t}\n\n\t\t\tvar n = times.length;\n\t\t\tvar result = new Array(n);\n\n\t\t\tfor (var i = 0; i !== n; ++i) {\n\t\t\t\tresult[i] = i;\n\t\t\t}\n\n\t\t\tresult.sort(compareTime);\n\t\t\treturn result;\n\t\t},\n\t\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\t\tsortedArray: function sortedArray(values, stride, order) {\n\t\t\tvar nValues = values.length;\n\t\t\tvar result = new values.constructor(nValues);\n\n\t\t\tfor (var i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {\n\t\t\t\tvar srcOffset = order[i] * stride;\n\n\t\t\t\tfor (var j = 0; j !== stride; ++j) {\n\t\t\t\t\tresult[dstOffset++] = values[srcOffset + j];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\t\t// function for parsing AOS keyframe formats\n\t\tflattenJSON: function flattenJSON(jsonKeys, times, values, valuePropertyName) {\n\t\t\tvar i = 1,\n\t\t\t\t\tkey = jsonKeys[0];\n\n\t\t\twhile (key !== undefined && key[valuePropertyName] === undefined) {\n\t\t\t\tkey = jsonKeys[i++];\n\t\t\t}\n\n\t\t\tif (key === undefined) return; // no data\n\n\t\t\tvar value = key[valuePropertyName];\n\t\t\tif (value === undefined) return; // no data\n\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalues.push.apply(values, value); // push all elements\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t} else if (value.toArray !== undefined) {\n\t\t\t\t// ...assume THREE.Math-ish\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalue.toArray(values, values.length);\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t} else {\n\t\t\t\t// otherwise push as-is\n\t\t\t\tdo {\n\t\t\t\t\tvalue = key[valuePropertyName];\n\n\t\t\t\t\tif (value !== undefined) {\n\t\t\t\t\t\ttimes.push(key.time);\n\t\t\t\t\t\tvalues.push(value);\n\t\t\t\t\t}\n\n\t\t\t\t\tkey = jsonKeys[i++];\n\t\t\t\t} while (key !== undefined);\n\t\t\t}\n\t\t},\n\t\tsubclip: function subclip(sourceClip, name, startFrame, endFrame, fps) {\n\t\t\tif (fps === void 0) {\n\t\t\t\tfps = 30;\n\t\t\t}\n\n\t\t\tvar clip = sourceClip.clone();\n\t\t\tclip.name = name;\n\t\t\tvar tracks = [];\n\n\t\t\tfor (var i = 0; i < clip.tracks.length; ++i) {\n\t\t\t\tvar track = clip.tracks[i];\n\t\t\t\tvar valueSize = track.getValueSize();\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\n\t\t\t\tfor (var j = 0; j < track.times.length; ++j) {\n\t\t\t\t\tvar frame = track.times[j] * fps;\n\t\t\t\t\tif (frame < startFrame || frame >= endFrame) continue;\n\t\t\t\t\ttimes.push(track.times[j]);\n\n\t\t\t\t\tfor (var k = 0; k < valueSize; ++k) {\n\t\t\t\t\t\tvalues.push(track.values[j * valueSize + k]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (times.length === 0) continue;\n\t\t\t\ttrack.times = AnimationUtils.convertArray(times, track.times.constructor);\n\t\t\t\ttrack.values = AnimationUtils.convertArray(values, track.values.constructor);\n\t\t\t\ttracks.push(track);\n\t\t\t}\n\n\t\t\tclip.tracks = tracks; // find minimum .times value across all tracks in the trimmed clip\n\n\t\t\tvar minStartTime = Infinity;\n\n\t\t\tfor (var _i = 0; _i < clip.tracks.length; ++_i) {\n\t\t\t\tif (minStartTime > clip.tracks[_i].times[0]) {\n\t\t\t\t\tminStartTime = clip.tracks[_i].times[0];\n\t\t\t\t}\n\t\t\t} // shift all tracks such that clip begins at t=0\n\n\n\t\t\tfor (var _i2 = 0; _i2 < clip.tracks.length; ++_i2) {\n\t\t\t\tclip.tracks[_i2].shift(-1 * minStartTime);\n\t\t\t}\n\n\t\t\tclip.resetDuration();\n\t\t\treturn clip;\n\t\t},\n\t\tmakeClipAdditive: function makeClipAdditive(targetClip, referenceFrame, referenceClip, fps) {\n\t\t\tif (referenceFrame === void 0) {\n\t\t\t\treferenceFrame = 0;\n\t\t\t}\n\n\t\t\tif (referenceClip === void 0) {\n\t\t\t\treferenceClip = targetClip;\n\t\t\t}\n\n\t\t\tif (fps === void 0) {\n\t\t\t\tfps = 30;\n\t\t\t}\n\n\t\t\tif (fps <= 0) fps = 30;\n\t\t\tvar numTracks = referenceClip.tracks.length;\n\t\t\tvar referenceTime = referenceFrame / fps; // Make each track's values relative to the values at the reference frame\n\n\t\t\tvar _loop = function _loop(i) {\n\t\t\t\tvar referenceTrack = referenceClip.tracks[i];\n\t\t\t\tvar referenceTrackType = referenceTrack.ValueTypeName; // Skip this track if it's non-numeric\n\n\t\t\t\tif (referenceTrackType === 'bool' || referenceTrackType === 'string') return \"continue\"; // Find the track in the target clip whose name and type matches the reference track\n\n\t\t\t\tvar targetTrack = targetClip.tracks.find(function (track) {\n\t\t\t\t\treturn track.name === referenceTrack.name && track.ValueTypeName === referenceTrackType;\n\t\t\t\t});\n\t\t\t\tif (targetTrack === undefined) return \"continue\";\n\t\t\t\tvar referenceOffset = 0;\n\t\t\t\tvar referenceValueSize = referenceTrack.getValueSize();\n\n\t\t\t\tif (referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n\t\t\t\t\treferenceOffset = referenceValueSize / 3;\n\t\t\t\t}\n\n\t\t\t\tvar targetOffset = 0;\n\t\t\t\tvar targetValueSize = targetTrack.getValueSize();\n\n\t\t\t\tif (targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n\t\t\t\t\ttargetOffset = targetValueSize / 3;\n\t\t\t\t}\n\n\t\t\t\tvar lastIndex = referenceTrack.times.length - 1;\n\t\t\t\tvar referenceValue = void 0; // Find the value to subtract out of the track\n\n\t\t\t\tif (referenceTime <= referenceTrack.times[0]) {\n\t\t\t\t\t// Reference frame is earlier than the first keyframe, so just use the first keyframe\n\t\t\t\t\tvar startIndex = referenceOffset;\n\t\t\t\t\tvar endIndex = referenceValueSize - referenceOffset;\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(referenceTrack.values, startIndex, endIndex);\n\t\t\t\t} else if (referenceTime >= referenceTrack.times[lastIndex]) {\n\t\t\t\t\t// Reference frame is after the last keyframe, so just use the last keyframe\n\t\t\t\t\tvar _startIndex = lastIndex * referenceValueSize + referenceOffset;\n\n\t\t\t\t\tvar _endIndex = _startIndex + referenceValueSize - referenceOffset;\n\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(referenceTrack.values, _startIndex, _endIndex);\n\t\t\t\t} else {\n\t\t\t\t\t// Interpolate to the reference value\n\t\t\t\t\tvar interpolant = referenceTrack.createInterpolant();\n\t\t\t\t\tvar _startIndex2 = referenceOffset;\n\n\t\t\t\t\tvar _endIndex2 = referenceValueSize - referenceOffset;\n\n\t\t\t\t\tinterpolant.evaluate(referenceTime);\n\t\t\t\t\treferenceValue = AnimationUtils.arraySlice(interpolant.resultBuffer, _startIndex2, _endIndex2);\n\t\t\t\t} // Conjugate the quaternion\n\n\n\t\t\t\tif (referenceTrackType === 'quaternion') {\n\t\t\t\t\tvar referenceQuat = new Quaternion().fromArray(referenceValue).normalize().conjugate();\n\t\t\t\t\treferenceQuat.toArray(referenceValue);\n\t\t\t\t} // Subtract the reference value from all of the track values\n\n\n\t\t\t\tvar numTimes = targetTrack.times.length;\n\n\t\t\t\tfor (var j = 0; j < numTimes; ++j) {\n\t\t\t\t\tvar valueStart = j * targetValueSize + targetOffset;\n\n\t\t\t\t\tif (referenceTrackType === 'quaternion') {\n\t\t\t\t\t\t// Multiply the conjugate for quaternion track types\n\t\t\t\t\t\tQuaternion.multiplyQuaternionsFlat(targetTrack.values, valueStart, referenceValue, 0, targetTrack.values, valueStart);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar valueEnd = targetValueSize - targetOffset * 2; // Subtract each value for all other numeric track types\n\n\t\t\t\t\t\tfor (var k = 0; k < valueEnd; ++k) {\n\t\t\t\t\t\t\ttargetTrack.values[valueStart + k] -= referenceValue[k];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tfor (var i = 0; i < numTracks; ++i) {\n\t\t\t\tvar _ret = _loop(i);\n\n\t\t\t\tif (_ret === \"continue\") continue;\n\t\t\t}\n\n\t\t\ttargetClip.blendMode = AdditiveAnimationBlendMode;\n\t\t\treturn targetClip;\n\t\t}\n\t};\n\n\t/**\n\t * Abstract base class of interpolants over parametric samples.\n\t *\n\t * The parameter domain is one dimensional, typically the time or a path\n\t * along a curve defined by the data.\n\t *\n\t * The sample values can have any dimensionality and derived classes may\n\t * apply special interpretations to the data.\n\t *\n\t * This class provides the interval seek in a Template Method, deferring\n\t * the actual interpolation to derived classes.\n\t *\n\t * Time complexity is O(1) for linear access crossing at most two points\n\t * and O(log N) for random access, where N is the number of positions.\n\t *\n\t * References:\n\t *\n\t * \t\thttp://www.oodesign.com/template-method-pattern.html\n\t *\n\t */\n\tfunction Interpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\t\tthis.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor(sampleSize);\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\t}\n\n\tObject.assign(Interpolant.prototype, {\n\t\tevaluate: function evaluate(t) {\n\t\t\tvar pp = this.parameterPositions;\n\t\t\tvar i1 = this._cachedIndex,\n\t\t\t\t\tt1 = pp[i1],\n\t\t\t\t\tt0 = pp[i1 - 1];\n\n\t\t\tvalidate_interval: {\n\t\t\t\tseek: {\n\t\t\t\t\tvar right;\n\n\t\t\t\t\tlinear_scan: {\n\t\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t\t//- slower code:\n\t\t\t\t\t\t//-\n\t\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\t\tforward_scan: if (!(t < t1)) {\n\t\t\t\t\t\t\tfor (var giveUpAt = i1 + 2;;) {\n\t\t\t\t\t\t\t\tif (t1 === undefined) {\n\t\t\t\t\t\t\t\t\tif (t < t0) break forward_scan; // after end\n\n\t\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\t\treturn this.afterEnd_(i1 - 1, t, t0);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (i1 === giveUpAt) break; // this loop\n\n\t\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\t\tt1 = pp[++i1];\n\n\t\t\t\t\t\t\t\tif (t < t1) {\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} // prepare binary search on the right side of the index\n\n\n\t\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\t\tbreak linear_scan;\n\t\t\t\t\t\t} //- slower code:\n\t\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\n\n\t\t\t\t\t\tif (!(t >= t0)) {\n\t\t\t\t\t\t\t// looping?\n\t\t\t\t\t\t\tvar t1global = pp[1];\n\n\t\t\t\t\t\t\tif (t < t1global) {\n\t\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\n\t\t\t\t\t\t\t\tt0 = t1global;\n\t\t\t\t\t\t\t} // linear reverse scan\n\n\n\t\t\t\t\t\t\tfor (var _giveUpAt = i1 - 2;;) {\n\t\t\t\t\t\t\t\tif (t0 === undefined) {\n\t\t\t\t\t\t\t\t\t// before start\n\t\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\t\treturn this.beforeStart_(0, t, t1);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (i1 === _giveUpAt) break; // this loop\n\n\t\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\t\tt0 = pp[--i1 - 1];\n\n\t\t\t\t\t\t\t\tif (t >= t0) {\n\t\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\t\tbreak seek;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} // prepare binary search on the left side of the index\n\n\n\t\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\t\tbreak linear_scan;\n\t\t\t\t\t\t} // the interval is valid\n\n\n\t\t\t\t\t\tbreak validate_interval;\n\t\t\t\t\t} // linear scan\n\t\t\t\t\t// binary search\n\n\n\t\t\t\t\twhile (i1 < right) {\n\t\t\t\t\t\tvar mid = i1 + right >>> 1;\n\n\t\t\t\t\t\tif (t < pp[mid]) {\n\t\t\t\t\t\t\tright = mid;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ti1 = mid + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tt1 = pp[i1];\n\t\t\t\t\tt0 = pp[i1 - 1]; // check boundary cases, again\n\n\t\t\t\t\tif (t0 === undefined) {\n\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\treturn this.beforeStart_(0, t, t1);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (t1 === undefined) {\n\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\treturn this.afterEnd_(i1 - 1, t0, t);\n\t\t\t\t\t}\n\t\t\t\t} // seek\n\n\n\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\tthis.intervalChanged_(i1, t0, t1);\n\t\t\t} // validate_interval\n\n\n\t\t\treturn this.interpolate_(i1, t0, t, t1);\n\t\t},\n\t\tsettings: null,\n\t\t// optional, subclass-specific settings structure\n\t\t// Note: The indirection allows central control of many interpolants.\n\t\t// --- Protected interface\n\t\tDefaultSettings_: {},\n\t\tgetSettings_: function getSettings_() {\n\t\t\treturn this.settings || this.DefaultSettings_;\n\t\t},\n\t\tcopySampleValue_: function copySampleValue_(index) {\n\t\t\t// copies a sample value to the result buffer\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toffset = index * stride;\n\n\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = values[offset + i];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\t\t// Template methods for derived classes:\n\t\tinterpolate_: function interpolate_()\n\t\t/* i1, t0, t, t1 */\n\t\t{\n\t\t\tthrow new Error('call to abstract method'); // implementations shall return this.resultBuffer\n\t\t},\n\t\tintervalChanged_: function intervalChanged_()\n\t\t/* i1, t0, t1 */\n\t\t{// empty\n\t\t}\n\t}); // DECLARE ALIAS AFTER assign prototype\n\n\tObject.assign(Interpolant.prototype, {\n\t\t//( 0, t, t0 ), returns this.resultBuffer\n\t\tbeforeStart_: Interpolant.prototype.copySampleValue_,\n\t\t//( N-1, tN-1, t ), returns this.resultBuffer\n\t\tafterEnd_: Interpolant.prototype.copySampleValue_\n\t});\n\n\t/**\n\t * Fast and simple cubic spline interpolant.\n\t *\n\t * It was derived from a Hermitian construction setting the first derivative\n\t * at each sample position to the linear slope between neighboring positions\n\t * over their parameter interval.\n\t */\n\n\tfunction CubicInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tInterpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t\tthis._weightPrev = -0;\n\t\tthis._offsetPrev = -0;\n\t\tthis._weightNext = -0;\n\t\tthis._offsetNext = -0;\n\t}\n\n\tCubicInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n\t\tconstructor: CubicInterpolant,\n\t\tDefaultSettings_: {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t},\n\t\tintervalChanged_: function intervalChanged_(i1, t0, t1) {\n\t\t\tvar pp = this.parameterPositions;\n\t\t\tvar iPrev = i1 - 2,\n\t\t\t\t\tiNext = i1 + 1,\n\t\t\t\t\ttPrev = pp[iPrev],\n\t\t\t\t\ttNext = pp[iNext];\n\n\t\t\tif (tPrev === undefined) {\n\t\t\t\tswitch (this.getSettings_().endingStart) {\n\t\t\t\t\tcase ZeroSlopeEnding:\n\t\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = 2 * t0 - t1;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\t\ttPrev = t0 + pp[iPrev] - pp[iPrev + 1];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// ZeroCurvatureEnding\n\t\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\t\tiPrev = i1;\n\t\t\t\t\t\ttPrev = t1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tNext === undefined) {\n\t\t\t\tswitch (this.getSettings_().endingEnd) {\n\t\t\t\t\tcase ZeroSlopeEnding:\n\t\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\t\tiNext = i1;\n\t\t\t\t\t\ttNext = 2 * t1 - t0;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase WrapAroundEnding:\n\t\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\t\tiNext = 1;\n\t\t\t\t\t\ttNext = t1 + pp[1] - pp[0];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// ZeroCurvatureEnding\n\t\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\t\ttNext = t0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar halfDt = (t1 - t0) * 0.5,\n\t\t\t\t\tstride = this.valueSize;\n\t\t\tthis._weightPrev = halfDt / (t0 - tPrev);\n\t\t\tthis._weightNext = halfDt / (tNext - t1);\n\t\t\tthis._offsetPrev = iPrev * stride;\n\t\t\tthis._offsetNext = iNext * stride;\n\t\t},\n\t\tinterpolate_: function interpolate_(i1, t0, t, t1) {\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\to1 = i1 * stride,\n\t\t\t\t\to0 = o1 - stride,\n\t\t\t\t\toP = this._offsetPrev,\n\t\t\t\t\toN = this._offsetNext,\n\t\t\t\t\twP = this._weightPrev,\n\t\t\t\t\twN = this._weightNext,\n\t\t\t\t\tp = (t - t0) / (t1 - t0),\n\t\t\t\t\tpp = p * p,\n\t\t\t\t\tppp = pp * p; // evaluate polynomials\n\n\t\t\tvar sP = -wP * ppp + 2 * wP * pp - wP * p;\n\t\t\tvar s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;\n\t\t\tvar s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;\n\t\t\tvar sN = wN * ppp - wN * pp; // combine data linearly\n\n\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t});\n\n\tfunction LinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tInterpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t}\n\n\tLinearInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n\t\tconstructor: LinearInterpolant,\n\t\tinterpolate_: function interpolate_(i1, t0, t, t1) {\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toffset1 = i1 * stride,\n\t\t\t\t\toffset0 = offset1 - stride,\n\t\t\t\t\tweight1 = (t - t0) / (t1 - t0),\n\t\t\t\t\tweight0 = 1 - weight1;\n\n\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\tresult[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t});\n\n\t/**\n\t *\n\t * Interpolant that evaluates to the sample value at the position preceeding\n\t * the parameter.\n\t */\n\n\tfunction DiscreteInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tInterpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t}\n\n\tDiscreteInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n\t\tconstructor: DiscreteInterpolant,\n\t\tinterpolate_: function interpolate_(i1\n\t\t/*, t0, t, t1 */\n\t\t) {\n\t\t\treturn this.copySampleValue_(i1 - 1);\n\t\t}\n\t});\n\n\tvar KeyframeTrack = /*#__PURE__*/function () {\n\t\tfunction KeyframeTrack(name, times, values, interpolation) {\n\t\t\tif (name === undefined) throw new Error('THREE.KeyframeTrack: track name is undefined');\n\t\t\tif (times === undefined || times.length === 0) throw new Error('THREE.KeyframeTrack: no keyframes in track named ' + name);\n\t\t\tthis.name = name;\n\t\t\tthis.times = AnimationUtils.convertArray(times, this.TimeBufferType);\n\t\t\tthis.values = AnimationUtils.convertArray(values, this.ValueBufferType);\n\t\t\tthis.setInterpolation(interpolation || this.DefaultInterpolation);\n\t\t} // Serialization (in static context, because of constructor invocation\n\t\t// and automatic invocation of .toJSON):\n\n\n\t\tKeyframeTrack.toJSON = function toJSON(track) {\n\t\t\tvar trackType = track.constructor;\n\t\t\tvar json; // derived classes can define a static toJSON method\n\n\t\t\tif (trackType.toJSON !== this.toJSON) {\n\t\t\t\tjson = trackType.toJSON(track);\n\t\t\t} else {\n\t\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\t\tjson = {\n\t\t\t\t\t'name': track.name,\n\t\t\t\t\t'times': AnimationUtils.convertArray(track.times, Array),\n\t\t\t\t\t'values': AnimationUtils.convertArray(track.values, Array)\n\t\t\t\t};\n\t\t\t\tvar interpolation = track.getInterpolation();\n\n\t\t\t\tif (interpolation !== track.DefaultInterpolation) {\n\t\t\t\t\tjson.interpolation = interpolation;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\t\treturn json;\n\t\t};\n\n\t\tvar _proto = KeyframeTrack.prototype;\n\n\t\t_proto.InterpolantFactoryMethodDiscrete = function InterpolantFactoryMethodDiscrete(result) {\n\t\t\treturn new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t};\n\n\t\t_proto.InterpolantFactoryMethodLinear = function InterpolantFactoryMethodLinear(result) {\n\t\t\treturn new LinearInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t};\n\n\t\t_proto.InterpolantFactoryMethodSmooth = function InterpolantFactoryMethodSmooth(result) {\n\t\t\treturn new CubicInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t};\n\n\t\t_proto.setInterpolation = function setInterpolation(interpolation) {\n\t\t\tvar factoryMethod;\n\n\t\t\tswitch (interpolation) {\n\t\t\t\tcase InterpolateDiscrete:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateLinear:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase InterpolateSmooth:\n\t\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (factoryMethod === undefined) {\n\t\t\t\tvar message = 'unsupported interpolation for ' + this.ValueTypeName + ' keyframe track named ' + this.name;\n\n\t\t\t\tif (this.createInterpolant === undefined) {\n\t\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\t\tif (interpolation !== this.DefaultInterpolation) {\n\t\t\t\t\t\tthis.setInterpolation(this.DefaultInterpolation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(message); // fatal, in this case\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconsole.warn('THREE.KeyframeTrack:', message);\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tthis.createInterpolant = factoryMethod;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getInterpolation = function getInterpolation() {\n\t\t\tswitch (this.createInterpolant) {\n\t\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\t\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\t\tcase this.InterpolantFactoryMethodLinear:\n\t\t\t\t\treturn InterpolateLinear;\n\n\t\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\t\t\t\t\treturn InterpolateSmooth;\n\t\t\t}\n\t\t};\n\n\t\t_proto.getValueSize = function getValueSize() {\n\t\t\treturn this.values.length / this.times.length;\n\t\t} // move all keyframes either forwards or backwards in time\n\t\t;\n\n\t\t_proto.shift = function shift(timeOffset) {\n\t\t\tif (timeOffset !== 0.0) {\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor (var i = 0, n = times.length; i !== n; ++i) {\n\t\t\t\t\ttimes[i] += timeOffset;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\t\t;\n\n\t\t_proto.scale = function scale(timeScale) {\n\t\t\tif (timeScale !== 1.0) {\n\t\t\t\tvar times = this.times;\n\n\t\t\t\tfor (var i = 0, n = times.length; i !== n; ++i) {\n\t\t\t\t\ttimes[i] *= timeScale;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\t\t;\n\n\t\t_proto.trim = function trim(startTime, endTime) {\n\t\t\tvar times = this.times,\n\t\t\t\t\tnKeys = times.length;\n\t\t\tvar from = 0,\n\t\t\t\t\tto = nKeys - 1;\n\n\t\t\twhile (from !== nKeys && times[from] < startTime) {\n\t\t\t\t++from;\n\t\t\t}\n\n\t\t\twhile (to !== -1 && times[to] > endTime) {\n\t\t\t\t--to;\n\t\t\t}\n\n\t\t\t++to; // inclusive -> exclusive bound\n\n\t\t\tif (from !== 0 || to !== nKeys) {\n\t\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\t\tif (from >= to) {\n\t\t\t\t\tto = Math.max(to, 1);\n\t\t\t\t\tfrom = to - 1;\n\t\t\t\t}\n\n\t\t\t\tvar stride = this.getValueSize();\n\t\t\t\tthis.times = AnimationUtils.arraySlice(times, from, to);\n\t\t\t\tthis.values = AnimationUtils.arraySlice(this.values, from * stride, to * stride);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\t\t;\n\n\t\t_proto.validate = function validate() {\n\t\t\tvar valid = true;\n\t\t\tvar valueSize = this.getValueSize();\n\n\t\t\tif (valueSize - Math.floor(valueSize) !== 0) {\n\t\t\t\tconsole.error('THREE.KeyframeTrack: Invalid value size in track.', this);\n\t\t\t\tvalid = false;\n\t\t\t}\n\n\t\t\tvar times = this.times,\n\t\t\t\t\tvalues = this.values,\n\t\t\t\t\tnKeys = times.length;\n\n\t\t\tif (nKeys === 0) {\n\t\t\t\tconsole.error('THREE.KeyframeTrack: Track is empty.', this);\n\t\t\t\tvalid = false;\n\t\t\t}\n\n\t\t\tvar prevTime = null;\n\n\t\t\tfor (var i = 0; i !== nKeys; i++) {\n\t\t\t\tvar currTime = times[i];\n\n\t\t\t\tif (typeof currTime === 'number' && isNaN(currTime)) {\n\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime);\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (prevTime !== null && prevTime > currTime) {\n\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime);\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tprevTime = currTime;\n\t\t\t}\n\n\t\t\tif (values !== undefined) {\n\t\t\t\tif (AnimationUtils.isTypedArray(values)) {\n\t\t\t\t\tfor (var _i = 0, n = values.length; _i !== n; ++_i) {\n\t\t\t\t\t\tvar value = values[_i];\n\n\t\t\t\t\t\tif (isNaN(value)) {\n\t\t\t\t\t\t\tconsole.error('THREE.KeyframeTrack: Value is not a valid number.', this, _i, value);\n\t\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn valid;\n\t\t} // removes equivalent sequential keys as common in morph target sequences\n\t\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\t\t;\n\n\t\t_proto.optimize = function optimize() {\n\t\t\t// times or values may be shared with other tracks, so overwriting is unsafe\n\t\t\tvar times = AnimationUtils.arraySlice(this.times),\n\t\t\t\t\tvalues = AnimationUtils.arraySlice(this.values),\n\t\t\t\t\tstride = this.getValueSize(),\n\t\t\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\t\t\t\t\tlastIndex = times.length - 1;\n\t\t\tvar writeIndex = 1;\n\n\t\t\tfor (var i = 1; i < lastIndex; ++i) {\n\t\t\t\tvar keep = false;\n\t\t\t\tvar time = times[i];\n\t\t\t\tvar timeNext = times[i + 1]; // remove adjacent keyframes scheduled at the same time\n\n\t\t\t\tif (time !== timeNext && (i !== 1 || time !== times[0])) {\n\t\t\t\t\tif (!smoothInterpolation) {\n\t\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\t\t\t\t\t\tvar offset = i * stride,\n\t\t\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\t\tfor (var j = 0; j !== stride; ++j) {\n\t\t\t\t\t\t\tvar value = values[offset + j];\n\n\t\t\t\t\t\t\tif (value !== values[offsetP + j] || value !== values[offsetN + j]) {\n\t\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t}\n\t\t\t\t} // in-place compaction\n\n\n\t\t\t\tif (keep) {\n\t\t\t\t\tif (i !== writeIndex) {\n\t\t\t\t\t\ttimes[writeIndex] = times[i];\n\t\t\t\t\t\tvar readOffset = i * stride,\n\t\t\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\t\tfor (var _j = 0; _j !== stride; ++_j) {\n\t\t\t\t\t\t\tvalues[writeOffset + _j] = values[readOffset + _j];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t++writeIndex;\n\t\t\t\t}\n\t\t\t} // flush last keyframe (compaction looks ahead)\n\n\n\t\t\tif (lastIndex > 0) {\n\t\t\t\ttimes[writeIndex] = times[lastIndex];\n\n\t\t\t\tfor (var _readOffset = lastIndex * stride, _writeOffset = writeIndex * stride, _j2 = 0; _j2 !== stride; ++_j2) {\n\t\t\t\t\tvalues[_writeOffset + _j2] = values[_readOffset + _j2];\n\t\t\t\t}\n\n\t\t\t\t++writeIndex;\n\t\t\t}\n\n\t\t\tif (writeIndex !== times.length) {\n\t\t\t\tthis.times = AnimationUtils.arraySlice(times, 0, writeIndex);\n\t\t\t\tthis.values = AnimationUtils.arraySlice(values, 0, writeIndex * stride);\n\t\t\t} else {\n\t\t\t\tthis.times = times;\n\t\t\t\tthis.values = values;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\tvar times = AnimationUtils.arraySlice(this.times, 0);\n\t\t\tvar values = AnimationUtils.arraySlice(this.values, 0);\n\t\t\tvar TypedKeyframeTrack = this.constructor;\n\t\t\tvar track = new TypedKeyframeTrack(this.name, times, values); // Interpolant argument to constructor is not saved, so copy the factory method directly.\n\n\t\t\ttrack.createInterpolant = this.createInterpolant;\n\t\t\treturn track;\n\t\t};\n\n\t\treturn KeyframeTrack;\n\t}();\n\n\tKeyframeTrack.prototype.TimeBufferType = Float32Array;\n\tKeyframeTrack.prototype.ValueBufferType = Float32Array;\n\tKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n\n\t/**\n\t * A Track of Boolean keyframe values.\n\t */\n\n\tvar BooleanKeyframeTrack = /*#__PURE__*/function (_KeyframeTrack) {\n\t\t_inheritsLoose(BooleanKeyframeTrack, _KeyframeTrack);\n\n\t\tfunction BooleanKeyframeTrack() {\n\t\t\treturn _KeyframeTrack.apply(this, arguments) || this;\n\t\t}\n\n\t\treturn BooleanKeyframeTrack;\n\t}(KeyframeTrack);\n\n\tBooleanKeyframeTrack.prototype.ValueTypeName = 'bool';\n\tBooleanKeyframeTrack.prototype.ValueBufferType = Array;\n\tBooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\n\tBooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\n\tBooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined; // Note: Actually this track could have a optimized / compressed\n\n\t/**\n\t * A Track of keyframe values that represent color.\n\t */\n\n\tvar ColorKeyframeTrack = /*#__PURE__*/function (_KeyframeTrack) {\n\t\t_inheritsLoose(ColorKeyframeTrack, _KeyframeTrack);\n\n\t\tfunction ColorKeyframeTrack() {\n\t\t\treturn _KeyframeTrack.apply(this, arguments) || this;\n\t\t}\n\n\t\treturn ColorKeyframeTrack;\n\t}(KeyframeTrack);\n\n\tColorKeyframeTrack.prototype.ValueTypeName = 'color'; // ValueBufferType is inherited\n\n\t/**\n\t * A Track of numeric keyframe values.\n\t */\n\n\tvar NumberKeyframeTrack = /*#__PURE__*/function (_KeyframeTrack) {\n\t\t_inheritsLoose(NumberKeyframeTrack, _KeyframeTrack);\n\n\t\tfunction NumberKeyframeTrack() {\n\t\t\treturn _KeyframeTrack.apply(this, arguments) || this;\n\t\t}\n\n\t\treturn NumberKeyframeTrack;\n\t}(KeyframeTrack);\n\n\tNumberKeyframeTrack.prototype.ValueTypeName = 'number'; // ValueBufferType is inherited\n\n\t/**\n\t * Spherical linear unit quaternion interpolant.\n\t */\n\n\tfunction QuaternionLinearInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n\t\tInterpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n\t}\n\n\tQuaternionLinearInterpolant.prototype = Object.assign(Object.create(Interpolant.prototype), {\n\t\tconstructor: QuaternionLinearInterpolant,\n\t\tinterpolate_: function interpolate_(i1, t0, t, t1) {\n\t\t\tvar result = this.resultBuffer,\n\t\t\t\t\tvalues = this.sampleValues,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\talpha = (t - t0) / (t1 - t0);\n\t\t\tvar offset = i1 * stride;\n\n\t\t\tfor (var end = offset + stride; offset !== end; offset += 4) {\n\t\t\t\tQuaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t});\n\n\t/**\n\t * A Track of quaternion keyframe values.\n\t */\n\n\tvar QuaternionKeyframeTrack = /*#__PURE__*/function (_KeyframeTrack) {\n\t\t_inheritsLoose(QuaternionKeyframeTrack, _KeyframeTrack);\n\n\t\tfunction QuaternionKeyframeTrack() {\n\t\t\treturn _KeyframeTrack.apply(this, arguments) || this;\n\t\t}\n\n\t\tvar _proto = QuaternionKeyframeTrack.prototype;\n\n\t\t_proto.InterpolantFactoryMethodLinear = function InterpolantFactoryMethodLinear(result) {\n\t\t\treturn new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);\n\t\t};\n\n\t\treturn QuaternionKeyframeTrack;\n\t}(KeyframeTrack);\n\n\tQuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion'; // ValueBufferType is inherited\n\n\tQuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n\tQuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n\t/**\n\t * A Track that interpolates Strings\n\t */\n\n\tvar StringKeyframeTrack = /*#__PURE__*/function (_KeyframeTrack) {\n\t\t_inheritsLoose(StringKeyframeTrack, _KeyframeTrack);\n\n\t\tfunction StringKeyframeTrack() {\n\t\t\treturn _KeyframeTrack.apply(this, arguments) || this;\n\t\t}\n\n\t\treturn StringKeyframeTrack;\n\t}(KeyframeTrack);\n\n\tStringKeyframeTrack.prototype.ValueTypeName = 'string';\n\tStringKeyframeTrack.prototype.ValueBufferType = Array;\n\tStringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\n\tStringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\n\tStringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n\t/**\n\t * A Track of vectored keyframe values.\n\t */\n\n\tvar VectorKeyframeTrack = /*#__PURE__*/function (_KeyframeTrack) {\n\t\t_inheritsLoose(VectorKeyframeTrack, _KeyframeTrack);\n\n\t\tfunction VectorKeyframeTrack() {\n\t\t\treturn _KeyframeTrack.apply(this, arguments) || this;\n\t\t}\n\n\t\treturn VectorKeyframeTrack;\n\t}(KeyframeTrack);\n\n\tVectorKeyframeTrack.prototype.ValueTypeName = 'vector'; // ValueBufferType is inherited\n\n\tvar AnimationClip = /*#__PURE__*/function () {\n\t\tfunction AnimationClip(name, duration, tracks, blendMode) {\n\t\t\tif (duration === void 0) {\n\t\t\t\tduration = -1;\n\t\t\t}\n\n\t\t\tif (blendMode === void 0) {\n\t\t\t\tblendMode = NormalAnimationBlendMode;\n\t\t\t}\n\n\t\t\tthis.name = name;\n\t\t\tthis.tracks = tracks;\n\t\t\tthis.duration = duration;\n\t\t\tthis.blendMode = blendMode;\n\t\t\tthis.uuid = MathUtils.generateUUID(); // this means it should figure out its duration by scanning the tracks\n\n\t\t\tif (this.duration < 0) {\n\t\t\t\tthis.resetDuration();\n\t\t\t}\n\t\t}\n\n\t\tAnimationClip.parse = function parse(json) {\n\t\t\tvar tracks = [],\n\t\t\t\t\tjsonTracks = json.tracks,\n\t\t\t\t\tframeTime = 1.0 / (json.fps || 1.0);\n\n\t\t\tfor (var i = 0, n = jsonTracks.length; i !== n; ++i) {\n\t\t\t\ttracks.push(parseKeyframeTrack(jsonTracks[i]).scale(frameTime));\n\t\t\t}\n\n\t\t\tvar clip = new this(json.name, json.duration, tracks, json.blendMode);\n\t\t\tclip.uuid = json.uuid;\n\t\t\treturn clip;\n\t\t};\n\n\t\tAnimationClip.toJSON = function toJSON(clip) {\n\t\t\tvar tracks = [],\n\t\t\t\t\tclipTracks = clip.tracks;\n\t\t\tvar json = {\n\t\t\t\t'name': clip.name,\n\t\t\t\t'duration': clip.duration,\n\t\t\t\t'tracks': tracks,\n\t\t\t\t'uuid': clip.uuid,\n\t\t\t\t'blendMode': clip.blendMode\n\t\t\t};\n\n\t\t\tfor (var i = 0, n = clipTracks.length; i !== n; ++i) {\n\t\t\t\ttracks.push(KeyframeTrack.toJSON(clipTracks[i]));\n\t\t\t}\n\n\t\t\treturn json;\n\t\t};\n\n\t\tAnimationClip.CreateFromMorphTargetSequence = function CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {\n\t\t\tvar numMorphTargets = morphTargetSequence.length;\n\t\t\tvar tracks = [];\n\n\t\t\tfor (var i = 0; i < numMorphTargets; i++) {\n\t\t\t\tvar times = [];\n\t\t\t\tvar values = [];\n\t\t\t\ttimes.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);\n\t\t\t\tvalues.push(0, 1, 0);\n\t\t\t\tvar order = AnimationUtils.getKeyframeOrder(times);\n\t\t\t\ttimes = AnimationUtils.sortedArray(times, 1, order);\n\t\t\t\tvalues = AnimationUtils.sortedArray(values, 1, order); // if there is a key at the first frame, duplicate it as the\n\t\t\t\t// last frame as well for perfect loop.\n\n\t\t\t\tif (!noLoop && times[0] === 0) {\n\t\t\t\t\ttimes.push(numMorphTargets);\n\t\t\t\t\tvalues.push(values[0]);\n\t\t\t\t}\n\n\t\t\t\ttracks.push(new NumberKeyframeTrack('.morphTargetInfluences[' + morphTargetSequence[i].name + ']', times, values).scale(1.0 / fps));\n\t\t\t}\n\n\t\t\treturn new this(name, -1, tracks);\n\t\t};\n\n\t\tAnimationClip.findByName = function findByName(objectOrClipArray, name) {\n\t\t\tvar clipArray = objectOrClipArray;\n\n\t\t\tif (!Array.isArray(objectOrClipArray)) {\n\t\t\t\tvar o = objectOrClipArray;\n\t\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < clipArray.length; i++) {\n\t\t\t\tif (clipArray[i].name === name) {\n\t\t\t\t\treturn clipArray[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\n\t\tAnimationClip.CreateClipsFromMorphTargetSequences = function CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {\n\t\t\tvar animationToMorphTargets = {}; // tested with https://regex101.com/ on trick sequences\n\t\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\n\t\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/; // sort morph target names into animation groups based\n\t\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\n\t\t\tfor (var i = 0, il = morphTargets.length; i < il; i++) {\n\t\t\t\tvar morphTarget = morphTargets[i];\n\t\t\t\tvar parts = morphTarget.name.match(pattern);\n\n\t\t\t\tif (parts && parts.length > 1) {\n\t\t\t\t\tvar name = parts[1];\n\t\t\t\t\tvar animationMorphTargets = animationToMorphTargets[name];\n\n\t\t\t\t\tif (!animationMorphTargets) {\n\t\t\t\t\t\tanimationToMorphTargets[name] = animationMorphTargets = [];\n\t\t\t\t\t}\n\n\t\t\t\t\tanimationMorphTargets.push(morphTarget);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar clips = [];\n\n\t\t\tfor (var _name in animationToMorphTargets) {\n\t\t\t\tclips.push(this.CreateFromMorphTargetSequence(_name, animationToMorphTargets[_name], fps, noLoop));\n\t\t\t}\n\n\t\t\treturn clips;\n\t\t} // parse the animation.hierarchy format\n\t\t;\n\n\t\tAnimationClip.parseAnimation = function parseAnimation(animation, bones) {\n\t\t\tif (!animation) {\n\t\t\t\tconsole.error('THREE.AnimationClip: No animation in JSONLoader data.');\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tvar addNonemptyTrack = function addNonemptyTrack(trackType, trackName, animationKeys, propertyName, destTracks) {\n\t\t\t\t// only return track if there are actually keys.\n\t\t\t\tif (animationKeys.length !== 0) {\n\t\t\t\t\tvar times = [];\n\t\t\t\t\tvar values = [];\n\t\t\t\t\tAnimationUtils.flattenJSON(animationKeys, times, values, propertyName); // empty keys are filtered out, so check again\n\n\t\t\t\t\tif (times.length !== 0) {\n\t\t\t\t\t\tdestTracks.push(new trackType(trackName, times, values));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar tracks = [];\n\t\t\tvar clipName = animation.name || 'default';\n\t\t\tvar fps = animation.fps || 30;\n\t\t\tvar blendMode = animation.blendMode; // automatic length determination in AnimationClip.\n\n\t\t\tvar duration = animation.length || -1;\n\t\t\tvar hierarchyTracks = animation.hierarchy || [];\n\n\t\t\tfor (var h = 0; h < hierarchyTracks.length; h++) {\n\t\t\t\tvar animationKeys = hierarchyTracks[h].keys; // skip empty tracks\n\n\t\t\t\tif (!animationKeys || animationKeys.length === 0) continue; // process morph targets\n\n\t\t\t\tif (animationKeys[0].morphTargets) {\n\t\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\t\tvar morphTargetNames = {};\n\t\t\t\t\tvar k = void 0;\n\n\t\t\t\t\tfor (k = 0; k < animationKeys.length; k++) {\n\t\t\t\t\t\tif (animationKeys[k].morphTargets) {\n\t\t\t\t\t\t\tfor (var m = 0; m < animationKeys[k].morphTargets.length; m++) {\n\t\t\t\t\t\t\t\tmorphTargetNames[animationKeys[k].morphTargets[m]] = -1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} // create a track for each morph target with all zero\n\t\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t\t// the morphTarget is named.\n\n\n\t\t\t\t\tfor (var morphTargetName in morphTargetNames) {\n\t\t\t\t\t\tvar times = [];\n\t\t\t\t\t\tvar values = [];\n\n\t\t\t\t\t\tfor (var _m = 0; _m !== animationKeys[k].morphTargets.length; ++_m) {\n\t\t\t\t\t\t\tvar animationKey = animationKeys[k];\n\t\t\t\t\t\t\ttimes.push(animationKey.time);\n\t\t\t\t\t\t\tvalues.push(animationKey.morphTarget === morphTargetName ? 1 : 0);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttracks.push(new NumberKeyframeTrack('.morphTargetInfluence[' + morphTargetName + ']', times, values));\n\t\t\t\t\t}\n\n\t\t\t\t\tduration = morphTargetNames.length * (fps || 1.0);\n\t\t\t\t} else {\n\t\t\t\t\t// ...assume skeletal animation\n\t\t\t\t\tvar boneName = '.bones[' + bones[h].name + ']';\n\t\t\t\t\taddNonemptyTrack(VectorKeyframeTrack, boneName + '.position', animationKeys, 'pos', tracks);\n\t\t\t\t\taddNonemptyTrack(QuaternionKeyframeTrack, boneName + '.quaternion', animationKeys, 'rot', tracks);\n\t\t\t\t\taddNonemptyTrack(VectorKeyframeTrack, boneName + '.scale', animationKeys, 'scl', tracks);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tracks.length === 0) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tvar clip = new this(clipName, duration, tracks, blendMode);\n\t\t\treturn clip;\n\t\t};\n\n\t\tvar _proto = AnimationClip.prototype;\n\n\t\t_proto.resetDuration = function resetDuration() {\n\t\t\tvar tracks = this.tracks;\n\t\t\tvar duration = 0;\n\n\t\t\tfor (var i = 0, n = tracks.length; i !== n; ++i) {\n\t\t\t\tvar track = this.tracks[i];\n\t\t\t\tduration = Math.max(duration, track.times[track.times.length - 1]);\n\t\t\t}\n\n\t\t\tthis.duration = duration;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.trim = function trim() {\n\t\t\tfor (var i = 0; i < this.tracks.length; i++) {\n\t\t\t\tthis.tracks[i].trim(0, this.duration);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.validate = function validate() {\n\t\t\tvar valid = true;\n\n\t\t\tfor (var i = 0; i < this.tracks.length; i++) {\n\t\t\t\tvalid = valid && this.tracks[i].validate();\n\t\t\t}\n\n\t\t\treturn valid;\n\t\t};\n\n\t\t_proto.optimize = function optimize() {\n\t\t\tfor (var i = 0; i < this.tracks.length; i++) {\n\t\t\t\tthis.tracks[i].optimize();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\tvar tracks = [];\n\n\t\t\tfor (var i = 0; i < this.tracks.length; i++) {\n\t\t\t\ttracks.push(this.tracks[i].clone());\n\t\t\t}\n\n\t\t\treturn new this.constructor(this.name, this.duration, tracks, this.blendMode);\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\treturn this.constructor.toJSON(this);\n\t\t};\n\n\t\treturn AnimationClip;\n\t}();\n\n\tfunction getTrackTypeForValueTypeName(typeName) {\n\t\tswitch (typeName.toLowerCase()) {\n\t\t\tcase 'scalar':\n\t\t\tcase 'double':\n\t\t\tcase 'float':\n\t\t\tcase 'number':\n\t\t\tcase 'integer':\n\t\t\t\treturn NumberKeyframeTrack;\n\n\t\t\tcase 'vector':\n\t\t\tcase 'vector2':\n\t\t\tcase 'vector3':\n\t\t\tcase 'vector4':\n\t\t\t\treturn VectorKeyframeTrack;\n\n\t\t\tcase 'color':\n\t\t\t\treturn ColorKeyframeTrack;\n\n\t\t\tcase 'quaternion':\n\t\t\t\treturn QuaternionKeyframeTrack;\n\n\t\t\tcase 'bool':\n\t\t\tcase 'boolean':\n\t\t\t\treturn BooleanKeyframeTrack;\n\n\t\t\tcase 'string':\n\t\t\t\treturn StringKeyframeTrack;\n\t\t}\n\n\t\tthrow new Error('THREE.KeyframeTrack: Unsupported typeName: ' + typeName);\n\t}\n\n\tfunction parseKeyframeTrack(json) {\n\t\tif (json.type === undefined) {\n\t\t\tthrow new Error('THREE.KeyframeTrack: track type undefined, can not parse');\n\t\t}\n\n\t\tvar trackType = getTrackTypeForValueTypeName(json.type);\n\n\t\tif (json.times === undefined) {\n\t\t\tvar times = [],\n\t\t\t\t\tvalues = [];\n\t\t\tAnimationUtils.flattenJSON(json.keys, times, values, 'value');\n\t\t\tjson.times = times;\n\t\t\tjson.values = values;\n\t\t} // derived classes can define a static parse method\n\n\n\t\tif (trackType.parse !== undefined) {\n\t\t\treturn trackType.parse(json);\n\t\t} else {\n\t\t\t// by default, we assume a constructor compatible with the base\n\t\t\treturn new trackType(json.name, json.times, json.values, json.interpolation);\n\t\t}\n\t}\n\n\tvar Cache = {\n\t\tenabled: false,\n\t\tfiles: {},\n\t\tadd: function add(key, file) {\n\t\t\tif (this.enabled === false) return; // console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\t\tthis.files[key] = file;\n\t\t},\n\t\tget: function get(key) {\n\t\t\tif (this.enabled === false) return; // console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\t\treturn this.files[key];\n\t\t},\n\t\tremove: function remove(key) {\n\t\t\tdelete this.files[key];\n\t\t},\n\t\tclear: function clear() {\n\t\t\tthis.files = {};\n\t\t}\n\t};\n\n\tfunction LoadingManager(onLoad, onProgress, onError) {\n\t\tvar scope = this;\n\t\tvar isLoading = false;\n\t\tvar itemsLoaded = 0;\n\t\tvar itemsTotal = 0;\n\t\tvar urlModifier = undefined;\n\t\tvar handlers = []; // Refer to #5689 for the reason why we don't set .onStart\n\t\t// in the constructor\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function (url) {\n\t\t\titemsTotal++;\n\n\t\t\tif (isLoading === false) {\n\t\t\t\tif (scope.onStart !== undefined) {\n\t\t\t\t\tscope.onStart(url, itemsLoaded, itemsTotal);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tisLoading = true;\n\t\t};\n\n\t\tthis.itemEnd = function (url) {\n\t\t\titemsLoaded++;\n\n\t\t\tif (scope.onProgress !== undefined) {\n\t\t\t\tscope.onProgress(url, itemsLoaded, itemsTotal);\n\t\t\t}\n\n\t\t\tif (itemsLoaded === itemsTotal) {\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif (scope.onLoad !== undefined) {\n\t\t\t\t\tscope.onLoad();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.itemError = function (url) {\n\t\t\tif (scope.onError !== undefined) {\n\t\t\t\tscope.onError(url);\n\t\t\t}\n\t\t};\n\n\t\tthis.resolveURL = function (url) {\n\t\t\tif (urlModifier) {\n\t\t\t\treturn urlModifier(url);\n\t\t\t}\n\n\t\t\treturn url;\n\t\t};\n\n\t\tthis.setURLModifier = function (transform) {\n\t\t\turlModifier = transform;\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.addHandler = function (regex, loader) {\n\t\t\thandlers.push(regex, loader);\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.removeHandler = function (regex) {\n\t\t\tvar index = handlers.indexOf(regex);\n\n\t\t\tif (index !== -1) {\n\t\t\t\thandlers.splice(index, 2);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\tthis.getHandler = function (file) {\n\t\t\tfor (var i = 0, l = handlers.length; i < l; i += 2) {\n\t\t\t\tvar regex = handlers[i];\n\t\t\t\tvar loader = handlers[i + 1];\n\t\t\t\tif (regex.global) regex.lastIndex = 0; // see #17920\n\n\t\t\t\tif (regex.test(file)) {\n\t\t\t\t\treturn loader;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\t}\n\n\tvar DefaultLoadingManager = new LoadingManager();\n\n\tfunction Loader(manager) {\n\t\tthis.manager = manager !== undefined ? manager : DefaultLoadingManager;\n\t\tthis.crossOrigin = 'anonymous';\n\t\tthis.withCredentials = false;\n\t\tthis.path = '';\n\t\tthis.resourcePath = '';\n\t\tthis.requestHeader = {};\n\t}\n\n\tObject.assign(Loader.prototype, {\n\t\tload: function load()\n\t\t/* url, onLoad, onProgress, onError */\n\t\t{},\n\t\tloadAsync: function loadAsync(url, onProgress) {\n\t\t\tvar scope = this;\n\t\t\treturn new Promise(function (resolve, reject) {\n\t\t\t\tscope.load(url, resolve, onProgress, reject);\n\t\t\t});\n\t\t},\n\t\tparse: function parse()\n\t\t/* data */\n\t\t{},\n\t\tsetCrossOrigin: function setCrossOrigin(crossOrigin) {\n\t\t\tthis.crossOrigin = crossOrigin;\n\t\t\treturn this;\n\t\t},\n\t\tsetWithCredentials: function setWithCredentials(value) {\n\t\t\tthis.withCredentials = value;\n\t\t\treturn this;\n\t\t},\n\t\tsetPath: function setPath(path) {\n\t\t\tthis.path = path;\n\t\t\treturn this;\n\t\t},\n\t\tsetResourcePath: function setResourcePath(resourcePath) {\n\t\t\tthis.resourcePath = resourcePath;\n\t\t\treturn this;\n\t\t},\n\t\tsetRequestHeader: function setRequestHeader(requestHeader) {\n\t\t\tthis.requestHeader = requestHeader;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tvar loading = {};\n\n\tfunction FileLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tFileLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: FileLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tif (url === undefined) url = '';\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tvar scope = this;\n\t\t\tvar cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t} // Check if request is duplicate\n\n\n\t\t\tif (loading[url] !== undefined) {\n\t\t\t\tloading[url].push({\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t} // Check for data: URI\n\n\n\t\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\t\tvar dataUriRegexResult = url.match(dataUriRegex);\n\t\t\tvar request; // Safari can not handle Data URIs through XMLHttpRequest so process manually\n\n\t\t\tif (dataUriRegexResult) {\n\t\t\t\tvar mimeType = dataUriRegexResult[1];\n\t\t\t\tvar isBase64 = !!dataUriRegexResult[2];\n\t\t\t\tvar data = dataUriRegexResult[3];\n\t\t\t\tdata = decodeURIComponent(data);\n\t\t\t\tif (isBase64) data = atob(data);\n\n\t\t\t\ttry {\n\t\t\t\t\tvar response;\n\t\t\t\t\tvar responseType = (this.responseType || '').toLowerCase();\n\n\t\t\t\t\tswitch (responseType) {\n\t\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\t\tcase 'blob':\n\t\t\t\t\t\t\tvar view = new Uint8Array(data.length);\n\n\t\t\t\t\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\t\t\t\t\tview[i] = data.charCodeAt(i);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (responseType === 'blob') {\n\t\t\t\t\t\t\t\tresponse = new Blob([view.buffer], {\n\t\t\t\t\t\t\t\t\ttype: mimeType\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresponse = view.buffer;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'document':\n\t\t\t\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\t\t\tresponse = parser.parseFromString(data, mimeType);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'json':\n\t\t\t\t\t\t\tresponse = JSON.parse(data);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// 'text' or other\n\t\t\t\t\t\t\tresponse = data;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t} // Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\n\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tif (onLoad) onLoad(response);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}, 0);\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tif (onError) onError(error);\n\t\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Initialise array for duplicate requests\n\t\t\t\tloading[url] = [];\n\t\t\t\tloading[url].push({\n\t\t\t\t\tonLoad: onLoad,\n\t\t\t\t\tonProgress: onProgress,\n\t\t\t\t\tonError: onError\n\t\t\t\t});\n\t\t\t\trequest = new XMLHttpRequest();\n\t\t\t\trequest.open('GET', url, true);\n\t\t\t\trequest.addEventListener('load', function (event) {\n\t\t\t\t\tvar response = this.response;\n\t\t\t\t\tvar callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tif (this.status === 200 || this.status === 0) {\n\t\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\t\t\t\t\t\tif (this.status === 0) console.warn('THREE.FileLoader: HTTP Status 0 received.'); // Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t\t\t// error response bodies as proper responses to requests.\n\n\t\t\t\t\t\tCache.add(url, response);\n\n\t\t\t\t\t\tfor (var _i = 0, il = callbacks.length; _i < il; _i++) {\n\t\t\t\t\t\t\tvar callback = callbacks[_i];\n\t\t\t\t\t\t\tif (callback.onLoad) callback.onLoad(response);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (var _i2 = 0, _il = callbacks.length; _i2 < _il; _i2++) {\n\t\t\t\t\t\t\tvar _callback = callbacks[_i2];\n\t\t\t\t\t\t\tif (_callback.onError) _callback.onError(event);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('progress', function (event) {\n\t\t\t\t\tvar callbacks = loading[url];\n\n\t\t\t\t\tfor (var _i3 = 0, il = callbacks.length; _i3 < il; _i3++) {\n\t\t\t\t\t\tvar callback = callbacks[_i3];\n\t\t\t\t\t\tif (callback.onProgress) callback.onProgress(event);\n\t\t\t\t\t}\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('error', function (event) {\n\t\t\t\t\tvar callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tfor (var _i4 = 0, il = callbacks.length; _i4 < il; _i4++) {\n\t\t\t\t\t\tvar callback = callbacks[_i4];\n\t\t\t\t\t\tif (callback.onError) callback.onError(event);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, false);\n\t\t\t\trequest.addEventListener('abort', function (event) {\n\t\t\t\t\tvar callbacks = loading[url];\n\t\t\t\t\tdelete loading[url];\n\n\t\t\t\t\tfor (var _i5 = 0, il = callbacks.length; _i5 < il; _i5++) {\n\t\t\t\t\t\tvar callback = callbacks[_i5];\n\t\t\t\t\t\tif (callback.onError) callback.onError(event);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, false);\n\t\t\t\tif (this.responseType !== undefined) request.responseType = this.responseType;\n\t\t\t\tif (this.withCredentials !== undefined) request.withCredentials = this.withCredentials;\n\t\t\t\tif (request.overrideMimeType) request.overrideMimeType(this.mimeType !== undefined ? this.mimeType : 'text/plain');\n\n\t\t\t\tfor (var header in this.requestHeader) {\n\t\t\t\t\trequest.setRequestHeader(header, this.requestHeader[header]);\n\t\t\t\t}\n\n\t\t\t\trequest.send(null);\n\t\t\t}\n\n\t\t\tscope.manager.itemStart(url);\n\t\t\treturn request;\n\t\t},\n\t\tsetResponseType: function setResponseType(value) {\n\t\t\tthis.responseType = value;\n\t\t\treturn this;\n\t\t},\n\t\tsetMimeType: function setMimeType(value) {\n\t\t\tthis.mimeType = value;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tvar AnimationLoader = /*#__PURE__*/function (_Loader) {\n\t\t_inheritsLoose(AnimationLoader, _Loader);\n\n\t\tfunction AnimationLoader(manager) {\n\t\t\treturn _Loader.call(this, manager) || this;\n\t\t}\n\n\t\tvar _proto = AnimationLoader.prototype;\n\n\t\t_proto.load = function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t};\n\n\t\t_proto.parse = function parse(json) {\n\t\t\tvar animations = [];\n\n\t\t\tfor (var i = 0; i < json.length; i++) {\n\t\t\t\tvar clip = AnimationClip.parse(json[i]);\n\t\t\t\tanimations.push(clip);\n\t\t\t}\n\n\t\t\treturn animations;\n\t\t};\n\n\t\treturn AnimationLoader;\n\t}(Loader);\n\n\t/**\n\t * Abstract Base class to block based textures loader (dds, pvr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction CompressedTextureLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tCompressedTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: CompressedTextureLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar images = [];\n\t\t\tvar texture = new CompressedTexture();\n\t\t\tvar loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture(i) {\n\t\t\t\tloader.load(url[i], function (buffer) {\n\t\t\t\t\tvar texDatas = scope.parse(buffer, true);\n\t\t\t\t\timages[i] = {\n\t\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t\t};\n\t\t\t\t\tloaded += 1;\n\n\t\t\t\t\tif (loaded === 6) {\n\t\t\t\t\t\tif (texDatas.mipmapCount === 1) texture.minFilter = LinearFilter;\n\t\t\t\t\t\ttexture.image = images;\n\t\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t\t}\n\t\t\t\t}, onProgress, onError);\n\t\t\t}\n\n\t\t\tif (Array.isArray(url)) {\n\t\t\t\tfor (var i = 0, il = url.length; i < il; ++i) {\n\t\t\t\t\tloadTexture(i);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// compressed cubemap texture stored in a single DDS file\n\t\t\t\tloader.load(url, function (buffer) {\n\t\t\t\t\tvar texDatas = scope.parse(buffer, true);\n\n\t\t\t\t\tif (texDatas.isCubemap) {\n\t\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\t\tfor (var f = 0; f < faces; f++) {\n\t\t\t\t\t\t\timages[f] = {\n\t\t\t\t\t\t\t\tmipmaps: []\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tfor (var _i = 0; _i < texDatas.mipmapCount; _i++) {\n\t\t\t\t\t\t\t\timages[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + _i]);\n\t\t\t\t\t\t\t\timages[f].format = texDatas.format;\n\t\t\t\t\t\t\t\timages[f].width = texDatas.width;\n\t\t\t\t\t\t\t\timages[f].height = texDatas.height;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttexture.image = images;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (texDatas.mipmapCount === 1) {\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t}, onProgress, onError);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t}\n\t});\n\n\tvar ImageLoader = /*#__PURE__*/function (_Loader) {\n\t\t_inheritsLoose(ImageLoader, _Loader);\n\n\t\tfunction ImageLoader(manager) {\n\t\t\treturn _Loader.call(this, manager) || this;\n\t\t}\n\n\t\tvar _proto = ImageLoader.prototype;\n\n\t\t_proto.load = function load(url, onLoad, onProgress, onError) {\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tvar scope = this;\n\t\t\tvar cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t}\n\n\t\t\tvar image = document.createElementNS('http://www.w3.org/1999/xhtml', 'img');\n\n\t\t\tfunction onImageLoad() {\n\t\t\t\timage.removeEventListener('load', onImageLoad, false);\n\t\t\t\timage.removeEventListener('error', onImageError, false);\n\t\t\t\tCache.add(url, this);\n\t\t\t\tif (onLoad) onLoad(this);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}\n\n\t\t\tfunction onImageError(event) {\n\t\t\t\timage.removeEventListener('load', onImageLoad, false);\n\t\t\t\timage.removeEventListener('error', onImageError, false);\n\t\t\t\tif (onError) onError(event);\n\t\t\t\tscope.manager.itemError(url);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}\n\n\t\t\timage.addEventListener('load', onImageLoad, false);\n\t\t\timage.addEventListener('error', onImageError, false);\n\n\t\t\tif (url.substr(0, 5) !== 'data:') {\n\t\t\t\tif (this.crossOrigin !== undefined) image.crossOrigin = this.crossOrigin;\n\t\t\t}\n\n\t\t\tscope.manager.itemStart(url);\n\t\t\timage.src = url;\n\t\t\treturn image;\n\t\t};\n\n\t\treturn ImageLoader;\n\t}(Loader);\n\n\tvar CubeTextureLoader = /*#__PURE__*/function (_Loader) {\n\t\t_inheritsLoose(CubeTextureLoader, _Loader);\n\n\t\tfunction CubeTextureLoader(manager) {\n\t\t\treturn _Loader.call(this, manager) || this;\n\t\t}\n\n\t\tvar _proto = CubeTextureLoader.prototype;\n\n\t\t_proto.load = function load(urls, onLoad, onProgress, onError) {\n\t\t\tvar texture = new CubeTexture();\n\t\t\tvar loader = new ImageLoader(this.manager);\n\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\t\tloader.setPath(this.path);\n\t\t\tvar loaded = 0;\n\n\t\t\tfunction loadTexture(i) {\n\t\t\t\tloader.load(urls[i], function (image) {\n\t\t\t\t\ttexture.images[i] = image;\n\t\t\t\t\tloaded++;\n\n\t\t\t\t\tif (loaded === 6) {\n\t\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t\t\tif (onLoad) onLoad(texture);\n\t\t\t\t\t}\n\t\t\t\t}, undefined, onError);\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < urls.length; ++i) {\n\t\t\t\tloadTexture(i);\n\t\t\t}\n\n\t\t\treturn texture;\n\t\t};\n\n\t\treturn CubeTextureLoader;\n\t}(Loader);\n\n\t/**\n\t * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n\t *\n\t * Sub classes have to implement the parse() method which will be used in load().\n\t */\n\n\tfunction DataTextureLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tDataTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: DataTextureLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar texture = new DataTexture();\n\t\t\tvar loader = new FileLoader(this.manager);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (buffer) {\n\t\t\t\tvar texData = scope.parse(buffer);\n\t\t\t\tif (!texData) return;\n\n\t\t\t\tif (texData.image !== undefined) {\n\t\t\t\t\ttexture.image = texData.image;\n\t\t\t\t} else if (texData.data !== undefined) {\n\t\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\t\ttexture.image.data = texData.data;\n\t\t\t\t}\n\n\t\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\t\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\t\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\t\tif (texData.encoding !== undefined) {\n\t\t\t\t\ttexture.encoding = texData.encoding;\n\t\t\t\t}\n\n\t\t\t\tif (texData.flipY !== undefined) {\n\t\t\t\t\ttexture.flipY = texData.flipY;\n\t\t\t\t}\n\n\t\t\t\tif (texData.format !== undefined) {\n\t\t\t\t\ttexture.format = texData.format;\n\t\t\t\t}\n\n\t\t\t\tif (texData.type !== undefined) {\n\t\t\t\t\ttexture.type = texData.type;\n\t\t\t\t}\n\n\t\t\t\tif (texData.mipmaps !== undefined) {\n\t\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\t\t\t\t}\n\n\t\t\t\tif (texData.mipmapCount === 1) {\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t}\n\n\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\tif (onLoad) onLoad(texture, texData);\n\t\t\t}, onProgress, onError);\n\t\t\treturn texture;\n\t\t}\n\t});\n\n\tfunction TextureLoader(manager) {\n\t\tLoader.call(this, manager);\n\t}\n\n\tTextureLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: TextureLoader,\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tvar texture = new Texture();\n\t\t\tvar loader = new ImageLoader(this.manager);\n\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.load(url, function (image) {\n\t\t\t\ttexture.image = image; // JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n\n\t\t\t\tvar isJPEG = url.search(/\\.jpe?g($|\\?)/i) > 0 || url.search(/^data\\:image\\/jpeg/) === 0;\n\t\t\t\ttexture.format = isJPEG ? RGBFormat : RGBAFormat;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif (onLoad !== undefined) {\n\t\t\t\t\tonLoad(texture);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t\treturn texture;\n\t\t}\n\t});\n\n\t/**\n\t * Extensible curve object.\n\t *\n\t * Some common of curve methods:\n\t * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )\n\t * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )\n\t * .getPoints(), .getSpacedPoints()\n\t * .getLength()\n\t * .updateArcLengths()\n\t *\n\t * This following curves inherit from THREE.Curve:\n\t *\n\t * -- 2D curves --\n\t * THREE.ArcCurve\n\t * THREE.CubicBezierCurve\n\t * THREE.EllipseCurve\n\t * THREE.LineCurve\n\t * THREE.QuadraticBezierCurve\n\t * THREE.SplineCurve\n\t *\n\t * -- 3D curves --\n\t * THREE.CatmullRomCurve3\n\t * THREE.CubicBezierCurve3\n\t * THREE.LineCurve3\n\t * THREE.QuadraticBezierCurve3\n\t *\n\t * A series of curves can be represented as a THREE.CurvePath.\n\t *\n\t **/\n\n\tfunction Curve() {\n\t\tthis.type = 'Curve';\n\t\tthis.arcLengthDivisions = 200;\n\t}\n\n\tObject.assign(Curve.prototype, {\n\t\t// Virtual base class method to overwrite and implement in subclasses\n\t\t//\t- t [0 .. 1]\n\t\tgetPoint: function getPoint()\n\t\t/* t, optionalTarget */\n\t\t{\n\t\t\tconsole.warn('THREE.Curve: .getPoint() not implemented.');\n\t\t\treturn null;\n\t\t},\n\t\t// Get point at relative position in curve according to arc length\n\t\t// - u [0 .. 1]\n\t\tgetPointAt: function getPointAt(u, optionalTarget) {\n\t\t\tvar t = this.getUtoTmapping(u);\n\t\t\treturn this.getPoint(t, optionalTarget);\n\t\t},\n\t\t// Get sequence of points using getPoint( t )\n\t\tgetPoints: function getPoints(divisions) {\n\t\t\tif (divisions === void 0) {\n\t\t\t\tdivisions = 5;\n\t\t\t}\n\n\t\t\tvar points = [];\n\n\t\t\tfor (var d = 0; d <= divisions; d++) {\n\t\t\t\tpoints.push(this.getPoint(d / divisions));\n\t\t\t}\n\n\t\t\treturn points;\n\t\t},\n\t\t// Get sequence of points using getPointAt( u )\n\t\tgetSpacedPoints: function getSpacedPoints(divisions) {\n\t\t\tif (divisions === void 0) {\n\t\t\t\tdivisions = 5;\n\t\t\t}\n\n\t\t\tvar points = [];\n\n\t\t\tfor (var d = 0; d <= divisions; d++) {\n\t\t\t\tpoints.push(this.getPointAt(d / divisions));\n\t\t\t}\n\n\t\t\treturn points;\n\t\t},\n\t\t// Get total curve arc length\n\t\tgetLength: function getLength() {\n\t\t\tvar lengths = this.getLengths();\n\t\t\treturn lengths[lengths.length - 1];\n\t\t},\n\t\t// Get list of cumulative segment lengths\n\t\tgetLengths: function getLengths(divisions) {\n\t\t\tif (divisions === undefined) divisions = this.arcLengthDivisions;\n\n\t\t\tif (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {\n\t\t\t\treturn this.cacheArcLengths;\n\t\t\t}\n\n\t\t\tthis.needsUpdate = false;\n\t\t\tvar cache = [];\n\t\t\tvar current,\n\t\t\t\t\tlast = this.getPoint(0);\n\t\t\tvar sum = 0;\n\t\t\tcache.push(0);\n\n\t\t\tfor (var p = 1; p <= divisions; p++) {\n\t\t\t\tcurrent = this.getPoint(p / divisions);\n\t\t\t\tsum += current.distanceTo(last);\n\t\t\t\tcache.push(sum);\n\t\t\t\tlast = current;\n\t\t\t}\n\n\t\t\tthis.cacheArcLengths = cache;\n\t\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\t\t},\n\t\tupdateArcLengths: function updateArcLengths() {\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.getLengths();\n\t\t},\n\t\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\t\tgetUtoTmapping: function getUtoTmapping(u, distance) {\n\t\t\tvar arcLengths = this.getLengths();\n\t\t\tvar i = 0;\n\t\t\tvar il = arcLengths.length;\n\t\t\tvar targetArcLength; // The targeted u distance value to get\n\n\t\t\tif (distance) {\n\t\t\t\ttargetArcLength = distance;\n\t\t\t} else {\n\t\t\t\ttargetArcLength = u * arcLengths[il - 1];\n\t\t\t} // binary search for the index with largest value smaller than target u distance\n\n\n\t\t\tvar low = 0,\n\t\t\t\t\thigh = il - 1,\n\t\t\t\t\tcomparison;\n\n\t\t\twhile (low <= high) {\n\t\t\t\ti = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\t\tcomparison = arcLengths[i] - targetArcLength;\n\n\t\t\t\tif (comparison < 0) {\n\t\t\t\t\tlow = i + 1;\n\t\t\t\t} else if (comparison > 0) {\n\t\t\t\t\thigh = i - 1;\n\t\t\t\t} else {\n\t\t\t\t\thigh = i;\n\t\t\t\t\tbreak; // DONE\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ti = high;\n\n\t\t\tif (arcLengths[i] === targetArcLength) {\n\t\t\t\treturn i / (il - 1);\n\t\t\t} // we could get finer grain at lengths, or use simple interpolation between two points\n\n\n\t\t\tvar lengthBefore = arcLengths[i];\n\t\t\tvar lengthAfter = arcLengths[i + 1];\n\t\t\tvar segmentLength = lengthAfter - lengthBefore; // determine where we are between the 'before' and 'after' points\n\n\t\t\tvar segmentFraction = (targetArcLength - lengthBefore) / segmentLength; // add that fractional amount to t\n\n\t\t\tvar t = (i + segmentFraction) / (il - 1);\n\t\t\treturn t;\n\t\t},\n\t\t// Returns a unit vector tangent at t\n\t\t// In case any sub curve does not implement its tangent derivation,\n\t\t// 2 points a small delta apart will be used to find its gradient\n\t\t// which seems to give a reasonable approximation\n\t\tgetTangent: function getTangent(t, optionalTarget) {\n\t\t\tvar delta = 0.0001;\n\t\t\tvar t1 = t - delta;\n\t\t\tvar t2 = t + delta; // Capping in case of danger\n\n\t\t\tif (t1 < 0) t1 = 0;\n\t\t\tif (t2 > 1) t2 = 1;\n\t\t\tvar pt1 = this.getPoint(t1);\n\t\t\tvar pt2 = this.getPoint(t2);\n\t\t\tvar tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());\n\t\t\ttangent.copy(pt2).sub(pt1).normalize();\n\t\t\treturn tangent;\n\t\t},\n\t\tgetTangentAt: function getTangentAt(u, optionalTarget) {\n\t\t\tvar t = this.getUtoTmapping(u);\n\t\t\treturn this.getTangent(t, optionalTarget);\n\t\t},\n\t\tcomputeFrenetFrames: function computeFrenetFrames(segments, closed) {\n\t\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\t\t\tvar normal = new Vector3();\n\t\t\tvar tangents = [];\n\t\t\tvar normals = [];\n\t\t\tvar binormals = [];\n\t\t\tvar vec = new Vector3();\n\t\t\tvar mat = new Matrix4(); // compute the tangent vectors for each segment on the curve\n\n\t\t\tfor (var i = 0; i <= segments; i++) {\n\t\t\t\tvar u = i / segments;\n\t\t\t\ttangents[i] = this.getTangentAt(u, new Vector3());\n\t\t\t\ttangents[i].normalize();\n\t\t\t} // select an initial normal vector perpendicular to the first tangent vector,\n\t\t\t// and in the direction of the minimum tangent xyz component\n\n\n\t\t\tnormals[0] = new Vector3();\n\t\t\tbinormals[0] = new Vector3();\n\t\t\tvar min = Number.MAX_VALUE;\n\t\t\tvar tx = Math.abs(tangents[0].x);\n\t\t\tvar ty = Math.abs(tangents[0].y);\n\t\t\tvar tz = Math.abs(tangents[0].z);\n\n\t\t\tif (tx <= min) {\n\t\t\t\tmin = tx;\n\t\t\t\tnormal.set(1, 0, 0);\n\t\t\t}\n\n\t\t\tif (ty <= min) {\n\t\t\t\tmin = ty;\n\t\t\t\tnormal.set(0, 1, 0);\n\t\t\t}\n\n\t\t\tif (tz <= min) {\n\t\t\t\tnormal.set(0, 0, 1);\n\t\t\t}\n\n\t\t\tvec.crossVectors(tangents[0], normal).normalize();\n\t\t\tnormals[0].crossVectors(tangents[0], vec);\n\t\t\tbinormals[0].crossVectors(tangents[0], normals[0]); // compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\t\tfor (var _i = 1; _i <= segments; _i++) {\n\t\t\t\tnormals[_i] = normals[_i - 1].clone();\n\t\t\t\tbinormals[_i] = binormals[_i - 1].clone();\n\t\t\t\tvec.crossVectors(tangents[_i - 1], tangents[_i]);\n\n\t\t\t\tif (vec.length() > Number.EPSILON) {\n\t\t\t\t\tvec.normalize();\n\t\t\t\t\tvar theta = Math.acos(MathUtils.clamp(tangents[_i - 1].dot(tangents[_i]), -1, 1)); // clamp for floating pt errors\n\n\t\t\t\t\tnormals[_i].applyMatrix4(mat.makeRotationAxis(vec, theta));\n\t\t\t\t}\n\n\t\t\t\tbinormals[_i].crossVectors(tangents[_i], normals[_i]);\n\t\t\t} // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\n\t\t\tif (closed === true) {\n\t\t\t\tvar _theta = Math.acos(MathUtils.clamp(normals[0].dot(normals[segments]), -1, 1));\n\n\t\t\t\t_theta /= segments;\n\n\t\t\t\tif (tangents[0].dot(vec.crossVectors(normals[0], normals[segments])) > 0) {\n\t\t\t\t\t_theta = -_theta;\n\t\t\t\t}\n\n\t\t\t\tfor (var _i2 = 1; _i2 <= segments; _i2++) {\n\t\t\t\t\t// twist a little...\n\t\t\t\t\tnormals[_i2].applyMatrix4(mat.makeRotationAxis(tangents[_i2], _theta * _i2));\n\n\t\t\t\t\tbinormals[_i2].crossVectors(tangents[_i2], normals[_i2]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttangents: tangents,\n\t\t\t\tnormals: normals,\n\t\t\t\tbinormals: binormals\n\t\t\t};\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t},\n\t\tcopy: function copy(source) {\n\t\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = {\n\t\t\t\tmetadata: {\n\t\t\t\t\tversion: 4.5,\n\t\t\t\t\ttype: 'Curve',\n\t\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t\t}\n\t\t\t};\n\t\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\t\tdata.type = this.type;\n\t\t\treturn data;\n\t\t},\n\t\tfromJSON: function fromJSON(json) {\n\t\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tvar EllipseCurve = /*#__PURE__*/function (_Curve) {\n\t\t_inheritsLoose(EllipseCurve, _Curve);\n\n\t\tfunction EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\t\tvar _this;\n\n\t\t\tif (aX === void 0) {\n\t\t\t\taX = 0;\n\t\t\t}\n\n\t\t\tif (aY === void 0) {\n\t\t\t\taY = 0;\n\t\t\t}\n\n\t\t\tif (xRadius === void 0) {\n\t\t\t\txRadius = 1;\n\t\t\t}\n\n\t\t\tif (yRadius === void 0) {\n\t\t\t\tyRadius = 1;\n\t\t\t}\n\n\t\t\tif (aStartAngle === void 0) {\n\t\t\t\taStartAngle = 0;\n\t\t\t}\n\n\t\t\tif (aEndAngle === void 0) {\n\t\t\t\taEndAngle = Math.PI * 2;\n\t\t\t}\n\n\t\t\tif (aClockwise === void 0) {\n\t\t\t\taClockwise = false;\n\t\t\t}\n\n\t\t\tif (aRotation === void 0) {\n\t\t\t\taRotation = 0;\n\t\t\t}\n\n\t\t\t_this = _Curve.call(this) || this;\n\t\t\t_this.type = 'EllipseCurve';\n\t\t\t_this.aX = aX;\n\t\t\t_this.aY = aY;\n\t\t\t_this.xRadius = xRadius;\n\t\t\t_this.yRadius = yRadius;\n\t\t\t_this.aStartAngle = aStartAngle;\n\t\t\t_this.aEndAngle = aEndAngle;\n\t\t\t_this.aClockwise = aClockwise;\n\t\t\t_this.aRotation = aRotation;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = EllipseCurve.prototype;\n\n\t\t_proto.getPoint = function getPoint(t, optionalTarget) {\n\t\t\tvar point = optionalTarget || new Vector2();\n\t\t\tvar twoPi = Math.PI * 2;\n\t\t\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\t\tvar samePoints = Math.abs(deltaAngle) < Number.EPSILON; // ensures that deltaAngle is 0 .. 2 PI\n\n\t\t\twhile (deltaAngle < 0) {\n\t\t\t\tdeltaAngle += twoPi;\n\t\t\t}\n\n\t\t\twhile (deltaAngle > twoPi) {\n\t\t\t\tdeltaAngle -= twoPi;\n\t\t\t}\n\n\t\t\tif (deltaAngle < Number.EPSILON) {\n\t\t\t\tif (samePoints) {\n\t\t\t\t\tdeltaAngle = 0;\n\t\t\t\t} else {\n\t\t\t\t\tdeltaAngle = twoPi;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.aClockwise === true && !samePoints) {\n\t\t\t\tif (deltaAngle === twoPi) {\n\t\t\t\t\tdeltaAngle = -twoPi;\n\t\t\t\t} else {\n\t\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar angle = this.aStartAngle + t * deltaAngle;\n\t\t\tvar x = this.aX + this.xRadius * Math.cos(angle);\n\t\t\tvar y = this.aY + this.yRadius * Math.sin(angle);\n\n\t\t\tif (this.aRotation !== 0) {\n\t\t\t\tvar cos = Math.cos(this.aRotation);\n\t\t\t\tvar sin = Math.sin(this.aRotation);\n\t\t\t\tvar tx = x - this.aX;\n\t\t\t\tvar ty = y - this.aY; // Rotate the point about the center of the ellipse.\n\n\t\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\t\ty = tx * sin + ty * cos + this.aY;\n\t\t\t}\n\n\t\t\treturn point.set(x, y);\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Curve.prototype.copy.call(this, source);\n\n\t\t\tthis.aX = source.aX;\n\t\t\tthis.aY = source.aY;\n\t\t\tthis.xRadius = source.xRadius;\n\t\t\tthis.yRadius = source.yRadius;\n\t\t\tthis.aStartAngle = source.aStartAngle;\n\t\t\tthis.aEndAngle = source.aEndAngle;\n\t\t\tthis.aClockwise = source.aClockwise;\n\t\t\tthis.aRotation = source.aRotation;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = _Curve.prototype.toJSON.call(this);\n\n\t\t\tdata.aX = this.aX;\n\t\t\tdata.aY = this.aY;\n\t\t\tdata.xRadius = this.xRadius;\n\t\t\tdata.yRadius = this.yRadius;\n\t\t\tdata.aStartAngle = this.aStartAngle;\n\t\t\tdata.aEndAngle = this.aEndAngle;\n\t\t\tdata.aClockwise = this.aClockwise;\n\t\t\tdata.aRotation = this.aRotation;\n\t\t\treturn data;\n\t\t};\n\n\t\t_proto.fromJSON = function fromJSON(json) {\n\t\t\t_Curve.prototype.fromJSON.call(this, json);\n\n\t\t\tthis.aX = json.aX;\n\t\t\tthis.aY = json.aY;\n\t\t\tthis.xRadius = json.xRadius;\n\t\t\tthis.yRadius = json.yRadius;\n\t\t\tthis.aStartAngle = json.aStartAngle;\n\t\t\tthis.aEndAngle = json.aEndAngle;\n\t\t\tthis.aClockwise = json.aClockwise;\n\t\t\tthis.aRotation = json.aRotation;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn EllipseCurve;\n\t}(Curve);\n\n\tEllipseCurve.prototype.isEllipseCurve = true;\n\n\tvar ArcCurve = /*#__PURE__*/function (_EllipseCurve) {\n\t\t_inheritsLoose(ArcCurve, _EllipseCurve);\n\n\t\tfunction ArcCurve(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tvar _this;\n\n\t\t\t_this = _EllipseCurve.call(this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise) || this;\n\t\t\t_this.type = 'ArcCurve';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn ArcCurve;\n\t}(EllipseCurve);\n\n\tArcCurve.prototype.isArcCurve = true;\n\n\t/**\n\t * Centripetal CatmullRom Curve - which is useful for avoiding\n\t * cusps and self-intersections in non-uniform catmull rom curves.\n\t * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n\t *\n\t * curve.type accepts centripetal(default), chordal and catmullrom\n\t * curve.tension is used for catmullrom which defaults to 0.5\n\t */\n\n\t/*\n\tBased on an optimized c++ solution in\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n\t - http://ideone.com/NoEbVM\n\n\tThis CubicPoly class could be used for reusing some variables and calculations,\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\n\twhich can be placed in CurveUtils.\n\t*/\n\n\tfunction CubicPoly() {\n\t\tvar c0 = 0,\n\t\t\t\tc1 = 0,\n\t\t\t\tc2 = 0,\n\t\t\t\tc3 = 0;\n\t\t/*\n\t\t * Compute coefficients for a cubic polynomial\n\t\t *\t p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t\t * such that\n\t\t *\t p(0) = x0, p(1) = x1\n\t\t *\tand\n\t\t *\t p'(0) = t0, p'(1) = t1.\n\t\t */\n\n\t\tfunction init(x0, x1, t0, t1) {\n\t\t\tc0 = x0;\n\t\t\tc1 = t0;\n\t\t\tc2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\t\t}\n\n\t\treturn {\n\t\t\tinitCatmullRom: function initCatmullRom(x0, x1, x2, x3, tension) {\n\t\t\t\tinit(x1, x2, tension * (x2 - x0), tension * (x3 - x1));\n\t\t\t},\n\t\t\tinitNonuniformCatmullRom: function initNonuniformCatmullRom(x0, x1, x2, x3, dt0, dt1, dt2) {\n\t\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\t\tvar t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;\n\t\t\t\tvar t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2; // rescale tangents for parametrization in [0,1]\n\n\t\t\t\tt1 *= dt1;\n\t\t\t\tt2 *= dt1;\n\t\t\t\tinit(x1, x2, t1, t2);\n\t\t\t},\n\t\t\tcalc: function calc(t) {\n\t\t\t\tvar t2 = t * t;\n\t\t\t\tvar t3 = t2 * t;\n\t\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\t\t\t}\n\t\t};\n\t} //\n\n\n\tvar tmp = new Vector3();\n\tvar px = new CubicPoly(),\n\t\t\tpy = new CubicPoly(),\n\t\t\tpz = new CubicPoly();\n\n\tvar CatmullRomCurve3 = /*#__PURE__*/function (_Curve) {\n\t\t_inheritsLoose(CatmullRomCurve3, _Curve);\n\n\t\tfunction CatmullRomCurve3(points, closed, curveType, tension) {\n\t\t\tvar _this;\n\n\t\t\tif (points === void 0) {\n\t\t\t\tpoints = [];\n\t\t\t}\n\n\t\t\tif (closed === void 0) {\n\t\t\t\tclosed = false;\n\t\t\t}\n\n\t\t\tif (curveType === void 0) {\n\t\t\t\tcurveType = 'centripetal';\n\t\t\t}\n\n\t\t\tif (tension === void 0) {\n\t\t\t\ttension = 0.5;\n\t\t\t}\n\n\t\t\t_this = _Curve.call(this) || this;\n\t\t\t_this.type = 'CatmullRomCurve3';\n\t\t\t_this.points = points;\n\t\t\t_this.closed = closed;\n\t\t\t_this.curveType = curveType;\n\t\t\t_this.tension = tension;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = CatmullRomCurve3.prototype;\n\n\t\t_proto.getPoint = function getPoint(t, optionalTarget) {\n\t\t\tif (optionalTarget === void 0) {\n\t\t\t\toptionalTarget = new Vector3();\n\t\t\t}\n\n\t\t\tvar point = optionalTarget;\n\t\t\tvar points = this.points;\n\t\t\tvar l = points.length;\n\t\t\tvar p = (l - (this.closed ? 0 : 1)) * t;\n\t\t\tvar intPoint = Math.floor(p);\n\t\t\tvar weight = p - intPoint;\n\n\t\t\tif (this.closed) {\n\t\t\t\tintPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l) + 1) * l;\n\t\t\t} else if (weight === 0 && intPoint === l - 1) {\n\t\t\t\tintPoint = l - 2;\n\t\t\t\tweight = 1;\n\t\t\t}\n\n\t\t\tvar p0, p3; // 4 points (p1 & p2 defined below)\n\n\t\t\tif (this.closed || intPoint > 0) {\n\t\t\t\tp0 = points[(intPoint - 1) % l];\n\t\t\t} else {\n\t\t\t\t// extrapolate first point\n\t\t\t\ttmp.subVectors(points[0], points[1]).add(points[0]);\n\t\t\t\tp0 = tmp;\n\t\t\t}\n\n\t\t\tvar p1 = points[intPoint % l];\n\t\t\tvar p2 = points[(intPoint + 1) % l];\n\n\t\t\tif (this.closed || intPoint + 2 < l) {\n\t\t\t\tp3 = points[(intPoint + 2) % l];\n\t\t\t} else {\n\t\t\t\t// extrapolate last point\n\t\t\t\ttmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);\n\t\t\t\tp3 = tmp;\n\t\t\t}\n\n\t\t\tif (this.curveType === 'centripetal' || this.curveType === 'chordal') {\n\t\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\t\tvar pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\t\tvar dt0 = Math.pow(p0.distanceToSquared(p1), pow);\n\t\t\t\tvar dt1 = Math.pow(p1.distanceToSquared(p2), pow);\n\t\t\t\tvar dt2 = Math.pow(p2.distanceToSquared(p3), pow); // safety check for repeated points\n\n\t\t\t\tif (dt1 < 1e-4) dt1 = 1.0;\n\t\t\t\tif (dt0 < 1e-4) dt0 = dt1;\n\t\t\t\tif (dt2 < 1e-4) dt2 = dt1;\n\t\t\t\tpx.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);\n\t\t\t\tpy.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);\n\t\t\t\tpz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);\n\t\t\t} else if (this.curveType === 'catmullrom') {\n\t\t\t\tpx.initCatmullRom(p0.x, p1.x, p2.x, p3.x, this.tension);\n\t\t\t\tpy.initCatmullRom(p0.y, p1.y, p2.y, p3.y, this.tension);\n\t\t\t\tpz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, this.tension);\n\t\t\t}\n\n\t\t\tpoint.set(px.calc(weight), py.calc(weight), pz.calc(weight));\n\t\t\treturn point;\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Curve.prototype.copy.call(this, source);\n\n\t\t\tthis.points = [];\n\n\t\t\tfor (var i = 0, l = source.points.length; i < l; i++) {\n\t\t\t\tvar point = source.points[i];\n\t\t\t\tthis.points.push(point.clone());\n\t\t\t}\n\n\t\t\tthis.closed = source.closed;\n\t\t\tthis.curveType = source.curveType;\n\t\t\tthis.tension = source.tension;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = _Curve.prototype.toJSON.call(this);\n\n\t\t\tdata.points = [];\n\n\t\t\tfor (var i = 0, l = this.points.length; i < l; i++) {\n\t\t\t\tvar point = this.points[i];\n\t\t\t\tdata.points.push(point.toArray());\n\t\t\t}\n\n\t\t\tdata.closed = this.closed;\n\t\t\tdata.curveType = this.curveType;\n\t\t\tdata.tension = this.tension;\n\t\t\treturn data;\n\t\t};\n\n\t\t_proto.fromJSON = function fromJSON(json) {\n\t\t\t_Curve.prototype.fromJSON.call(this, json);\n\n\t\t\tthis.points = [];\n\n\t\t\tfor (var i = 0, l = json.points.length; i < l; i++) {\n\t\t\t\tvar point = json.points[i];\n\t\t\t\tthis.points.push(new Vector3().fromArray(point));\n\t\t\t}\n\n\t\t\tthis.closed = json.closed;\n\t\t\tthis.curveType = json.curveType;\n\t\t\tthis.tension = json.tension;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn CatmullRomCurve3;\n\t}(Curve);\n\n\tCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\n\t/**\n\t * Bezier Curves formulas obtained from\n\t * http://en.wikipedia.org/wiki/Bézier_curve\n\t */\n\tfunction CatmullRom(t, p0, p1, p2, p3) {\n\t\tvar v0 = (p2 - p0) * 0.5;\n\t\tvar v1 = (p3 - p1) * 0.5;\n\t\tvar t2 = t * t;\n\t\tvar t3 = t * t2;\n\t\treturn (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n\t} //\n\n\n\tfunction QuadraticBezierP0(t, p) {\n\t\tvar k = 1 - t;\n\t\treturn k * k * p;\n\t}\n\n\tfunction QuadraticBezierP1(t, p) {\n\t\treturn 2 * (1 - t) * t * p;\n\t}\n\n\tfunction QuadraticBezierP2(t, p) {\n\t\treturn t * t * p;\n\t}\n\n\tfunction QuadraticBezier(t, p0, p1, p2) {\n\t\treturn QuadraticBezierP0(t, p0) + QuadraticBezierP1(t, p1) + QuadraticBezierP2(t, p2);\n\t} //\n\n\n\tfunction CubicBezierP0(t, p) {\n\t\tvar k = 1 - t;\n\t\treturn k * k * k * p;\n\t}\n\n\tfunction CubicBezierP1(t, p) {\n\t\tvar k = 1 - t;\n\t\treturn 3 * k * k * t * p;\n\t}\n\n\tfunction CubicBezierP2(t, p) {\n\t\treturn 3 * (1 - t) * t * t * p;\n\t}\n\n\tfunction CubicBezierP3(t, p) {\n\t\treturn t * t * t * p;\n\t}\n\n\tfunction CubicBezier(t, p0, p1, p2, p3) {\n\t\treturn CubicBezierP0(t, p0) + CubicBezierP1(t, p1) + CubicBezierP2(t, p2) + CubicBezierP3(t, p3);\n\t}\n\n\tvar CubicBezierCurve = /*#__PURE__*/function (_Curve) {\n\t\t_inheritsLoose(CubicBezierCurve, _Curve);\n\n\t\tfunction CubicBezierCurve(v0, v1, v2, v3) {\n\t\t\tvar _this;\n\n\t\t\tif (v0 === void 0) {\n\t\t\t\tv0 = new Vector2();\n\t\t\t}\n\n\t\t\tif (v1 === void 0) {\n\t\t\t\tv1 = new Vector2();\n\t\t\t}\n\n\t\t\tif (v2 === void 0) {\n\t\t\t\tv2 = new Vector2();\n\t\t\t}\n\n\t\t\tif (v3 === void 0) {\n\t\t\t\tv3 = new Vector2();\n\t\t\t}\n\n\t\t\t_this = _Curve.call(this) || this;\n\t\t\t_this.type = 'CubicBezierCurve';\n\t\t\t_this.v0 = v0;\n\t\t\t_this.v1 = v1;\n\t\t\t_this.v2 = v2;\n\t\t\t_this.v3 = v3;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = CubicBezierCurve.prototype;\n\n\t\t_proto.getPoint = function getPoint(t, optionalTarget) {\n\t\t\tif (optionalTarget === void 0) {\n\t\t\t\toptionalTarget = new Vector2();\n\t\t\t}\n\n\t\t\tvar point = optionalTarget;\n\t\t\tvar v0 = this.v0,\n\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\tv2 = this.v2,\n\t\t\t\t\tv3 = this.v3;\n\t\t\tpoint.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y));\n\t\t\treturn point;\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Curve.prototype.copy.call(this, source);\n\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\tthis.v3.copy(source.v3);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = _Curve.prototype.toJSON.call(this);\n\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\tdata.v3 = this.v3.toArray();\n\t\t\treturn data;\n\t\t};\n\n\t\t_proto.fromJSON = function fromJSON(json) {\n\t\t\t_Curve.prototype.fromJSON.call(this, json);\n\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\tthis.v3.fromArray(json.v3);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn CubicBezierCurve;\n\t}(Curve);\n\n\tCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\n\tvar CubicBezierCurve3 = /*#__PURE__*/function (_Curve) {\n\t\t_inheritsLoose(CubicBezierCurve3, _Curve);\n\n\t\tfunction CubicBezierCurve3(v0, v1, v2, v3) {\n\t\t\tvar _this;\n\n\t\t\tif (v0 === void 0) {\n\t\t\t\tv0 = new Vector3();\n\t\t\t}\n\n\t\t\tif (v1 === void 0) {\n\t\t\t\tv1 = new Vector3();\n\t\t\t}\n\n\t\t\tif (v2 === void 0) {\n\t\t\t\tv2 = new Vector3();\n\t\t\t}\n\n\t\t\tif (v3 === void 0) {\n\t\t\t\tv3 = new Vector3();\n\t\t\t}\n\n\t\t\t_this = _Curve.call(this) || this;\n\t\t\t_this.type = 'CubicBezierCurve3';\n\t\t\t_this.v0 = v0;\n\t\t\t_this.v1 = v1;\n\t\t\t_this.v2 = v2;\n\t\t\t_this.v3 = v3;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = CubicBezierCurve3.prototype;\n\n\t\t_proto.getPoint = function getPoint(t, optionalTarget) {\n\t\t\tif (optionalTarget === void 0) {\n\t\t\t\toptionalTarget = new Vector3();\n\t\t\t}\n\n\t\t\tvar point = optionalTarget;\n\t\t\tvar v0 = this.v0,\n\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\tv2 = this.v2,\n\t\t\t\t\tv3 = this.v3;\n\t\t\tpoint.set(CubicBezier(t, v0.x, v1.x, v2.x, v3.x), CubicBezier(t, v0.y, v1.y, v2.y, v3.y), CubicBezier(t, v0.z, v1.z, v2.z, v3.z));\n\t\t\treturn point;\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Curve.prototype.copy.call(this, source);\n\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\tthis.v3.copy(source.v3);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = _Curve.prototype.toJSON.call(this);\n\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\tdata.v3 = this.v3.toArray();\n\t\t\treturn data;\n\t\t};\n\n\t\t_proto.fromJSON = function fromJSON(json) {\n\t\t\t_Curve.prototype.fromJSON.call(this, json);\n\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\tthis.v3.fromArray(json.v3);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn CubicBezierCurve3;\n\t}(Curve);\n\n\tCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\n\tvar LineCurve = /*#__PURE__*/function (_Curve) {\n\t\t_inheritsLoose(LineCurve, _Curve);\n\n\t\tfunction LineCurve(v1, v2) {\n\t\t\tvar _this;\n\n\t\t\tif (v1 === void 0) {\n\t\t\t\tv1 = new Vector2();\n\t\t\t}\n\n\t\t\tif (v2 === void 0) {\n\t\t\t\tv2 = new Vector2();\n\t\t\t}\n\n\t\t\t_this = _Curve.call(this) || this;\n\t\t\t_this.type = 'LineCurve';\n\t\t\t_this.v1 = v1;\n\t\t\t_this.v2 = v2;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = LineCurve.prototype;\n\n\t\t_proto.getPoint = function getPoint(t, optionalTarget) {\n\t\t\tif (optionalTarget === void 0) {\n\t\t\t\toptionalTarget = new Vector2();\n\t\t\t}\n\n\t\t\tvar point = optionalTarget;\n\n\t\t\tif (t === 1) {\n\t\t\t\tpoint.copy(this.v2);\n\t\t\t} else {\n\t\t\t\tpoint.copy(this.v2).sub(this.v1);\n\t\t\t\tpoint.multiplyScalar(t).add(this.v1);\n\t\t\t}\n\n\t\t\treturn point;\n\t\t} // Line curve is linear, so we can overwrite default getPointAt\n\t\t;\n\n\t\t_proto.getPointAt = function getPointAt(u, optionalTarget) {\n\t\t\treturn this.getPoint(u, optionalTarget);\n\t\t};\n\n\t\t_proto.getTangent = function getTangent(t, optionalTarget) {\n\t\t\tvar tangent = optionalTarget || new Vector2();\n\t\t\ttangent.copy(this.v2).sub(this.v1).normalize();\n\t\t\treturn tangent;\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Curve.prototype.copy.call(this, source);\n\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = _Curve.prototype.toJSON.call(this);\n\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t};\n\n\t\t_proto.fromJSON = function fromJSON(json) {\n\t\t\t_Curve.prototype.fromJSON.call(this, json);\n\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn LineCurve;\n\t}(Curve);\n\n\tLineCurve.prototype.isLineCurve = true;\n\n\tvar LineCurve3 = /*#__PURE__*/function (_Curve) {\n\t\t_inheritsLoose(LineCurve3, _Curve);\n\n\t\tfunction LineCurve3(v1, v2) {\n\t\t\tvar _this;\n\n\t\t\tif (v1 === void 0) {\n\t\t\t\tv1 = new Vector3();\n\t\t\t}\n\n\t\t\tif (v2 === void 0) {\n\t\t\t\tv2 = new Vector3();\n\t\t\t}\n\n\t\t\t_this = _Curve.call(this) || this;\n\t\t\t_this.type = 'LineCurve3';\n\t\t\t_this.isLineCurve3 = true;\n\t\t\t_this.v1 = v1;\n\t\t\t_this.v2 = v2;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = LineCurve3.prototype;\n\n\t\t_proto.getPoint = function getPoint(t, optionalTarget) {\n\t\t\tif (optionalTarget === void 0) {\n\t\t\t\toptionalTarget = new Vector3();\n\t\t\t}\n\n\t\t\tvar point = optionalTarget;\n\n\t\t\tif (t === 1) {\n\t\t\t\tpoint.copy(this.v2);\n\t\t\t} else {\n\t\t\t\tpoint.copy(this.v2).sub(this.v1);\n\t\t\t\tpoint.multiplyScalar(t).add(this.v1);\n\t\t\t}\n\n\t\t\treturn point;\n\t\t} // Line curve is linear, so we can overwrite default getPointAt\n\t\t;\n\n\t\t_proto.getPointAt = function getPointAt(u, optionalTarget) {\n\t\t\treturn this.getPoint(u, optionalTarget);\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Curve.prototype.copy.call(this, source);\n\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = _Curve.prototype.toJSON.call(this);\n\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t};\n\n\t\t_proto.fromJSON = function fromJSON(json) {\n\t\t\t_Curve.prototype.fromJSON.call(this, json);\n\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn LineCurve3;\n\t}(Curve);\n\n\tvar QuadraticBezierCurve = /*#__PURE__*/function (_Curve) {\n\t\t_inheritsLoose(QuadraticBezierCurve, _Curve);\n\n\t\tfunction QuadraticBezierCurve(v0, v1, v2) {\n\t\t\tvar _this;\n\n\t\t\tif (v0 === void 0) {\n\t\t\t\tv0 = new Vector2();\n\t\t\t}\n\n\t\t\tif (v1 === void 0) {\n\t\t\t\tv1 = new Vector2();\n\t\t\t}\n\n\t\t\tif (v2 === void 0) {\n\t\t\t\tv2 = new Vector2();\n\t\t\t}\n\n\t\t\t_this = _Curve.call(this) || this;\n\t\t\t_this.type = 'QuadraticBezierCurve';\n\t\t\t_this.v0 = v0;\n\t\t\t_this.v1 = v1;\n\t\t\t_this.v2 = v2;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = QuadraticBezierCurve.prototype;\n\n\t\t_proto.getPoint = function getPoint(t, optionalTarget) {\n\t\t\tif (optionalTarget === void 0) {\n\t\t\t\toptionalTarget = new Vector2();\n\t\t\t}\n\n\t\t\tvar point = optionalTarget;\n\t\t\tvar v0 = this.v0,\n\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\tv2 = this.v2;\n\t\t\tpoint.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y));\n\t\t\treturn point;\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Curve.prototype.copy.call(this, source);\n\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = _Curve.prototype.toJSON.call(this);\n\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t};\n\n\t\t_proto.fromJSON = function fromJSON(json) {\n\t\t\t_Curve.prototype.fromJSON.call(this, json);\n\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn QuadraticBezierCurve;\n\t}(Curve);\n\n\tQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\n\tvar QuadraticBezierCurve3 = /*#__PURE__*/function (_Curve) {\n\t\t_inheritsLoose(QuadraticBezierCurve3, _Curve);\n\n\t\tfunction QuadraticBezierCurve3(v0, v1, v2) {\n\t\t\tvar _this;\n\n\t\t\tif (v0 === void 0) {\n\t\t\t\tv0 = new Vector3();\n\t\t\t}\n\n\t\t\tif (v1 === void 0) {\n\t\t\t\tv1 = new Vector3();\n\t\t\t}\n\n\t\t\tif (v2 === void 0) {\n\t\t\t\tv2 = new Vector3();\n\t\t\t}\n\n\t\t\t_this = _Curve.call(this) || this;\n\t\t\t_this.type = 'QuadraticBezierCurve3';\n\t\t\t_this.v0 = v0;\n\t\t\t_this.v1 = v1;\n\t\t\t_this.v2 = v2;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = QuadraticBezierCurve3.prototype;\n\n\t\t_proto.getPoint = function getPoint(t, optionalTarget) {\n\t\t\tif (optionalTarget === void 0) {\n\t\t\t\toptionalTarget = new Vector3();\n\t\t\t}\n\n\t\t\tvar point = optionalTarget;\n\t\t\tvar v0 = this.v0,\n\t\t\t\t\tv1 = this.v1,\n\t\t\t\t\tv2 = this.v2;\n\t\t\tpoint.set(QuadraticBezier(t, v0.x, v1.x, v2.x), QuadraticBezier(t, v0.y, v1.y, v2.y), QuadraticBezier(t, v0.z, v1.z, v2.z));\n\t\t\treturn point;\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Curve.prototype.copy.call(this, source);\n\n\t\t\tthis.v0.copy(source.v0);\n\t\t\tthis.v1.copy(source.v1);\n\t\t\tthis.v2.copy(source.v2);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = _Curve.prototype.toJSON.call(this);\n\n\t\t\tdata.v0 = this.v0.toArray();\n\t\t\tdata.v1 = this.v1.toArray();\n\t\t\tdata.v2 = this.v2.toArray();\n\t\t\treturn data;\n\t\t};\n\n\t\t_proto.fromJSON = function fromJSON(json) {\n\t\t\t_Curve.prototype.fromJSON.call(this, json);\n\n\t\t\tthis.v0.fromArray(json.v0);\n\t\t\tthis.v1.fromArray(json.v1);\n\t\t\tthis.v2.fromArray(json.v2);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn QuadraticBezierCurve3;\n\t}(Curve);\n\n\tQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\n\tvar SplineCurve = /*#__PURE__*/function (_Curve) {\n\t\t_inheritsLoose(SplineCurve, _Curve);\n\n\t\tfunction SplineCurve(points) {\n\t\t\tvar _this;\n\n\t\t\tif (points === void 0) {\n\t\t\t\tpoints = [];\n\t\t\t}\n\n\t\t\t_this = _Curve.call(this) || this;\n\t\t\t_this.type = 'SplineCurve';\n\t\t\t_this.points = points;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = SplineCurve.prototype;\n\n\t\t_proto.getPoint = function getPoint(t, optionalTarget) {\n\t\t\tif (optionalTarget === void 0) {\n\t\t\t\toptionalTarget = new Vector2();\n\t\t\t}\n\n\t\t\tvar point = optionalTarget;\n\t\t\tvar points = this.points;\n\t\t\tvar p = (points.length - 1) * t;\n\t\t\tvar intPoint = Math.floor(p);\n\t\t\tvar weight = p - intPoint;\n\t\t\tvar p0 = points[intPoint === 0 ? intPoint : intPoint - 1];\n\t\t\tvar p1 = points[intPoint];\n\t\t\tvar p2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\n\t\t\tvar p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\n\t\t\tpoint.set(CatmullRom(weight, p0.x, p1.x, p2.x, p3.x), CatmullRom(weight, p0.y, p1.y, p2.y, p3.y));\n\t\t\treturn point;\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Curve.prototype.copy.call(this, source);\n\n\t\t\tthis.points = [];\n\n\t\t\tfor (var i = 0, l = source.points.length; i < l; i++) {\n\t\t\t\tvar point = source.points[i];\n\t\t\t\tthis.points.push(point.clone());\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = _Curve.prototype.toJSON.call(this);\n\n\t\t\tdata.points = [];\n\n\t\t\tfor (var i = 0, l = this.points.length; i < l; i++) {\n\t\t\t\tvar point = this.points[i];\n\t\t\t\tdata.points.push(point.toArray());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t};\n\n\t\t_proto.fromJSON = function fromJSON(json) {\n\t\t\t_Curve.prototype.fromJSON.call(this, json);\n\n\t\t\tthis.points = [];\n\n\t\t\tfor (var i = 0, l = json.points.length; i < l; i++) {\n\t\t\t\tvar point = json.points[i];\n\t\t\t\tthis.points.push(new Vector2().fromArray(point));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\treturn SplineCurve;\n\t}(Curve);\n\n\tSplineCurve.prototype.isSplineCurve = true;\n\n\tvar Curves = /*#__PURE__*/Object.freeze({\n\t\t__proto__: null,\n\t\tArcCurve: ArcCurve,\n\t\tCatmullRomCurve3: CatmullRomCurve3,\n\t\tCubicBezierCurve: CubicBezierCurve,\n\t\tCubicBezierCurve3: CubicBezierCurve3,\n\t\tEllipseCurve: EllipseCurve,\n\t\tLineCurve: LineCurve,\n\t\tLineCurve3: LineCurve3,\n\t\tQuadraticBezierCurve: QuadraticBezierCurve,\n\t\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\t\tSplineCurve: SplineCurve\n\t});\n\n\t/**************************************************************\n\t *\tCurved Path - a curve path is simply a array of connected\n\t *\tcurves, but retains the api of a curve\n\t **************************************************************/\n\n\tvar CurvePath = /*#__PURE__*/function (_Curve) {\n\t\t_inheritsLoose(CurvePath, _Curve);\n\n\t\tfunction CurvePath() {\n\t\t\tvar _this;\n\n\t\t\t_this = _Curve.call(this) || this;\n\t\t\t_this.type = 'CurvePath';\n\t\t\t_this.curves = [];\n\t\t\t_this.autoClose = false; // Automatically closes the path\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = CurvePath.prototype;\n\n\t\t_proto.add = function add(curve) {\n\t\t\tthis.curves.push(curve);\n\t\t};\n\n\t\t_proto.closePath = function closePath() {\n\t\t\t// Add a line curve if start and end of lines are not connected\n\t\t\tvar startPoint = this.curves[0].getPoint(0);\n\t\t\tvar endPoint = this.curves[this.curves.length - 1].getPoint(1);\n\n\t\t\tif (!startPoint.equals(endPoint)) {\n\t\t\t\tthis.curves.push(new LineCurve(endPoint, startPoint));\n\t\t\t}\n\t\t} // To get accurate point with reference to\n\t\t// entire path distance at time t,\n\t\t// following has to be done:\n\t\t// 1. Length of each sub path have to be known\n\t\t// 2. Locate and identify type of curve\n\t\t// 3. Get t for the curve\n\t\t// 4. Return curve.getPointAt(t')\n\t\t;\n\n\t\t_proto.getPoint = function getPoint(t) {\n\t\t\tvar d = t * this.getLength();\n\t\t\tvar curveLengths = this.getCurveLengths();\n\t\t\tvar i = 0; // To think about boundaries points.\n\n\t\t\twhile (i < curveLengths.length) {\n\t\t\t\tif (curveLengths[i] >= d) {\n\t\t\t\t\tvar diff = curveLengths[i] - d;\n\t\t\t\t\tvar curve = this.curves[i];\n\t\t\t\t\tvar segmentLength = curve.getLength();\n\t\t\t\t\tvar u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\t\t\t\t\treturn curve.getPointAt(u);\n\t\t\t\t}\n\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\treturn null; // loop where sum != 0, sum > d , sum+1 <d\n\t\t} // We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t\t// getPoint() depends on getLength\n\t\t;\n\n\t\t_proto.getLength = function getLength() {\n\t\t\tvar lens = this.getCurveLengths();\n\t\t\treturn lens[lens.length - 1];\n\t\t} // cacheLengths must be recalculated.\n\t\t;\n\n\t\t_proto.updateArcLengths = function updateArcLengths() {\n\t\t\tthis.needsUpdate = true;\n\t\t\tthis.cacheLengths = null;\n\t\t\tthis.getCurveLengths();\n\t\t} // Compute lengths and cache them\n\t\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\t\t;\n\n\t\t_proto.getCurveLengths = function getCurveLengths() {\n\t\t\t// We use cache values if curves and cache array are same length\n\t\t\tif (this.cacheLengths && this.cacheLengths.length === this.curves.length) {\n\t\t\t\treturn this.cacheLengths;\n\t\t\t} // Get length of sub-curve\n\t\t\t// Push sums into cached array\n\n\n\t\t\tvar lengths = [];\n\t\t\tvar sums = 0;\n\n\t\t\tfor (var i = 0, l = this.curves.length; i < l; i++) {\n\t\t\t\tsums += this.curves[i].getLength();\n\t\t\t\tlengths.push(sums);\n\t\t\t}\n\n\t\t\tthis.cacheLengths = lengths;\n\t\t\treturn lengths;\n\t\t};\n\n\t\t_proto.getSpacedPoints = function getSpacedPoints(divisions) {\n\t\t\tif (divisions === void 0) {\n\t\t\t\tdivisions = 40;\n\t\t\t}\n\n\t\t\tvar points = [];\n\n\t\t\tfor (var i = 0; i <= divisions; i++) {\n\t\t\t\tpoints.push(this.getPoint(i / divisions));\n\t\t\t}\n\n\t\t\tif (this.autoClose) {\n\t\t\t\tpoints.push(points[0]);\n\t\t\t}\n\n\t\t\treturn points;\n\t\t};\n\n\t\t_proto.getPoints = function getPoints(divisions) {\n\t\t\tif (divisions === void 0) {\n\t\t\t\tdivisions = 12;\n\t\t\t}\n\n\t\t\tvar points = [];\n\t\t\tvar last;\n\n\t\t\tfor (var i = 0, curves = this.curves; i < curves.length; i++) {\n\t\t\t\tvar curve = curves[i];\n\t\t\t\tvar resolution = curve && curve.isEllipseCurve ? divisions * 2 : curve && (curve.isLineCurve || curve.isLineCurve3) ? 1 : curve && curve.isSplineCurve ? divisions * curve.points.length : divisions;\n\t\t\t\tvar pts = curve.getPoints(resolution);\n\n\t\t\t\tfor (var j = 0; j < pts.length; j++) {\n\t\t\t\t\tvar point = pts[j];\n\t\t\t\t\tif (last && last.equals(point)) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\t\tpoints.push(point);\n\t\t\t\t\tlast = point;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {\n\t\t\t\tpoints.push(points[0]);\n\t\t\t}\n\n\t\t\treturn points;\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Curve.prototype.copy.call(this, source);\n\n\t\t\tthis.curves = [];\n\n\t\t\tfor (var i = 0, l = source.curves.length; i < l; i++) {\n\t\t\t\tvar curve = source.curves[i];\n\t\t\t\tthis.curves.push(curve.clone());\n\t\t\t}\n\n\t\t\tthis.autoClose = source.autoClose;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = _Curve.prototype.toJSON.call(this);\n\n\t\t\tdata.autoClose = this.autoClose;\n\t\t\tdata.curves = [];\n\n\t\t\tfor (var i = 0, l = this.curves.length; i < l; i++) {\n\t\t\t\tvar curve = this.curves[i];\n\t\t\t\tdata.curves.push(curve.toJSON());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t};\n\n\t\t_proto.fromJSON = function fromJSON(json) {\n\t\t\t_Curve.prototype.fromJSON.call(this, json);\n\n\t\t\tthis.autoClose = json.autoClose;\n\t\t\tthis.curves = [];\n\n\t\t\tfor (var i = 0, l = json.curves.length; i < l; i++) {\n\t\t\t\tvar curve = json.curves[i];\n\t\t\t\tthis.curves.push(new Curves[curve.type]().fromJSON(curve));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\treturn CurvePath;\n\t}(Curve);\n\n\tvar Path = /*#__PURE__*/function (_CurvePath) {\n\t\t_inheritsLoose(Path, _CurvePath);\n\n\t\tfunction Path(points) {\n\t\t\tvar _this;\n\n\t\t\t_this = _CurvePath.call(this) || this;\n\t\t\t_this.type = 'Path';\n\t\t\t_this.currentPoint = new Vector2();\n\n\t\t\tif (points) {\n\t\t\t\t_this.setFromPoints(points);\n\t\t\t}\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = Path.prototype;\n\n\t\t_proto.setFromPoints = function setFromPoints(points) {\n\t\t\tthis.moveTo(points[0].x, points[0].y);\n\n\t\t\tfor (var i = 1, l = points.length; i < l; i++) {\n\t\t\t\tthis.lineTo(points[i].x, points[i].y);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.moveTo = function moveTo(x, y) {\n\t\t\tthis.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lineTo = function lineTo(x, y) {\n\t\t\tvar curve = new LineCurve(this.currentPoint.clone(), new Vector2(x, y));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(x, y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.quadraticCurveTo = function quadraticCurveTo(aCPx, aCPy, aX, aY) {\n\t\t\tvar curve = new QuadraticBezierCurve(this.currentPoint.clone(), new Vector2(aCPx, aCPy), new Vector2(aX, aY));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(aX, aY);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.bezierCurveTo = function bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n\t\t\tvar curve = new CubicBezierCurve(this.currentPoint.clone(), new Vector2(aCP1x, aCP1y), new Vector2(aCP2x, aCP2y), new Vector2(aX, aY));\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.set(aX, aY);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.splineThru = function splineThru(pts\n\t\t/*Array of Vector*/\n\t\t) {\n\t\t\tvar npts = [this.currentPoint.clone()].concat(pts);\n\t\t\tvar curve = new SplineCurve(npts);\n\t\t\tthis.curves.push(curve);\n\t\t\tthis.currentPoint.copy(pts[pts.length - 1]);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.arc = function arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\t\t\tthis.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.absarc = function absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n\t\t\tthis.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.ellipse = function ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\t\tvar x0 = this.currentPoint.x;\n\t\t\tvar y0 = this.currentPoint.y;\n\t\t\tthis.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.absellipse = function absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n\t\t\tvar curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n\n\t\t\tif (this.curves.length > 0) {\n\t\t\t\t// if a previous curve is present, attempt to join\n\t\t\t\tvar firstPoint = curve.getPoint(0);\n\n\t\t\t\tif (!firstPoint.equals(this.currentPoint)) {\n\t\t\t\t\tthis.lineTo(firstPoint.x, firstPoint.y);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.curves.push(curve);\n\t\t\tvar lastPoint = curve.getPoint(1);\n\t\t\tthis.currentPoint.copy(lastPoint);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_CurvePath.prototype.copy.call(this, source);\n\n\t\t\tthis.currentPoint.copy(source.currentPoint);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = _CurvePath.prototype.toJSON.call(this);\n\n\t\t\tdata.currentPoint = this.currentPoint.toArray();\n\t\t\treturn data;\n\t\t};\n\n\t\t_proto.fromJSON = function fromJSON(json) {\n\t\t\t_CurvePath.prototype.fromJSON.call(this, json);\n\n\t\t\tthis.currentPoint.fromArray(json.currentPoint);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Path;\n\t}(CurvePath);\n\n\tvar Shape = /*#__PURE__*/function (_Path) {\n\t\t_inheritsLoose(Shape, _Path);\n\n\t\tfunction Shape(points) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Path.call(this, points) || this;\n\t\t\t_this.uuid = MathUtils.generateUUID();\n\t\t\t_this.type = 'Shape';\n\t\t\t_this.holes = [];\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = Shape.prototype;\n\n\t\t_proto.getPointsHoles = function getPointsHoles(divisions) {\n\t\t\tvar holesPts = [];\n\n\t\t\tfor (var i = 0, l = this.holes.length; i < l; i++) {\n\t\t\t\tholesPts[i] = this.holes[i].getPoints(divisions);\n\t\t\t}\n\n\t\t\treturn holesPts;\n\t\t} // get points of shape and holes (keypoints based on segments parameter)\n\t\t;\n\n\t\t_proto.extractPoints = function extractPoints(divisions) {\n\t\t\treturn {\n\t\t\t\tshape: this.getPoints(divisions),\n\t\t\t\tholes: this.getPointsHoles(divisions)\n\t\t\t};\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Path.prototype.copy.call(this, source);\n\n\t\t\tthis.holes = [];\n\n\t\t\tfor (var i = 0, l = source.holes.length; i < l; i++) {\n\t\t\t\tvar hole = source.holes[i];\n\t\t\t\tthis.holes.push(hole.clone());\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar data = _Path.prototype.toJSON.call(this);\n\n\t\t\tdata.uuid = this.uuid;\n\t\t\tdata.holes = [];\n\n\t\t\tfor (var i = 0, l = this.holes.length; i < l; i++) {\n\t\t\t\tvar hole = this.holes[i];\n\t\t\t\tdata.holes.push(hole.toJSON());\n\t\t\t}\n\n\t\t\treturn data;\n\t\t};\n\n\t\t_proto.fromJSON = function fromJSON(json) {\n\t\t\t_Path.prototype.fromJSON.call(this, json);\n\n\t\t\tthis.uuid = json.uuid;\n\t\t\tthis.holes = [];\n\n\t\t\tfor (var i = 0, l = json.holes.length; i < l; i++) {\n\t\t\t\tvar hole = json.holes[i];\n\t\t\t\tthis.holes.push(new Path().fromJSON(hole));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Shape;\n\t}(Path);\n\n\tvar Light = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(Light, _Object3D);\n\n\t\tfunction Light(color, intensity) {\n\t\t\tvar _this;\n\n\t\t\tif (intensity === void 0) {\n\t\t\t\tintensity = 1;\n\t\t\t}\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.type = 'Light';\n\t\t\t_this.color = new Color(color);\n\t\t\t_this.intensity = intensity;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = Light.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Object3D.prototype.copy.call(this, source);\n\n\t\t\tthis.color.copy(source.color);\n\t\t\tthis.intensity = source.intensity;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON(meta) {\n\t\t\tvar data = _Object3D.prototype.toJSON.call(this, meta);\n\n\t\t\tdata.object.color = this.color.getHex();\n\t\t\tdata.object.intensity = this.intensity;\n\t\t\tif (this.groundColor !== undefined) data.object.groundColor = this.groundColor.getHex();\n\t\t\tif (this.distance !== undefined) data.object.distance = this.distance;\n\t\t\tif (this.angle !== undefined) data.object.angle = this.angle;\n\t\t\tif (this.decay !== undefined) data.object.decay = this.decay;\n\t\t\tif (this.penumbra !== undefined) data.object.penumbra = this.penumbra;\n\t\t\tif (this.shadow !== undefined) data.object.shadow = this.shadow.toJSON();\n\t\t\treturn data;\n\t\t};\n\n\t\treturn Light;\n\t}(Object3D);\n\n\tLight.prototype.isLight = true;\n\n\tvar HemisphereLight = /*#__PURE__*/function (_Light) {\n\t\t_inheritsLoose(HemisphereLight, _Light);\n\n\t\tfunction HemisphereLight(skyColor, groundColor, intensity) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Light.call(this, skyColor, intensity) || this;\n\t\t\t_this.type = 'HemisphereLight';\n\n\t\t\t_this.position.copy(Object3D.DefaultUp);\n\n\t\t\t_this.updateMatrix();\n\n\t\t\t_this.groundColor = new Color(groundColor);\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = HemisphereLight.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\tLight.prototype.copy.call(this, source);\n\t\t\tthis.groundColor.copy(source.groundColor);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn HemisphereLight;\n\t}(Light);\n\n\tHemisphereLight.prototype.isHemisphereLight = true;\n\n\tvar _projScreenMatrix = /*@__PURE__*/new Matrix4();\n\n\tvar _lightPositionWorld = /*@__PURE__*/new Vector3();\n\n\tvar _lookTarget = /*@__PURE__*/new Vector3();\n\n\tvar LightShadow = /*#__PURE__*/function () {\n\t\tfunction LightShadow(camera) {\n\t\t\tthis.camera = camera;\n\t\t\tthis.bias = 0;\n\t\t\tthis.normalBias = 0;\n\t\t\tthis.radius = 1;\n\t\t\tthis.mapSize = new Vector2(512, 512);\n\t\t\tthis.map = null;\n\t\t\tthis.mapPass = null;\n\t\t\tthis.matrix = new Matrix4();\n\t\t\tthis.autoUpdate = true;\n\t\t\tthis.needsUpdate = false;\n\t\t\tthis._frustum = new Frustum();\n\t\t\tthis._frameExtents = new Vector2(1, 1);\n\t\t\tthis._viewportCount = 1;\n\t\t\tthis._viewports = [new Vector4(0, 0, 1, 1)];\n\t\t}\n\n\t\tvar _proto = LightShadow.prototype;\n\n\t\t_proto.getViewportCount = function getViewportCount() {\n\t\t\treturn this._viewportCount;\n\t\t};\n\n\t\t_proto.getFrustum = function getFrustum() {\n\t\t\treturn this._frustum;\n\t\t};\n\n\t\t_proto.updateMatrices = function updateMatrices(light) {\n\t\t\tvar shadowCamera = this.camera;\n\t\t\tvar shadowMatrix = this.matrix;\n\n\t\t\t_lightPositionWorld.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\tshadowCamera.position.copy(_lightPositionWorld);\n\n\t\t\t_lookTarget.setFromMatrixPosition(light.target.matrixWorld);\n\n\t\t\tshadowCamera.lookAt(_lookTarget);\n\t\t\tshadowCamera.updateMatrixWorld();\n\n\t\t\t_projScreenMatrix.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);\n\n\t\t\tthis._frustum.setFromProjectionMatrix(_projScreenMatrix);\n\n\t\t\tshadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n\t\t\tshadowMatrix.multiply(shadowCamera.projectionMatrix);\n\t\t\tshadowMatrix.multiply(shadowCamera.matrixWorldInverse);\n\t\t};\n\n\t\t_proto.getViewport = function getViewport(viewportIndex) {\n\t\t\treturn this._viewports[viewportIndex];\n\t\t};\n\n\t\t_proto.getFrameExtents = function getFrameExtents() {\n\t\t\treturn this._frameExtents;\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\tthis.camera = source.camera.clone();\n\t\t\tthis.bias = source.bias;\n\t\t\tthis.radius = source.radius;\n\t\t\tthis.mapSize.copy(source.mapSize);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.toJSON = function toJSON() {\n\t\t\tvar object = {};\n\t\t\tif (this.bias !== 0) object.bias = this.bias;\n\t\t\tif (this.normalBias !== 0) object.normalBias = this.normalBias;\n\t\t\tif (this.radius !== 1) object.radius = this.radius;\n\t\t\tif (this.mapSize.x !== 512 || this.mapSize.y !== 512) object.mapSize = this.mapSize.toArray();\n\t\t\tobject.camera = this.camera.toJSON(false).object;\n\t\t\tdelete object.camera.matrix;\n\t\t\treturn object;\n\t\t};\n\n\t\treturn LightShadow;\n\t}();\n\n\tvar SpotLightShadow = /*#__PURE__*/function (_LightShadow) {\n\t\t_inheritsLoose(SpotLightShadow, _LightShadow);\n\n\t\tfunction SpotLightShadow() {\n\t\t\tvar _this;\n\n\t\t\t_this = _LightShadow.call(this, new PerspectiveCamera(50, 1, 0.5, 500)) || this;\n\t\t\t_this.focus = 1;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = SpotLightShadow.prototype;\n\n\t\t_proto.updateMatrices = function updateMatrices(light) {\n\t\t\tvar camera = this.camera;\n\t\t\tvar fov = MathUtils.RAD2DEG * 2 * light.angle * this.focus;\n\t\t\tvar aspect = this.mapSize.width / this.mapSize.height;\n\t\t\tvar far = light.distance || camera.far;\n\n\t\t\tif (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {\n\t\t\t\tcamera.fov = fov;\n\t\t\t\tcamera.aspect = aspect;\n\t\t\t\tcamera.far = far;\n\t\t\t\tcamera.updateProjectionMatrix();\n\t\t\t}\n\n\t\t\t_LightShadow.prototype.updateMatrices.call(this, light);\n\t\t};\n\n\t\treturn SpotLightShadow;\n\t}(LightShadow);\n\n\tSpotLightShadow.prototype.isSpotLightShadow = true;\n\n\tvar SpotLight = /*#__PURE__*/function (_Light) {\n\t\t_inheritsLoose(SpotLight, _Light);\n\n\t\tfunction SpotLight(color, intensity, distance, angle, penumbra, decay) {\n\t\t\tvar _this;\n\n\t\t\tif (distance === void 0) {\n\t\t\t\tdistance = 0;\n\t\t\t}\n\n\t\t\tif (angle === void 0) {\n\t\t\t\tangle = Math.PI / 3;\n\t\t\t}\n\n\t\t\tif (penumbra === void 0) {\n\t\t\t\tpenumbra = 0;\n\t\t\t}\n\n\t\t\tif (decay === void 0) {\n\t\t\t\tdecay = 1;\n\t\t\t}\n\n\t\t\t_this = _Light.call(this, color, intensity) || this;\n\t\t\t_this.type = 'SpotLight';\n\n\t\t\t_this.position.copy(Object3D.DefaultUp);\n\n\t\t\t_this.updateMatrix();\n\n\t\t\t_this.target = new Object3D();\n\t\t\t_this.distance = distance;\n\t\t\t_this.angle = angle;\n\t\t\t_this.penumbra = penumbra;\n\t\t\t_this.decay = decay; // for physically correct lights, should be 2.\n\n\t\t\t_this.shadow = new SpotLightShadow();\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = SpotLight.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Light.prototype.copy.call(this, source);\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.angle = source.angle;\n\t\t\tthis.penumbra = source.penumbra;\n\t\t\tthis.decay = source.decay;\n\t\t\tthis.target = source.target.clone();\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t};\n\n\t\t_createClass(SpotLight, [{\n\t\t\tkey: \"power\",\n\t\t\tget: function get() {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * Math.PI;\n\t\t\t},\n\t\t\tset: function set(power) {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (17) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / Math.PI;\n\t\t\t}\n\t\t}]);\n\n\t\treturn SpotLight;\n\t}(Light);\n\n\tSpotLight.prototype.isSpotLight = true;\n\n\tvar _projScreenMatrix$1 = /*@__PURE__*/new Matrix4();\n\n\tvar _lightPositionWorld$1 = /*@__PURE__*/new Vector3();\n\n\tvar _lookTarget$1 = /*@__PURE__*/new Vector3();\n\n\tvar PointLightShadow = /*#__PURE__*/function (_LightShadow) {\n\t\t_inheritsLoose(PointLightShadow, _LightShadow);\n\n\t\tfunction PointLightShadow() {\n\t\t\tvar _this;\n\n\t\t\t_this = _LightShadow.call(this, new PerspectiveCamera(90, 1, 0.5, 500)) || this;\n\t\t\t_this._frameExtents = new Vector2(4, 2);\n\t\t\t_this._viewportCount = 6;\n\t\t\t_this._viewports = [// These viewports map a cube-map onto a 2D texture with the\n\t\t\t// following orientation:\n\t\t\t//\n\t\t\t//\txzXZ\n\t\t\t//\t y Y\n\t\t\t//\n\t\t\t// X - Positive x direction\n\t\t\t// x - Negative x direction\n\t\t\t// Y - Positive y direction\n\t\t\t// y - Negative y direction\n\t\t\t// Z - Positive z direction\n\t\t\t// z - Negative z direction\n\t\t\t// positive X\n\t\t\tnew Vector4(2, 1, 1, 1), // negative X\n\t\t\tnew Vector4(0, 1, 1, 1), // positive Z\n\t\t\tnew Vector4(3, 1, 1, 1), // negative Z\n\t\t\tnew Vector4(1, 1, 1, 1), // positive Y\n\t\t\tnew Vector4(3, 0, 1, 1), // negative Y\n\t\t\tnew Vector4(1, 0, 1, 1)];\n\t\t\t_this._cubeDirections = [new Vector3(1, 0, 0), new Vector3(-1, 0, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1), new Vector3(0, 1, 0), new Vector3(0, -1, 0)];\n\t\t\t_this._cubeUps = [new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1)];\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = PointLightShadow.prototype;\n\n\t\t_proto.updateMatrices = function updateMatrices(light, viewportIndex) {\n\t\t\tif (viewportIndex === void 0) {\n\t\t\t\tviewportIndex = 0;\n\t\t\t}\n\n\t\t\tvar camera = this.camera;\n\t\t\tvar shadowMatrix = this.matrix;\n\n\t\t\t_lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);\n\n\t\t\tcamera.position.copy(_lightPositionWorld$1);\n\n\t\t\t_lookTarget$1.copy(camera.position);\n\n\t\t\t_lookTarget$1.add(this._cubeDirections[viewportIndex]);\n\n\t\t\tcamera.up.copy(this._cubeUps[viewportIndex]);\n\t\t\tcamera.lookAt(_lookTarget$1);\n\t\t\tcamera.updateMatrixWorld();\n\t\t\tshadowMatrix.makeTranslation(-_lightPositionWorld$1.x, -_lightPositionWorld$1.y, -_lightPositionWorld$1.z);\n\n\t\t\t_projScreenMatrix$1.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n\t\t\tthis._frustum.setFromProjectionMatrix(_projScreenMatrix$1);\n\t\t};\n\n\t\treturn PointLightShadow;\n\t}(LightShadow);\n\n\tPointLightShadow.prototype.isPointLightShadow = true;\n\n\tvar PointLight = /*#__PURE__*/function (_Light) {\n\t\t_inheritsLoose(PointLight, _Light);\n\n\t\tfunction PointLight(color, intensity, distance, decay) {\n\t\t\tvar _this;\n\n\t\t\tif (distance === void 0) {\n\t\t\t\tdistance = 0;\n\t\t\t}\n\n\t\t\tif (decay === void 0) {\n\t\t\t\tdecay = 1;\n\t\t\t}\n\n\t\t\t_this = _Light.call(this, color, intensity) || this;\n\t\t\t_this.type = 'PointLight';\n\t\t\t_this.distance = distance;\n\t\t\t_this.decay = decay; // for physically correct lights, should be 2.\n\n\t\t\t_this.shadow = new PointLightShadow();\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = PointLight.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Light.prototype.copy.call(this, source);\n\n\t\t\tthis.distance = source.distance;\n\t\t\tthis.decay = source.decay;\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t};\n\n\t\t_createClass(PointLight, [{\n\t\t\tkey: \"power\",\n\t\t\tget: function get() {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\treturn this.intensity * 4 * Math.PI;\n\t\t\t},\n\t\t\tset: function set(power) {\n\t\t\t\t// intensity = power per solid angle.\n\t\t\t\t// ref: equation (15) from https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\t\t\tthis.intensity = power / (4 * Math.PI);\n\t\t\t}\n\t\t}]);\n\n\t\treturn PointLight;\n\t}(Light);\n\n\tPointLight.prototype.isPointLight = true;\n\n\tvar OrthographicCamera = /*#__PURE__*/function (_Camera) {\n\t\t_inheritsLoose(OrthographicCamera, _Camera);\n\n\t\tfunction OrthographicCamera(left, right, top, bottom, near, far) {\n\t\t\tvar _this;\n\n\t\t\tif (left === void 0) {\n\t\t\t\tleft = -1;\n\t\t\t}\n\n\t\t\tif (right === void 0) {\n\t\t\t\tright = 1;\n\t\t\t}\n\n\t\t\tif (top === void 0) {\n\t\t\t\ttop = 1;\n\t\t\t}\n\n\t\t\tif (bottom === void 0) {\n\t\t\t\tbottom = -1;\n\t\t\t}\n\n\t\t\tif (near === void 0) {\n\t\t\t\tnear = 0.1;\n\t\t\t}\n\n\t\t\tif (far === void 0) {\n\t\t\t\tfar = 2000;\n\t\t\t}\n\n\t\t\t_this = _Camera.call(this) || this;\n\t\t\t_this.type = 'OrthographicCamera';\n\t\t\t_this.zoom = 1;\n\t\t\t_this.view = null;\n\t\t\t_this.left = left;\n\t\t\t_this.right = right;\n\t\t\t_this.top = top;\n\t\t\t_this.bottom = bottom;\n\t\t\t_this.near = near;\n\t\t\t_this.far = far;\n\n\t\t\t_this.updateProjectionMatrix();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = OrthographicCamera.prototype;\n\n\t\t_proto.copy = function copy(source, recursive) {\n\t\t\t_Camera.prototype.copy.call(this, source, recursive);\n\n\t\t\tthis.left = source.left;\n\t\t\tthis.right = source.right;\n\t\t\tthis.top = source.top;\n\t\t\tthis.bottom = source.bottom;\n\t\t\tthis.near = source.near;\n\t\t\tthis.far = source.far;\n\t\t\tthis.zoom = source.zoom;\n\t\t\tthis.view = source.view === null ? null : Object.assign({}, source.view);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setViewOffset = function setViewOffset(fullWidth, fullHeight, x, y, width, height) {\n\t\t\tif (this.view === null) {\n\t\t\t\tthis.view = {\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tfullWidth: 1,\n\t\t\t\t\tfullHeight: 1,\n\t\t\t\t\toffsetX: 0,\n\t\t\t\t\toffsetY: 0,\n\t\t\t\t\twidth: 1,\n\t\t\t\t\theight: 1\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.view.enabled = true;\n\t\t\tthis.view.fullWidth = fullWidth;\n\t\t\tthis.view.fullHeight = fullHeight;\n\t\t\tthis.view.offsetX = x;\n\t\t\tthis.view.offsetY = y;\n\t\t\tthis.view.width = width;\n\t\t\tthis.view.height = height;\n\t\t\tthis.updateProjectionMatrix();\n\t\t};\n\n\t\t_proto.clearViewOffset = function clearViewOffset() {\n\t\t\tif (this.view !== null) {\n\t\t\t\tthis.view.enabled = false;\n\t\t\t}\n\n\t\t\tthis.updateProjectionMatrix();\n\t\t};\n\n\t\t_proto.updateProjectionMatrix = function updateProjectionMatrix() {\n\t\t\tvar dx = (this.right - this.left) / (2 * this.zoom);\n\t\t\tvar dy = (this.top - this.bottom) / (2 * this.zoom);\n\t\t\tvar cx = (this.right + this.left) / 2;\n\t\t\tvar cy = (this.top + this.bottom) / 2;\n\t\t\tvar left = cx - dx;\n\t\t\tvar right = cx + dx;\n\t\t\tvar top = cy + dy;\n\t\t\tvar bottom = cy - dy;\n\n\t\t\tif (this.view !== null && this.view.enabled) {\n\t\t\t\tvar scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;\n\t\t\t\tvar scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;\n\t\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\t\tright = left + scaleW * this.view.width;\n\t\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\t\tbottom = top - scaleH * this.view.height;\n\t\t\t}\n\n\t\t\tthis.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);\n\t\t\tthis.projectionMatrixInverse.copy(this.projectionMatrix).invert();\n\t\t};\n\n\t\t_proto.toJSON = function toJSON(meta) {\n\t\t\tvar data = Object3D.prototype.toJSON.call(this, meta);\n\t\t\tdata.object.zoom = this.zoom;\n\t\t\tdata.object.left = this.left;\n\t\t\tdata.object.right = this.right;\n\t\t\tdata.object.top = this.top;\n\t\t\tdata.object.bottom = this.bottom;\n\t\t\tdata.object.near = this.near;\n\t\t\tdata.object.far = this.far;\n\t\t\tif (this.view !== null) data.object.view = Object.assign({}, this.view);\n\t\t\treturn data;\n\t\t};\n\n\t\treturn OrthographicCamera;\n\t}(Camera);\n\n\tOrthographicCamera.prototype.isOrthographicCamera = true;\n\n\tvar DirectionalLightShadow = /*#__PURE__*/function (_LightShadow) {\n\t\t_inheritsLoose(DirectionalLightShadow, _LightShadow);\n\n\t\tfunction DirectionalLightShadow() {\n\t\t\treturn _LightShadow.call(this, new OrthographicCamera(-5, 5, 5, -5, 0.5, 500)) || this;\n\t\t}\n\n\t\treturn DirectionalLightShadow;\n\t}(LightShadow);\n\n\tDirectionalLightShadow.prototype.isDirectionalLightShadow = true;\n\n\tvar DirectionalLight = /*#__PURE__*/function (_Light) {\n\t\t_inheritsLoose(DirectionalLight, _Light);\n\n\t\tfunction DirectionalLight(color, intensity) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Light.call(this, color, intensity) || this;\n\t\t\t_this.type = 'DirectionalLight';\n\n\t\t\t_this.position.copy(Object3D.DefaultUp);\n\n\t\t\t_this.updateMatrix();\n\n\t\t\t_this.target = new Object3D();\n\t\t\t_this.shadow = new DirectionalLightShadow();\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = DirectionalLight.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Light.prototype.copy.call(this, source);\n\n\t\t\tthis.target = source.target.clone();\n\t\t\tthis.shadow = source.shadow.clone();\n\t\t\treturn this;\n\t\t};\n\n\t\treturn DirectionalLight;\n\t}(Light);\n\n\tDirectionalLight.prototype.isDirectionalLight = true;\n\n\tvar AmbientLight = /*#__PURE__*/function (_Light) {\n\t\t_inheritsLoose(AmbientLight, _Light);\n\n\t\tfunction AmbientLight(color, intensity) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Light.call(this, color, intensity) || this;\n\t\t\t_this.type = 'AmbientLight';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn AmbientLight;\n\t}(Light);\n\n\tAmbientLight.prototype.isAmbientLight = true;\n\n\tvar RectAreaLight = /*#__PURE__*/function (_Light) {\n\t\t_inheritsLoose(RectAreaLight, _Light);\n\n\t\tfunction RectAreaLight(color, intensity, width, height) {\n\t\t\tvar _this;\n\n\t\t\tif (width === void 0) {\n\t\t\t\twidth = 10;\n\t\t\t}\n\n\t\t\tif (height === void 0) {\n\t\t\t\theight = 10;\n\t\t\t}\n\n\t\t\t_this = _Light.call(this, color, intensity) || this;\n\t\t\t_this.type = 'RectAreaLight';\n\t\t\t_this.width = width;\n\t\t\t_this.height = height;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = RectAreaLight.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Light.prototype.copy.call(this, source);\n\n\t\t\tthis.width = source.width;\n\t\t\tthis.height = source.height;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON(meta) {\n\t\t\tvar data = _Light.prototype.toJSON.call(this, meta);\n\n\t\t\tdata.object.width = this.width;\n\t\t\tdata.object.height = this.height;\n\t\t\treturn data;\n\t\t};\n\n\t\treturn RectAreaLight;\n\t}(Light);\n\n\tRectAreaLight.prototype.isRectAreaLight = true;\n\n\t/**\n\t * Primary reference:\n\t *\t https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t *\n\t * Secondary reference:\n\t *\t https://www.ppsloan.org/publications/StupidSH36.pdf\n\t */\n\t// 3-band SH defined by 9 coefficients\n\n\tvar SphericalHarmonics3 = /*#__PURE__*/function () {\n\t\tfunction SphericalHarmonics3() {\n\t\t\tthis.coefficients = [];\n\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients.push(new Vector3());\n\t\t\t}\n\t\t}\n\n\t\tvar _proto = SphericalHarmonics3.prototype;\n\n\t\t_proto.set = function set(coefficients) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].copy(coefficients[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.zero = function zero() {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].set(0, 0, 0);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // get the radiance in the direction of the normal\n\t\t// target is a Vector3\n\t\t;\n\n\t\t_proto.getAt = function getAt(normal, target) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tvar x = normal.x,\n\t\t\t\t\ty = normal.y,\n\t\t\t\t\tz = normal.z;\n\t\t\tvar coeff = this.coefficients; // band 0\n\n\t\t\ttarget.copy(coeff[0]).multiplyScalar(0.282095); // band 1\n\n\t\t\ttarget.addScaledVector(coeff[1], 0.488603 * y);\n\t\t\ttarget.addScaledVector(coeff[2], 0.488603 * z);\n\t\t\ttarget.addScaledVector(coeff[3], 0.488603 * x); // band 2\n\n\t\t\ttarget.addScaledVector(coeff[4], 1.092548 * (x * y));\n\t\t\ttarget.addScaledVector(coeff[5], 1.092548 * (y * z));\n\t\t\ttarget.addScaledVector(coeff[6], 0.315392 * (3.0 * z * z - 1.0));\n\t\t\ttarget.addScaledVector(coeff[7], 1.092548 * (x * z));\n\t\t\ttarget.addScaledVector(coeff[8], 0.546274 * (x * x - y * y));\n\t\t\treturn target;\n\t\t} // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t\t// target is a Vector3\n\t\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\t\t;\n\n\t\t_proto.getIrradianceAt = function getIrradianceAt(normal, target) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tvar x = normal.x,\n\t\t\t\t\ty = normal.y,\n\t\t\t\t\tz = normal.z;\n\t\t\tvar coeff = this.coefficients; // band 0\n\n\t\t\ttarget.copy(coeff[0]).multiplyScalar(0.886227); // π * 0.282095\n\t\t\t// band 1\n\n\t\t\ttarget.addScaledVector(coeff[1], 2.0 * 0.511664 * y); // ( 2 * π / 3 ) * 0.488603\n\n\t\t\ttarget.addScaledVector(coeff[2], 2.0 * 0.511664 * z);\n\t\t\ttarget.addScaledVector(coeff[3], 2.0 * 0.511664 * x); // band 2\n\n\t\t\ttarget.addScaledVector(coeff[4], 2.0 * 0.429043 * x * y); // ( π / 4 ) * 1.092548\n\n\t\t\ttarget.addScaledVector(coeff[5], 2.0 * 0.429043 * y * z);\n\t\t\ttarget.addScaledVector(coeff[6], 0.743125 * z * z - 0.247708); // ( π / 4 ) * 0.315392 * 3\n\n\t\t\ttarget.addScaledVector(coeff[7], 2.0 * 0.429043 * x * z);\n\t\t\ttarget.addScaledVector(coeff[8], 0.429043 * (x * x - y * y)); // ( π / 4 ) * 0.546274\n\n\t\t\treturn target;\n\t\t};\n\n\t\t_proto.add = function add(sh) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].add(sh.coefficients[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.addScaledSH = function addScaledSH(sh, s) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].addScaledVector(sh.coefficients[i], s);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.scale = function scale(s) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].multiplyScalar(s);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lerp = function lerp(sh, alpha) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tthis.coefficients[i].lerp(sh.coefficients[i], alpha);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(sh) {\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tif (!this.coefficients[i].equals(sh.coefficients[i])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn true;\n\t\t};\n\n\t\t_proto.copy = function copy(sh) {\n\t\t\treturn this.set(sh.coefficients);\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.fromArray = function fromArray(array, offset) {\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tvar coefficients = this.coefficients;\n\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tcoefficients[i].fromArray(array, offset + i * 3);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toArray = function toArray(array, offset) {\n\t\t\tif (array === void 0) {\n\t\t\t\tarray = [];\n\t\t\t}\n\n\t\t\tif (offset === void 0) {\n\t\t\t\toffset = 0;\n\t\t\t}\n\n\t\t\tvar coefficients = this.coefficients;\n\n\t\t\tfor (var i = 0; i < 9; i++) {\n\t\t\t\tcoefficients[i].toArray(array, offset + i * 3);\n\t\t\t}\n\n\t\t\treturn array;\n\t\t} // evaluate the basis functions\n\t\t// shBasis is an Array[ 9 ]\n\t\t;\n\n\t\tSphericalHarmonics3.getBasisAt = function getBasisAt(normal, shBasis) {\n\t\t\t// normal is assumed to be unit length\n\t\t\tvar x = normal.x,\n\t\t\t\t\ty = normal.y,\n\t\t\t\t\tz = normal.z; // band 0\n\n\t\t\tshBasis[0] = 0.282095; // band 1\n\n\t\t\tshBasis[1] = 0.488603 * y;\n\t\t\tshBasis[2] = 0.488603 * z;\n\t\t\tshBasis[3] = 0.488603 * x; // band 2\n\n\t\t\tshBasis[4] = 1.092548 * x * y;\n\t\t\tshBasis[5] = 1.092548 * y * z;\n\t\t\tshBasis[6] = 0.315392 * (3 * z * z - 1);\n\t\t\tshBasis[7] = 1.092548 * x * z;\n\t\t\tshBasis[8] = 0.546274 * (x * x - y * y);\n\t\t};\n\n\t\treturn SphericalHarmonics3;\n\t}();\n\n\tSphericalHarmonics3.prototype.isSphericalHarmonics3 = true;\n\n\tvar LightProbe = /*#__PURE__*/function (_Light) {\n\t\t_inheritsLoose(LightProbe, _Light);\n\n\t\tfunction LightProbe(sh, intensity) {\n\t\t\tvar _this;\n\n\t\t\tif (sh === void 0) {\n\t\t\t\tsh = new SphericalHarmonics3();\n\t\t\t}\n\n\t\t\tif (intensity === void 0) {\n\t\t\t\tintensity = 1;\n\t\t\t}\n\n\t\t\t_this = _Light.call(this, undefined, intensity) || this;\n\t\t\t_this.sh = sh;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = LightProbe.prototype;\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Light.prototype.copy.call(this, source);\n\n\t\t\tthis.sh.copy(source.sh);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.fromJSON = function fromJSON(json) {\n\t\t\tthis.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n\n\t\t\tthis.sh.fromArray(json.sh);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toJSON = function toJSON(meta) {\n\t\t\tvar data = _Light.prototype.toJSON.call(this, meta);\n\n\t\t\tdata.object.sh = this.sh.toArray();\n\t\t\treturn data;\n\t\t};\n\n\t\treturn LightProbe;\n\t}(Light);\n\n\tLightProbe.prototype.isLightProbe = true;\n\n\tvar MaterialLoader = /*#__PURE__*/function (_Loader) {\n\t\t_inheritsLoose(MaterialLoader, _Loader);\n\n\t\tfunction MaterialLoader(manager) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Loader.call(this, manager) || this;\n\t\t\t_this.textures = {};\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = MaterialLoader.prototype;\n\n\t\t_proto.load = function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar loader = new FileLoader(scope.manager);\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t};\n\n\t\t_proto.parse = function parse(json) {\n\t\t\tvar textures = this.textures;\n\n\t\t\tfunction getTexture(name) {\n\t\t\t\tif (textures[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.MaterialLoader: Undefined texture', name);\n\t\t\t\t}\n\n\t\t\t\treturn textures[name];\n\t\t\t}\n\n\t\t\tvar material = new Materials[json.type]();\n\t\t\tif (json.uuid !== undefined) material.uuid = json.uuid;\n\t\t\tif (json.name !== undefined) material.name = json.name;\n\t\t\tif (json.color !== undefined && material.color !== undefined) material.color.setHex(json.color);\n\t\t\tif (json.roughness !== undefined) material.roughness = json.roughness;\n\t\t\tif (json.metalness !== undefined) material.metalness = json.metalness;\n\t\t\tif (json.sheen !== undefined) material.sheen = new Color().setHex(json.sheen);\n\t\t\tif (json.emissive !== undefined && material.emissive !== undefined) material.emissive.setHex(json.emissive);\n\t\t\tif (json.specular !== undefined && material.specular !== undefined) material.specular.setHex(json.specular);\n\t\t\tif (json.shininess !== undefined) material.shininess = json.shininess;\n\t\t\tif (json.clearcoat !== undefined) material.clearcoat = json.clearcoat;\n\t\t\tif (json.clearcoatRoughness !== undefined) material.clearcoatRoughness = json.clearcoatRoughness;\n\t\t\tif (json.fog !== undefined) material.fog = json.fog;\n\t\t\tif (json.flatShading !== undefined) material.flatShading = json.flatShading;\n\t\t\tif (json.blending !== undefined) material.blending = json.blending;\n\t\t\tif (json.combine !== undefined) material.combine = json.combine;\n\t\t\tif (json.side !== undefined) material.side = json.side;\n\t\t\tif (json.opacity !== undefined) material.opacity = json.opacity;\n\t\t\tif (json.transparent !== undefined) material.transparent = json.transparent;\n\t\t\tif (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;\n\t\t\tif (json.depthTest !== undefined) material.depthTest = json.depthTest;\n\t\t\tif (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;\n\t\t\tif (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;\n\t\t\tif (json.stencilWrite !== undefined) material.stencilWrite = json.stencilWrite;\n\t\t\tif (json.stencilWriteMask !== undefined) material.stencilWriteMask = json.stencilWriteMask;\n\t\t\tif (json.stencilFunc !== undefined) material.stencilFunc = json.stencilFunc;\n\t\t\tif (json.stencilRef !== undefined) material.stencilRef = json.stencilRef;\n\t\t\tif (json.stencilFuncMask !== undefined) material.stencilFuncMask = json.stencilFuncMask;\n\t\t\tif (json.stencilFail !== undefined) material.stencilFail = json.stencilFail;\n\t\t\tif (json.stencilZFail !== undefined) material.stencilZFail = json.stencilZFail;\n\t\t\tif (json.stencilZPass !== undefined) material.stencilZPass = json.stencilZPass;\n\t\t\tif (json.wireframe !== undefined) material.wireframe = json.wireframe;\n\t\t\tif (json.wireframeLinewidth !== undefined) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\t\tif (json.wireframeLinecap !== undefined) material.wireframeLinecap = json.wireframeLinecap;\n\t\t\tif (json.wireframeLinejoin !== undefined) material.wireframeLinejoin = json.wireframeLinejoin;\n\t\t\tif (json.rotation !== undefined) material.rotation = json.rotation;\n\t\t\tif (json.linewidth !== 1) material.linewidth = json.linewidth;\n\t\t\tif (json.dashSize !== undefined) material.dashSize = json.dashSize;\n\t\t\tif (json.gapSize !== undefined) material.gapSize = json.gapSize;\n\t\t\tif (json.scale !== undefined) material.scale = json.scale;\n\t\t\tif (json.polygonOffset !== undefined) material.polygonOffset = json.polygonOffset;\n\t\t\tif (json.polygonOffsetFactor !== undefined) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\t\tif (json.polygonOffsetUnits !== undefined) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\t\t\tif (json.skinning !== undefined) material.skinning = json.skinning;\n\t\t\tif (json.morphTargets !== undefined) material.morphTargets = json.morphTargets;\n\t\t\tif (json.morphNormals !== undefined) material.morphNormals = json.morphNormals;\n\t\t\tif (json.dithering !== undefined) material.dithering = json.dithering;\n\t\t\tif (json.vertexTangents !== undefined) material.vertexTangents = json.vertexTangents;\n\t\t\tif (json.visible !== undefined) material.visible = json.visible;\n\t\t\tif (json.toneMapped !== undefined) material.toneMapped = json.toneMapped;\n\t\t\tif (json.userData !== undefined) material.userData = json.userData;\n\n\t\t\tif (json.vertexColors !== undefined) {\n\t\t\t\tif (typeof json.vertexColors === 'number') {\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors > 0 ? true : false;\n\t\t\t\t} else {\n\t\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\t\t\t\t}\n\t\t\t} // Shader Material\n\n\n\t\t\tif (json.uniforms !== undefined) {\n\t\t\t\tfor (var name in json.uniforms) {\n\t\t\t\t\tvar uniform = json.uniforms[name];\n\t\t\t\t\tmaterial.uniforms[name] = {};\n\n\t\t\t\t\tswitch (uniform.type) {\n\t\t\t\t\t\tcase 't':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = getTexture(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Color().setHex(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector2().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector3().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Vector4().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Matrix3().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = new Matrix4().fromArray(uniform.value);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmaterial.uniforms[name].value = uniform.value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (json.defines !== undefined) material.defines = json.defines;\n\t\t\tif (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;\n\t\t\tif (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;\n\n\t\t\tif (json.extensions !== undefined) {\n\t\t\t\tfor (var key in json.extensions) {\n\t\t\t\t\tmaterial.extensions[key] = json.extensions[key];\n\t\t\t\t}\n\t\t\t} // Deprecated\n\n\n\t\t\tif (json.shading !== undefined) material.flatShading = json.shading === 1; // THREE.FlatShading\n\t\t\t// for PointsMaterial\n\n\t\t\tif (json.size !== undefined) material.size = json.size;\n\t\t\tif (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation; // maps\n\n\t\t\tif (json.map !== undefined) material.map = getTexture(json.map);\n\t\t\tif (json.matcap !== undefined) material.matcap = getTexture(json.matcap);\n\t\t\tif (json.alphaMap !== undefined) material.alphaMap = getTexture(json.alphaMap);\n\t\t\tif (json.bumpMap !== undefined) material.bumpMap = getTexture(json.bumpMap);\n\t\t\tif (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;\n\t\t\tif (json.normalMap !== undefined) material.normalMap = getTexture(json.normalMap);\n\t\t\tif (json.normalMapType !== undefined) material.normalMapType = json.normalMapType;\n\n\t\t\tif (json.normalScale !== undefined) {\n\t\t\t\tvar normalScale = json.normalScale;\n\n\t\t\t\tif (Array.isArray(normalScale) === false) {\n\t\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\t\t\t\t\tnormalScale = [normalScale, normalScale];\n\t\t\t\t}\n\n\t\t\t\tmaterial.normalScale = new Vector2().fromArray(normalScale);\n\t\t\t}\n\n\t\t\tif (json.displacementMap !== undefined) material.displacementMap = getTexture(json.displacementMap);\n\t\t\tif (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;\n\t\t\tif (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;\n\t\t\tif (json.roughnessMap !== undefined) material.roughnessMap = getTexture(json.roughnessMap);\n\t\t\tif (json.metalnessMap !== undefined) material.metalnessMap = getTexture(json.metalnessMap);\n\t\t\tif (json.emissiveMap !== undefined) material.emissiveMap = getTexture(json.emissiveMap);\n\t\t\tif (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;\n\t\t\tif (json.specularMap !== undefined) material.specularMap = getTexture(json.specularMap);\n\t\t\tif (json.envMap !== undefined) material.envMap = getTexture(json.envMap);\n\t\t\tif (json.envMapIntensity !== undefined) material.envMapIntensity = json.envMapIntensity;\n\t\t\tif (json.reflectivity !== undefined) material.reflectivity = json.reflectivity;\n\t\t\tif (json.refractionRatio !== undefined) material.refractionRatio = json.refractionRatio;\n\t\t\tif (json.lightMap !== undefined) material.lightMap = getTexture(json.lightMap);\n\t\t\tif (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;\n\t\t\tif (json.aoMap !== undefined) material.aoMap = getTexture(json.aoMap);\n\t\t\tif (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity;\n\t\t\tif (json.gradientMap !== undefined) material.gradientMap = getTexture(json.gradientMap);\n\t\t\tif (json.clearcoatMap !== undefined) material.clearcoatMap = getTexture(json.clearcoatMap);\n\t\t\tif (json.clearcoatRoughnessMap !== undefined) material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);\n\t\t\tif (json.clearcoatNormalMap !== undefined) material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);\n\t\t\tif (json.clearcoatNormalScale !== undefined) material.clearcoatNormalScale = new Vector2().fromArray(json.clearcoatNormalScale);\n\t\t\tif (json.transmission !== undefined) material.transmission = json.transmission;\n\t\t\tif (json.transmissionMap !== undefined) material.transmissionMap = getTexture(json.transmissionMap);\n\t\t\treturn material;\n\t\t};\n\n\t\t_proto.setTextures = function setTextures(value) {\n\t\t\tthis.textures = value;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn MaterialLoader;\n\t}(Loader);\n\n\tvar LoaderUtils = {\n\t\tdecodeText: function decodeText(array) {\n\t\t\tif (typeof TextDecoder !== 'undefined') {\n\t\t\t\treturn new TextDecoder().decode(array);\n\t\t\t} // Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\n\t\t\tvar s = '';\n\n\t\t\tfor (var i = 0, il = array.length; i < il; i++) {\n\t\t\t\t// Implicitly assumes little-endian.\n\t\t\t\ts += String.fromCharCode(array[i]);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t// merges multi-byte utf-8 characters.\n\t\t\t\treturn decodeURIComponent(escape(s));\n\t\t\t} catch (e) {\n\t\t\t\t// see #16358\n\t\t\t\treturn s;\n\t\t\t}\n\t\t},\n\t\textractUrlBase: function extractUrlBase(url) {\n\t\t\tvar index = url.lastIndexOf('/');\n\t\t\tif (index === -1) return './';\n\t\t\treturn url.substr(0, index + 1);\n\t\t}\n\t};\n\n\tfunction InstancedBufferGeometry() {\n\t\tBufferGeometry.call(this);\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.instanceCount = Infinity;\n\t}\n\n\tInstancedBufferGeometry.prototype = Object.assign(Object.create(BufferGeometry.prototype), {\n\t\tconstructor: InstancedBufferGeometry,\n\t\tisInstancedBufferGeometry: true,\n\t\tcopy: function copy(source) {\n\t\t\tBufferGeometry.prototype.copy.call(this, source);\n\t\t\tthis.instanceCount = source.instanceCount;\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = BufferGeometry.prototype.toJSON.call(this);\n\t\t\tdata.instanceCount = this.instanceCount;\n\t\t\tdata.isInstancedBufferGeometry = true;\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tfunction InstancedBufferAttribute(array, itemSize, normalized, meshPerAttribute) {\n\t\tif (typeof normalized === 'number') {\n\t\t\tmeshPerAttribute = normalized;\n\t\t\tnormalized = false;\n\t\t\tconsole.error('THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.');\n\t\t}\n\n\t\tBufferAttribute.call(this, array, itemSize, normalized);\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\t}\n\n\tInstancedBufferAttribute.prototype = Object.assign(Object.create(BufferAttribute.prototype), {\n\t\tconstructor: InstancedBufferAttribute,\n\t\tisInstancedBufferAttribute: true,\n\t\tcopy: function copy(source) {\n\t\t\tBufferAttribute.prototype.copy.call(this, source);\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\t\t\treturn this;\n\t\t},\n\t\ttoJSON: function toJSON() {\n\t\t\tvar data = BufferAttribute.prototype.toJSON.call(this);\n\t\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\t\t\tdata.isInstancedBufferAttribute = true;\n\t\t\treturn data;\n\t\t}\n\t});\n\n\tvar BufferGeometryLoader = /*#__PURE__*/function (_Loader) {\n\t\t_inheritsLoose(BufferGeometryLoader, _Loader);\n\n\t\tfunction BufferGeometryLoader(manager) {\n\t\t\treturn _Loader.call(this, manager) || this;\n\t\t}\n\n\t\tvar _proto = BufferGeometryLoader.prototype;\n\n\t\t_proto.load = function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar loader = new FileLoader(scope.manager);\n\t\t\tloader.setPath(scope.path);\n\t\t\tloader.setRequestHeader(scope.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\ttry {\n\t\t\t\t\tonLoad(scope.parse(JSON.parse(text)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t};\n\n\t\t_proto.parse = function parse(json) {\n\t\t\tvar interleavedBufferMap = {};\n\t\t\tvar arrayBufferMap = {};\n\n\t\t\tfunction getInterleavedBuffer(json, uuid) {\n\t\t\t\tif (interleavedBufferMap[uuid] !== undefined) return interleavedBufferMap[uuid];\n\t\t\t\tvar interleavedBuffers = json.interleavedBuffers;\n\t\t\t\tvar interleavedBuffer = interleavedBuffers[uuid];\n\t\t\t\tvar buffer = getArrayBuffer(json, interleavedBuffer.buffer);\n\t\t\t\tvar array = getTypedArray(interleavedBuffer.type, buffer);\n\t\t\t\tvar ib = new InterleavedBuffer(array, interleavedBuffer.stride);\n\t\t\t\tib.uuid = interleavedBuffer.uuid;\n\t\t\t\tinterleavedBufferMap[uuid] = ib;\n\t\t\t\treturn ib;\n\t\t\t}\n\n\t\t\tfunction getArrayBuffer(json, uuid) {\n\t\t\t\tif (arrayBufferMap[uuid] !== undefined) return arrayBufferMap[uuid];\n\t\t\t\tvar arrayBuffers = json.arrayBuffers;\n\t\t\t\tvar arrayBuffer = arrayBuffers[uuid];\n\t\t\t\tvar ab = new Uint32Array(arrayBuffer).buffer;\n\t\t\t\tarrayBufferMap[uuid] = ab;\n\t\t\t\treturn ab;\n\t\t\t}\n\n\t\t\tvar geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\t\t\tvar index = json.data.index;\n\n\t\t\tif (index !== undefined) {\n\t\t\t\tvar typedArray = getTypedArray(index.type, index.array);\n\t\t\t\tgeometry.setIndex(new BufferAttribute(typedArray, 1));\n\t\t\t}\n\n\t\t\tvar attributes = json.data.attributes;\n\n\t\t\tfor (var key in attributes) {\n\t\t\t\tvar attribute = attributes[key];\n\t\t\t\tvar bufferAttribute = void 0;\n\n\t\t\t\tif (attribute.isInterleavedBufferAttribute) {\n\t\t\t\t\tvar interleavedBuffer = getInterleavedBuffer(json.data, attribute.data);\n\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute(interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized);\n\t\t\t\t} else {\n\t\t\t\t\tvar _typedArray = getTypedArray(attribute.type, attribute.array);\n\n\t\t\t\t\tvar bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\t\tbufferAttribute = new bufferAttributeConstr(_typedArray, attribute.itemSize, attribute.normalized);\n\t\t\t\t}\n\n\t\t\t\tif (attribute.name !== undefined) bufferAttribute.name = attribute.name;\n\t\t\t\tgeometry.setAttribute(key, bufferAttribute);\n\t\t\t}\n\n\t\t\tvar morphAttributes = json.data.morphAttributes;\n\n\t\t\tif (morphAttributes) {\n\t\t\t\tfor (var _key in morphAttributes) {\n\t\t\t\t\tvar attributeArray = morphAttributes[_key];\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor (var i = 0, il = attributeArray.length; i < il; i++) {\n\t\t\t\t\t\tvar _attribute = attributeArray[i];\n\n\t\t\t\t\t\tvar _bufferAttribute = void 0;\n\n\t\t\t\t\t\tif (_attribute.isInterleavedBufferAttribute) {\n\t\t\t\t\t\t\tvar _interleavedBuffer = getInterleavedBuffer(json.data, _attribute.data);\n\n\t\t\t\t\t\t\t_bufferAttribute = new InterleavedBufferAttribute(_interleavedBuffer, _attribute.itemSize, _attribute.offset, _attribute.normalized);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar _typedArray2 = getTypedArray(_attribute.type, _attribute.array);\n\n\t\t\t\t\t\t\t_bufferAttribute = new BufferAttribute(_typedArray2, _attribute.itemSize, _attribute.normalized);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (_attribute.name !== undefined) _bufferAttribute.name = _attribute.name;\n\t\t\t\t\t\tarray.push(_bufferAttribute);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.morphAttributes[_key] = array;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\t\tif (morphTargetsRelative) {\n\t\t\t\tgeometry.morphTargetsRelative = true;\n\t\t\t}\n\n\t\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\t\tif (groups !== undefined) {\n\t\t\t\tfor (var _i = 0, n = groups.length; _i !== n; ++_i) {\n\t\t\t\t\tvar group = groups[_i];\n\t\t\t\t\tgeometry.addGroup(group.start, group.count, group.materialIndex);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar boundingSphere = json.data.boundingSphere;\n\n\t\t\tif (boundingSphere !== undefined) {\n\t\t\t\tvar center = new Vector3();\n\n\t\t\t\tif (boundingSphere.center !== undefined) {\n\t\t\t\t\tcenter.fromArray(boundingSphere.center);\n\t\t\t\t}\n\n\t\t\t\tgeometry.boundingSphere = new Sphere(center, boundingSphere.radius);\n\t\t\t}\n\n\t\t\tif (json.name) geometry.name = json.name;\n\t\t\tif (json.userData) geometry.userData = json.userData;\n\t\t\treturn geometry;\n\t\t};\n\n\t\treturn BufferGeometryLoader;\n\t}(Loader);\n\n\tvar ObjectLoader = /*#__PURE__*/function (_Loader) {\n\t\t_inheritsLoose(ObjectLoader, _Loader);\n\n\t\tfunction ObjectLoader(manager) {\n\t\t\treturn _Loader.call(this, manager) || this;\n\t\t}\n\n\t\tvar _proto = ObjectLoader.prototype;\n\n\t\t_proto.load = function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar path = this.path === '' ? LoaderUtils.extractUrlBase(url) : this.path;\n\t\t\tthis.resourcePath = this.resourcePath || path;\n\t\t\tvar loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\tvar json = null;\n\n\t\t\t\ttry {\n\t\t\t\t\tjson = JSON.parse(text);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (onError !== undefined) onError(error);\n\t\t\t\t\tconsole.error('THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar metadata = json.metadata;\n\n\t\t\t\tif (metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry') {\n\t\t\t\t\tconsole.error('THREE.ObjectLoader: Can\\'t load ' + url);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tscope.parse(json, onLoad);\n\t\t\t}, onProgress, onError);\n\t\t};\n\n\t\t_proto.parse = function parse(json, onLoad) {\n\t\t\tvar animations = this.parseAnimations(json.animations);\n\t\t\tvar shapes = this.parseShapes(json.shapes);\n\t\t\tvar geometries = this.parseGeometries(json.geometries, shapes);\n\t\t\tvar images = this.parseImages(json.images, function () {\n\t\t\t\tif (onLoad !== undefined) onLoad(object);\n\t\t\t});\n\t\t\tvar textures = this.parseTextures(json.textures, images);\n\t\t\tvar materials = this.parseMaterials(json.materials, textures);\n\t\t\tvar object = this.parseObject(json.object, geometries, materials, animations);\n\t\t\tvar skeletons = this.parseSkeletons(json.skeletons, object);\n\t\t\tthis.bindSkeletons(object, skeletons); //\n\n\t\t\tif (onLoad !== undefined) {\n\t\t\t\tvar hasImages = false;\n\n\t\t\t\tfor (var uuid in images) {\n\t\t\t\t\tif (images[uuid] instanceof HTMLImageElement) {\n\t\t\t\t\t\thasImages = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (hasImages === false) onLoad(object);\n\t\t\t}\n\n\t\t\treturn object;\n\t\t};\n\n\t\t_proto.parseShapes = function parseShapes(json) {\n\t\t\tvar shapes = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (var i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tvar shape = new Shape().fromJSON(json[i]);\n\t\t\t\t\tshapes[shape.uuid] = shape;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn shapes;\n\t\t};\n\n\t\t_proto.parseSkeletons = function parseSkeletons(json, object) {\n\t\t\tvar skeletons = {};\n\t\t\tvar bones = {}; // generate bone lookup table\n\n\t\t\tobject.traverse(function (child) {\n\t\t\t\tif (child.isBone) bones[child.uuid] = child;\n\t\t\t}); // create skeletons\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (var i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tvar skeleton = new Skeleton().fromJSON(json[i], bones);\n\t\t\t\t\tskeletons[skeleton.uuid] = skeleton;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn skeletons;\n\t\t};\n\n\t\t_proto.parseGeometries = function parseGeometries(json, shapes) {\n\t\t\tvar geometries = {};\n\t\t\tvar geometryShapes;\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tvar bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\t\tfor (var i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tvar geometry = void 0;\n\t\t\t\t\tvar data = json[i];\n\n\t\t\t\t\tswitch (data.type) {\n\t\t\t\t\t\tcase 'PlaneGeometry':\n\t\t\t\t\t\tcase 'PlaneBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.width, data.height, data.widthSegments, data.heightSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BoxGeometry':\n\t\t\t\t\t\tcase 'BoxBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CircleGeometry':\n\t\t\t\t\t\tcase 'CircleBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.segments, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'CylinderGeometry':\n\t\t\t\t\t\tcase 'CylinderBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ConeGeometry':\n\t\t\t\t\t\tcase 'ConeBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'SphereGeometry':\n\t\t\t\t\t\tcase 'SphereBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'DodecahedronGeometry':\n\t\t\t\t\t\tcase 'DodecahedronBufferGeometry':\n\t\t\t\t\t\tcase 'IcosahedronGeometry':\n\t\t\t\t\t\tcase 'IcosahedronBufferGeometry':\n\t\t\t\t\t\tcase 'OctahedronGeometry':\n\t\t\t\t\t\tcase 'OctahedronBufferGeometry':\n\t\t\t\t\t\tcase 'TetrahedronGeometry':\n\t\t\t\t\t\tcase 'TetrahedronBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.detail);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'RingGeometry':\n\t\t\t\t\t\tcase 'RingBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusGeometry':\n\t\t\t\t\t\tcase 'TorusBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TorusKnotGeometry':\n\t\t\t\t\t\tcase 'TorusKnotBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TubeGeometry':\n\t\t\t\t\t\tcase 'TubeBufferGeometry':\n\t\t\t\t\t\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t\t\t\t\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](new Curves[data.path.type]().fromJSON(data.path), data.tubularSegments, data.radius, data.radialSegments, data.closed);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'LatheGeometry':\n\t\t\t\t\t\tcase 'LatheBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.points, data.segments, data.phiStart, data.phiLength);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'PolyhedronGeometry':\n\t\t\t\t\t\tcase 'PolyhedronBufferGeometry':\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](data.vertices, data.indices, data.radius, data.details);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ShapeGeometry':\n\t\t\t\t\t\tcase 'ShapeBufferGeometry':\n\t\t\t\t\t\t\tgeometryShapes = [];\n\n\t\t\t\t\t\t\tfor (var j = 0, jl = data.shapes.length; j < jl; j++) {\n\t\t\t\t\t\t\t\tvar shape = shapes[data.shapes[j]];\n\t\t\t\t\t\t\t\tgeometryShapes.push(shape);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](geometryShapes, data.curveSegments);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'ExtrudeGeometry':\n\t\t\t\t\t\tcase 'ExtrudeBufferGeometry':\n\t\t\t\t\t\t\tgeometryShapes = [];\n\n\t\t\t\t\t\t\tfor (var _j = 0, _jl = data.shapes.length; _j < _jl; _j++) {\n\t\t\t\t\t\t\t\tvar _shape = shapes[data.shapes[_j]];\n\t\t\t\t\t\t\t\tgeometryShapes.push(_shape);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar extrudePath = data.options.extrudePath;\n\n\t\t\t\t\t\t\tif (extrudePath !== undefined) {\n\t\t\t\t\t\t\t\tdata.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tgeometry = new Geometries[data.type](geometryShapes, data.options);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\t\tcase 'InstancedBufferGeometry':\n\t\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse(data);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'Geometry':\n\t\t\t\t\t\t\tconsole.error('THREE.ObjectLoader: Loading \"Geometry\" is not supported anymore.');\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"');\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.uuid = data.uuid;\n\t\t\t\t\tif (data.name !== undefined) geometry.name = data.name;\n\t\t\t\t\tif (geometry.isBufferGeometry === true && data.userData !== undefined) geometry.userData = data.userData;\n\t\t\t\t\tgeometries[data.uuid] = geometry;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn geometries;\n\t\t};\n\n\t\t_proto.parseMaterials = function parseMaterials(json, textures) {\n\t\t\tvar cache = {}; // MultiMaterial\n\n\t\t\tvar materials = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tvar loader = new MaterialLoader();\n\t\t\t\tloader.setTextures(textures);\n\n\t\t\t\tfor (var i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tvar data = json[i];\n\n\t\t\t\t\tif (data.type === 'MultiMaterial') {\n\t\t\t\t\t\t// Deprecated\n\t\t\t\t\t\tvar array = [];\n\n\t\t\t\t\t\tfor (var j = 0; j < data.materials.length; j++) {\n\t\t\t\t\t\t\tvar material = data.materials[j];\n\n\t\t\t\t\t\t\tif (cache[material.uuid] === undefined) {\n\t\t\t\t\t\t\t\tcache[material.uuid] = loader.parse(material);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tarray.push(cache[material.uuid]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[data.uuid] = array;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (cache[data.uuid] === undefined) {\n\t\t\t\t\t\t\tcache[data.uuid] = loader.parse(data);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterials[data.uuid] = cache[data.uuid];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn materials;\n\t\t};\n\n\t\t_proto.parseAnimations = function parseAnimations(json) {\n\t\t\tvar animations = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (var i = 0; i < json.length; i++) {\n\t\t\t\t\tvar data = json[i];\n\t\t\t\t\tvar clip = AnimationClip.parse(data);\n\t\t\t\t\tanimations[clip.uuid] = clip;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn animations;\n\t\t};\n\n\t\t_proto.parseImages = function parseImages(json, onLoad) {\n\t\t\tvar scope = this;\n\t\t\tvar images = {};\n\t\t\tvar loader;\n\n\t\t\tfunction loadImage(url) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\treturn loader.load(url, function () {\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, undefined, function () {\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tfunction deserializeImage(image) {\n\t\t\t\tif (typeof image === 'string') {\n\t\t\t\t\tvar url = image;\n\t\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(url) ? url : scope.resourcePath + url;\n\t\t\t\t\treturn loadImage(path);\n\t\t\t\t} else {\n\t\t\t\t\tif (image.data) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdata: getTypedArray(image.type, image.data),\n\t\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\t\theight: image.height\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (json !== undefined && json.length > 0) {\n\t\t\t\tvar manager = new LoadingManager(onLoad);\n\t\t\t\tloader = new ImageLoader(manager);\n\t\t\t\tloader.setCrossOrigin(this.crossOrigin);\n\n\t\t\t\tfor (var i = 0, il = json.length; i < il; i++) {\n\t\t\t\t\tvar image = json[i];\n\t\t\t\t\tvar url = image.url;\n\n\t\t\t\t\tif (Array.isArray(url)) {\n\t\t\t\t\t\t// load array of images e.g CubeTexture\n\t\t\t\t\t\timages[image.uuid] = [];\n\n\t\t\t\t\t\tfor (var j = 0, jl = url.length; j < jl; j++) {\n\t\t\t\t\t\t\tvar currentUrl = url[j];\n\t\t\t\t\t\t\tvar deserializedImage = deserializeImage(currentUrl);\n\n\t\t\t\t\t\t\tif (deserializedImage !== null) {\n\t\t\t\t\t\t\t\tif (deserializedImage instanceof HTMLImageElement) {\n\t\t\t\t\t\t\t\t\timages[image.uuid].push(deserializedImage);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\t\t\t\t\t\t\t\t\timages[image.uuid].push(new DataTexture(deserializedImage.data, deserializedImage.width, deserializedImage.height));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// load single image\n\t\t\t\t\t\tvar _deserializedImage = deserializeImage(image.url);\n\n\t\t\t\t\t\tif (_deserializedImage !== null) {\n\t\t\t\t\t\t\timages[image.uuid] = _deserializedImage;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn images;\n\t\t};\n\n\t\t_proto.parseTextures = function parseTextures(json, images) {\n\t\t\tfunction parseConstant(value, type) {\n\t\t\t\tif (typeof value === 'number') return value;\n\t\t\t\tconsole.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value);\n\t\t\t\treturn type[value];\n\t\t\t}\n\n\t\t\tvar textures = {};\n\n\t\t\tif (json !== undefined) {\n\t\t\t\tfor (var i = 0, l = json.length; i < l; i++) {\n\t\t\t\t\tvar data = json[i];\n\n\t\t\t\t\tif (data.image === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: No \"image\" specified for', data.uuid);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (images[data.image] === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined image', data.image);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar texture = void 0;\n\t\t\t\t\tvar image = images[data.image];\n\n\t\t\t\t\tif (Array.isArray(image)) {\n\t\t\t\t\t\ttexture = new CubeTexture(image);\n\t\t\t\t\t\tif (image.length === 6) texture.needsUpdate = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (image && image.data) {\n\t\t\t\t\t\t\ttexture = new DataTexture(image.data, image.width, image.height);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttexture = new Texture(image);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (image) texture.needsUpdate = true; // textures can have undefined image data\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.uuid = data.uuid;\n\t\t\t\t\tif (data.name !== undefined) texture.name = data.name;\n\t\t\t\t\tif (data.mapping !== undefined) texture.mapping = parseConstant(data.mapping, TEXTURE_MAPPING);\n\t\t\t\t\tif (data.offset !== undefined) texture.offset.fromArray(data.offset);\n\t\t\t\t\tif (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);\n\t\t\t\t\tif (data.center !== undefined) texture.center.fromArray(data.center);\n\t\t\t\t\tif (data.rotation !== undefined) texture.rotation = data.rotation;\n\n\t\t\t\t\tif (data.wrap !== undefined) {\n\t\t\t\t\t\ttexture.wrapS = parseConstant(data.wrap[0], TEXTURE_WRAPPING);\n\t\t\t\t\t\ttexture.wrapT = parseConstant(data.wrap[1], TEXTURE_WRAPPING);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.format !== undefined) texture.format = data.format;\n\t\t\t\t\tif (data.type !== undefined) texture.type = data.type;\n\t\t\t\t\tif (data.encoding !== undefined) texture.encoding = data.encoding;\n\t\t\t\t\tif (data.minFilter !== undefined) texture.minFilter = parseConstant(data.minFilter, TEXTURE_FILTER);\n\t\t\t\t\tif (data.magFilter !== undefined) texture.magFilter = parseConstant(data.magFilter, TEXTURE_FILTER);\n\t\t\t\t\tif (data.anisotropy !== undefined) texture.anisotropy = data.anisotropy;\n\t\t\t\t\tif (data.flipY !== undefined) texture.flipY = data.flipY;\n\t\t\t\t\tif (data.premultiplyAlpha !== undefined) texture.premultiplyAlpha = data.premultiplyAlpha;\n\t\t\t\t\tif (data.unpackAlignment !== undefined) texture.unpackAlignment = data.unpackAlignment;\n\t\t\t\t\ttextures[data.uuid] = texture;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn textures;\n\t\t};\n\n\t\t_proto.parseObject = function parseObject(data, geometries, materials, animations) {\n\t\t\tvar object;\n\n\t\t\tfunction getGeometry(name) {\n\t\t\t\tif (geometries[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined geometry', name);\n\t\t\t\t}\n\n\t\t\t\treturn geometries[name];\n\t\t\t}\n\n\t\t\tfunction getMaterial(name) {\n\t\t\t\tif (name === undefined) return undefined;\n\n\t\t\t\tif (Array.isArray(name)) {\n\t\t\t\t\tvar array = [];\n\n\t\t\t\t\tfor (var i = 0, l = name.length; i < l; i++) {\n\t\t\t\t\t\tvar uuid = name[i];\n\n\t\t\t\t\t\tif (materials[uuid] === undefined) {\n\t\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined material', uuid);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarray.push(materials[uuid]);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn array;\n\t\t\t\t}\n\n\t\t\t\tif (materials[name] === undefined) {\n\t\t\t\t\tconsole.warn('THREE.ObjectLoader: Undefined material', name);\n\t\t\t\t}\n\n\t\t\t\treturn materials[name];\n\t\t\t}\n\n\t\t\tvar geometry, material;\n\n\t\t\tswitch (data.type) {\n\t\t\t\tcase 'Scene':\n\t\t\t\t\tobject = new Scene();\n\n\t\t\t\t\tif (data.background !== undefined) {\n\t\t\t\t\t\tif (Number.isInteger(data.background)) {\n\t\t\t\t\t\t\tobject.background = new Color(data.background);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (data.fog !== undefined) {\n\t\t\t\t\t\tif (data.fog.type === 'Fog') {\n\t\t\t\t\t\t\tobject.fog = new Fog(data.fog.color, data.fog.near, data.fog.far);\n\t\t\t\t\t\t} else if (data.fog.type === 'FogExp2') {\n\t\t\t\t\t\t\tobject.fog = new FogExp2(data.fog.color, data.fog.density);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PerspectiveCamera':\n\t\t\t\t\tobject = new PerspectiveCamera(data.fov, data.aspect, data.near, data.far);\n\t\t\t\t\tif (data.focus !== undefined) object.focus = data.focus;\n\t\t\t\t\tif (data.zoom !== undefined) object.zoom = data.zoom;\n\t\t\t\t\tif (data.filmGauge !== undefined) object.filmGauge = data.filmGauge;\n\t\t\t\t\tif (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;\n\t\t\t\t\tif (data.view !== undefined) object.view = Object.assign({}, data.view);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'OrthographicCamera':\n\t\t\t\t\tobject = new OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);\n\t\t\t\t\tif (data.zoom !== undefined) object.zoom = data.zoom;\n\t\t\t\t\tif (data.view !== undefined) object.view = Object.assign({}, data.view);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'AmbientLight':\n\t\t\t\t\tobject = new AmbientLight(data.color, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tobject = new DirectionalLight(data.color, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tobject = new PointLight(data.color, data.intensity, data.distance, data.decay);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\tobject = new RectAreaLight(data.color, data.intensity, data.width, data.height);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tobject = new SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\tobject = new HemisphereLight(data.color, data.groundColor, data.intensity);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LightProbe':\n\t\t\t\t\tobject = new LightProbe().fromJSON(data);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SkinnedMesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tobject = new SkinnedMesh(geometry, material);\n\t\t\t\t\tif (data.bindMode !== undefined) object.bindMode = data.bindMode;\n\t\t\t\t\tif (data.bindMatrix !== undefined) object.bindMatrix.fromArray(data.bindMatrix);\n\t\t\t\t\tif (data.skeleton !== undefined) object.skeleton = data.skeleton;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Mesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tobject = new Mesh(geometry, material);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'InstancedMesh':\n\t\t\t\t\tgeometry = getGeometry(data.geometry);\n\t\t\t\t\tmaterial = getMaterial(data.material);\n\t\t\t\t\tvar count = data.count;\n\t\t\t\t\tvar instanceMatrix = data.instanceMatrix;\n\t\t\t\t\tobject = new InstancedMesh(geometry, material, count);\n\t\t\t\t\tobject.instanceMatrix = new BufferAttribute(new Float32Array(instanceMatrix.array), 16);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LOD':\n\t\t\t\t\tobject = new LOD();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Line':\n\t\t\t\t\tobject = new Line(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineLoop':\n\t\t\t\t\tobject = new LineLoop(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'LineSegments':\n\t\t\t\t\tobject = new LineSegments(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointCloud':\n\t\t\t\tcase 'Points':\n\t\t\t\t\tobject = new Points(getGeometry(data.geometry), getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Sprite':\n\t\t\t\t\tobject = new Sprite(getMaterial(data.material));\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Group':\n\t\t\t\t\tobject = new Group();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Bone':\n\t\t\t\t\tobject = new Bone();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tobject = new Object3D();\n\t\t\t}\n\n\t\t\tobject.uuid = data.uuid;\n\t\t\tif (data.name !== undefined) object.name = data.name;\n\n\t\t\tif (data.matrix !== undefined) {\n\t\t\t\tobject.matrix.fromArray(data.matrix);\n\t\t\t\tif (data.matrixAutoUpdate !== undefined) object.matrixAutoUpdate = data.matrixAutoUpdate;\n\t\t\t\tif (object.matrixAutoUpdate) object.matrix.decompose(object.position, object.quaternion, object.scale);\n\t\t\t} else {\n\t\t\t\tif (data.position !== undefined) object.position.fromArray(data.position);\n\t\t\t\tif (data.rotation !== undefined) object.rotation.fromArray(data.rotation);\n\t\t\t\tif (data.quaternion !== undefined) object.quaternion.fromArray(data.quaternion);\n\t\t\t\tif (data.scale !== undefined) object.scale.fromArray(data.scale);\n\t\t\t}\n\n\t\t\tif (data.castShadow !== undefined) object.castShadow = data.castShadow;\n\t\t\tif (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;\n\n\t\t\tif (data.shadow) {\n\t\t\t\tif (data.shadow.bias !== undefined) object.shadow.bias = data.shadow.bias;\n\t\t\t\tif (data.shadow.normalBias !== undefined) object.shadow.normalBias = data.shadow.normalBias;\n\t\t\t\tif (data.shadow.radius !== undefined) object.shadow.radius = data.shadow.radius;\n\t\t\t\tif (data.shadow.mapSize !== undefined) object.shadow.mapSize.fromArray(data.shadow.mapSize);\n\t\t\t\tif (data.shadow.camera !== undefined) object.shadow.camera = this.parseObject(data.shadow.camera);\n\t\t\t}\n\n\t\t\tif (data.visible !== undefined) object.visible = data.visible;\n\t\t\tif (data.frustumCulled !== undefined) object.frustumCulled = data.frustumCulled;\n\t\t\tif (data.renderOrder !== undefined) object.renderOrder = data.renderOrder;\n\t\t\tif (data.userData !== undefined) object.userData = data.userData;\n\t\t\tif (data.layers !== undefined) object.layers.mask = data.layers;\n\n\t\t\tif (data.children !== undefined) {\n\t\t\t\tvar children = data.children;\n\n\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\tobject.add(this.parseObject(children[i], geometries, materials, animations));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (data.animations !== undefined) {\n\t\t\t\tvar objectAnimations = data.animations;\n\n\t\t\t\tfor (var _i = 0; _i < objectAnimations.length; _i++) {\n\t\t\t\t\tvar uuid = objectAnimations[_i];\n\t\t\t\t\tobject.animations.push(animations[uuid]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (data.type === 'LOD') {\n\t\t\t\tif (data.autoUpdate !== undefined) object.autoUpdate = data.autoUpdate;\n\t\t\t\tvar levels = data.levels;\n\n\t\t\t\tfor (var l = 0; l < levels.length; l++) {\n\t\t\t\t\tvar level = levels[l];\n\t\t\t\t\tvar child = object.getObjectByProperty('uuid', level.object);\n\n\t\t\t\t\tif (child !== undefined) {\n\t\t\t\t\t\tobject.addLevel(child, level.distance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn object;\n\t\t};\n\n\t\t_proto.bindSkeletons = function bindSkeletons(object, skeletons) {\n\t\t\tif (Object.keys(skeletons).length === 0) return;\n\t\t\tobject.traverse(function (child) {\n\t\t\t\tif (child.isSkinnedMesh === true && child.skeleton !== undefined) {\n\t\t\t\t\tvar skeleton = skeletons[child.skeleton];\n\n\t\t\t\t\tif (skeleton === undefined) {\n\t\t\t\t\t\tconsole.warn('THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tchild.bind(skeleton, child.bindMatrix);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t/* DEPRECATED */\n\t\t;\n\n\t\t_proto.setTexturePath = function setTexturePath(value) {\n\t\t\tconsole.warn('THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().');\n\t\t\treturn this.setResourcePath(value);\n\t\t};\n\n\t\treturn ObjectLoader;\n\t}(Loader);\n\n\tvar TEXTURE_MAPPING = {\n\t\tUVMapping: UVMapping,\n\t\tCubeReflectionMapping: CubeReflectionMapping,\n\t\tCubeRefractionMapping: CubeRefractionMapping,\n\t\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\t\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\t\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\t\tCubeUVRefractionMapping: CubeUVRefractionMapping\n\t};\n\tvar TEXTURE_WRAPPING = {\n\t\tRepeatWrapping: RepeatWrapping,\n\t\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\t\tMirroredRepeatWrapping: MirroredRepeatWrapping\n\t};\n\tvar TEXTURE_FILTER = {\n\t\tNearestFilter: NearestFilter,\n\t\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\t\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\t\tLinearFilter: LinearFilter,\n\t\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\t\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n\t};\n\n\tfunction ImageBitmapLoader(manager) {\n\t\tif (typeof createImageBitmap === 'undefined') {\n\t\t\tconsole.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.');\n\t\t}\n\n\t\tif (typeof fetch === 'undefined') {\n\t\t\tconsole.warn('THREE.ImageBitmapLoader: fetch() not supported.');\n\t\t}\n\n\t\tLoader.call(this, manager);\n\t\tthis.options = {\n\t\t\tpremultiplyAlpha: 'none'\n\t\t};\n\t}\n\n\tImageBitmapLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n\t\tconstructor: ImageBitmapLoader,\n\t\tisImageBitmapLoader: true,\n\t\tsetOptions: function setOptions(options) {\n\t\t\tthis.options = options;\n\t\t\treturn this;\n\t\t},\n\t\tload: function load(url, onLoad, onProgress, onError) {\n\t\t\tif (url === undefined) url = '';\n\t\t\tif (this.path !== undefined) url = this.path + url;\n\t\t\turl = this.manager.resolveURL(url);\n\t\t\tvar scope = this;\n\t\t\tvar cached = Cache.get(url);\n\n\t\t\tif (cached !== undefined) {\n\t\t\t\tscope.manager.itemStart(url);\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (onLoad) onLoad(cached);\n\t\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t\t}, 0);\n\t\t\t\treturn cached;\n\t\t\t}\n\n\t\t\tvar fetchOptions = {};\n\t\t\tfetchOptions.credentials = this.crossOrigin === 'anonymous' ? 'same-origin' : 'include';\n\t\t\tfetchOptions.headers = this.requestHeader;\n\t\t\tfetch(url, fetchOptions).then(function (res) {\n\t\t\t\treturn res.blob();\n\t\t\t}).then(function (blob) {\n\t\t\t\treturn createImageBitmap(blob, Object.assign(scope.options, {\n\t\t\t\t\tcolorSpaceConversion: 'none'\n\t\t\t\t}));\n\t\t\t}).then(function (imageBitmap) {\n\t\t\t\tCache.add(url, imageBitmap);\n\t\t\t\tif (onLoad) onLoad(imageBitmap);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t}).catch(function (e) {\n\t\t\t\tif (onError) onError(e);\n\t\t\t\tscope.manager.itemError(url);\n\t\t\t\tscope.manager.itemEnd(url);\n\t\t\t});\n\t\t\tscope.manager.itemStart(url);\n\t\t}\n\t});\n\n\tvar ShapePath = /*#__PURE__*/function () {\n\t\tfunction ShapePath() {\n\t\t\tthis.type = 'ShapePath';\n\t\t\tthis.color = new Color();\n\t\t\tthis.subPaths = [];\n\t\t\tthis.currentPath = null;\n\t\t}\n\n\t\tvar _proto = ShapePath.prototype;\n\n\t\t_proto.moveTo = function moveTo(x, y) {\n\t\t\tthis.currentPath = new Path();\n\t\t\tthis.subPaths.push(this.currentPath);\n\t\t\tthis.currentPath.moveTo(x, y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.lineTo = function lineTo(x, y) {\n\t\t\tthis.currentPath.lineTo(x, y);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.quadraticCurveTo = function quadraticCurveTo(aCPx, aCPy, aX, aY) {\n\t\t\tthis.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.bezierCurveTo = function bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n\t\t\tthis.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.splineThru = function splineThru(pts) {\n\t\t\tthis.currentPath.splineThru(pts);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.toShapes = function toShapes(isCCW, noHoles) {\n\t\t\tfunction toShapesNoHoles(inSubpaths) {\n\t\t\t\tvar shapes = [];\n\n\t\t\t\tfor (var i = 0, l = inSubpaths.length; i < l; i++) {\n\t\t\t\t\tvar _tmpPath = inSubpaths[i];\n\n\t\t\t\t\tvar _tmpShape = new Shape();\n\n\t\t\t\t\t_tmpShape.curves = _tmpPath.curves;\n\t\t\t\t\tshapes.push(_tmpShape);\n\t\t\t\t}\n\n\t\t\t\treturn shapes;\n\t\t\t}\n\n\t\t\tfunction isPointInsidePolygon(inPt, inPolygon) {\n\t\t\t\tvar polyLen = inPolygon.length; // inPt on polygon contour => immediate success\t\tor\n\t\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t\t//\twith the horizontal line through inPt, left of inPt\n\t\t\t\t//\tnot counting lowerY endpoints of edges and whole edges on that line\n\n\t\t\t\tvar inside = false;\n\n\t\t\t\tfor (var p = polyLen - 1, q = 0; q < polyLen; p = q++) {\n\t\t\t\t\tvar edgeLowPt = inPolygon[p];\n\t\t\t\t\tvar edgeHighPt = inPolygon[q];\n\t\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\t\tif (Math.abs(edgeDy) > Number.EPSILON) {\n\t\t\t\t\t\t// not parallel\n\t\t\t\t\t\tif (edgeDy < 0) {\n\t\t\t\t\t\t\tedgeLowPt = inPolygon[q];\n\t\t\t\t\t\t\tedgeDx = -edgeDx;\n\t\t\t\t\t\t\tedgeHighPt = inPolygon[p];\n\t\t\t\t\t\t\tedgeDy = -edgeDy;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;\n\n\t\t\t\t\t\tif (inPt.y === edgeLowPt.y) {\n\t\t\t\t\t\t\tif (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?\n\t\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);\n\t\t\t\t\t\t\tif (perpEdge === 0) return true; // inPt is on contour ?\n\n\t\t\t\t\t\t\tif (perpEdge < 0) continue;\n\t\t\t\t\t\t\tinside = !inside; // true intersection left of inPt\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// parallel or collinear\n\t\t\t\t\t\tif (inPt.y !== edgeLowPt.y) continue; // parallel\n\t\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\n\t\t\t\t\t\tif (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true; // inPt: Point on contour !\n\t\t\t\t\t\t// continue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn inside;\n\t\t\t}\n\n\t\t\tvar isClockWise = ShapeUtils.isClockWise;\n\t\t\tvar subPaths = this.subPaths;\n\t\t\tif (subPaths.length === 0) return [];\n\t\t\tif (noHoles === true) return toShapesNoHoles(subPaths);\n\t\t\tvar solid, tmpPath, tmpShape;\n\t\t\tvar shapes = [];\n\n\t\t\tif (subPaths.length === 1) {\n\t\t\t\ttmpPath = subPaths[0];\n\t\t\t\ttmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\t\tshapes.push(tmpShape);\n\t\t\t\treturn shapes;\n\t\t\t}\n\n\t\t\tvar holesFirst = !isClockWise(subPaths[0].getPoints());\n\t\t\tholesFirst = isCCW ? !holesFirst : holesFirst; // console.log(\"Holes first\", holesFirst);\n\n\t\t\tvar betterShapeHoles = [];\n\t\t\tvar newShapes = [];\n\t\t\tvar newShapeHoles = [];\n\t\t\tvar mainIdx = 0;\n\t\t\tvar tmpPoints;\n\t\t\tnewShapes[mainIdx] = undefined;\n\t\t\tnewShapeHoles[mainIdx] = [];\n\n\t\t\tfor (var i = 0, l = subPaths.length; i < l; i++) {\n\t\t\t\ttmpPath = subPaths[i];\n\t\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\t\tsolid = isClockWise(tmpPoints);\n\t\t\t\tsolid = isCCW ? !solid : solid;\n\n\t\t\t\tif (solid) {\n\t\t\t\t\tif (!holesFirst && newShapes[mainIdx]) mainIdx++;\n\t\t\t\t\tnewShapes[mainIdx] = {\n\t\t\t\t\t\ts: new Shape(),\n\t\t\t\t\t\tp: tmpPoints\n\t\t\t\t\t};\n\t\t\t\t\tnewShapes[mainIdx].s.curves = tmpPath.curves;\n\t\t\t\t\tif (holesFirst) mainIdx++;\n\t\t\t\t\tnewShapeHoles[mainIdx] = []; //console.log('cw', i);\n\t\t\t\t} else {\n\t\t\t\t\tnewShapeHoles[mainIdx].push({\n\t\t\t\t\t\th: tmpPath,\n\t\t\t\t\t\tp: tmpPoints[0]\n\t\t\t\t\t}); //console.log('ccw', i);\n\t\t\t\t}\n\t\t\t} // only Holes? -> probably all Shapes with wrong orientation\n\n\n\t\t\tif (!newShapes[0]) return toShapesNoHoles(subPaths);\n\n\t\t\tif (newShapes.length > 1) {\n\t\t\t\tvar ambiguous = false;\n\t\t\t\tvar toChange = [];\n\n\t\t\t\tfor (var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n\t\t\t\t\tbetterShapeHoles[sIdx] = [];\n\t\t\t\t}\n\n\t\t\t\tfor (var _sIdx = 0, _sLen = newShapes.length; _sIdx < _sLen; _sIdx++) {\n\t\t\t\t\tvar sho = newShapeHoles[_sIdx];\n\n\t\t\t\t\tfor (var hIdx = 0; hIdx < sho.length; hIdx++) {\n\t\t\t\t\t\tvar ho = sho[hIdx];\n\t\t\t\t\t\tvar hole_unassigned = true;\n\n\t\t\t\t\t\tfor (var s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {\n\t\t\t\t\t\t\tif (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {\n\t\t\t\t\t\t\t\tif (_sIdx !== s2Idx) toChange.push({\n\t\t\t\t\t\t\t\t\tfroms: _sIdx,\n\t\t\t\t\t\t\t\t\ttos: s2Idx,\n\t\t\t\t\t\t\t\t\thole: hIdx\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tif (hole_unassigned) {\n\t\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\t\tbetterShapeHoles[s2Idx].push(ho);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tambiguous = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (hole_unassigned) {\n\t\t\t\t\t\t\tbetterShapeHoles[_sIdx].push(ho);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} // console.log(\"ambiguous: \", ambiguous);\n\n\n\t\t\t\tif (toChange.length > 0) {\n\t\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\t\tif (!ambiguous) newShapeHoles = betterShapeHoles;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar tmpHoles;\n\n\t\t\tfor (var _i = 0, il = newShapes.length; _i < il; _i++) {\n\t\t\t\ttmpShape = newShapes[_i].s;\n\t\t\t\tshapes.push(tmpShape);\n\t\t\t\ttmpHoles = newShapeHoles[_i];\n\n\t\t\t\tfor (var j = 0, jl = tmpHoles.length; j < jl; j++) {\n\t\t\t\t\ttmpShape.holes.push(tmpHoles[j].h);\n\t\t\t\t}\n\t\t\t} //console.log(\"shape\", shapes);\n\n\n\t\t\treturn shapes;\n\t\t};\n\n\t\treturn ShapePath;\n\t}();\n\n\tvar Font = /*#__PURE__*/function () {\n\t\tfunction Font(data) {\n\t\t\tthis.type = 'Font';\n\t\t\tthis.data = data;\n\t\t}\n\n\t\tvar _proto = Font.prototype;\n\n\t\t_proto.generateShapes = function generateShapes(text, size) {\n\t\t\tif (size === void 0) {\n\t\t\t\tsize = 100;\n\t\t\t}\n\n\t\t\tvar shapes = [];\n\t\t\tvar paths = createPaths(text, size, this.data);\n\n\t\t\tfor (var p = 0, pl = paths.length; p < pl; p++) {\n\t\t\t\tArray.prototype.push.apply(shapes, paths[p].toShapes());\n\t\t\t}\n\n\t\t\treturn shapes;\n\t\t};\n\n\t\treturn Font;\n\t}();\n\n\tfunction createPaths(text, size, data) {\n\t\tvar chars = Array.from(text);\n\t\tvar scale = size / data.resolution;\n\t\tvar line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale;\n\t\tvar paths = [];\n\t\tvar offsetX = 0,\n\t\t\t\toffsetY = 0;\n\n\t\tfor (var i = 0; i < chars.length; i++) {\n\t\t\tvar char = chars[i];\n\n\t\t\tif (char === '\\n') {\n\t\t\t\toffsetX = 0;\n\t\t\t\toffsetY -= line_height;\n\t\t\t} else {\n\t\t\t\tvar ret = createPath(char, scale, offsetX, offsetY, data);\n\t\t\t\toffsetX += ret.offsetX;\n\t\t\t\tpaths.push(ret.path);\n\t\t\t}\n\t\t}\n\n\t\treturn paths;\n\t}\n\n\tfunction createPath(char, scale, offsetX, offsetY, data) {\n\t\tvar glyph = data.glyphs[char] || data.glyphs['?'];\n\n\t\tif (!glyph) {\n\t\t\tconsole.error('THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.');\n\t\t\treturn;\n\t\t}\n\n\t\tvar path = new ShapePath();\n\t\tvar x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\t\tif (glyph.o) {\n\t\t\tvar outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));\n\n\t\t\tfor (var i = 0, l = outline.length; i < l;) {\n\t\t\t\tvar action = outline[i++];\n\n\t\t\t\tswitch (action) {\n\t\t\t\t\tcase 'm':\n\t\t\t\t\t\t// moveTo\n\t\t\t\t\t\tx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\ty = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.moveTo(x, y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'l':\n\t\t\t\t\t\t// lineTo\n\t\t\t\t\t\tx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\ty = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.lineTo(x, y);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'q':\n\t\t\t\t\t\t// quadraticCurveTo\n\t\t\t\t\t\tcpx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'b':\n\t\t\t\t\t\t// bezierCurveTo\n\t\t\t\t\t\tcpx = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx1 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy1 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tcpx2 = outline[i++] * scale + offsetX;\n\t\t\t\t\t\tcpy2 = outline[i++] * scale + offsetY;\n\t\t\t\t\t\tpath.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\toffsetX: glyph.ha * scale,\n\t\t\tpath: path\n\t\t};\n\t}\n\n\tFont.prototype.isFont = true;\n\n\tvar FontLoader = /*#__PURE__*/function (_Loader) {\n\t\t_inheritsLoose(FontLoader, _Loader);\n\n\t\tfunction FontLoader(manager) {\n\t\t\treturn _Loader.call(this, manager) || this;\n\t\t}\n\n\t\tvar _proto = FontLoader.prototype;\n\n\t\t_proto.load = function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar loader = new FileLoader(this.manager);\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(scope.withCredentials);\n\t\t\tloader.load(url, function (text) {\n\t\t\t\tvar json;\n\n\t\t\t\ttry {\n\t\t\t\t\tjson = JSON.parse(text);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.warn('THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.');\n\t\t\t\t\tjson = JSON.parse(text.substring(65, text.length - 2));\n\t\t\t\t}\n\n\t\t\t\tvar font = scope.parse(json);\n\t\t\t\tif (onLoad) onLoad(font);\n\t\t\t}, onProgress, onError);\n\t\t};\n\n\t\t_proto.parse = function parse(json) {\n\t\t\treturn new Font(json);\n\t\t};\n\n\t\treturn FontLoader;\n\t}(Loader);\n\n\tvar _context;\n\n\tvar AudioContext = {\n\t\tgetContext: function getContext() {\n\t\t\tif (_context === undefined) {\n\t\t\t\t_context = new (window.AudioContext || window.webkitAudioContext)();\n\t\t\t}\n\n\t\t\treturn _context;\n\t\t},\n\t\tsetContext: function setContext(value) {\n\t\t\t_context = value;\n\t\t}\n\t};\n\n\tvar AudioLoader = /*#__PURE__*/function (_Loader) {\n\t\t_inheritsLoose(AudioLoader, _Loader);\n\n\t\tfunction AudioLoader(manager) {\n\t\t\treturn _Loader.call(this, manager) || this;\n\t\t}\n\n\t\tvar _proto = AudioLoader.prototype;\n\n\t\t_proto.load = function load(url, onLoad, onProgress, onError) {\n\t\t\tvar scope = this;\n\t\t\tvar loader = new FileLoader(this.manager);\n\t\t\tloader.setResponseType('arraybuffer');\n\t\t\tloader.setPath(this.path);\n\t\t\tloader.setRequestHeader(this.requestHeader);\n\t\t\tloader.setWithCredentials(this.withCredentials);\n\t\t\tloader.load(url, function (buffer) {\n\t\t\t\ttry {\n\t\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\t\tvar bufferCopy = buffer.slice(0);\n\t\t\t\t\tvar context = AudioContext.getContext();\n\t\t\t\t\tcontext.decodeAudioData(bufferCopy, function (audioBuffer) {\n\t\t\t\t\t\tonLoad(audioBuffer);\n\t\t\t\t\t});\n\t\t\t\t} catch (e) {\n\t\t\t\t\tif (onError) {\n\t\t\t\t\t\tonError(e);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError(url);\n\t\t\t\t}\n\t\t\t}, onProgress, onError);\n\t\t};\n\n\t\treturn AudioLoader;\n\t}(Loader);\n\n\tvar HemisphereLightProbe = /*#__PURE__*/function (_LightProbe) {\n\t\t_inheritsLoose(HemisphereLightProbe, _LightProbe);\n\n\t\tfunction HemisphereLightProbe(skyColor, groundColor, intensity) {\n\t\t\tvar _this;\n\n\t\t\tif (intensity === void 0) {\n\t\t\t\tintensity = 1;\n\t\t\t}\n\n\t\t\t_this = _LightProbe.call(this, undefined, intensity) || this;\n\t\t\tvar color1 = new Color().set(skyColor);\n\t\t\tvar color2 = new Color().set(groundColor);\n\t\t\tvar sky = new Vector3(color1.r, color1.g, color1.b);\n\t\t\tvar ground = new Vector3(color2.r, color2.g, color2.b); // without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n\n\t\t\tvar c0 = Math.sqrt(Math.PI);\n\t\t\tvar c1 = c0 * Math.sqrt(0.75);\n\n\t\t\t_this.sh.coefficients[0].copy(sky).add(ground).multiplyScalar(c0);\n\n\t\t\t_this.sh.coefficients[1].copy(sky).sub(ground).multiplyScalar(c1);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn HemisphereLightProbe;\n\t}(LightProbe);\n\n\tHemisphereLightProbe.prototype.isHemisphereLightProbe = true;\n\n\tvar AmbientLightProbe = /*#__PURE__*/function (_LightProbe) {\n\t\t_inheritsLoose(AmbientLightProbe, _LightProbe);\n\n\t\tfunction AmbientLightProbe(color, intensity) {\n\t\t\tvar _this;\n\n\t\t\tif (intensity === void 0) {\n\t\t\t\tintensity = 1;\n\t\t\t}\n\n\t\t\t_this = _LightProbe.call(this, undefined, intensity) || this;\n\t\t\tvar color1 = new Color().set(color); // without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n\n\t\t\t_this.sh.coefficients[0].set(color1.r, color1.g, color1.b).multiplyScalar(2 * Math.sqrt(Math.PI));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn AmbientLightProbe;\n\t}(LightProbe);\n\n\tAmbientLightProbe.prototype.isAmbientLightProbe = true;\n\n\tvar _eyeRight = new Matrix4();\n\n\tvar _eyeLeft = new Matrix4();\n\n\tvar StereoCamera = /*#__PURE__*/function () {\n\t\tfunction StereoCamera() {\n\t\t\tthis.type = 'StereoCamera';\n\t\t\tthis.aspect = 1;\n\t\t\tthis.eyeSep = 0.064;\n\t\t\tthis.cameraL = new PerspectiveCamera();\n\t\t\tthis.cameraL.layers.enable(1);\n\t\t\tthis.cameraL.matrixAutoUpdate = false;\n\t\t\tthis.cameraR = new PerspectiveCamera();\n\t\t\tthis.cameraR.layers.enable(2);\n\t\t\tthis.cameraR.matrixAutoUpdate = false;\n\t\t\tthis._cache = {\n\t\t\t\tfocus: null,\n\t\t\t\tfov: null,\n\t\t\t\taspect: null,\n\t\t\t\tnear: null,\n\t\t\t\tfar: null,\n\t\t\t\tzoom: null,\n\t\t\t\teyeSep: null\n\t\t\t};\n\t\t}\n\n\t\tvar _proto = StereoCamera.prototype;\n\n\t\t_proto.update = function update(camera) {\n\t\t\tvar cache = this._cache;\n\t\t\tvar needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov || cache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near || cache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\t\tif (needsUpdate) {\n\t\t\t\tcache.focus = camera.focus;\n\t\t\t\tcache.fov = camera.fov;\n\t\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\t\tcache.near = camera.near;\n\t\t\t\tcache.far = camera.far;\n\t\t\t\tcache.zoom = camera.zoom;\n\t\t\t\tcache.eyeSep = this.eyeSep; // Off-axis stereoscopic effect based on\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\n\t\t\t\tvar eyeSepHalf = cache.eyeSep / 2;\n\t\t\t\tvar eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\t\tvar ymax = cache.near * Math.tan(MathUtils.DEG2RAD * cache.fov * 0.5) / cache.zoom;\n\t\t\t\tvar xmin, xmax; // translate xOffset\n\n\t\t\t\t_eyeLeft.elements[12] = -eyeSepHalf;\n\t\t\t\t_eyeRight.elements[12] = eyeSepHalf; // for left eye\n\n\t\t\t\txmin = -ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\t\t\t\tprojectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n\t\t\t\tprojectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n\t\t\t\tthis.cameraL.projectionMatrix.copy(projectionMatrix); // for right eye\n\n\t\t\t\txmin = -ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\t\t\t\tprojectionMatrix.elements[0] = 2 * cache.near / (xmax - xmin);\n\t\t\t\tprojectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n\t\t\t\tthis.cameraR.projectionMatrix.copy(projectionMatrix);\n\t\t\t}\n\n\t\t\tthis.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(_eyeLeft);\n\t\t\tthis.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(_eyeRight);\n\t\t};\n\n\t\treturn StereoCamera;\n\t}();\n\n\tvar Clock = /*#__PURE__*/function () {\n\t\tfunction Clock(autoStart) {\n\t\t\tthis.autoStart = autoStart !== undefined ? autoStart : true;\n\t\t\tthis.startTime = 0;\n\t\t\tthis.oldTime = 0;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = false;\n\t\t}\n\n\t\tvar _proto = Clock.prototype;\n\n\t\t_proto.start = function start() {\n\t\t\tthis.startTime = now();\n\t\t\tthis.oldTime = this.startTime;\n\t\t\tthis.elapsedTime = 0;\n\t\t\tthis.running = true;\n\t\t};\n\n\t\t_proto.stop = function stop() {\n\t\t\tthis.getElapsedTime();\n\t\t\tthis.running = false;\n\t\t\tthis.autoStart = false;\n\t\t};\n\n\t\t_proto.getElapsedTime = function getElapsedTime() {\n\t\t\tthis.getDelta();\n\t\t\treturn this.elapsedTime;\n\t\t};\n\n\t\t_proto.getDelta = function getDelta() {\n\t\t\tvar diff = 0;\n\n\t\t\tif (this.autoStart && !this.running) {\n\t\t\t\tthis.start();\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (this.running) {\n\t\t\t\tvar newTime = now();\n\t\t\t\tdiff = (newTime - this.oldTime) / 1000;\n\t\t\t\tthis.oldTime = newTime;\n\t\t\t\tthis.elapsedTime += diff;\n\t\t\t}\n\n\t\t\treturn diff;\n\t\t};\n\n\t\treturn Clock;\n\t}();\n\n\tfunction now() {\n\t\treturn (typeof performance === 'undefined' ? Date : performance).now(); // see #10732\n\t}\n\n\tvar _position$2 = /*@__PURE__*/new Vector3();\n\n\tvar _quaternion$3 = /*@__PURE__*/new Quaternion();\n\n\tvar _scale$1 = /*@__PURE__*/new Vector3();\n\n\tvar _orientation = /*@__PURE__*/new Vector3();\n\n\tvar AudioListener = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(AudioListener, _Object3D);\n\n\t\tfunction AudioListener() {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.type = 'AudioListener';\n\t\t\t_this.context = AudioContext.getContext();\n\t\t\t_this.gain = _this.context.createGain();\n\n\t\t\t_this.gain.connect(_this.context.destination);\n\n\t\t\t_this.filter = null;\n\t\t\t_this.timeDelta = 0; // private\n\n\t\t\t_this._clock = new Clock();\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = AudioListener.prototype;\n\n\t\t_proto.getInput = function getInput() {\n\t\t\treturn this.gain;\n\t\t};\n\n\t\t_proto.removeFilter = function removeFilter() {\n\t\t\tif (this.filter !== null) {\n\t\t\t\tthis.gain.disconnect(this.filter);\n\t\t\t\tthis.filter.disconnect(this.context.destination);\n\t\t\t\tthis.gain.connect(this.context.destination);\n\t\t\t\tthis.filter = null;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getFilter = function getFilter() {\n\t\t\treturn this.filter;\n\t\t};\n\n\t\t_proto.setFilter = function setFilter(value) {\n\t\t\tif (this.filter !== null) {\n\t\t\t\tthis.gain.disconnect(this.filter);\n\t\t\t\tthis.filter.disconnect(this.context.destination);\n\t\t\t} else {\n\t\t\t\tthis.gain.disconnect(this.context.destination);\n\t\t\t}\n\n\t\t\tthis.filter = value;\n\t\t\tthis.gain.connect(this.filter);\n\t\t\tthis.filter.connect(this.context.destination);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getMasterVolume = function getMasterVolume() {\n\t\t\treturn this.gain.gain.value;\n\t\t};\n\n\t\t_proto.setMasterVolume = function setMasterVolume(value) {\n\t\t\tthis.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.updateMatrixWorld = function updateMatrixWorld(force) {\n\t\t\t_Object3D.prototype.updateMatrixWorld.call(this, force);\n\n\t\t\tvar listener = this.context.listener;\n\t\t\tvar up = this.up;\n\t\t\tthis.timeDelta = this._clock.getDelta();\n\t\t\tthis.matrixWorld.decompose(_position$2, _quaternion$3, _scale$1);\n\n\t\t\t_orientation.set(0, 0, -1).applyQuaternion(_quaternion$3);\n\n\t\t\tif (listener.positionX) {\n\t\t\t\t// code path for Chrome (see #14393)\n\t\t\t\tvar endTime = this.context.currentTime + this.timeDelta;\n\t\t\t\tlistener.positionX.linearRampToValueAtTime(_position$2.x, endTime);\n\t\t\t\tlistener.positionY.linearRampToValueAtTime(_position$2.y, endTime);\n\t\t\t\tlistener.positionZ.linearRampToValueAtTime(_position$2.z, endTime);\n\t\t\t\tlistener.forwardX.linearRampToValueAtTime(_orientation.x, endTime);\n\t\t\t\tlistener.forwardY.linearRampToValueAtTime(_orientation.y, endTime);\n\t\t\t\tlistener.forwardZ.linearRampToValueAtTime(_orientation.z, endTime);\n\t\t\t\tlistener.upX.linearRampToValueAtTime(up.x, endTime);\n\t\t\t\tlistener.upY.linearRampToValueAtTime(up.y, endTime);\n\t\t\t\tlistener.upZ.linearRampToValueAtTime(up.z, endTime);\n\t\t\t} else {\n\t\t\t\tlistener.setPosition(_position$2.x, _position$2.y, _position$2.z);\n\t\t\t\tlistener.setOrientation(_orientation.x, _orientation.y, _orientation.z, up.x, up.y, up.z);\n\t\t\t}\n\t\t};\n\n\t\treturn AudioListener;\n\t}(Object3D);\n\n\tvar Audio = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(Audio, _Object3D);\n\n\t\tfunction Audio(listener) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.type = 'Audio';\n\t\t\t_this.listener = listener;\n\t\t\t_this.context = listener.context;\n\t\t\t_this.gain = _this.context.createGain();\n\n\t\t\t_this.gain.connect(listener.getInput());\n\n\t\t\t_this.autoplay = false;\n\t\t\t_this.buffer = null;\n\t\t\t_this.detune = 0;\n\t\t\t_this.loop = false;\n\t\t\t_this.loopStart = 0;\n\t\t\t_this.loopEnd = 0;\n\t\t\t_this.offset = 0;\n\t\t\t_this.duration = undefined;\n\t\t\t_this.playbackRate = 1;\n\t\t\t_this.isPlaying = false;\n\t\t\t_this.hasPlaybackControl = true;\n\t\t\t_this.source = null;\n\t\t\t_this.sourceType = 'empty';\n\t\t\t_this._startedAt = 0;\n\t\t\t_this._progress = 0;\n\t\t\t_this._connected = false;\n\t\t\t_this.filters = [];\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = Audio.prototype;\n\n\t\t_proto.getOutput = function getOutput() {\n\t\t\treturn this.gain;\n\t\t};\n\n\t\t_proto.setNodeSource = function setNodeSource(audioNode) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'audioNode';\n\t\t\tthis.source = audioNode;\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setMediaElementSource = function setMediaElementSource(mediaElement) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaNode';\n\t\t\tthis.source = this.context.createMediaElementSource(mediaElement);\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setMediaStreamSource = function setMediaStreamSource(mediaStream) {\n\t\t\tthis.hasPlaybackControl = false;\n\t\t\tthis.sourceType = 'mediaStreamNode';\n\t\t\tthis.source = this.context.createMediaStreamSource(mediaStream);\n\t\t\tthis.connect();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setBuffer = function setBuffer(audioBuffer) {\n\t\t\tthis.buffer = audioBuffer;\n\t\t\tthis.sourceType = 'buffer';\n\t\t\tif (this.autoplay) this.play();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.play = function play(delay) {\n\t\t\tif (delay === void 0) {\n\t\t\t\tdelay = 0;\n\t\t\t}\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tconsole.warn('THREE.Audio: Audio is already playing.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._startedAt = this.context.currentTime + delay;\n\t\t\tvar source = this.context.createBufferSource();\n\t\t\tsource.buffer = this.buffer;\n\t\t\tsource.loop = this.loop;\n\t\t\tsource.loopStart = this.loopStart;\n\t\t\tsource.loopEnd = this.loopEnd;\n\t\t\tsource.onended = this.onEnded.bind(this);\n\t\t\tsource.start(this._startedAt, this._progress + this.offset, this.duration);\n\t\t\tthis.isPlaying = true;\n\t\t\tthis.source = source;\n\t\t\tthis.setDetune(this.detune);\n\t\t\tthis.setPlaybackRate(this.playbackRate);\n\t\t\treturn this.connect();\n\t\t};\n\n\t\t_proto.pause = function pause() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\t// update current progress\n\t\t\t\tthis._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate;\n\n\t\t\t\tif (this.loop === true) {\n\t\t\t\t\t// ensure _progress does not exceed duration with looped audios\n\t\t\t\t\tthis._progress = this._progress % (this.duration || this.buffer.duration);\n\t\t\t\t}\n\n\t\t\t\tthis.source.stop();\n\t\t\t\tthis.source.onended = null;\n\t\t\t\tthis.isPlaying = false;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.stop = function stop() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._progress = 0;\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\t\t\tthis.isPlaying = false;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.connect = function connect() {\n\t\t\tif (this.filters.length > 0) {\n\t\t\t\tthis.source.connect(this.filters[0]);\n\n\t\t\t\tfor (var i = 1, l = this.filters.length; i < l; i++) {\n\t\t\t\t\tthis.filters[i - 1].connect(this.filters[i]);\n\t\t\t\t}\n\n\t\t\t\tthis.filters[this.filters.length - 1].connect(this.getOutput());\n\t\t\t} else {\n\t\t\t\tthis.source.connect(this.getOutput());\n\t\t\t}\n\n\t\t\tthis._connected = true;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.disconnect = function disconnect() {\n\t\t\tif (this.filters.length > 0) {\n\t\t\t\tthis.source.disconnect(this.filters[0]);\n\n\t\t\t\tfor (var i = 1, l = this.filters.length; i < l; i++) {\n\t\t\t\t\tthis.filters[i - 1].disconnect(this.filters[i]);\n\t\t\t\t}\n\n\t\t\t\tthis.filters[this.filters.length - 1].disconnect(this.getOutput());\n\t\t\t} else {\n\t\t\t\tthis.source.disconnect(this.getOutput());\n\t\t\t}\n\n\t\t\tthis._connected = false;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getFilters = function getFilters() {\n\t\t\treturn this.filters;\n\t\t};\n\n\t\t_proto.setFilters = function setFilters(value) {\n\t\t\tif (!value) value = [];\n\n\t\t\tif (this._connected === true) {\n\t\t\t\tthis.disconnect();\n\t\t\t\tthis.filters = value.slice();\n\t\t\t\tthis.connect();\n\t\t\t} else {\n\t\t\t\tthis.filters = value.slice();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setDetune = function setDetune(value) {\n\t\t\tthis.detune = value;\n\t\t\tif (this.source.detune === undefined) return; // only set detune when available\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getDetune = function getDetune() {\n\t\t\treturn this.detune;\n\t\t};\n\n\t\t_proto.getFilter = function getFilter() {\n\t\t\treturn this.getFilters()[0];\n\t\t};\n\n\t\t_proto.setFilter = function setFilter(filter) {\n\t\t\treturn this.setFilters(filter ? [filter] : []);\n\t\t};\n\n\t\t_proto.setPlaybackRate = function setPlaybackRate(value) {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.playbackRate = value;\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getPlaybackRate = function getPlaybackRate() {\n\t\t\treturn this.playbackRate;\n\t\t};\n\n\t\t_proto.onEnded = function onEnded() {\n\t\t\tthis.isPlaying = false;\n\t\t};\n\n\t\t_proto.getLoop = function getLoop() {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn this.loop;\n\t\t};\n\n\t\t_proto.setLoop = function setLoop(value) {\n\t\t\tif (this.hasPlaybackControl === false) {\n\t\t\t\tconsole.warn('THREE.Audio: this Audio has no playback control.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.loop = value;\n\n\t\t\tif (this.isPlaying === true) {\n\t\t\t\tthis.source.loop = this.loop;\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setLoopStart = function setLoopStart(value) {\n\t\t\tthis.loopStart = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setLoopEnd = function setLoopEnd(value) {\n\t\t\tthis.loopEnd = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getVolume = function getVolume() {\n\t\t\treturn this.gain.gain.value;\n\t\t};\n\n\t\t_proto.setVolume = function setVolume(value) {\n\t\t\tthis.gain.gain.setTargetAtTime(value, this.context.currentTime, 0.01);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn Audio;\n\t}(Object3D);\n\n\tvar _position$3 = /*@__PURE__*/new Vector3();\n\n\tvar _quaternion$4 = /*@__PURE__*/new Quaternion();\n\n\tvar _scale$2 = /*@__PURE__*/new Vector3();\n\n\tvar _orientation$1 = /*@__PURE__*/new Vector3();\n\n\tvar PositionalAudio = /*#__PURE__*/function (_Audio) {\n\t\t_inheritsLoose(PositionalAudio, _Audio);\n\n\t\tfunction PositionalAudio(listener) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Audio.call(this, listener) || this;\n\t\t\t_this.panner = _this.context.createPanner();\n\t\t\t_this.panner.panningModel = 'HRTF';\n\n\t\t\t_this.panner.connect(_this.gain);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = PositionalAudio.prototype;\n\n\t\t_proto.getOutput = function getOutput() {\n\t\t\treturn this.panner;\n\t\t};\n\n\t\t_proto.getRefDistance = function getRefDistance() {\n\t\t\treturn this.panner.refDistance;\n\t\t};\n\n\t\t_proto.setRefDistance = function setRefDistance(value) {\n\t\t\tthis.panner.refDistance = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getRolloffFactor = function getRolloffFactor() {\n\t\t\treturn this.panner.rolloffFactor;\n\t\t};\n\n\t\t_proto.setRolloffFactor = function setRolloffFactor(value) {\n\t\t\tthis.panner.rolloffFactor = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getDistanceModel = function getDistanceModel() {\n\t\t\treturn this.panner.distanceModel;\n\t\t};\n\n\t\t_proto.setDistanceModel = function setDistanceModel(value) {\n\t\t\tthis.panner.distanceModel = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getMaxDistance = function getMaxDistance() {\n\t\t\treturn this.panner.maxDistance;\n\t\t};\n\n\t\t_proto.setMaxDistance = function setMaxDistance(value) {\n\t\t\tthis.panner.maxDistance = value;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setDirectionalCone = function setDirectionalCone(coneInnerAngle, coneOuterAngle, coneOuterGain) {\n\t\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\t\tthis.panner.coneOuterGain = coneOuterGain;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.updateMatrixWorld = function updateMatrixWorld(force) {\n\t\t\t_Audio.prototype.updateMatrixWorld.call(this, force);\n\n\t\t\tif (this.hasPlaybackControl === true && this.isPlaying === false) return;\n\t\t\tthis.matrixWorld.decompose(_position$3, _quaternion$4, _scale$2);\n\n\t\t\t_orientation$1.set(0, 0, 1).applyQuaternion(_quaternion$4);\n\n\t\t\tvar panner = this.panner;\n\n\t\t\tif (panner.positionX) {\n\t\t\t\t// code path for Chrome and Firefox (see #14393)\n\t\t\t\tvar endTime = this.context.currentTime + this.listener.timeDelta;\n\t\t\t\tpanner.positionX.linearRampToValueAtTime(_position$3.x, endTime);\n\t\t\t\tpanner.positionY.linearRampToValueAtTime(_position$3.y, endTime);\n\t\t\t\tpanner.positionZ.linearRampToValueAtTime(_position$3.z, endTime);\n\t\t\t\tpanner.orientationX.linearRampToValueAtTime(_orientation$1.x, endTime);\n\t\t\t\tpanner.orientationY.linearRampToValueAtTime(_orientation$1.y, endTime);\n\t\t\t\tpanner.orientationZ.linearRampToValueAtTime(_orientation$1.z, endTime);\n\t\t\t} else {\n\t\t\t\tpanner.setPosition(_position$3.x, _position$3.y, _position$3.z);\n\t\t\t\tpanner.setOrientation(_orientation$1.x, _orientation$1.y, _orientation$1.z);\n\t\t\t}\n\t\t};\n\n\t\treturn PositionalAudio;\n\t}(Audio);\n\n\tvar AudioAnalyser = /*#__PURE__*/function () {\n\t\tfunction AudioAnalyser(audio, fftSize) {\n\t\t\tif (fftSize === void 0) {\n\t\t\t\tfftSize = 2048;\n\t\t\t}\n\n\t\t\tthis.analyser = audio.context.createAnalyser();\n\t\t\tthis.analyser.fftSize = fftSize;\n\t\t\tthis.data = new Uint8Array(this.analyser.frequencyBinCount);\n\t\t\taudio.getOutput().connect(this.analyser);\n\t\t}\n\n\t\tvar _proto = AudioAnalyser.prototype;\n\n\t\t_proto.getFrequencyData = function getFrequencyData() {\n\t\t\tthis.analyser.getByteFrequencyData(this.data);\n\t\t\treturn this.data;\n\t\t};\n\n\t\t_proto.getAverageFrequency = function getAverageFrequency() {\n\t\t\tvar value = 0;\n\t\t\tvar data = this.getFrequencyData();\n\n\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\tvalue += data[i];\n\t\t\t}\n\n\t\t\treturn value / data.length;\n\t\t};\n\n\t\treturn AudioAnalyser;\n\t}();\n\n\tvar PropertyMixer = /*#__PURE__*/function () {\n\t\tfunction PropertyMixer(binding, typeName, valueSize) {\n\t\t\tthis.binding = binding;\n\t\t\tthis.valueSize = valueSize;\n\t\t\tvar mixFunction, mixFunctionAdditive, setIdentity; // buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n\t\t\t//\n\t\t\t// interpolators can use .buffer as their .result\n\t\t\t// the data then goes to 'incoming'\n\t\t\t//\n\t\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t\t// the cumulative result and are compared to detect\n\t\t\t// changes\n\t\t\t//\n\t\t\t// 'orig' stores the original state of the property\n\t\t\t//\n\t\t\t// 'add' is used for additive cumulative results\n\t\t\t//\n\t\t\t// 'work' is optional and is only present for quaternion types. It is used\n\t\t\t// to store intermediate quaternion multiplication results\n\n\t\t\tswitch (typeName) {\n\t\t\t\tcase 'quaternion':\n\t\t\t\t\tmixFunction = this._slerp;\n\t\t\t\t\tmixFunctionAdditive = this._slerpAdditive;\n\t\t\t\t\tsetIdentity = this._setAdditiveIdentityQuaternion;\n\t\t\t\t\tthis.buffer = new Float64Array(valueSize * 6);\n\t\t\t\t\tthis._workIndex = 5;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'string':\n\t\t\t\tcase 'bool':\n\t\t\t\t\tmixFunction = this._select; // Use the regular mix function and for additive on these types,\n\t\t\t\t\t// additive is not relevant for non-numeric types\n\n\t\t\t\t\tmixFunctionAdditive = this._select;\n\t\t\t\t\tsetIdentity = this._setAdditiveIdentityOther;\n\t\t\t\t\tthis.buffer = new Array(valueSize * 5);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tmixFunction = this._lerp;\n\t\t\t\t\tmixFunctionAdditive = this._lerpAdditive;\n\t\t\t\t\tsetIdentity = this._setAdditiveIdentityNumeric;\n\t\t\t\t\tthis.buffer = new Float64Array(valueSize * 5);\n\t\t\t}\n\n\t\t\tthis._mixBufferRegion = mixFunction;\n\t\t\tthis._mixBufferRegionAdditive = mixFunctionAdditive;\n\t\t\tthis._setIdentity = setIdentity;\n\t\t\tthis._origIndex = 3;\n\t\t\tthis._addIndex = 4;\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\t\t\tthis.useCount = 0;\n\t\t\tthis.referenceCount = 0;\n\t\t} // accumulate data in the 'incoming' region into 'accu<i>'\n\n\n\t\tvar _proto = PropertyMixer.prototype;\n\n\t\t_proto.accumulate = function accumulate(accuIndex, weight) {\n\t\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t\t// the weight and shouldn't have made the call in the first place\n\t\t\tvar buffer = this.buffer,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toffset = accuIndex * stride + stride;\n\t\t\tvar currentWeight = this.cumulativeWeight;\n\n\t\t\tif (currentWeight === 0) {\n\t\t\t\t// accuN := incoming * weight\n\t\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\t\tbuffer[offset + i] = buffer[i];\n\t\t\t\t}\n\n\t\t\t\tcurrentWeight = weight;\n\t\t\t} else {\n\t\t\t\t// accuN := accuN + incoming * weight\n\t\t\t\tcurrentWeight += weight;\n\t\t\t\tvar mix = weight / currentWeight;\n\n\t\t\t\tthis._mixBufferRegion(buffer, offset, 0, mix, stride);\n\t\t\t}\n\n\t\t\tthis.cumulativeWeight = currentWeight;\n\t\t} // accumulate data in the 'incoming' region into 'add'\n\t\t;\n\n\t\t_proto.accumulateAdditive = function accumulateAdditive(weight) {\n\t\t\tvar buffer = this.buffer,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toffset = stride * this._addIndex;\n\n\t\t\tif (this.cumulativeWeightAdditive === 0) {\n\t\t\t\t// add = identity\n\t\t\t\tthis._setIdentity();\n\t\t\t} // add := add + incoming * weight\n\n\n\t\t\tthis._mixBufferRegionAdditive(buffer, offset, 0, weight, stride);\n\n\t\t\tthis.cumulativeWeightAdditive += weight;\n\t\t} // apply the state of 'accu<i>' to the binding when accus differ\n\t\t;\n\n\t\t_proto.apply = function apply(accuIndex) {\n\t\t\tvar stride = this.valueSize,\n\t\t\t\t\tbuffer = this.buffer,\n\t\t\t\t\toffset = accuIndex * stride + stride,\n\t\t\t\t\tweight = this.cumulativeWeight,\n\t\t\t\t\tweightAdditive = this.cumulativeWeightAdditive,\n\t\t\t\t\tbinding = this.binding;\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\t\tif (weight < 1) {\n\t\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\t\t\t\tvar originalValueOffset = stride * this._origIndex;\n\n\t\t\t\tthis._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);\n\t\t\t}\n\n\t\t\tif (weightAdditive > 0) {\n\t\t\t\t// accuN := accuN + additive accuN\n\t\t\t\tthis._mixBufferRegionAdditive(buffer, offset, this._addIndex * stride, 1, stride);\n\t\t\t}\n\n\t\t\tfor (var i = stride, e = stride + stride; i !== e; ++i) {\n\t\t\t\tif (buffer[i] !== buffer[i + stride]) {\n\t\t\t\t\t// value has changed -> update scene graph\n\t\t\t\t\tbinding.setValue(buffer, offset);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} // remember the state of the bound property and copy it to both accus\n\t\t;\n\n\t\t_proto.saveOriginalState = function saveOriginalState() {\n\t\t\tvar binding = this.binding;\n\t\t\tvar buffer = this.buffer,\n\t\t\t\t\tstride = this.valueSize,\n\t\t\t\t\toriginalValueOffset = stride * this._origIndex;\n\t\t\tbinding.getValue(buffer, originalValueOffset); // accu[0..1] := orig -- initially detect changes against the original\n\n\t\t\tfor (var i = stride, e = originalValueOffset; i !== e; ++i) {\n\t\t\t\tbuffer[i] = buffer[originalValueOffset + i % stride];\n\t\t\t} // Add to identity for additive\n\n\n\t\t\tthis._setIdentity();\n\n\t\t\tthis.cumulativeWeight = 0;\n\t\t\tthis.cumulativeWeightAdditive = 0;\n\t\t} // apply the state previously taken via 'saveOriginalState' to the binding\n\t\t;\n\n\t\t_proto.restoreOriginalState = function restoreOriginalState() {\n\t\t\tvar originalValueOffset = this.valueSize * 3;\n\t\t\tthis.binding.setValue(this.buffer, originalValueOffset);\n\t\t};\n\n\t\t_proto._setAdditiveIdentityNumeric = function _setAdditiveIdentityNumeric() {\n\t\t\tvar startIndex = this._addIndex * this.valueSize;\n\t\t\tvar endIndex = startIndex + this.valueSize;\n\n\t\t\tfor (var i = startIndex; i < endIndex; i++) {\n\t\t\t\tthis.buffer[i] = 0;\n\t\t\t}\n\t\t};\n\n\t\t_proto._setAdditiveIdentityQuaternion = function _setAdditiveIdentityQuaternion() {\n\t\t\tthis._setAdditiveIdentityNumeric();\n\n\t\t\tthis.buffer[this._addIndex * this.valueSize + 3] = 1;\n\t\t};\n\n\t\t_proto._setAdditiveIdentityOther = function _setAdditiveIdentityOther() {\n\t\t\tvar startIndex = this._origIndex * this.valueSize;\n\t\t\tvar targetIndex = this._addIndex * this.valueSize;\n\n\t\t\tfor (var i = 0; i < this.valueSize; i++) {\n\t\t\t\tthis.buffer[targetIndex + i] = this.buffer[startIndex + i];\n\t\t\t}\n\t\t} // mix functions\n\t\t;\n\n\t\t_proto._select = function _select(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tif (t >= 0.5) {\n\t\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\t\tbuffer[dstOffset + i] = buffer[srcOffset + i];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t_proto._slerp = function _slerp(buffer, dstOffset, srcOffset, t) {\n\t\t\tQuaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);\n\t\t};\n\n\t\t_proto._slerpAdditive = function _slerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tvar workOffset = this._workIndex * stride; // Store result in intermediate buffer offset\n\n\t\t\tQuaternion.multiplyQuaternionsFlat(buffer, workOffset, buffer, dstOffset, buffer, srcOffset); // Slerp to the intermediate result\n\n\t\t\tQuaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t);\n\t\t};\n\n\t\t_proto._lerp = function _lerp(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tvar s = 1 - t;\n\n\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\tvar j = dstOffset + i;\n\t\t\t\tbuffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;\n\t\t\t}\n\t\t};\n\n\t\t_proto._lerpAdditive = function _lerpAdditive(buffer, dstOffset, srcOffset, t, stride) {\n\t\t\tfor (var i = 0; i !== stride; ++i) {\n\t\t\t\tvar j = dstOffset + i;\n\t\t\t\tbuffer[j] = buffer[j] + buffer[srcOffset + i] * t;\n\t\t\t}\n\t\t};\n\n\t\treturn PropertyMixer;\n\t}();\n\n\t// Characters [].:/ are reserved for track binding syntax.\n\tvar _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\n\n\tvar _reservedRe = new RegExp('[' + _RESERVED_CHARS_RE + ']', 'g'); // Attempts to allow node names from any language. ES5's `\\w` regexp matches\n\t// only latin characters, and the unicode \\p{L} is not yet supported. So\n\t// instead, we exclude reserved characters and match everything else.\n\n\n\tvar _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\n\n\tvar _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace('\\\\.', '') + ']'; // Parent directories, delimited by '/' or ':'. Currently unused, but must\n\t// be matched to parse the rest of the track name.\n\n\n\tvar _directoryRe = /((?:WC+[\\/:])*)/.source.replace('WC', _wordChar); // Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\n\n\n\tvar _nodeRe = /(WCOD+)?/.source.replace('WCOD', _wordCharOrDot); // Object on target node, and accessor. May not contain reserved\n\t// characters. Accessor may contain any character except closing bracket.\n\n\n\tvar _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace('WC', _wordChar); // Property and accessor. May not contain reserved characters. Accessor may\n\t// contain any non-bracket characters.\n\n\n\tvar _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace('WC', _wordChar);\n\n\tvar _trackRe = new RegExp('' + '^' + _directoryRe + _nodeRe + _objectRe + _propertyRe + '$');\n\n\tvar _supportedObjectNames = ['material', 'materials', 'bones'];\n\n\tfunction Composite(targetGroup, path, optionalParsedPath) {\n\t\tvar parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_(path, parsedPath);\n\t}\n\n\tObject.assign(Composite.prototype, {\n\t\tgetValue: function getValue(array, offset) {\n\t\t\tthis.bind(); // bind all binding\n\n\t\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\t\t\tbinding = this._bindings[firstValidIndex]; // and only call .getValue on the first\n\n\t\t\tif (binding !== undefined) binding.getValue(array, offset);\n\t\t},\n\t\tsetValue: function setValue(array, offset) {\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].setValue(array, offset);\n\t\t\t}\n\t\t},\n\t\tbind: function bind() {\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].bind();\n\t\t\t}\n\t\t},\n\t\tunbind: function unbind() {\n\t\t\tvar bindings = this._bindings;\n\n\t\t\tfor (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n\t\t\t\tbindings[i].unbind();\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction PropertyBinding(rootNode, path, parsedPath) {\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName(path);\n\t\tthis.node = PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;\n\t\tthis.rootNode = rootNode;\n\t}\n\n\tObject.assign(PropertyBinding, {\n\t\tComposite: Composite,\n\t\tcreate: function create(root, path, parsedPath) {\n\t\t\tif (!(root && root.isAnimationObjectGroup)) {\n\t\t\t\treturn new PropertyBinding(root, path, parsedPath);\n\t\t\t} else {\n\t\t\t\treturn new PropertyBinding.Composite(root, path, parsedPath);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Replaces spaces with underscores and removes unsupported characters from\n\t\t * node names, to ensure compatibility with parseTrackName().\n\t\t *\n\t\t * @param {string} name Node name to be sanitized.\n\t\t * @return {string}\n\t\t */\n\t\tsanitizeNodeName: function sanitizeNodeName(name) {\n\t\t\treturn name.replace(/\\s/g, '_').replace(_reservedRe, '');\n\t\t},\n\t\tparseTrackName: function parseTrackName(trackName) {\n\t\t\tvar matches = _trackRe.exec(trackName);\n\n\t\t\tif (!matches) {\n\t\t\t\tthrow new Error('PropertyBinding: Cannot parse trackName: ' + trackName);\n\t\t\t}\n\n\t\t\tvar results = {\n\t\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\t\tnodeName: matches[2],\n\t\t\t\tobjectName: matches[3],\n\t\t\t\tobjectIndex: matches[4],\n\t\t\t\tpropertyName: matches[5],\n\t\t\t\t// required\n\t\t\t\tpropertyIndex: matches[6]\n\t\t\t};\n\t\t\tvar lastDot = results.nodeName && results.nodeName.lastIndexOf('.');\n\n\t\t\tif (lastDot !== undefined && lastDot !== -1) {\n\t\t\t\tvar objectName = results.nodeName.substring(lastDot + 1); // Object names must be checked against an allowlist. Otherwise, there\n\t\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t\t// include '.' characters).\n\n\t\t\t\tif (_supportedObjectNames.indexOf(objectName) !== -1) {\n\t\t\t\t\tresults.nodeName = results.nodeName.substring(0, lastDot);\n\t\t\t\t\tresults.objectName = objectName;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (results.propertyName === null || results.propertyName.length === 0) {\n\t\t\t\tthrow new Error('PropertyBinding: can not parse propertyName from trackName: ' + trackName);\n\t\t\t}\n\n\t\t\treturn results;\n\t\t},\n\t\tfindNode: function findNode(root, nodeName) {\n\t\t\tif (!nodeName || nodeName === '' || nodeName === '.' || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {\n\t\t\t\treturn root;\n\t\t\t} // search into skeleton bones.\n\n\n\t\t\tif (root.skeleton) {\n\t\t\t\tvar bone = root.skeleton.getBoneByName(nodeName);\n\n\t\t\t\tif (bone !== undefined) {\n\t\t\t\t\treturn bone;\n\t\t\t\t}\n\t\t\t} // search into node subtree.\n\n\n\t\t\tif (root.children) {\n\t\t\t\tvar searchNodeSubtree = function searchNodeSubtree(children) {\n\t\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\t\tvar childNode = children[i];\n\n\t\t\t\t\t\tif (childNode.name === nodeName || childNode.uuid === nodeName) {\n\t\t\t\t\t\t\treturn childNode;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar result = searchNodeSubtree(childNode.children);\n\t\t\t\t\t\tif (result) return result;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t};\n\n\t\t\t\tvar subTreeNode = searchNodeSubtree(root.children);\n\n\t\t\t\tif (subTreeNode) {\n\t\t\t\t\treturn subTreeNode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t});\n\tObject.assign(PropertyBinding.prototype, {\n\t\t// prototype, continued\n\t\t// these are used to \"bind\" a nonexistent property\n\t\t_getValue_unavailable: function _getValue_unavailable() {},\n\t\t_setValue_unavailable: function _setValue_unavailable() {},\n\t\tBindingType: {\n\t\t\tDirect: 0,\n\t\t\tEntireArray: 1,\n\t\t\tArrayElement: 2,\n\t\t\tHasFromToArray: 3\n\t\t},\n\t\tVersioning: {\n\t\t\tNone: 0,\n\t\t\tNeedsUpdate: 1,\n\t\t\tMatrixWorldNeedsUpdate: 2\n\t\t},\n\t\tGetterByBindingType: [function getValue_direct(buffer, offset) {\n\t\t\tbuffer[offset] = this.node[this.propertyName];\n\t\t}, function getValue_array(buffer, offset) {\n\t\t\tvar source = this.resolvedProperty;\n\n\t\t\tfor (var i = 0, n = source.length; i !== n; ++i) {\n\t\t\t\tbuffer[offset++] = source[i];\n\t\t\t}\n\t\t}, function getValue_arrayElement(buffer, offset) {\n\t\t\tbuffer[offset] = this.resolvedProperty[this.propertyIndex];\n\t\t}, function getValue_toArray(buffer, offset) {\n\t\t\tthis.resolvedProperty.toArray(buffer, offset);\n\t\t}],\n\t\tSetterByBindingTypeAndVersioning: [[// Direct\n\t\tfunction setValue_direct(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t}, function setValue_direct_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}, function setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.targetObject[this.propertyName] = buffer[offset];\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}], [// EntireArray\n\t\tfunction setValue_array(buffer, offset) {\n\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\tfor (var i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\t\t}, function setValue_array_setNeedsUpdate(buffer, offset) {\n\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\tfor (var i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}, function setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tvar dest = this.resolvedProperty;\n\n\t\t\tfor (var i = 0, n = dest.length; i !== n; ++i) {\n\t\t\t\tdest[i] = buffer[offset++];\n\t\t\t}\n\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}], [// ArrayElement\n\t\tfunction setValue_arrayElement(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t}, function setValue_arrayElement_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}, function setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty[this.propertyIndex] = buffer[offset];\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}], [// HasToFromArray\n\t\tfunction setValue_fromArray(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t}, function setValue_fromArray_setNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t\tthis.targetObject.needsUpdate = true;\n\t\t}, function setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {\n\t\t\tthis.resolvedProperty.fromArray(buffer, offset);\n\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\t\t}]],\n\t\tgetValue: function getValue_unbound(targetArray, offset) {\n\t\t\tthis.bind();\n\t\t\tthis.getValue(targetArray, offset); // Note: This class uses a State pattern on a per-method basis:\n\t\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n\t\t\t// prototype version of these methods with one that represents\n\t\t\t// the bound state. When the property is not found, the methods\n\t\t\t// become no-ops.\n\t\t},\n\t\tsetValue: function getValue_unbound(sourceArray, offset) {\n\t\t\tthis.bind();\n\t\t\tthis.setValue(sourceArray, offset);\n\t\t},\n\t\t// create getter / setter pair for a property in the scene graph\n\t\tbind: function bind() {\n\t\t\tvar targetObject = this.node;\n\t\t\tvar parsedPath = this.parsedPath;\n\t\t\tvar objectName = parsedPath.objectName;\n\t\t\tvar propertyName = parsedPath.propertyName;\n\t\t\tvar propertyIndex = parsedPath.propertyIndex;\n\n\t\t\tif (!targetObject) {\n\t\t\t\ttargetObject = PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;\n\t\t\t\tthis.node = targetObject;\n\t\t\t} // set fail state so we can just 'return' on error\n\n\n\t\t\tthis.getValue = this._getValue_unavailable;\n\t\t\tthis.setValue = this._setValue_unavailable; // ensure there is a value node\n\n\t\t\tif (!targetObject) {\n\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (objectName) {\n\t\t\t\tvar objectIndex = parsedPath.objectIndex; // special cases were we need to reach deeper into the hierarchy to get the face materials....\n\n\t\t\t\tswitch (objectName) {\n\t\t\t\t\tcase 'materials':\n\t\t\t\t\t\tif (!targetObject.material) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to material as node does not have a material.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!targetObject.material.materials) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject.material.materials;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'bones':\n\t\t\t\t\t\tif (!targetObject.skeleton) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} // potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t\t// and convert the integer string to a true integer.\n\n\n\t\t\t\t\t\ttargetObject = targetObject.skeleton.bones; // support resolving morphTarget names into indices.\n\n\t\t\t\t\t\tfor (var i = 0; i < targetObject.length; i++) {\n\t\t\t\t\t\t\tif (targetObject[i].name === objectIndex) {\n\t\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (targetObject[objectName] === undefined) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to objectName of node undefined.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetObject = targetObject[objectName];\n\t\t\t\t}\n\n\t\t\t\tif (objectIndex !== undefined) {\n\t\t\t\t\tif (targetObject[objectIndex] === undefined) {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[objectIndex];\n\t\t\t\t}\n\t\t\t} // resolve property\n\n\n\t\t\tvar nodeProperty = targetObject[propertyName];\n\n\t\t\tif (nodeProperty === undefined) {\n\t\t\t\tvar nodeName = parsedPath.nodeName;\n\t\t\t\tconsole.error('THREE.PropertyBinding: Trying to update property for track: ' + nodeName + '.' + propertyName + ' but it wasn\\'t found.', targetObject);\n\t\t\t\treturn;\n\t\t\t} // determine versioning scheme\n\n\n\t\t\tvar versioning = this.Versioning.None;\n\t\t\tthis.targetObject = targetObject;\n\n\t\t\tif (targetObject.needsUpdate !== undefined) {\n\t\t\t\t// material\n\t\t\t\tversioning = this.Versioning.NeedsUpdate;\n\t\t\t} else if (targetObject.matrixWorldNeedsUpdate !== undefined) {\n\t\t\t\t// node transform\n\t\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\t\t\t} // determine how the property gets bound\n\n\n\t\t\tvar bindingType = this.BindingType.Direct;\n\n\t\t\tif (propertyIndex !== undefined) {\n\t\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\t\t\t\tif (propertyName === 'morphTargetInfluences') {\n\t\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tif (!targetObject.geometry) {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (targetObject.geometry.isBufferGeometry) {\n\t\t\t\t\t\tif (!targetObject.geometry.morphAttributes) {\n\t\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (targetObject.morphTargetDictionary[propertyIndex] !== undefined) {\n\t\t\t\t\t\t\tpropertyIndex = targetObject.morphTargetDictionary[propertyIndex];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.', this);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbindingType = this.BindingType.ArrayElement;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t\tthis.propertyIndex = propertyIndex;\n\t\t\t} else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {\n\t\t\t\t// must use copy for Object3D.Euler/Quaternion\n\t\t\t\tbindingType = this.BindingType.HasFromToArray;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t} else if (Array.isArray(nodeProperty)) {\n\t\t\t\tbindingType = this.BindingType.EntireArray;\n\t\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\t} else {\n\t\t\t\tthis.propertyName = propertyName;\n\t\t\t} // select getter / setter\n\n\n\t\t\tthis.getValue = this.GetterByBindingType[bindingType];\n\t\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];\n\t\t},\n\t\tunbind: function unbind() {\n\t\t\tthis.node = null; // back to the prototype version of getValue / setValue\n\t\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\n\t\t\tthis.getValue = this._getValue_unbound;\n\t\t\tthis.setValue = this._setValue_unbound;\n\t\t}\n\t}); // DECLARE ALIAS AFTER assign prototype\n\n\tObject.assign(PropertyBinding.prototype, {\n\t\t// initial state of these methods that calls 'bind'\n\t\t_getValue_unbound: PropertyBinding.prototype.getValue,\n\t\t_setValue_unbound: PropertyBinding.prototype.setValue\n\t});\n\n\t/**\n\t *\n\t * A group of objects that receives a shared animation state.\n\t *\n\t * Usage:\n\t *\n\t *\t- Add objects you would otherwise pass as 'root' to the\n\t *\t\tconstructor or the .clipAction method of AnimationMixer.\n\t *\n\t *\t- Instead pass this object as 'root'.\n\t *\n\t *\t- You can also add and remove objects later when the mixer\n\t *\t\tis running.\n\t *\n\t * Note:\n\t *\n\t *\t\tObjects of this class appear as one object to the mixer,\n\t *\t\tso cache control of the individual objects must be done\n\t *\t\ton the group.\n\t *\n\t * Limitation:\n\t *\n\t *\t- The animated properties must be compatible among the\n\t *\t\tall objects in the group.\n\t *\n\t *\t- A single property can either be controlled through a\n\t *\t\ttarget group or directly, but not both.\n\t */\n\n\tvar AnimationObjectGroup = /*#__PURE__*/function () {\n\t\tfunction AnimationObjectGroup() {\n\t\t\tthis.uuid = MathUtils.generateUUID(); // cached objects followed by the active ones\n\n\t\t\tthis._objects = Array.prototype.slice.call(arguments);\n\t\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t\t// note: read by PropertyBinding.Composite\n\n\t\t\tvar indices = {};\n\t\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\t\tfor (var i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tindices[arguments[i].uuid] = i;\n\t\t\t}\n\n\t\t\tthis._paths = []; // inside: string\n\n\t\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\n\t\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\n\t\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\t\tvar scope = this;\n\t\t\tthis.stats = {\n\t\t\t\tobjects: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._objects.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tget bindingsPerObject() {\n\t\t\t\t\treturn scope._bindings.length;\n\t\t\t\t}\n\n\t\t\t};\n\t\t}\n\n\t\tvar _proto = AnimationObjectGroup.prototype;\n\n\t\t_proto.add = function add() {\n\t\t\tvar objects = this._objects,\n\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\tpaths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tnBindings = bindings.length;\n\t\t\tvar knownObject = undefined,\n\t\t\t\t\tnObjects = objects.length,\n\t\t\t\t\tnCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor (var i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tvar object = arguments[i],\n\t\t\t\t\t\tuuid = object.uuid;\n\t\t\t\tvar index = indicesByUUID[uuid];\n\n\t\t\t\tif (index === undefined) {\n\t\t\t\t\t// unknown object -> add it to the ACTIVE region\n\t\t\t\t\tindex = nObjects++;\n\t\t\t\t\tindicesByUUID[uuid] = index;\n\t\t\t\t\tobjects.push(object); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (var j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tbindings[j].push(new PropertyBinding(object, paths[j], parsedPaths[j]));\n\t\t\t\t\t}\n\t\t\t\t} else if (index < nCachedObjects) {\n\t\t\t\t\tknownObject = objects[index]; // move existing object to the ACTIVE region\n\n\t\t\t\t\tvar firstActiveIndex = --nCachedObjects,\n\t\t\t\t\t\t\tlastCachedObject = objects[firstActiveIndex];\n\t\t\t\t\tindicesByUUID[lastCachedObject.uuid] = index;\n\t\t\t\t\tobjects[index] = lastCachedObject;\n\t\t\t\t\tindicesByUUID[uuid] = firstActiveIndex;\n\t\t\t\t\tobjects[firstActiveIndex] = object; // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (var _j = 0, _m = nBindings; _j !== _m; ++_j) {\n\t\t\t\t\t\tvar bindingsForPath = bindings[_j],\n\t\t\t\t\t\t\t\tlastCached = bindingsForPath[firstActiveIndex];\n\t\t\t\t\t\tvar binding = bindingsForPath[index];\n\t\t\t\t\t\tbindingsForPath[index] = lastCached;\n\n\t\t\t\t\t\tif (binding === undefined) {\n\t\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t\t// or may not exist\n\t\t\t\t\t\t\tbinding = new PropertyBinding(object, paths[_j], parsedPaths[_j]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbindingsForPath[firstActiveIndex] = binding;\n\t\t\t\t\t}\n\t\t\t\t} else if (objects[index] !== knownObject) {\n\t\t\t\t\tconsole.error('THREE.AnimationObjectGroup: Different objects with the same UUID ' + 'detected. Clean the caches or recreate your infrastructure when reloading scenes.');\n\t\t\t\t} // else the object is already where we want it to be\n\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t};\n\n\t\t_proto.remove = function remove() {\n\t\t\tvar objects = this._objects,\n\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tnBindings = bindings.length;\n\t\t\tvar nCachedObjects = this.nCachedObjects_;\n\n\t\t\tfor (var i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tvar object = arguments[i],\n\t\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\t\tindex = indicesByUUID[uuid];\n\n\t\t\t\tif (index !== undefined && index >= nCachedObjects) {\n\t\t\t\t\t// move existing object into the CACHED region\n\t\t\t\t\tvar lastCachedIndex = nCachedObjects++,\n\t\t\t\t\t\t\tfirstActiveObject = objects[lastCachedIndex];\n\t\t\t\t\tindicesByUUID[firstActiveObject.uuid] = index;\n\t\t\t\t\tobjects[index] = firstActiveObject;\n\t\t\t\t\tindicesByUUID[uuid] = lastCachedIndex;\n\t\t\t\t\tobjects[lastCachedIndex] = object; // accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor (var j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\tvar bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\tfirstActive = bindingsForPath[lastCachedIndex],\n\t\t\t\t\t\t\t\tbinding = bindingsForPath[index];\n\t\t\t\t\t\tbindingsForPath[index] = firstActive;\n\t\t\t\t\t\tbindingsForPath[lastCachedIndex] = binding;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t} // remove & forget\n\t\t;\n\n\t\t_proto.uncache = function uncache() {\n\t\t\tvar objects = this._objects,\n\t\t\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\tnBindings = bindings.length;\n\t\t\tvar nCachedObjects = this.nCachedObjects_,\n\t\t\t\t\tnObjects = objects.length;\n\n\t\t\tfor (var i = 0, n = arguments.length; i !== n; ++i) {\n\t\t\t\tvar object = arguments[i],\n\t\t\t\t\t\tuuid = object.uuid,\n\t\t\t\t\t\tindex = indicesByUUID[uuid];\n\n\t\t\t\tif (index !== undefined) {\n\t\t\t\t\tdelete indicesByUUID[uuid];\n\n\t\t\t\t\tif (index < nCachedObjects) {\n\t\t\t\t\t\t// object is cached, shrink the CACHED region\n\t\t\t\t\t\tvar firstActiveIndex = --nCachedObjects,\n\t\t\t\t\t\t\t\tlastCachedObject = objects[firstActiveIndex],\n\t\t\t\t\t\t\t\tlastIndex = --nObjects,\n\t\t\t\t\t\t\t\tlastObject = objects[lastIndex]; // last cached object takes this object's place\n\n\t\t\t\t\t\tindicesByUUID[lastCachedObject.uuid] = index;\n\t\t\t\t\t\tobjects[index] = lastCachedObject; // last object goes to the activated slot and pop\n\n\t\t\t\t\t\tindicesByUUID[lastObject.uuid] = firstActiveIndex;\n\t\t\t\t\t\tobjects[firstActiveIndex] = lastObject;\n\t\t\t\t\t\tobjects.pop(); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor (var j = 0, m = nBindings; j !== m; ++j) {\n\t\t\t\t\t\t\tvar bindingsForPath = bindings[j],\n\t\t\t\t\t\t\t\t\tlastCached = bindingsForPath[firstActiveIndex],\n\t\t\t\t\t\t\t\t\tlast = bindingsForPath[lastIndex];\n\t\t\t\t\t\t\tbindingsForPath[index] = lastCached;\n\t\t\t\t\t\t\tbindingsForPath[firstActiveIndex] = last;\n\t\t\t\t\t\t\tbindingsForPath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// object is active, just swap with the last and pop\n\t\t\t\t\t\tvar _lastIndex = --nObjects,\n\t\t\t\t\t\t\t\t_lastObject = objects[_lastIndex];\n\n\t\t\t\t\t\tif (_lastIndex > 0) {\n\t\t\t\t\t\t\tindicesByUUID[_lastObject.uuid] = index;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tobjects[index] = _lastObject;\n\t\t\t\t\t\tobjects.pop(); // accounting is done, now do the same for all bindings\n\n\t\t\t\t\t\tfor (var _j2 = 0, _m2 = nBindings; _j2 !== _m2; ++_j2) {\n\t\t\t\t\t\t\tvar _bindingsForPath = bindings[_j2];\n\t\t\t\t\t\t\t_bindingsForPath[index] = _bindingsForPath[_lastIndex];\n\n\t\t\t\t\t\t\t_bindingsForPath.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t} // cached or active\n\n\t\t\t\t} // if object is known\n\n\t\t\t} // for arguments\n\n\n\t\t\tthis.nCachedObjects_ = nCachedObjects;\n\t\t} // Internal interface used by befriended PropertyBinding.Composite:\n\t\t;\n\n\t\t_proto.subscribe_ = function subscribe_(path, parsedPath) {\n\t\t\t// returns an array of bindings for the given path that is changed\n\t\t\t// according to the contained objects in the group\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath;\n\t\t\tvar index = indicesByPath[path];\n\t\t\tvar bindings = this._bindings;\n\t\t\tif (index !== undefined) return bindings[index];\n\t\t\tvar paths = this._paths,\n\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\tobjects = this._objects,\n\t\t\t\t\tnObjects = objects.length,\n\t\t\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\t\t\tbindingsForPath = new Array(nObjects);\n\t\t\tindex = bindings.length;\n\t\t\tindicesByPath[path] = index;\n\t\t\tpaths.push(path);\n\t\t\tparsedPaths.push(parsedPath);\n\t\t\tbindings.push(bindingsForPath);\n\n\t\t\tfor (var i = nCachedObjects, n = objects.length; i !== n; ++i) {\n\t\t\t\tvar object = objects[i];\n\t\t\t\tbindingsForPath[i] = new PropertyBinding(object, path, parsedPath);\n\t\t\t}\n\n\t\t\treturn bindingsForPath;\n\t\t};\n\n\t\t_proto.unsubscribe_ = function unsubscribe_(path) {\n\t\t\t// tells the group to forget about a property path and no longer\n\t\t\t// update the array previously obtained with 'subscribe_'\n\t\t\tvar indicesByPath = this._bindingsIndicesByPath,\n\t\t\t\t\tindex = indicesByPath[path];\n\n\t\t\tif (index !== undefined) {\n\t\t\t\tvar paths = this._paths,\n\t\t\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\t\t\tbindings = this._bindings,\n\t\t\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\t\t\tlastBindings = bindings[lastBindingsIndex],\n\t\t\t\t\t\tlastBindingsPath = path[lastBindingsIndex];\n\t\t\t\tindicesByPath[lastBindingsPath] = index;\n\t\t\t\tbindings[index] = lastBindings;\n\t\t\t\tbindings.pop();\n\t\t\t\tparsedPaths[index] = parsedPaths[lastBindingsIndex];\n\t\t\t\tparsedPaths.pop();\n\t\t\t\tpaths[index] = paths[lastBindingsIndex];\n\t\t\t\tpaths.pop();\n\t\t\t}\n\t\t};\n\n\t\treturn AnimationObjectGroup;\n\t}();\n\n\tAnimationObjectGroup.prototype.isAnimationObjectGroup = true;\n\n\tvar AnimationAction = /*#__PURE__*/function () {\n\t\tfunction AnimationAction(mixer, clip, localRoot, blendMode) {\n\t\t\tif (localRoot === void 0) {\n\t\t\t\tlocalRoot = null;\n\t\t\t}\n\n\t\t\tif (blendMode === void 0) {\n\t\t\t\tblendMode = clip.blendMode;\n\t\t\t}\n\n\t\t\tthis._mixer = mixer;\n\t\t\tthis._clip = clip;\n\t\t\tthis._localRoot = localRoot;\n\t\t\tthis.blendMode = blendMode;\n\t\t\tvar tracks = clip.tracks,\n\t\t\t\t\tnTracks = tracks.length,\n\t\t\t\t\tinterpolants = new Array(nTracks);\n\t\t\tvar interpolantSettings = {\n\t\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t\t};\n\n\t\t\tfor (var i = 0; i !== nTracks; ++i) {\n\t\t\t\tvar interpolant = tracks[i].createInterpolant(null);\n\t\t\t\tinterpolants[i] = interpolant;\n\t\t\t\tinterpolant.settings = interpolantSettings;\n\t\t\t}\n\n\t\t\tthis._interpolantSettings = interpolantSettings;\n\t\t\tthis._interpolants = interpolants; // bound by the mixer\n\t\t\t// inside: PropertyMixer (managed by the mixer)\n\n\t\t\tthis._propertyBindings = new Array(nTracks);\n\t\t\tthis._cacheIndex = null; // for the memory manager\n\n\t\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis.loop = LoopRepeat;\n\t\t\tthis._loopCount = -1; // global mixer time when the action is to be started\n\t\t\t// it's set back to 'null' upon start of the action\n\n\t\t\tthis._startTime = null; // scaled local time of the action\n\t\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\n\t\t\tthis.time = 0;\n\t\t\tthis.timeScale = 1;\n\t\t\tthis._effectiveTimeScale = 1;\n\t\t\tthis.weight = 1;\n\t\t\tthis._effectiveWeight = 1;\n\t\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\t\tthis.paused = false; // true -> zero effective time scale\n\n\t\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\t\tthis.clampWhenFinished = false; // keep feeding the last frame?\n\n\t\t\tthis.zeroSlopeAtStart = true; // for smooth interpolation w/o separate\n\n\t\t\tthis.zeroSlopeAtEnd = true; // clips for start, loop and end\n\t\t} // State & Scheduling\n\n\n\t\tvar _proto = AnimationAction.prototype;\n\n\t\t_proto.play = function play() {\n\t\t\tthis._mixer._activateAction(this);\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.stop = function stop() {\n\t\t\tthis._mixer._deactivateAction(this);\n\n\t\t\treturn this.reset();\n\t\t};\n\n\t\t_proto.reset = function reset() {\n\t\t\tthis.paused = false;\n\t\t\tthis.enabled = true;\n\t\t\tthis.time = 0; // restart clip\n\n\t\t\tthis._loopCount = -1; // forget previous loops\n\n\t\t\tthis._startTime = null; // forget scheduling\n\n\t\t\treturn this.stopFading().stopWarping();\n\t\t};\n\n\t\t_proto.isRunning = function isRunning() {\n\t\t\treturn this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);\n\t\t} // return true when play has been called\n\t\t;\n\n\t\t_proto.isScheduled = function isScheduled() {\n\t\t\treturn this._mixer._isActiveAction(this);\n\t\t};\n\n\t\t_proto.startAt = function startAt(time) {\n\t\t\tthis._startTime = time;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setLoop = function setLoop(mode, repetitions) {\n\t\t\tthis.loop = mode;\n\t\t\tthis.repetitions = repetitions;\n\t\t\treturn this;\n\t\t} // Weight\n\t\t// set the weight stopping any scheduled fading\n\t\t// although .enabled = false yields an effective weight of zero, this\n\t\t// method does *not* change .enabled, because it would be confusing\n\t\t;\n\n\t\t_proto.setEffectiveWeight = function setEffectiveWeight(weight) {\n\t\t\tthis.weight = weight; // note: same logic as when updated at runtime\n\n\t\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\t\t\treturn this.stopFading();\n\t\t} // return the weight considering fading and .enabled\n\t\t;\n\n\t\t_proto.getEffectiveWeight = function getEffectiveWeight() {\n\t\t\treturn this._effectiveWeight;\n\t\t};\n\n\t\t_proto.fadeIn = function fadeIn(duration) {\n\t\t\treturn this._scheduleFading(duration, 0, 1);\n\t\t};\n\n\t\t_proto.fadeOut = function fadeOut(duration) {\n\t\t\treturn this._scheduleFading(duration, 1, 0);\n\t\t};\n\n\t\t_proto.crossFadeFrom = function crossFadeFrom(fadeOutAction, duration, warp) {\n\t\t\tfadeOutAction.fadeOut(duration);\n\t\t\tthis.fadeIn(duration);\n\n\t\t\tif (warp) {\n\t\t\t\tvar fadeInDuration = this._clip.duration,\n\t\t\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\t\t\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\t\t\t\tfadeOutAction.warp(1.0, startEndRatio, duration);\n\t\t\t\tthis.warp(endStartRatio, 1.0, duration);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.crossFadeTo = function crossFadeTo(fadeInAction, duration, warp) {\n\t\t\treturn fadeInAction.crossFadeFrom(this, duration, warp);\n\t\t};\n\n\t\t_proto.stopFading = function stopFading() {\n\t\t\tvar weightInterpolant = this._weightInterpolant;\n\n\t\t\tif (weightInterpolant !== null) {\n\t\t\t\tthis._weightInterpolant = null;\n\n\t\t\t\tthis._mixer._takeBackControlInterpolant(weightInterpolant);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Time Scale Control\n\t\t// set the time scale stopping any scheduled warping\n\t\t// although .paused = true yields an effective time scale of zero, this\n\t\t// method does *not* change .paused, because it would be confusing\n\t\t;\n\n\t\t_proto.setEffectiveTimeScale = function setEffectiveTimeScale(timeScale) {\n\t\t\tthis.timeScale = timeScale;\n\t\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\t\t\treturn this.stopWarping();\n\t\t} // return the time scale considering warping and .paused\n\t\t;\n\n\t\t_proto.getEffectiveTimeScale = function getEffectiveTimeScale() {\n\t\t\treturn this._effectiveTimeScale;\n\t\t};\n\n\t\t_proto.setDuration = function setDuration(duration) {\n\t\t\tthis.timeScale = this._clip.duration / duration;\n\t\t\treturn this.stopWarping();\n\t\t};\n\n\t\t_proto.syncWith = function syncWith(action) {\n\t\t\tthis.time = action.time;\n\t\t\tthis.timeScale = action.timeScale;\n\t\t\treturn this.stopWarping();\n\t\t};\n\n\t\t_proto.halt = function halt(duration) {\n\t\t\treturn this.warp(this._effectiveTimeScale, 0, duration);\n\t\t};\n\n\t\t_proto.warp = function warp(startTimeScale, endTimeScale, duration) {\n\t\t\tvar mixer = this._mixer,\n\t\t\t\t\tnow = mixer.time,\n\t\t\t\t\ttimeScale = this.timeScale;\n\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\tif (interpolant === null) {\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._timeScaleInterpolant = interpolant;\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\t\tvalues = interpolant.sampleValues;\n\t\t\ttimes[0] = now;\n\t\t\ttimes[1] = now + duration;\n\t\t\tvalues[0] = startTimeScale / timeScale;\n\t\t\tvalues[1] = endTimeScale / timeScale;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.stopWarping = function stopWarping() {\n\t\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\t\tif (timeScaleInterpolant !== null) {\n\t\t\t\tthis._timeScaleInterpolant = null;\n\n\t\t\t\tthis._mixer._takeBackControlInterpolant(timeScaleInterpolant);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Object Accessors\n\t\t;\n\n\t\t_proto.getMixer = function getMixer() {\n\t\t\treturn this._mixer;\n\t\t};\n\n\t\t_proto.getClip = function getClip() {\n\t\t\treturn this._clip;\n\t\t};\n\n\t\t_proto.getRoot = function getRoot() {\n\t\t\treturn this._localRoot || this._mixer._root;\n\t\t} // Interna\n\t\t;\n\n\t\t_proto._update = function _update(time, deltaTime, timeDirection, accuIndex) {\n\t\t\t// called by the mixer\n\t\t\tif (!this.enabled) {\n\t\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\t\t\t\tthis._updateWeight(time);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar startTime = this._startTime;\n\n\t\t\tif (startTime !== null) {\n\t\t\t\t// check for scheduled start of action\n\t\t\t\tvar timeRunning = (time - startTime) * timeDirection;\n\n\t\t\t\tif (timeRunning < 0 || timeDirection === 0) {\n\t\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\t\t\t\t} // start\n\n\n\t\t\t\tthis._startTime = null; // unschedule\n\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\t\t\t} // apply time scale and advance time\n\n\n\t\t\tdeltaTime *= this._updateTimeScale(time);\n\n\t\t\tvar clipTime = this._updateTime(deltaTime); // note: _updateTime may disable the action resulting in\n\t\t\t// an effective weight of 0\n\n\n\t\t\tvar weight = this._updateWeight(time);\n\n\t\t\tif (weight > 0) {\n\t\t\t\tvar _interpolants = this._interpolants;\n\t\t\t\tvar propertyMixers = this._propertyBindings;\n\n\t\t\t\tswitch (this.blendMode) {\n\t\t\t\t\tcase AdditiveAnimationBlendMode:\n\t\t\t\t\t\tfor (var j = 0, m = _interpolants.length; j !== m; ++j) {\n\t\t\t\t\t\t\t_interpolants[j].evaluate(clipTime);\n\n\t\t\t\t\t\t\tpropertyMixers[j].accumulateAdditive(weight);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase NormalAnimationBlendMode:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tfor (var _j = 0, _m = _interpolants.length; _j !== _m; ++_j) {\n\t\t\t\t\t\t\t_interpolants[_j].evaluate(clipTime);\n\n\t\t\t\t\t\t\tpropertyMixers[_j].accumulate(accuIndex, weight);\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t_proto._updateWeight = function _updateWeight(time) {\n\t\t\tvar weight = 0;\n\n\t\t\tif (this.enabled) {\n\t\t\t\tweight = this.weight;\n\t\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\t\tif (interpolant !== null) {\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate(time)[0];\n\t\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\t\tif (time > interpolant.parameterPositions[1]) {\n\t\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\t\tif (interpolantValue === 0) {\n\t\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\t\tthis.enabled = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._effectiveWeight = weight;\n\t\t\treturn weight;\n\t\t};\n\n\t\t_proto._updateTimeScale = function _updateTimeScale(time) {\n\t\t\tvar timeScale = 0;\n\n\t\t\tif (!this.paused) {\n\t\t\t\ttimeScale = this.timeScale;\n\t\t\t\tvar interpolant = this._timeScaleInterpolant;\n\n\t\t\t\tif (interpolant !== null) {\n\t\t\t\t\tvar interpolantValue = interpolant.evaluate(time)[0];\n\t\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\t\tif (time > interpolant.parameterPositions[1]) {\n\t\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\t\tif (timeScale === 0) {\n\t\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\t\tthis.paused = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\t\tthis.timeScale = timeScale;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._effectiveTimeScale = timeScale;\n\t\t\treturn timeScale;\n\t\t};\n\n\t\t_proto._updateTime = function _updateTime(deltaTime) {\n\t\t\tvar duration = this._clip.duration;\n\t\t\tvar loop = this.loop;\n\t\t\tvar time = this.time + deltaTime;\n\t\t\tvar loopCount = this._loopCount;\n\t\t\tvar pingPong = loop === LoopPingPong;\n\n\t\t\tif (deltaTime === 0) {\n\t\t\t\tif (loopCount === -1) return time;\n\t\t\t\treturn pingPong && (loopCount & 1) === 1 ? duration - time : time;\n\t\t\t}\n\n\t\t\tif (loop === LoopOnce) {\n\t\t\t\tif (loopCount === -1) {\n\t\t\t\t\t// just started\n\t\t\t\t\tthis._loopCount = 0;\n\n\t\t\t\t\tthis._setEndings(true, true, false);\n\t\t\t\t}\n\n\t\t\t\thandle_stop: {\n\t\t\t\t\tif (time >= duration) {\n\t\t\t\t\t\ttime = duration;\n\t\t\t\t\t} else if (time < 0) {\n\t\t\t\t\t\ttime = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.time = time;\n\t\t\t\t\t\tbreak handle_stop;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\ttype: 'finished',\n\t\t\t\t\t\taction: this,\n\t\t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// repetitive Repeat or PingPong\n\t\t\t\tif (loopCount === -1) {\n\t\t\t\t\t// just started\n\t\t\t\t\tif (deltaTime >= 0) {\n\t\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\t\tthis._setEndings(true, this.repetitions === 0, pingPong);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t\t// so leave loopCount at -1\n\t\t\t\t\t\tthis._setEndings(this.repetitions === 0, true, pingPong);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (time >= duration || time < 0) {\n\t\t\t\t\t// wrap around\n\t\t\t\t\tvar loopDelta = Math.floor(time / duration); // signed\n\n\t\t\t\t\ttime -= duration * loopDelta;\n\t\t\t\t\tloopCount += Math.abs(loopDelta);\n\t\t\t\t\tvar pending = this.repetitions - loopCount;\n\n\t\t\t\t\tif (pending <= 0) {\n\t\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\t\t\t\t\t\tif (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n\t\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'finished',\n\t\t\t\t\t\t\taction: this,\n\t\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// keep running\n\t\t\t\t\t\tif (pending === 1) {\n\t\t\t\t\t\t\t// entering the last round\n\t\t\t\t\t\t\tvar atStart = deltaTime < 0;\n\n\t\t\t\t\t\t\tthis._setEndings(atStart, !atStart, pingPong);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._setEndings(false, false, pingPong);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._loopCount = loopCount;\n\t\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\t\tthis._mixer.dispatchEvent({\n\t\t\t\t\t\t\ttype: 'loop',\n\t\t\t\t\t\t\taction: this,\n\t\t\t\t\t\t\tloopDelta: loopDelta\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.time = time;\n\t\t\t\t}\n\n\t\t\t\tif (pingPong && (loopCount & 1) === 1) {\n\t\t\t\t\t// invert time for the \"pong round\"\n\t\t\t\t\treturn duration - time;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn time;\n\t\t};\n\n\t\t_proto._setEndings = function _setEndings(atStart, atEnd, pingPong) {\n\t\t\tvar settings = this._interpolantSettings;\n\n\t\t\tif (pingPong) {\n\t\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\t\t\t} else {\n\t\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\t\t\t\tif (atStart) {\n\t\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\t\t\t\t} else {\n\t\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\t\t\t\t}\n\n\t\t\t\tif (atEnd) {\n\t\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\t\t\t\t} else {\n\t\t\t\t\tsettings.endingEnd = WrapAroundEnding;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t_proto._scheduleFading = function _scheduleFading(duration, weightNow, weightThen) {\n\t\t\tvar mixer = this._mixer,\n\t\t\t\t\tnow = mixer.time;\n\t\t\tvar interpolant = this._weightInterpolant;\n\n\t\t\tif (interpolant === null) {\n\t\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\t\tthis._weightInterpolant = interpolant;\n\t\t\t}\n\n\t\t\tvar times = interpolant.parameterPositions,\n\t\t\t\t\tvalues = interpolant.sampleValues;\n\t\t\ttimes[0] = now;\n\t\t\tvalues[0] = weightNow;\n\t\t\ttimes[1] = now + duration;\n\t\t\tvalues[1] = weightThen;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn AnimationAction;\n\t}();\n\n\tvar AnimationMixer = /*#__PURE__*/function (_EventDispatcher) {\n\t\t_inheritsLoose(AnimationMixer, _EventDispatcher);\n\n\t\tfunction AnimationMixer(root) {\n\t\t\tvar _this;\n\n\t\t\t_this = _EventDispatcher.call(this) || this;\n\t\t\t_this._root = root;\n\n\t\t\t_this._initMemoryManager();\n\n\t\t\t_this._accuIndex = 0;\n\t\t\t_this.time = 0;\n\t\t\t_this.timeScale = 1.0;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = AnimationMixer.prototype;\n\n\t\t_proto._bindAction = function _bindAction(action, prototypeAction) {\n\t\t\tvar root = action._localRoot || this._root,\n\t\t\t\t\ttracks = action._clip.tracks,\n\t\t\t\t\tnTracks = tracks.length,\n\t\t\t\t\tbindings = action._propertyBindings,\n\t\t\t\t\tinterpolants = action._interpolants,\n\t\t\t\t\trootUuid = root.uuid,\n\t\t\t\t\tbindingsByRoot = this._bindingsByRootAndName;\n\t\t\tvar bindingsByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingsByName === undefined) {\n\t\t\t\tbindingsByName = {};\n\t\t\t\tbindingsByRoot[rootUuid] = bindingsByName;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i !== nTracks; ++i) {\n\t\t\t\tvar track = tracks[i],\n\t\t\t\t\t\ttrackName = track.name;\n\t\t\t\tvar binding = bindingsByName[trackName];\n\n\t\t\t\tif (binding !== undefined) {\n\t\t\t\t\tbindings[i] = binding;\n\t\t\t\t} else {\n\t\t\t\t\tbinding = bindings[i];\n\n\t\t\t\t\tif (binding !== undefined) {\n\t\t\t\t\t\t// existing binding, make sure the cache knows\n\t\t\t\t\t\tif (binding._cacheIndex === null) {\n\t\t\t\t\t\t\t++binding.referenceCount;\n\n\t\t\t\t\t\t\tthis._addInactiveBinding(binding, rootUuid, trackName);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;\n\t\t\t\t\tbinding = new PropertyMixer(PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());\n\t\t\t\t\t++binding.referenceCount;\n\n\t\t\t\t\tthis._addInactiveBinding(binding, rootUuid, trackName);\n\n\t\t\t\t\tbindings[i] = binding;\n\t\t\t\t}\n\n\t\t\t\tinterpolants[i].resultBuffer = binding.buffer;\n\t\t\t}\n\t\t};\n\n\t\t_proto._activateAction = function _activateAction(action) {\n\t\t\tif (!this._isActiveAction(action)) {\n\t\t\t\tif (action._cacheIndex === null) {\n\t\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t\t// appears to be still using it -> rebind\n\t\t\t\t\tvar rootUuid = (action._localRoot || this._root).uuid,\n\t\t\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\t\t\tactionsForClip = this._actionsByClip[clipUuid];\n\n\t\t\t\t\tthis._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);\n\n\t\t\t\t\tthis._addInactiveAction(action, clipUuid, rootUuid);\n\t\t\t\t}\n\n\t\t\t\tvar bindings = action._propertyBindings; // increment reference counts / sort out state\n\n\t\t\t\tfor (var i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\t\tvar binding = bindings[i];\n\n\t\t\t\t\tif (binding.useCount++ === 0) {\n\t\t\t\t\t\tthis._lendBinding(binding);\n\n\t\t\t\t\t\tbinding.saveOriginalState();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._lendAction(action);\n\t\t\t}\n\t\t};\n\n\t\t_proto._deactivateAction = function _deactivateAction(action) {\n\t\t\tif (this._isActiveAction(action)) {\n\t\t\t\tvar bindings = action._propertyBindings; // decrement reference counts / sort out state\n\n\t\t\t\tfor (var i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\t\tvar binding = bindings[i];\n\n\t\t\t\t\tif (--binding.useCount === 0) {\n\t\t\t\t\t\tbinding.restoreOriginalState();\n\n\t\t\t\t\t\tthis._takeBackBinding(binding);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._takeBackAction(action);\n\t\t\t}\n\t\t} // Memory manager\n\t\t;\n\n\t\t_proto._initMemoryManager = function _initMemoryManager() {\n\t\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\n\t\t\tthis._nActiveActions = 0;\n\t\t\tthis._actionsByClip = {}; // inside:\n\t\t\t// {\n\t\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t\t// }\n\n\t\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\n\t\t\tthis._nActiveBindings = 0;\n\t\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\t\t\tthis._controlInterpolants = []; // same game as above\n\n\t\t\tthis._nActiveControlInterpolants = 0;\n\t\t\tvar scope = this;\n\t\t\tthis.stats = {\n\t\t\t\tactions: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._actions.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveActions;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\tbindings: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._bindings.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveBindings;\n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\tcontrolInterpolants: {\n\t\t\t\t\tget total() {\n\t\t\t\t\t\treturn scope._controlInterpolants.length;\n\t\t\t\t\t},\n\n\t\t\t\t\tget inUse() {\n\t\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t};\n\t\t} // Memory management for AnimationAction objects\n\t\t;\n\n\t\t_proto._isActiveAction = function _isActiveAction(action) {\n\t\t\tvar index = action._cacheIndex;\n\t\t\treturn index !== null && index < this._nActiveActions;\n\t\t};\n\n\t\t_proto._addInactiveAction = function _addInactiveAction(action, clipUuid, rootUuid) {\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tactionsByClip = this._actionsByClip;\n\t\t\tvar actionsForClip = actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip === undefined) {\n\t\t\t\tactionsForClip = {\n\t\t\t\t\tknownActions: [action],\n\t\t\t\t\tactionByRoot: {}\n\t\t\t\t};\n\t\t\t\taction._byClipCacheIndex = 0;\n\t\t\t\tactionsByClip[clipUuid] = actionsForClip;\n\t\t\t} else {\n\t\t\t\tvar knownActions = actionsForClip.knownActions;\n\t\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\t\tknownActions.push(action);\n\t\t\t}\n\n\t\t\taction._cacheIndex = actions.length;\n\t\t\tactions.push(action);\n\t\t\tactionsForClip.actionByRoot[rootUuid] = action;\n\t\t};\n\n\t\t_proto._removeInactiveAction = function _removeInactiveAction(action) {\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tlastInactiveAction = actions[actions.length - 1],\n\t\t\t\t\tcacheIndex = action._cacheIndex;\n\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\tactions[cacheIndex] = lastInactiveAction;\n\t\t\tactions.pop();\n\t\t\taction._cacheIndex = null;\n\t\t\tvar clipUuid = action._clip.uuid,\n\t\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\t\tactionsForClip = actionsByClip[clipUuid],\n\t\t\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\t\t\t\t\tlastKnownAction = knownActionsForClip[knownActionsForClip.length - 1],\n\t\t\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\t\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\t\tknownActionsForClip[byClipCacheIndex] = lastKnownAction;\n\t\t\tknownActionsForClip.pop();\n\t\t\taction._byClipCacheIndex = null;\n\t\t\tvar actionByRoot = actionsForClip.actionByRoot,\n\t\t\t\t\trootUuid = (action._localRoot || this._root).uuid;\n\t\t\tdelete actionByRoot[rootUuid];\n\n\t\t\tif (knownActionsForClip.length === 0) {\n\t\t\t\tdelete actionsByClip[clipUuid];\n\t\t\t}\n\n\t\t\tthis._removeInactiveBindingsForAction(action);\n\t\t};\n\n\t\t_proto._removeInactiveBindingsForAction = function _removeInactiveBindingsForAction(action) {\n\t\t\tvar bindings = action._propertyBindings;\n\n\t\t\tfor (var i = 0, n = bindings.length; i !== n; ++i) {\n\t\t\t\tvar binding = bindings[i];\n\n\t\t\t\tif (--binding.referenceCount === 0) {\n\t\t\t\t\tthis._removeInactiveBinding(binding);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t_proto._lendAction = function _lendAction(action) {\n\t\t\t// [ active actions |\tinactive actions\t]\n\t\t\t// [\tactive actions >| inactive actions ]\n\t\t\t//\t\t\t\t\t\t\t\t s\t\t\t\ta\n\t\t\t//\t\t\t\t\t\t\t\t\t<-swap->\n\t\t\t//\t\t\t\t\t\t\t\t a\t\t\t\ts\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tprevIndex = action._cacheIndex,\n\t\t\t\t\tlastActiveIndex = this._nActiveActions++,\n\t\t\t\t\tfirstInactiveAction = actions[lastActiveIndex];\n\t\t\taction._cacheIndex = lastActiveIndex;\n\t\t\tactions[lastActiveIndex] = action;\n\t\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\t\tactions[prevIndex] = firstInactiveAction;\n\t\t};\n\n\t\t_proto._takeBackAction = function _takeBackAction(action) {\n\t\t\t// [\tactive actions\t| inactive actions ]\n\t\t\t// [ active actions |< inactive actions\t]\n\t\t\t//\t\t\t\ta\t\t\t\ts\n\t\t\t//\t\t\t\t <-swap->\n\t\t\t//\t\t\t\ts\t\t\t\ta\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tprevIndex = action._cacheIndex,\n\t\t\t\t\tfirstInactiveIndex = --this._nActiveActions,\n\t\t\t\t\tlastActiveAction = actions[firstInactiveIndex];\n\t\t\taction._cacheIndex = firstInactiveIndex;\n\t\t\tactions[firstInactiveIndex] = action;\n\t\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\t\tactions[prevIndex] = lastActiveAction;\n\t\t} // Memory management for PropertyMixer objects\n\t\t;\n\n\t\t_proto._addInactiveBinding = function _addInactiveBinding(binding, rootUuid, trackName) {\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\tbindings = this._bindings;\n\t\t\tvar bindingByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingByName === undefined) {\n\t\t\t\tbindingByName = {};\n\t\t\t\tbindingsByRoot[rootUuid] = bindingByName;\n\t\t\t}\n\n\t\t\tbindingByName[trackName] = binding;\n\t\t\tbinding._cacheIndex = bindings.length;\n\t\t\tbindings.push(binding);\n\t\t};\n\n\t\t_proto._removeInactiveBinding = function _removeInactiveBinding(binding) {\n\t\t\tvar bindings = this._bindings,\n\t\t\t\t\tpropBinding = binding.binding,\n\t\t\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\t\t\ttrackName = propBinding.path,\n\t\t\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\tbindingByName = bindingsByRoot[rootUuid],\n\t\t\t\t\tlastInactiveBinding = bindings[bindings.length - 1],\n\t\t\t\t\tcacheIndex = binding._cacheIndex;\n\t\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\t\tbindings[cacheIndex] = lastInactiveBinding;\n\t\t\tbindings.pop();\n\t\t\tdelete bindingByName[trackName];\n\n\t\t\tif (Object.keys(bindingByName).length === 0) {\n\t\t\t\tdelete bindingsByRoot[rootUuid];\n\t\t\t}\n\t\t};\n\n\t\t_proto._lendBinding = function _lendBinding(binding) {\n\t\t\tvar bindings = this._bindings,\n\t\t\t\t\tprevIndex = binding._cacheIndex,\n\t\t\t\t\tlastActiveIndex = this._nActiveBindings++,\n\t\t\t\t\tfirstInactiveBinding = bindings[lastActiveIndex];\n\t\t\tbinding._cacheIndex = lastActiveIndex;\n\t\t\tbindings[lastActiveIndex] = binding;\n\t\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[prevIndex] = firstInactiveBinding;\n\t\t};\n\n\t\t_proto._takeBackBinding = function _takeBackBinding(binding) {\n\t\t\tvar bindings = this._bindings,\n\t\t\t\t\tprevIndex = binding._cacheIndex,\n\t\t\t\t\tfirstInactiveIndex = --this._nActiveBindings,\n\t\t\t\t\tlastActiveBinding = bindings[firstInactiveIndex];\n\t\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\t\tbindings[firstInactiveIndex] = binding;\n\t\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\t\tbindings[prevIndex] = lastActiveBinding;\n\t\t} // Memory management of Interpolants for weight and time scale\n\t\t;\n\n\t\t_proto._lendControlInterpolant = function _lendControlInterpolant() {\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\t\tlastActiveIndex = this._nActiveControlInterpolants++;\n\t\t\tvar interpolant = interpolants[lastActiveIndex];\n\n\t\t\tif (interpolant === undefined) {\n\t\t\t\tinterpolant = new LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);\n\t\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\t\tinterpolants[lastActiveIndex] = interpolant;\n\t\t\t}\n\n\t\t\treturn interpolant;\n\t\t};\n\n\t\t_proto._takeBackControlInterpolant = function _takeBackControlInterpolant(interpolant) {\n\t\t\tvar interpolants = this._controlInterpolants,\n\t\t\t\t\tprevIndex = interpolant.__cacheIndex,\n\t\t\t\t\tfirstInactiveIndex = --this._nActiveControlInterpolants,\n\t\t\t\t\tlastActiveInterpolant = interpolants[firstInactiveIndex];\n\t\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\t\tinterpolants[firstInactiveIndex] = interpolant;\n\t\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\t\tinterpolants[prevIndex] = lastActiveInterpolant;\n\t\t} // return an action for a clip optionally using a custom root target\n\t\t// object (this method allocates a lot of dynamic memory in case a\n\t\t// previously unknown clip/root combination is specified)\n\t\t;\n\n\t\t_proto.clipAction = function clipAction(clip, optionalRoot, blendMode) {\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\t\trootUuid = root.uuid;\n\t\t\tvar clipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip;\n\t\t\tvar clipUuid = clipObject !== null ? clipObject.uuid : clip;\n\t\t\tvar actionsForClip = this._actionsByClip[clipUuid];\n\t\t\tvar prototypeAction = null;\n\n\t\t\tif (blendMode === undefined) {\n\t\t\t\tif (clipObject !== null) {\n\t\t\t\t\tblendMode = clipObject.blendMode;\n\t\t\t\t} else {\n\t\t\t\t\tblendMode = NormalAnimationBlendMode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\tvar existingAction = actionsForClip.actionByRoot[rootUuid];\n\n\t\t\t\tif (existingAction !== undefined && existingAction.blendMode === blendMode) {\n\t\t\t\t\treturn existingAction;\n\t\t\t\t} // we know the clip, so we don't have to parse all\n\t\t\t\t// the bindings again but can just copy\n\n\n\t\t\t\tprototypeAction = actionsForClip.knownActions[0]; // also, take the clip from the prototype action\n\n\t\t\t\tif (clipObject === null) clipObject = prototypeAction._clip;\n\t\t\t} // clip must be known when specified via string\n\n\n\t\t\tif (clipObject === null) return null; // allocate all resources required to run it\n\n\t\t\tvar newAction = new AnimationAction(this, clipObject, optionalRoot, blendMode);\n\n\t\t\tthis._bindAction(newAction, prototypeAction); // and make the action known to the memory manager\n\n\n\t\t\tthis._addInactiveAction(newAction, clipUuid, rootUuid);\n\n\t\t\treturn newAction;\n\t\t} // get an existing action\n\t\t;\n\n\t\t_proto.existingAction = function existingAction(clip, optionalRoot) {\n\t\t\tvar root = optionalRoot || this._root,\n\t\t\t\t\trootUuid = root.uuid,\n\t\t\t\t\tclipObject = typeof clip === 'string' ? AnimationClip.findByName(root, clip) : clip,\n\t\t\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\t\t\t\t\tactionsForClip = this._actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\treturn actionsForClip.actionByRoot[rootUuid] || null;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t} // deactivates all previously scheduled actions\n\t\t;\n\n\t\t_proto.stopAllAction = function stopAllAction() {\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tnActions = this._nActiveActions;\n\n\t\t\tfor (var i = nActions - 1; i >= 0; --i) {\n\t\t\t\tactions[i].stop();\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // advance the time and update apply the animation\n\t\t;\n\n\t\t_proto.update = function update(deltaTime) {\n\t\t\tdeltaTime *= this.timeScale;\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tnActions = this._nActiveActions,\n\t\t\t\t\ttime = this.time += deltaTime,\n\t\t\t\t\ttimeDirection = Math.sign(deltaTime),\n\t\t\t\t\taccuIndex = this._accuIndex ^= 1; // run active actions\n\n\t\t\tfor (var i = 0; i !== nActions; ++i) {\n\t\t\t\tvar action = actions[i];\n\n\t\t\t\taction._update(time, deltaTime, timeDirection, accuIndex);\n\t\t\t} // update scene graph\n\n\n\t\t\tvar bindings = this._bindings,\n\t\t\t\t\tnBindings = this._nActiveBindings;\n\n\t\t\tfor (var _i = 0; _i !== nBindings; ++_i) {\n\t\t\t\tbindings[_i].apply(accuIndex);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t} // Allows you to seek to a specific time in an animation.\n\t\t;\n\n\t\t_proto.setTime = function setTime(timeInSeconds) {\n\t\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\n\t\t\tfor (var i = 0; i < this._actions.length; i++) {\n\t\t\t\tthis._actions[i].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\t\t\t}\n\n\t\t\treturn this.update(timeInSeconds); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\t\t} // return this mixer's root target object\n\t\t;\n\n\t\t_proto.getRoot = function getRoot() {\n\t\t\treturn this._root;\n\t\t} // free all resources specific to a particular clip\n\t\t;\n\n\t\t_proto.uncacheClip = function uncacheClip(clip) {\n\t\t\tvar actions = this._actions,\n\t\t\t\t\tclipUuid = clip.uuid,\n\t\t\t\t\tactionsByClip = this._actionsByClip,\n\t\t\t\t\tactionsForClip = actionsByClip[clipUuid];\n\n\t\t\tif (actionsForClip !== undefined) {\n\t\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t\t// iteration state and also require updating the state we can\n\t\t\t\t// just throw away\n\t\t\t\tvar actionsToRemove = actionsForClip.knownActions;\n\n\t\t\t\tfor (var i = 0, n = actionsToRemove.length; i !== n; ++i) {\n\t\t\t\t\tvar action = actionsToRemove[i];\n\n\t\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\t\tvar cacheIndex = action._cacheIndex,\n\t\t\t\t\t\t\tlastInactiveAction = actions[actions.length - 1];\n\t\t\t\t\taction._cacheIndex = null;\n\t\t\t\t\taction._byClipCacheIndex = null;\n\t\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\t\tactions[cacheIndex] = lastInactiveAction;\n\t\t\t\t\tactions.pop();\n\n\t\t\t\t\tthis._removeInactiveBindingsForAction(action);\n\t\t\t\t}\n\n\t\t\t\tdelete actionsByClip[clipUuid];\n\t\t\t}\n\t\t} // free all resources specific to a particular root target object\n\t\t;\n\n\t\t_proto.uncacheRoot = function uncacheRoot(root) {\n\t\t\tvar rootUuid = root.uuid,\n\t\t\t\t\tactionsByClip = this._actionsByClip;\n\n\t\t\tfor (var clipUuid in actionsByClip) {\n\t\t\t\tvar actionByRoot = actionsByClip[clipUuid].actionByRoot,\n\t\t\t\t\t\taction = actionByRoot[rootUuid];\n\n\t\t\t\tif (action !== undefined) {\n\t\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\t\tthis._removeInactiveAction(action);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar bindingsByRoot = this._bindingsByRootAndName,\n\t\t\t\t\tbindingByName = bindingsByRoot[rootUuid];\n\n\t\t\tif (bindingByName !== undefined) {\n\t\t\t\tfor (var trackName in bindingByName) {\n\t\t\t\t\tvar binding = bindingByName[trackName];\n\t\t\t\t\tbinding.restoreOriginalState();\n\n\t\t\t\t\tthis._removeInactiveBinding(binding);\n\t\t\t\t}\n\t\t\t}\n\t\t} // remove a targeted clip from the cache\n\t\t;\n\n\t\t_proto.uncacheAction = function uncacheAction(clip, optionalRoot) {\n\t\t\tvar action = this.existingAction(clip, optionalRoot);\n\n\t\t\tif (action !== null) {\n\t\t\t\tthis._deactivateAction(action);\n\n\t\t\t\tthis._removeInactiveAction(action);\n\t\t\t}\n\t\t};\n\n\t\treturn AnimationMixer;\n\t}(EventDispatcher);\n\n\tAnimationMixer.prototype._controlInterpolantsResultBuffer = new Float32Array(1);\n\n\tvar Uniform = /*#__PURE__*/function () {\n\t\tfunction Uniform(value) {\n\t\t\tif (typeof value === 'string') {\n\t\t\t\tconsole.warn('THREE.Uniform: Type parameter is no longer needed.');\n\t\t\t\tvalue = arguments[1];\n\t\t\t}\n\n\t\t\tthis.value = value;\n\t\t}\n\n\t\tvar _proto = Uniform.prototype;\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new Uniform(this.value.clone === undefined ? this.value : this.value.clone());\n\t\t};\n\n\t\treturn Uniform;\n\t}();\n\n\tfunction InstancedInterleavedBuffer(array, stride, meshPerAttribute) {\n\t\tInterleavedBuffer.call(this, array, stride);\n\t\tthis.meshPerAttribute = meshPerAttribute || 1;\n\t}\n\n\tInstancedInterleavedBuffer.prototype = Object.assign(Object.create(InterleavedBuffer.prototype), {\n\t\tconstructor: InstancedInterleavedBuffer,\n\t\tisInstancedInterleavedBuffer: true,\n\t\tcopy: function copy(source) {\n\t\t\tInterleavedBuffer.prototype.copy.call(this, source);\n\t\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\t\t\treturn this;\n\t\t},\n\t\tclone: function clone(data) {\n\t\t\tvar ib = InterleavedBuffer.prototype.clone.call(this, data);\n\t\t\tib.meshPerAttribute = this.meshPerAttribute;\n\t\t\treturn ib;\n\t\t},\n\t\ttoJSON: function toJSON(data) {\n\t\t\tvar json = InterleavedBuffer.prototype.toJSON.call(this, data);\n\t\t\tjson.isInstancedInterleavedBuffer = true;\n\t\t\tjson.meshPerAttribute = this.meshPerAttribute;\n\t\t\treturn json;\n\t\t}\n\t});\n\n\tfunction GLBufferAttribute(buffer, type, itemSize, elementSize, count) {\n\t\tthis.buffer = buffer;\n\t\tthis.type = type;\n\t\tthis.itemSize = itemSize;\n\t\tthis.elementSize = elementSize;\n\t\tthis.count = count;\n\t\tthis.version = 0;\n\t}\n\n\tObject.defineProperty(GLBufferAttribute.prototype, 'needsUpdate', {\n\t\tset: function set(value) {\n\t\t\tif (value === true) this.version++;\n\t\t}\n\t});\n\tObject.assign(GLBufferAttribute.prototype, {\n\t\tisGLBufferAttribute: true,\n\t\tsetBuffer: function setBuffer(buffer) {\n\t\t\tthis.buffer = buffer;\n\t\t\treturn this;\n\t\t},\n\t\tsetType: function setType(type, elementSize) {\n\t\t\tthis.type = type;\n\t\t\tthis.elementSize = elementSize;\n\t\t\treturn this;\n\t\t},\n\t\tsetItemSize: function setItemSize(itemSize) {\n\t\t\tthis.itemSize = itemSize;\n\t\t\treturn this;\n\t\t},\n\t\tsetCount: function setCount(count) {\n\t\t\tthis.count = count;\n\t\t\treturn this;\n\t\t}\n\t});\n\n\tfunction Raycaster(origin, direction, near, far) {\n\t\tif (near === void 0) {\n\t\t\tnear = 0;\n\t\t}\n\n\t\tif (far === void 0) {\n\t\t\tfar = Infinity;\n\t\t}\n\n\t\tthis.ray = new Ray(origin, direction); // direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\t\tthis.camera = null;\n\t\tthis.layers = new Layers();\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: {\n\t\t\t\tthreshold: 1\n\t\t\t},\n\t\t\tLOD: {},\n\t\t\tPoints: {\n\t\t\t\tthreshold: 1\n\t\t\t},\n\t\t\tSprite: {}\n\t\t};\n\t\tObject.defineProperties(this.params, {\n\t\t\tPointCloud: {\n\t\t\t\tget: function get() {\n\t\t\t\t\tconsole.warn('THREE.Raycaster: params.PointCloud has been renamed to params.Points.');\n\t\t\t\t\treturn this.Points;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction ascSort(a, b) {\n\t\treturn a.distance - b.distance;\n\t}\n\n\tfunction _intersectObject(object, raycaster, intersects, recursive) {\n\t\tif (object.layers.test(raycaster.layers)) {\n\t\t\tobject.raycast(raycaster, intersects);\n\t\t}\n\n\t\tif (recursive === true) {\n\t\t\tvar children = object.children;\n\n\t\t\tfor (var i = 0, l = children.length; i < l; i++) {\n\t\t\t\t_intersectObject(children[i], raycaster, intersects, true);\n\t\t\t}\n\t\t}\n\t}\n\n\tObject.assign(Raycaster.prototype, {\n\t\tset: function set(origin, direction) {\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\t\t\tthis.ray.set(origin, direction);\n\t\t},\n\t\tsetFromCamera: function setFromCamera(coords, camera) {\n\t\t\tif (camera && camera.isPerspectiveCamera) {\n\t\t\t\tthis.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n\t\t\t\tthis.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();\n\t\t\t\tthis.camera = camera;\n\t\t\t} else if (camera && camera.isOrthographicCamera) {\n\t\t\t\tthis.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera\n\n\t\t\t\tthis.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n\t\t\t\tthis.camera = camera;\n\t\t\t} else {\n\t\t\t\tconsole.error('THREE.Raycaster: Unsupported camera type: ' + camera.type);\n\t\t\t}\n\t\t},\n\t\tintersectObject: function intersectObject(object, recursive, intersects) {\n\t\t\tif (recursive === void 0) {\n\t\t\t\trecursive = false;\n\t\t\t}\n\n\t\t\tif (intersects === void 0) {\n\t\t\t\tintersects = [];\n\t\t\t}\n\n\t\t\t_intersectObject(object, this, intersects, recursive);\n\n\t\t\tintersects.sort(ascSort);\n\t\t\treturn intersects;\n\t\t},\n\t\tintersectObjects: function intersectObjects(objects, recursive, intersects) {\n\t\t\tif (recursive === void 0) {\n\t\t\t\trecursive = false;\n\t\t\t}\n\n\t\t\tif (intersects === void 0) {\n\t\t\t\tintersects = [];\n\t\t\t}\n\n\t\t\tfor (var i = 0, l = objects.length; i < l; i++) {\n\t\t\t\t_intersectObject(objects[i], this, intersects, recursive);\n\t\t\t}\n\n\t\t\tintersects.sort(ascSort);\n\t\t\treturn intersects;\n\t\t}\n\t});\n\n\t/**\n\t * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n\t *\n\t * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n\t * The azimuthal angle (theta) is measured from the positive z-axis.\n\t */\n\n\tvar Spherical = /*#__PURE__*/function () {\n\t\tfunction Spherical(radius, phi, theta) {\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (phi === void 0) {\n\t\t\t\tphi = 0;\n\t\t\t}\n\n\t\t\tif (theta === void 0) {\n\t\t\t\ttheta = 0;\n\t\t\t}\n\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi; // polar angle\n\n\t\t\tthis.theta = theta; // azimuthal angle\n\n\t\t\treturn this;\n\t\t}\n\n\t\tvar _proto = Spherical.prototype;\n\n\t\t_proto.set = function set(radius, phi, theta) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.phi = phi;\n\t\t\tthis.theta = theta;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copy = function copy(other) {\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.phi = other.phi;\n\t\t\tthis.theta = other.theta;\n\t\t\treturn this;\n\t\t} // restrict phi to be betwee EPS and PI-EPS\n\t\t;\n\n\t\t_proto.makeSafe = function makeSafe() {\n\t\t\tvar EPS = 0.000001;\n\t\t\tthis.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromVector3 = function setFromVector3(v) {\n\t\t\treturn this.setFromCartesianCoords(v.x, v.y, v.z);\n\t\t};\n\n\t\t_proto.setFromCartesianCoords = function setFromCartesianCoords(x, y, z) {\n\t\t\tthis.radius = Math.sqrt(x * x + y * y + z * z);\n\n\t\t\tif (this.radius === 0) {\n\t\t\t\tthis.theta = 0;\n\t\t\t\tthis.phi = 0;\n\t\t\t} else {\n\t\t\t\tthis.theta = Math.atan2(x, z);\n\t\t\t\tthis.phi = Math.acos(MathUtils.clamp(y / this.radius, -1, 1));\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\treturn Spherical;\n\t}();\n\n\t/**\n\t * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n\t */\n\tvar Cylindrical = /*#__PURE__*/function () {\n\t\tfunction Cylindrical(radius, theta, y) {\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 1;\n\t\t\t}\n\n\t\t\tif (theta === void 0) {\n\t\t\t\ttheta = 0;\n\t\t\t}\n\n\t\t\tif (y === void 0) {\n\t\t\t\ty = 0;\n\t\t\t}\n\n\t\t\tthis.radius = radius; // distance from the origin to a point in the x-z plane\n\n\t\t\tthis.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\n\t\t\tthis.y = y; // height above the x-z plane\n\n\t\t\treturn this;\n\t\t}\n\n\t\tvar _proto = Cylindrical.prototype;\n\n\t\t_proto.set = function set(radius, theta, y) {\n\t\t\tthis.radius = radius;\n\t\t\tthis.theta = theta;\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copy = function copy(other) {\n\t\t\tthis.radius = other.radius;\n\t\t\tthis.theta = other.theta;\n\t\t\tthis.y = other.y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromVector3 = function setFromVector3(v) {\n\t\t\treturn this.setFromCartesianCoords(v.x, v.y, v.z);\n\t\t};\n\n\t\t_proto.setFromCartesianCoords = function setFromCartesianCoords(x, y, z) {\n\t\t\tthis.radius = Math.sqrt(x * x + z * z);\n\t\t\tthis.theta = Math.atan2(x, z);\n\t\t\tthis.y = y;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\treturn Cylindrical;\n\t}();\n\n\tvar _vector$8 = /*@__PURE__*/new Vector2();\n\n\tvar Box2 = /*#__PURE__*/function () {\n\t\tfunction Box2(min, max) {\n\t\t\tif (min === void 0) {\n\t\t\t\tmin = new Vector2(+Infinity, +Infinity);\n\t\t\t}\n\n\t\t\tif (max === void 0) {\n\t\t\t\tmax = new Vector2(-Infinity, -Infinity);\n\t\t\t}\n\n\t\t\tthis.min = min;\n\t\t\tthis.max = max;\n\t\t}\n\n\t\tvar _proto = Box2.prototype;\n\n\t\t_proto.set = function set(min, max) {\n\t\t\tthis.min.copy(min);\n\t\t\tthis.max.copy(max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromPoints = function setFromPoints(points) {\n\t\t\tthis.makeEmpty();\n\n\t\t\tfor (var i = 0, il = points.length; i < il; i++) {\n\t\t\t\tthis.expandByPoint(points[i]);\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.setFromCenterAndSize = function setFromCenterAndSize(center, size) {\n\t\t\tvar halfSize = _vector$8.copy(size).multiplyScalar(0.5);\n\n\t\t\tthis.min.copy(center).sub(halfSize);\n\t\t\tthis.max.copy(center).add(halfSize);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\t_proto.copy = function copy(box) {\n\t\t\tthis.min.copy(box.min);\n\t\t\tthis.max.copy(box.max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.makeEmpty = function makeEmpty() {\n\t\t\tthis.min.x = this.min.y = +Infinity;\n\t\t\tthis.max.x = this.max.y = -Infinity;\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.isEmpty = function isEmpty() {\n\t\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\t\t\treturn this.max.x < this.min.x || this.max.y < this.min.y;\n\t\t};\n\n\t\t_proto.getCenter = function getCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);\n\t\t};\n\n\t\t_proto.getSize = function getSize(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getSize() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn this.isEmpty() ? target.set(0, 0) : target.subVectors(this.max, this.min);\n\t\t};\n\n\t\t_proto.expandByPoint = function expandByPoint(point) {\n\t\t\tthis.min.min(point);\n\t\t\tthis.max.max(point);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.expandByVector = function expandByVector(vector) {\n\t\t\tthis.min.sub(vector);\n\t\t\tthis.max.add(vector);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.expandByScalar = function expandByScalar(scalar) {\n\t\t\tthis.min.addScalar(-scalar);\n\t\t\tthis.max.addScalar(scalar);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.containsPoint = function containsPoint(point) {\n\t\t\treturn point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y ? false : true;\n\t\t};\n\n\t\t_proto.containsBox = function containsBox(box) {\n\t\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y;\n\t\t};\n\n\t\t_proto.getParameter = function getParameter(point, target) {\n\t\t\t// This can potentially have a divide by zero if the box\n\t\t\t// has a size dimension of 0.\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .getParameter() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));\n\t\t};\n\n\t\t_proto.intersectsBox = function intersectsBox(box) {\n\t\t\t// using 4 splitting planes to rule out intersections\n\t\t\treturn box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\t\t};\n\n\t\t_proto.clampPoint = function clampPoint(point, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Box2: .clampPoint() target is now required');\n\t\t\t\ttarget = new Vector2();\n\t\t\t}\n\n\t\t\treturn target.copy(point).clamp(this.min, this.max);\n\t\t};\n\n\t\t_proto.distanceToPoint = function distanceToPoint(point) {\n\t\t\tvar clampedPoint = _vector$8.copy(point).clamp(this.min, this.max);\n\n\t\t\treturn clampedPoint.sub(point).length();\n\t\t};\n\n\t\t_proto.intersect = function intersect(box) {\n\t\t\tthis.min.max(box.min);\n\t\t\tthis.max.min(box.max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.union = function union(box) {\n\t\t\tthis.min.min(box.min);\n\t\t\tthis.max.max(box.max);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.translate = function translate(offset) {\n\t\t\tthis.min.add(offset);\n\t\t\tthis.max.add(offset);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(box) {\n\t\t\treturn box.min.equals(this.min) && box.max.equals(this.max);\n\t\t};\n\n\t\treturn Box2;\n\t}();\n\n\tBox2.prototype.isBox2 = true;\n\n\tvar _startP = /*@__PURE__*/new Vector3();\n\n\tvar _startEnd = /*@__PURE__*/new Vector3();\n\n\tvar Line3 = /*#__PURE__*/function () {\n\t\tfunction Line3(start, end) {\n\t\t\tif (start === void 0) {\n\t\t\t\tstart = new Vector3();\n\t\t\t}\n\n\t\t\tif (end === void 0) {\n\t\t\t\tend = new Vector3();\n\t\t\t}\n\n\t\t\tthis.start = start;\n\t\t\tthis.end = end;\n\t\t}\n\n\t\tvar _proto = Line3.prototype;\n\n\t\t_proto.set = function set(start, end) {\n\t\t\tthis.start.copy(start);\n\t\t\tthis.end.copy(end);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copy = function copy(line) {\n\t\t\tthis.start.copy(line.start);\n\t\t\tthis.end.copy(line.end);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.getCenter = function getCenter(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .getCenter() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.addVectors(this.start, this.end).multiplyScalar(0.5);\n\t\t};\n\n\t\t_proto.delta = function delta(target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .delta() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn target.subVectors(this.end, this.start);\n\t\t};\n\n\t\t_proto.distanceSq = function distanceSq() {\n\t\t\treturn this.start.distanceToSquared(this.end);\n\t\t};\n\n\t\t_proto.distance = function distance() {\n\t\t\treturn this.start.distanceTo(this.end);\n\t\t};\n\n\t\t_proto.at = function at(t, target) {\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .at() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.delta(target).multiplyScalar(t).add(this.start);\n\t\t};\n\n\t\t_proto.closestPointToPointParameter = function closestPointToPointParameter(point, clampToLine) {\n\t\t\t_startP.subVectors(point, this.start);\n\n\t\t\t_startEnd.subVectors(this.end, this.start);\n\n\t\t\tvar startEnd2 = _startEnd.dot(_startEnd);\n\n\t\t\tvar startEnd_startP = _startEnd.dot(_startP);\n\n\t\t\tvar t = startEnd_startP / startEnd2;\n\n\t\t\tif (clampToLine) {\n\t\t\t\tt = MathUtils.clamp(t, 0, 1);\n\t\t\t}\n\n\t\t\treturn t;\n\t\t};\n\n\t\t_proto.closestPointToPoint = function closestPointToPoint(point, clampToLine, target) {\n\t\t\tvar t = this.closestPointToPointParameter(point, clampToLine);\n\n\t\t\tif (target === undefined) {\n\t\t\t\tconsole.warn('THREE.Line3: .closestPointToPoint() target is now required');\n\t\t\t\ttarget = new Vector3();\n\t\t\t}\n\n\t\t\treturn this.delta(target).multiplyScalar(t).add(this.start);\n\t\t};\n\n\t\t_proto.applyMatrix4 = function applyMatrix4(matrix) {\n\t\t\tthis.start.applyMatrix4(matrix);\n\t\t\tthis.end.applyMatrix4(matrix);\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.equals = function equals(line) {\n\t\t\treturn line.start.equals(this.start) && line.end.equals(this.end);\n\t\t};\n\n\t\t_proto.clone = function clone() {\n\t\t\treturn new this.constructor().copy(this);\n\t\t};\n\n\t\treturn Line3;\n\t}();\n\n\tfunction ImmediateRenderObject(material) {\n\t\tObject3D.call(this);\n\t\tthis.material = material;\n\n\t\tthis.render = function ()\n\t\t/* renderCallback */\n\t\t{};\n\n\t\tthis.hasPositions = false;\n\t\tthis.hasNormals = false;\n\t\tthis.hasColors = false;\n\t\tthis.hasUvs = false;\n\t\tthis.positionArray = null;\n\t\tthis.normalArray = null;\n\t\tthis.colorArray = null;\n\t\tthis.uvArray = null;\n\t\tthis.count = 0;\n\t}\n\n\tImmediateRenderObject.prototype = Object.create(Object3D.prototype);\n\tImmediateRenderObject.prototype.constructor = ImmediateRenderObject;\n\tImmediateRenderObject.prototype.isImmediateRenderObject = true;\n\n\tvar _vector$9 = /*@__PURE__*/new Vector3();\n\n\tvar SpotLightHelper = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(SpotLightHelper, _Object3D);\n\n\t\tfunction SpotLightHelper(light, color) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.light = light;\n\n\t\t\t_this.light.updateMatrixWorld();\n\n\t\t\t_this.matrix = light.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\t\t\t_this.color = color;\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tvar positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];\n\n\t\t\tfor (var i = 0, j = 1, l = 32; i < l; i++, j++) {\n\t\t\t\tvar p1 = i / l * Math.PI * 2;\n\t\t\t\tvar p2 = j / l * Math.PI * 2;\n\t\t\t\tpositions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this.cone = new LineSegments(geometry, material);\n\n\t\t\t_this.add(_this.cone);\n\n\t\t\t_this.update();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = SpotLightHelper.prototype;\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis.cone.geometry.dispose();\n\t\t\tthis.cone.material.dispose();\n\t\t};\n\n\t\t_proto.update = function update() {\n\t\t\tthis.light.updateMatrixWorld();\n\t\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\n\t\t\tvar coneWidth = coneLength * Math.tan(this.light.angle);\n\t\t\tthis.cone.scale.set(coneWidth, coneWidth, coneLength);\n\n\t\t\t_vector$9.setFromMatrixPosition(this.light.target.matrixWorld);\n\n\t\t\tthis.cone.lookAt(_vector$9);\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.cone.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.cone.material.color.copy(this.light.color);\n\t\t\t}\n\t\t};\n\n\t\treturn SpotLightHelper;\n\t}(Object3D);\n\n\tvar _vector$a = /*@__PURE__*/new Vector3();\n\n\tvar _boneMatrix = /*@__PURE__*/new Matrix4();\n\n\tvar _matrixWorldInv = /*@__PURE__*/new Matrix4();\n\n\tvar SkeletonHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(SkeletonHelper, _LineSegments);\n\n\t\tfunction SkeletonHelper(object) {\n\t\t\tvar _this;\n\n\t\t\tvar bones = getBoneList(object);\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tvar vertices = [];\n\t\t\tvar colors = [];\n\t\t\tvar color1 = new Color(0, 0, 1);\n\t\t\tvar color2 = new Color(0, 1, 0);\n\n\t\t\tfor (var i = 0; i < bones.length; i++) {\n\t\t\t\tvar bone = bones[i];\n\n\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\t\tcolors.push(color1.r, color1.g, color1.b);\n\t\t\t\t\tcolors.push(color2.r, color2.g, color2.b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\tdepthTest: false,\n\t\t\t\tdepthWrite: false,\n\t\t\t\ttoneMapped: false,\n\t\t\t\ttransparent: true\n\t\t\t});\n\t\t\t_this = _LineSegments.call(this, geometry, material) || this;\n\t\t\t_this.type = 'SkeletonHelper';\n\t\t\t_this.isSkeletonHelper = true;\n\t\t\t_this.root = object;\n\t\t\t_this.bones = bones;\n\t\t\t_this.matrix = object.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = SkeletonHelper.prototype;\n\n\t\t_proto.updateMatrixWorld = function updateMatrixWorld(force) {\n\t\t\tvar bones = this.bones;\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar position = geometry.getAttribute('position');\n\n\t\t\t_matrixWorldInv.copy(this.root.matrixWorld).invert();\n\n\t\t\tfor (var i = 0, j = 0; i < bones.length; i++) {\n\t\t\t\tvar bone = bones[i];\n\n\t\t\t\tif (bone.parent && bone.parent.isBone) {\n\t\t\t\t\t_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.matrixWorld);\n\n\t\t\t\t\t_vector$a.setFromMatrixPosition(_boneMatrix);\n\n\t\t\t\t\tposition.setXYZ(j, _vector$a.x, _vector$a.y, _vector$a.z);\n\n\t\t\t\t\t_boneMatrix.multiplyMatrices(_matrixWorldInv, bone.parent.matrixWorld);\n\n\t\t\t\t\t_vector$a.setFromMatrixPosition(_boneMatrix);\n\n\t\t\t\t\tposition.setXYZ(j + 1, _vector$a.x, _vector$a.y, _vector$a.z);\n\t\t\t\t\tj += 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgeometry.getAttribute('position').needsUpdate = true;\n\n\t\t\t_LineSegments.prototype.updateMatrixWorld.call(this, force);\n\t\t};\n\n\t\treturn SkeletonHelper;\n\t}(LineSegments);\n\n\tfunction getBoneList(object) {\n\t\tvar boneList = [];\n\n\t\tif (object && object.isBone) {\n\t\t\tboneList.push(object);\n\t\t}\n\n\t\tfor (var i = 0; i < object.children.length; i++) {\n\t\t\tboneList.push.apply(boneList, getBoneList(object.children[i]));\n\t\t}\n\n\t\treturn boneList;\n\t}\n\n\tvar PointLightHelper = /*#__PURE__*/function (_Mesh) {\n\t\t_inheritsLoose(PointLightHelper, _Mesh);\n\n\t\tfunction PointLightHelper(light, sphereSize, color) {\n\t\t\tvar _this;\n\n\t\t\tvar geometry = new SphereGeometry(sphereSize, 4, 2);\n\t\t\tvar material = new MeshBasicMaterial({\n\t\t\t\twireframe: true,\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this = _Mesh.call(this, geometry, material) || this;\n\t\t\t_this.light = light;\n\n\t\t\t_this.light.updateMatrixWorld();\n\n\t\t\t_this.color = color;\n\t\t\t_this.type = 'PointLightHelper';\n\t\t\t_this.matrix = _this.light.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\n\t\t\t_this.update();\n\t\t\t/*\n\t\t\t// TODO: delete this comment?\n\t\t\tconst distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\n\t\t\tconst distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\t\t\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\t\t\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\t\t\tconst d = light.distance;\n\t\t\tif ( d === 0.0 ) {\n\t\t\t\tthis.lightDistance.visible = false;\n\t\t\t} else {\n\t\t\t\tthis.lightDistance.scale.set( d, d, d );\n\t\t\t}\n\t\t\tthis.add( this.lightDistance );\n\t\t\t*/\n\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = PointLightHelper.prototype;\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis.geometry.dispose();\n\t\t\tthis.material.dispose();\n\t\t};\n\n\t\t_proto.update = function update() {\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.material.color.copy(this.light.color);\n\t\t\t}\n\t\t\t/*\n\t\t\tconst d = this.light.distance;\n\t\t\t\tif ( d === 0.0 ) {\n\t\t\t\t\tthis.lightDistance.visible = false;\n\t\t\t\t} else {\n\t\t\t\t\tthis.lightDistance.visible = true;\n\t\t\t\tthis.lightDistance.scale.set( d, d, d );\n\t\t\t\t}\n\t\t\t*/\n\n\t\t};\n\n\t\treturn PointLightHelper;\n\t}(Mesh);\n\n\tvar _vector$b = /*@__PURE__*/new Vector3();\n\n\tvar _color1 = /*@__PURE__*/new Color();\n\n\tvar _color2 = /*@__PURE__*/new Color();\n\n\tvar HemisphereLightHelper = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(HemisphereLightHelper, _Object3D);\n\n\t\tfunction HemisphereLightHelper(light, size, color) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.light = light;\n\n\t\t\t_this.light.updateMatrixWorld();\n\n\t\t\t_this.matrix = light.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\t\t\t_this.color = color;\n\t\t\tvar geometry = new OctahedronGeometry(size);\n\t\t\tgeometry.rotateY(Math.PI * 0.5);\n\t\t\t_this.material = new MeshBasicMaterial({\n\t\t\t\twireframe: true,\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tif (_this.color === undefined) _this.material.vertexColors = true;\n\t\t\tvar position = geometry.getAttribute('position');\n\t\t\tvar colors = new Float32Array(position.count * 3);\n\t\t\tgeometry.setAttribute('color', new BufferAttribute(colors, 3));\n\n\t\t\t_this.add(new Mesh(geometry, _this.material));\n\n\t\t\t_this.update();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = HemisphereLightHelper.prototype;\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis.children[0].geometry.dispose();\n\t\t\tthis.children[0].material.dispose();\n\t\t};\n\n\t\t_proto.update = function update() {\n\t\t\tvar mesh = this.children[0];\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tvar colors = mesh.geometry.getAttribute('color');\n\n\t\t\t\t_color1.copy(this.light.color);\n\n\t\t\t\t_color2.copy(this.light.groundColor);\n\n\t\t\t\tfor (var i = 0, l = colors.count; i < l; i++) {\n\t\t\t\t\tvar color = i < l / 2 ? _color1 : _color2;\n\t\t\t\t\tcolors.setXYZ(i, color.r, color.g, color.b);\n\t\t\t\t}\n\n\t\t\t\tcolors.needsUpdate = true;\n\t\t\t}\n\n\t\t\tmesh.lookAt(_vector$b.setFromMatrixPosition(this.light.matrixWorld).negate());\n\t\t};\n\n\t\treturn HemisphereLightHelper;\n\t}(Object3D);\n\n\tvar GridHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(GridHelper, _LineSegments);\n\n\t\tfunction GridHelper(size, divisions, color1, color2) {\n\t\t\tvar _this;\n\n\t\t\tif (size === void 0) {\n\t\t\t\tsize = 10;\n\t\t\t}\n\n\t\t\tif (divisions === void 0) {\n\t\t\t\tdivisions = 10;\n\t\t\t}\n\n\t\t\tif (color1 === void 0) {\n\t\t\t\tcolor1 = 0x444444;\n\t\t\t}\n\n\t\t\tif (color2 === void 0) {\n\t\t\t\tcolor2 = 0x888888;\n\t\t\t}\n\n\t\t\tcolor1 = new Color(color1);\n\t\t\tcolor2 = new Color(color2);\n\t\t\tvar center = divisions / 2;\n\t\t\tvar step = size / divisions;\n\t\t\tvar halfSize = size / 2;\n\t\t\tvar vertices = [],\n\t\t\t\t\tcolors = [];\n\n\t\t\tfor (var i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {\n\t\t\t\tvertices.push(-halfSize, 0, k, halfSize, 0, k);\n\t\t\t\tvertices.push(k, 0, -halfSize, k, 0, halfSize);\n\t\t\t\tvar color = i === center ? color1 : color2;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t\tcolor.toArray(colors, j);\n\t\t\t\tj += 3;\n\t\t\t}\n\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this = _LineSegments.call(this, geometry, material) || this;\n\t\t\t_this.type = 'GridHelper';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn GridHelper;\n\t}(LineSegments);\n\n\tvar PolarGridHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(PolarGridHelper, _LineSegments);\n\n\t\tfunction PolarGridHelper(radius, radials, circles, divisions, color1, color2) {\n\t\t\tvar _this;\n\n\t\t\tif (radius === void 0) {\n\t\t\t\tradius = 10;\n\t\t\t}\n\n\t\t\tif (radials === void 0) {\n\t\t\t\tradials = 16;\n\t\t\t}\n\n\t\t\tif (circles === void 0) {\n\t\t\t\tcircles = 8;\n\t\t\t}\n\n\t\t\tif (divisions === void 0) {\n\t\t\t\tdivisions = 64;\n\t\t\t}\n\n\t\t\tif (color1 === void 0) {\n\t\t\t\tcolor1 = 0x444444;\n\t\t\t}\n\n\t\t\tif (color2 === void 0) {\n\t\t\t\tcolor2 = 0x888888;\n\t\t\t}\n\n\t\t\tcolor1 = new Color(color1);\n\t\t\tcolor2 = new Color(color2);\n\t\t\tvar vertices = [];\n\t\t\tvar colors = []; // create the radials\n\n\t\t\tfor (var i = 0; i <= radials; i++) {\n\t\t\t\tvar v = i / radials * (Math.PI * 2);\n\t\t\t\tvar x = Math.sin(v) * radius;\n\t\t\t\tvar z = Math.cos(v) * radius;\n\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\tvertices.push(x, 0, z);\n\t\t\t\tvar color = i & 1 ? color1 : color2;\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\t\t\t} // create the circles\n\n\n\t\t\tfor (var _i = 0; _i <= circles; _i++) {\n\t\t\t\tvar _color = _i & 1 ? color1 : color2;\n\n\t\t\t\tvar r = radius - radius / circles * _i;\n\n\t\t\t\tfor (var j = 0; j < divisions; j++) {\n\t\t\t\t\t// first vertex\n\t\t\t\t\tvar _v = j / divisions * (Math.PI * 2);\n\n\t\t\t\t\tvar _x = Math.sin(_v) * r;\n\n\t\t\t\t\tvar _z = Math.cos(_v) * r;\n\n\t\t\t\t\tvertices.push(_x, 0, _z);\n\t\t\t\t\tcolors.push(_color.r, _color.g, _color.b); // second vertex\n\n\t\t\t\t\t_v = (j + 1) / divisions * (Math.PI * 2);\n\t\t\t\t\t_x = Math.sin(_v) * r;\n\t\t\t\t\t_z = Math.cos(_v) * r;\n\t\t\t\t\tvertices.push(_x, 0, _z);\n\t\t\t\t\tcolors.push(_color.r, _color.g, _color.b);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this = _LineSegments.call(this, geometry, material) || this;\n\t\t\t_this.type = 'PolarGridHelper';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn PolarGridHelper;\n\t}(LineSegments);\n\n\tvar _v1$6 = /*@__PURE__*/new Vector3();\n\n\tvar _v2$3 = /*@__PURE__*/new Vector3();\n\n\tvar _v3$1 = /*@__PURE__*/new Vector3();\n\n\tvar DirectionalLightHelper = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(DirectionalLightHelper, _Object3D);\n\n\t\tfunction DirectionalLightHelper(light, size, color) {\n\t\t\tvar _this;\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.light = light;\n\n\t\t\t_this.light.updateMatrixWorld();\n\n\t\t\t_this.matrix = light.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\t\t\t_this.color = color;\n\t\t\tif (size === undefined) size = 1;\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute([-size, size, 0, size, size, 0, size, -size, 0, -size, -size, 0, -size, size, 0], 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tfog: false,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this.lightPlane = new Line(geometry, material);\n\n\t\t\t_this.add(_this.lightPlane);\n\n\t\t\tgeometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 0, 1], 3));\n\t\t\t_this.targetLine = new Line(geometry, material);\n\n\t\t\t_this.add(_this.targetLine);\n\n\t\t\t_this.update();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = DirectionalLightHelper.prototype;\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis.lightPlane.geometry.dispose();\n\t\t\tthis.lightPlane.material.dispose();\n\t\t\tthis.targetLine.geometry.dispose();\n\t\t\tthis.targetLine.material.dispose();\n\t\t};\n\n\t\t_proto.update = function update() {\n\t\t\t_v1$6.setFromMatrixPosition(this.light.matrixWorld);\n\n\t\t\t_v2$3.setFromMatrixPosition(this.light.target.matrixWorld);\n\n\t\t\t_v3$1.subVectors(_v2$3, _v1$6);\n\n\t\t\tthis.lightPlane.lookAt(_v2$3);\n\n\t\t\tif (this.color !== undefined) {\n\t\t\t\tthis.lightPlane.material.color.set(this.color);\n\t\t\t\tthis.targetLine.material.color.set(this.color);\n\t\t\t} else {\n\t\t\t\tthis.lightPlane.material.color.copy(this.light.color);\n\t\t\t\tthis.targetLine.material.color.copy(this.light.color);\n\t\t\t}\n\n\t\t\tthis.targetLine.lookAt(_v2$3);\n\t\t\tthis.targetLine.scale.z = _v3$1.length();\n\t\t};\n\n\t\treturn DirectionalLightHelper;\n\t}(Object3D);\n\n\tvar _vector$c = /*@__PURE__*/new Vector3();\n\n\tvar _camera = /*@__PURE__*/new Camera();\n\t/**\n\t *\t- shows frustum, line of sight and up of the camera\n\t *\t- suitable for fast updates\n\t * \t- based on frustum visualization in lightgl.js shadowmap example\n\t *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n\t */\n\n\n\tvar CameraHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(CameraHelper, _LineSegments);\n\n\t\tfunction CameraHelper(camera) {\n\t\t\tvar _this;\n\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tcolor: 0xffffff,\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\tvar vertices = [];\n\t\t\tvar colors = [];\n\t\t\tvar pointMap = {}; // colors\n\n\t\t\tvar colorFrustum = new Color(0xffaa00);\n\t\t\tvar colorCone = new Color(0xff0000);\n\t\t\tvar colorUp = new Color(0x00aaff);\n\t\t\tvar colorTarget = new Color(0xffffff);\n\t\t\tvar colorCross = new Color(0x333333); // near\n\n\t\t\taddLine('n1', 'n2', colorFrustum);\n\t\t\taddLine('n2', 'n4', colorFrustum);\n\t\t\taddLine('n4', 'n3', colorFrustum);\n\t\t\taddLine('n3', 'n1', colorFrustum); // far\n\n\t\t\taddLine('f1', 'f2', colorFrustum);\n\t\t\taddLine('f2', 'f4', colorFrustum);\n\t\t\taddLine('f4', 'f3', colorFrustum);\n\t\t\taddLine('f3', 'f1', colorFrustum); // sides\n\n\t\t\taddLine('n1', 'f1', colorFrustum);\n\t\t\taddLine('n2', 'f2', colorFrustum);\n\t\t\taddLine('n3', 'f3', colorFrustum);\n\t\t\taddLine('n4', 'f4', colorFrustum); // cone\n\n\t\t\taddLine('p', 'n1', colorCone);\n\t\t\taddLine('p', 'n2', colorCone);\n\t\t\taddLine('p', 'n3', colorCone);\n\t\t\taddLine('p', 'n4', colorCone); // up\n\n\t\t\taddLine('u1', 'u2', colorUp);\n\t\t\taddLine('u2', 'u3', colorUp);\n\t\t\taddLine('u3', 'u1', colorUp); // target\n\n\t\t\taddLine('c', 't', colorTarget);\n\t\t\taddLine('p', 'c', colorCross); // cross\n\n\t\t\taddLine('cn1', 'cn2', colorCross);\n\t\t\taddLine('cn3', 'cn4', colorCross);\n\t\t\taddLine('cf1', 'cf2', colorCross);\n\t\t\taddLine('cf3', 'cf4', colorCross);\n\n\t\t\tfunction addLine(a, b, color) {\n\t\t\t\taddPoint(a, color);\n\t\t\t\taddPoint(b, color);\n\t\t\t}\n\n\t\t\tfunction addPoint(id, color) {\n\t\t\t\tvertices.push(0, 0, 0);\n\t\t\t\tcolors.push(color.r, color.g, color.b);\n\n\t\t\t\tif (pointMap[id] === undefined) {\n\t\t\t\t\tpointMap[id] = [];\n\t\t\t\t}\n\n\t\t\t\tpointMap[id].push(vertices.length / 3 - 1);\n\t\t\t}\n\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\t_this = _LineSegments.call(this, geometry, material) || this;\n\t\t\t_this.type = 'CameraHelper';\n\t\t\t_this.camera = camera;\n\t\t\tif (_this.camera.updateProjectionMatrix) _this.camera.updateProjectionMatrix();\n\t\t\t_this.matrix = camera.matrixWorld;\n\t\t\t_this.matrixAutoUpdate = false;\n\t\t\t_this.pointMap = pointMap;\n\n\t\t\t_this.update();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = CameraHelper.prototype;\n\n\t\t_proto.update = function update() {\n\t\t\tvar geometry = this.geometry;\n\t\t\tvar pointMap = this.pointMap;\n\t\t\tvar w = 1,\n\t\t\t\t\th = 1; // we need just camera projection matrix inverse\n\t\t\t// world matrix must be identity\n\n\t\t\t_camera.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse); // center / target\n\n\n\t\t\tsetPoint('c', pointMap, geometry, _camera, 0, 0, -1);\n\t\t\tsetPoint('t', pointMap, geometry, _camera, 0, 0, 1); // near\n\n\t\t\tsetPoint('n1', pointMap, geometry, _camera, -w, -h, -1);\n\t\t\tsetPoint('n2', pointMap, geometry, _camera, w, -h, -1);\n\t\t\tsetPoint('n3', pointMap, geometry, _camera, -w, h, -1);\n\t\t\tsetPoint('n4', pointMap, geometry, _camera, w, h, -1); // far\n\n\t\t\tsetPoint('f1', pointMap, geometry, _camera, -w, -h, 1);\n\t\t\tsetPoint('f2', pointMap, geometry, _camera, w, -h, 1);\n\t\t\tsetPoint('f3', pointMap, geometry, _camera, -w, h, 1);\n\t\t\tsetPoint('f4', pointMap, geometry, _camera, w, h, 1); // up\n\n\t\t\tsetPoint('u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, -1);\n\t\t\tsetPoint('u2', pointMap, geometry, _camera, -w * 0.7, h * 1.1, -1);\n\t\t\tsetPoint('u3', pointMap, geometry, _camera, 0, h * 2, -1); // cross\n\n\t\t\tsetPoint('cf1', pointMap, geometry, _camera, -w, 0, 1);\n\t\t\tsetPoint('cf2', pointMap, geometry, _camera, w, 0, 1);\n\t\t\tsetPoint('cf3', pointMap, geometry, _camera, 0, -h, 1);\n\t\t\tsetPoint('cf4', pointMap, geometry, _camera, 0, h, 1);\n\t\t\tsetPoint('cn1', pointMap, geometry, _camera, -w, 0, -1);\n\t\t\tsetPoint('cn2', pointMap, geometry, _camera, w, 0, -1);\n\t\t\tsetPoint('cn3', pointMap, geometry, _camera, 0, -h, -1);\n\t\t\tsetPoint('cn4', pointMap, geometry, _camera, 0, h, -1);\n\t\t\tgeometry.getAttribute('position').needsUpdate = true;\n\t\t};\n\n\t\treturn CameraHelper;\n\t}(LineSegments);\n\n\tfunction setPoint(point, pointMap, geometry, camera, x, y, z) {\n\t\t_vector$c.set(x, y, z).unproject(camera);\n\n\t\tvar points = pointMap[point];\n\n\t\tif (points !== undefined) {\n\t\t\tvar position = geometry.getAttribute('position');\n\n\t\t\tfor (var i = 0, l = points.length; i < l; i++) {\n\t\t\t\tposition.setXYZ(points[i], _vector$c.x, _vector$c.y, _vector$c.z);\n\t\t\t}\n\t\t}\n\t}\n\n\tvar _box$3 = /*@__PURE__*/new Box3();\n\n\tvar BoxHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(BoxHelper, _LineSegments);\n\n\t\tfunction BoxHelper(object, color) {\n\t\t\tvar _this;\n\n\t\t\tif (color === void 0) {\n\t\t\t\tcolor = 0xffff00;\n\t\t\t}\n\n\t\t\tvar indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n\t\t\tvar positions = new Float32Array(8 * 3);\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex(new BufferAttribute(indices, 1));\n\t\t\tgeometry.setAttribute('position', new BufferAttribute(positions, 3));\n\t\t\t_this = _LineSegments.call(this, geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t})) || this;\n\t\t\t_this.object = object;\n\t\t\t_this.type = 'BoxHelper';\n\t\t\t_this.matrixAutoUpdate = false;\n\n\t\t\t_this.update();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = BoxHelper.prototype;\n\n\t\t_proto.update = function update(object) {\n\t\t\tif (object !== undefined) {\n\t\t\t\tconsole.warn('THREE.BoxHelper: .update() has no longer arguments.');\n\t\t\t}\n\n\t\t\tif (this.object !== undefined) {\n\t\t\t\t_box$3.setFromObject(this.object);\n\t\t\t}\n\n\t\t\tif (_box$3.isEmpty()) return;\n\t\t\tvar min = _box$3.min;\n\t\t\tvar max = _box$3.max;\n\t\t\t/*\n\t\t\t\t5____4\n\t\t\t1/___0/|\n\t\t\t| 6__|_7\n\t\t\t2/___3/\n\t\t\t\t0: max.x, max.y, max.z\n\t\t\t1: min.x, max.y, max.z\n\t\t\t2: min.x, min.y, max.z\n\t\t\t3: max.x, min.y, max.z\n\t\t\t4: max.x, max.y, min.z\n\t\t\t5: min.x, max.y, min.z\n\t\t\t6: min.x, min.y, min.z\n\t\t\t7: max.x, min.y, min.z\n\t\t\t*/\n\n\t\t\tvar position = this.geometry.attributes.position;\n\t\t\tvar array = position.array;\n\t\t\tarray[0] = max.x;\n\t\t\tarray[1] = max.y;\n\t\t\tarray[2] = max.z;\n\t\t\tarray[3] = min.x;\n\t\t\tarray[4] = max.y;\n\t\t\tarray[5] = max.z;\n\t\t\tarray[6] = min.x;\n\t\t\tarray[7] = min.y;\n\t\t\tarray[8] = max.z;\n\t\t\tarray[9] = max.x;\n\t\t\tarray[10] = min.y;\n\t\t\tarray[11] = max.z;\n\t\t\tarray[12] = max.x;\n\t\t\tarray[13] = max.y;\n\t\t\tarray[14] = min.z;\n\t\t\tarray[15] = min.x;\n\t\t\tarray[16] = max.y;\n\t\t\tarray[17] = min.z;\n\t\t\tarray[18] = min.x;\n\t\t\tarray[19] = min.y;\n\t\t\tarray[20] = min.z;\n\t\t\tarray[21] = max.x;\n\t\t\tarray[22] = min.y;\n\t\t\tarray[23] = min.z;\n\t\t\tposition.needsUpdate = true;\n\t\t\tthis.geometry.computeBoundingSphere();\n\t\t};\n\n\t\t_proto.setFromObject = function setFromObject(object) {\n\t\t\tthis.object = object;\n\t\t\tthis.update();\n\t\t\treturn this;\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\tLineSegments.prototype.copy.call(this, source);\n\t\t\tthis.object = source.object;\n\t\t\treturn this;\n\t\t};\n\n\t\treturn BoxHelper;\n\t}(LineSegments);\n\n\tvar Box3Helper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(Box3Helper, _LineSegments);\n\n\t\tfunction Box3Helper(box, color) {\n\t\t\tvar _this;\n\n\t\t\tif (color === void 0) {\n\t\t\t\tcolor = 0xffff00;\n\t\t\t}\n\n\t\t\tvar indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n\t\t\tvar positions = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1];\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setIndex(new BufferAttribute(indices, 1));\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\t_this = _LineSegments.call(this, geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t})) || this;\n\t\t\t_this.box = box;\n\t\t\t_this.type = 'Box3Helper';\n\n\t\t\t_this.geometry.computeBoundingSphere();\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = Box3Helper.prototype;\n\n\t\t_proto.updateMatrixWorld = function updateMatrixWorld(force) {\n\t\t\tvar box = this.box;\n\t\t\tif (box.isEmpty()) return;\n\t\t\tbox.getCenter(this.position);\n\t\t\tbox.getSize(this.scale);\n\t\t\tthis.scale.multiplyScalar(0.5);\n\n\t\t\t_LineSegments.prototype.updateMatrixWorld.call(this, force);\n\t\t};\n\n\t\treturn Box3Helper;\n\t}(LineSegments);\n\n\tvar PlaneHelper = /*#__PURE__*/function (_Line) {\n\t\t_inheritsLoose(PlaneHelper, _Line);\n\n\t\tfunction PlaneHelper(plane, size, hex) {\n\t\t\tvar _this;\n\n\t\t\tif (size === void 0) {\n\t\t\t\tsize = 1;\n\t\t\t}\n\n\t\t\tif (hex === void 0) {\n\t\t\t\thex = 0xffff00;\n\t\t\t}\n\n\t\t\tvar color = hex;\n\t\t\tvar positions = [1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0];\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tgeometry.computeBoundingSphere();\n\t\t\t_this = _Line.call(this, geometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t})) || this;\n\t\t\t_this.type = 'PlaneHelper';\n\t\t\t_this.plane = plane;\n\t\t\t_this.size = size;\n\t\t\tvar positions2 = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1];\n\t\t\tvar geometry2 = new BufferGeometry();\n\t\t\tgeometry2.setAttribute('position', new Float32BufferAttribute(positions2, 3));\n\t\t\tgeometry2.computeBoundingSphere();\n\n\t\t\t_this.add(new Mesh(geometry2, new MeshBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\topacity: 0.2,\n\t\t\t\ttransparent: true,\n\t\t\t\tdepthWrite: false,\n\t\t\t\ttoneMapped: false\n\t\t\t})));\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = PlaneHelper.prototype;\n\n\t\t_proto.updateMatrixWorld = function updateMatrixWorld(force) {\n\t\t\tvar scale = -this.plane.constant;\n\t\t\tif (Math.abs(scale) < 1e-8) scale = 1e-8; // sign does not matter\n\n\t\t\tthis.scale.set(0.5 * this.size, 0.5 * this.size, scale);\n\t\t\tthis.children[0].material.side = scale < 0 ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n\t\t\tthis.lookAt(this.plane.normal);\n\n\t\t\t_Line.prototype.updateMatrixWorld.call(this, force);\n\t\t};\n\n\t\treturn PlaneHelper;\n\t}(Line);\n\n\tvar _axis = /*@__PURE__*/new Vector3();\n\n\tvar _lineGeometry, _coneGeometry;\n\n\tvar ArrowHelper = /*#__PURE__*/function (_Object3D) {\n\t\t_inheritsLoose(ArrowHelper, _Object3D);\n\n\t\t// dir is assumed to be normalized\n\t\tfunction ArrowHelper(dir, origin, length, color, headLength, headWidth) {\n\t\t\tvar _this;\n\n\t\t\tif (dir === void 0) {\n\t\t\t\tdir = new Vector3(0, 0, 1);\n\t\t\t}\n\n\t\t\tif (origin === void 0) {\n\t\t\t\torigin = new Vector3(0, 0, 0);\n\t\t\t}\n\n\t\t\tif (length === void 0) {\n\t\t\t\tlength = 1;\n\t\t\t}\n\n\t\t\tif (color === void 0) {\n\t\t\t\tcolor = 0xffff00;\n\t\t\t}\n\n\t\t\tif (headLength === void 0) {\n\t\t\t\theadLength = length * 0.2;\n\t\t\t}\n\n\t\t\tif (headWidth === void 0) {\n\t\t\t\theadWidth = headLength * 0.2;\n\t\t\t}\n\n\t\t\t_this = _Object3D.call(this) || this;\n\t\t\t_this.type = 'ArrowHelper';\n\n\t\t\tif (_lineGeometry === undefined) {\n\t\t\t\t_lineGeometry = new BufferGeometry();\n\n\t\t\t\t_lineGeometry.setAttribute('position', new Float32BufferAttribute([0, 0, 0, 0, 1, 0], 3));\n\n\t\t\t\t_coneGeometry = new CylinderGeometry(0, 0.5, 1, 5, 1);\n\n\t\t\t\t_coneGeometry.translate(0, -0.5, 0);\n\t\t\t}\n\n\t\t\t_this.position.copy(origin);\n\n\t\t\t_this.line = new Line(_lineGeometry, new LineBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\t_this.line.matrixAutoUpdate = false;\n\n\t\t\t_this.add(_this.line);\n\n\t\t\t_this.cone = new Mesh(_coneGeometry, new MeshBasicMaterial({\n\t\t\t\tcolor: color,\n\t\t\t\ttoneMapped: false\n\t\t\t}));\n\t\t\t_this.cone.matrixAutoUpdate = false;\n\n\t\t\t_this.add(_this.cone);\n\n\t\t\t_this.setDirection(dir);\n\n\t\t\t_this.setLength(length, headLength, headWidth);\n\n\t\t\treturn _this;\n\t\t}\n\n\t\tvar _proto = ArrowHelper.prototype;\n\n\t\t_proto.setDirection = function setDirection(dir) {\n\t\t\t// dir is assumed to be normalized\n\t\t\tif (dir.y > 0.99999) {\n\t\t\t\tthis.quaternion.set(0, 0, 0, 1);\n\t\t\t} else if (dir.y < -0.99999) {\n\t\t\t\tthis.quaternion.set(1, 0, 0, 0);\n\t\t\t} else {\n\t\t\t\t_axis.set(dir.z, 0, -dir.x).normalize();\n\n\t\t\t\tvar radians = Math.acos(dir.y);\n\t\t\t\tthis.quaternion.setFromAxisAngle(_axis, radians);\n\t\t\t}\n\t\t};\n\n\t\t_proto.setLength = function setLength(length, headLength, headWidth) {\n\t\t\tif (headLength === void 0) {\n\t\t\t\theadLength = length * 0.2;\n\t\t\t}\n\n\t\t\tif (headWidth === void 0) {\n\t\t\t\theadWidth = headLength * 0.2;\n\t\t\t}\n\n\t\t\tthis.line.scale.set(1, Math.max(0.0001, length - headLength), 1); // see #17458\n\n\t\t\tthis.line.updateMatrix();\n\t\t\tthis.cone.scale.set(headWidth, headLength, headWidth);\n\t\t\tthis.cone.position.y = length;\n\t\t\tthis.cone.updateMatrix();\n\t\t};\n\n\t\t_proto.setColor = function setColor(color) {\n\t\t\tthis.line.material.color.set(color);\n\t\t\tthis.cone.material.color.set(color);\n\t\t};\n\n\t\t_proto.copy = function copy(source) {\n\t\t\t_Object3D.prototype.copy.call(this, source, false);\n\n\t\t\tthis.line.copy(source.line);\n\t\t\tthis.cone.copy(source.cone);\n\t\t\treturn this;\n\t\t};\n\n\t\treturn ArrowHelper;\n\t}(Object3D);\n\n\tvar AxesHelper = /*#__PURE__*/function (_LineSegments) {\n\t\t_inheritsLoose(AxesHelper, _LineSegments);\n\n\t\tfunction AxesHelper(size) {\n\t\t\tvar _this;\n\n\t\t\tif (size === void 0) {\n\t\t\t\tsize = 1;\n\t\t\t}\n\n\t\t\tvar vertices = [0, 0, 0, size, 0, 0, 0, 0, 0, 0, size, 0, 0, 0, 0, 0, 0, size];\n\t\t\tvar colors = [1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1];\n\t\t\tvar geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));\n\t\t\tgeometry.setAttribute('color', new Float32BufferAttribute(colors, 3));\n\t\t\tvar material = new LineBasicMaterial({\n\t\t\t\tvertexColors: true,\n\t\t\t\ttoneMapped: false\n\t\t\t});\n\t\t\t_this = _LineSegments.call(this, geometry, material) || this;\n\t\t\t_this.type = 'AxesHelper';\n\t\t\treturn _this;\n\t\t}\n\n\t\treturn AxesHelper;\n\t}(LineSegments);\n\n\tvar _floatView = new Float32Array(1);\n\n\tvar _int32View = new Int32Array(_floatView.buffer);\n\n\tvar DataUtils = {\n\t\t// Converts float32 to float16 (stored as uint16 value).\n\t\ttoHalfFloat: function toHalfFloat(val) {\n\t\t\t// Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410\n\n\t\t\t/* This method is faster than the OpenEXR implementation (very often\n\t\t\t* used, eg. in Ogre), with the additional benefit of rounding, inspired\n\t\t\t* by James Tursa?s half-precision code. */\n\t\t\t_floatView[0] = val;\n\t\t\tvar x = _int32View[0];\n\t\t\tvar bits = x >> 16 & 0x8000;\n\t\t\t/* Get the sign */\n\n\t\t\tvar m = x >> 12 & 0x07ff;\n\t\t\t/* Keep one extra bit for rounding */\n\n\t\t\tvar e = x >> 23 & 0xff;\n\t\t\t/* Using int is faster here */\n\n\t\t\t/* If zero, or denormal, or exponent underflows too much for a denormal\n\t\t\t\t* half, return signed zero. */\n\n\t\t\tif (e < 103) return bits;\n\t\t\t/* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n\n\t\t\tif (e > 142) {\n\t\t\t\tbits |= 0x7c00;\n\t\t\t\t/* If exponent was 0xff and one mantissa bit was set, it means NaN,\n\t\t\t\t\t\t\t* not Inf, so make sure we set one mantissa bit too. */\n\n\t\t\t\tbits |= (e == 255 ? 0 : 1) && x & 0x007fffff;\n\t\t\t\treturn bits;\n\t\t\t}\n\t\t\t/* If exponent underflows but not too much, return a denormal */\n\n\n\t\t\tif (e < 113) {\n\t\t\t\tm |= 0x0800;\n\t\t\t\t/* Extra rounding may overflow and set mantissa to 0 and exponent\n\t\t\t\t\t* to 1, which is OK. */\n\n\t\t\t\tbits |= (m >> 114 - e) + (m >> 113 - e & 1);\n\t\t\t\treturn bits;\n\t\t\t}\n\n\t\t\tbits |= e - 112 << 10 | m >> 1;\n\t\t\t/* Extra rounding. An overflow will set mantissa to 0 and increment\n\t\t\t\t* the exponent, which is OK. */\n\n\t\t\tbits += m & 1;\n\t\t\treturn bits;\n\t\t}\n\t};\n\n\tvar _ENCODINGS;\n\tvar LOD_MIN = 4;\n\tvar LOD_MAX = 8;\n\tvar SIZE_MAX = Math.pow(2, LOD_MAX); // The standard deviations (radians) associated with the extra mips. These are\n\t// chosen to approximate a Trowbridge-Reitz distribution function times the\n\t// geometric shadowing function. These sigma values squared must match the\n\t// variance #defines in cube_uv_reflection_fragment.glsl.js.\n\n\tvar EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];\n\tvar TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length; // The maximum length of the blur for loop. Smaller sigmas will use fewer\n\t// samples and exit early, but not recompile the shader.\n\n\tvar MAX_SAMPLES = 20;\n\tvar ENCODINGS = (_ENCODINGS = {}, _ENCODINGS[LinearEncoding] = 0, _ENCODINGS[sRGBEncoding] = 1, _ENCODINGS[RGBEEncoding] = 2, _ENCODINGS[RGBM7Encoding] = 3, _ENCODINGS[RGBM16Encoding] = 4, _ENCODINGS[RGBDEncoding] = 5, _ENCODINGS[GammaEncoding] = 6, _ENCODINGS);\n\tvar backgroundMaterial = new MeshBasicMaterial({\n\t\tside: BackSide,\n\t\tdepthWrite: false,\n\t\tdepthTest: false\n\t});\n\tvar backgroundBox = new Mesh(new BoxGeometry(), backgroundMaterial);\n\n\tvar _flatCamera = /*@__PURE__*/new OrthographicCamera();\n\n\tvar _createPlanes2 = /*@__PURE__*/_createPlanes(),\n\t\t\t_lodPlanes = _createPlanes2._lodPlanes,\n\t\t\t_sizeLods = _createPlanes2._sizeLods,\n\t\t\t_sigmas = _createPlanes2._sigmas;\n\n\tvar _clearColor = /*@__PURE__*/new Color();\n\n\tvar _oldTarget = null; // Golden Ratio\n\n\tvar PHI = (1 + Math.sqrt(5)) / 2;\n\tvar INV_PHI = 1 / PHI; // Vertices of a dodecahedron (except the opposites, which represent the\n\t// same axis), used as axis directions evenly spread on a sphere.\n\n\tvar _axisDirections = [/*@__PURE__*/new Vector3(1, 1, 1), /*@__PURE__*/new Vector3(-1, 1, 1), /*@__PURE__*/new Vector3(1, 1, -1), /*@__PURE__*/new Vector3(-1, 1, -1), /*@__PURE__*/new Vector3(0, PHI, INV_PHI), /*@__PURE__*/new Vector3(0, PHI, -INV_PHI), /*@__PURE__*/new Vector3(INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(-INV_PHI, 0, PHI), /*@__PURE__*/new Vector3(PHI, INV_PHI, 0), /*@__PURE__*/new Vector3(-PHI, INV_PHI, 0)];\n\t/**\n\t * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n\t * (PMREM) from a cubeMap environment texture. This allows different levels of\n\t * blur to be quickly accessed based on material roughness. It is packed into a\n\t * special CubeUV format that allows us to perform custom interpolation so that\n\t * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n\t * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n\t * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n\t * higher roughness levels. In this way we maintain resolution to smoothly\n\t * interpolate diffuse lighting while limiting sampling computation.\n\t */\n\n\tfunction convertLinearToRGBE(color) {\n\t\tvar maxComponent = Math.max(color.r, color.g, color.b);\n\t\tvar fExp = Math.min(Math.max(Math.ceil(Math.log2(maxComponent)), -128.0), 127.0);\n\t\tcolor.multiplyScalar(Math.pow(2.0, -fExp));\n\t\tvar alpha = (fExp + 128.0) / 255.0;\n\t\treturn alpha;\n\t}\n\n\tvar PMREMGenerator = /*#__PURE__*/function () {\n\t\tfunction PMREMGenerator(renderer) {\n\t\t\tthis._renderer = renderer;\n\t\t\tthis._pingPongRenderTarget = null;\n\t\t\tthis._blurMaterial = _getBlurShader(MAX_SAMPLES);\n\t\t\tthis._equirectShader = null;\n\t\t\tthis._cubemapShader = null;\n\n\t\t\tthis._compileMaterial(this._blurMaterial);\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n\t\t * is placed at the origin).\n\t\t */\n\n\n\t\tvar _proto = PMREMGenerator.prototype;\n\n\t\t_proto.fromScene = function fromScene(scene, sigma, near, far) {\n\t\t\tif (sigma === void 0) {\n\t\t\t\tsigma = 0;\n\t\t\t}\n\n\t\t\tif (near === void 0) {\n\t\t\t\tnear = 0.1;\n\t\t\t}\n\n\t\t\tif (far === void 0) {\n\t\t\t\tfar = 100;\n\t\t\t}\n\n\t\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\t\tvar cubeUVRenderTarget = this._allocateTargets();\n\n\t\t\tthis._sceneToCubeUV(scene, near, far, cubeUVRenderTarget);\n\n\t\t\tif (sigma > 0) {\n\t\t\t\tthis._blur(cubeUVRenderTarget, 0, 0, sigma);\n\t\t\t}\n\n\t\t\tthis._applyPMREM(cubeUVRenderTarget);\n\n\t\t\tthis._cleanup(cubeUVRenderTarget);\n\n\t\t\treturn cubeUVRenderTarget;\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\t\t;\n\n\t\t_proto.fromEquirectangular = function fromEquirectangular(equirectangular) {\n\t\t\treturn this._fromTexture(equirectangular);\n\t\t}\n\t\t/**\n\t\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t\t * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,\n\t\t * as this matches best with the 256 x 256 cubemap output.\n\t\t */\n\t\t;\n\n\t\t_proto.fromCubemap = function fromCubemap(cubemap) {\n\t\t\treturn this._fromTexture(cubemap);\n\t\t}\n\t\t/**\n\t\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\t\t;\n\n\t\t_proto.compileCubemapShader = function compileCubemapShader() {\n\t\t\tif (this._cubemapShader === null) {\n\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\n\t\t\t\tthis._compileMaterial(this._cubemapShader);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t\t * your texture's network fetch for increased concurrency.\n\t\t */\n\t\t;\n\n\t\t_proto.compileEquirectangularShader = function compileEquirectangularShader() {\n\t\t\tif (this._equirectShader === null) {\n\t\t\t\tthis._equirectShader = _getEquirectShader();\n\n\t\t\t\tthis._compileMaterial(this._equirectShader);\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t\t * one of them will cause any others to also become unusable.\n\t\t */\n\t\t;\n\n\t\t_proto.dispose = function dispose() {\n\t\t\tthis._blurMaterial.dispose();\n\n\t\t\tif (this._cubemapShader !== null) this._cubemapShader.dispose();\n\t\t\tif (this._equirectShader !== null) this._equirectShader.dispose();\n\n\t\t\tfor (var i = 0; i < _lodPlanes.length; i++) {\n\t\t\t\t_lodPlanes[i].dispose();\n\t\t\t}\n\t\t} // private interface\n\t\t;\n\n\t\t_proto._cleanup = function _cleanup(outputTarget) {\n\t\t\tthis._pingPongRenderTarget.dispose();\n\n\t\t\tthis._renderer.setRenderTarget(_oldTarget);\n\n\t\t\toutputTarget.scissorTest = false;\n\n\t\t\t_setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);\n\t\t};\n\n\t\t_proto._fromTexture = function _fromTexture(texture) {\n\t\t\t_oldTarget = this._renderer.getRenderTarget();\n\n\t\t\tvar cubeUVRenderTarget = this._allocateTargets(texture);\n\n\t\t\tthis._textureToCubeUV(texture, cubeUVRenderTarget);\n\n\t\t\tthis._applyPMREM(cubeUVRenderTarget);\n\n\t\t\tthis._cleanup(cubeUVRenderTarget);\n\n\t\t\treturn cubeUVRenderTarget;\n\t\t};\n\n\t\t_proto._allocateTargets = function _allocateTargets(texture) {\n\t\t\t// warning: null texture is valid\n\t\t\tvar params = {\n\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\tminFilter: NearestFilter,\n\t\t\t\tgenerateMipmaps: false,\n\t\t\t\ttype: UnsignedByteType,\n\t\t\t\tformat: RGBEFormat,\n\t\t\t\tencoding: _isLDR(texture) ? texture.encoding : RGBEEncoding,\n\t\t\t\tdepthBuffer: false\n\t\t\t};\n\n\t\t\tvar cubeUVRenderTarget = _createRenderTarget(params);\n\n\t\t\tcubeUVRenderTarget.depthBuffer = texture ? false : true;\n\t\t\tthis._pingPongRenderTarget = _createRenderTarget(params);\n\t\t\treturn cubeUVRenderTarget;\n\t\t};\n\n\t\t_proto._compileMaterial = function _compileMaterial(material) {\n\t\t\tvar tmpMesh = new Mesh(_lodPlanes[0], material);\n\n\t\t\tthis._renderer.compile(tmpMesh, _flatCamera);\n\t\t};\n\n\t\t_proto._sceneToCubeUV = function _sceneToCubeUV(scene, near, far, cubeUVRenderTarget) {\n\t\t\tvar fov = 90;\n\t\t\tvar aspect = 1;\n\t\t\tvar cubeCamera = new PerspectiveCamera(fov, aspect, near, far);\n\t\t\tvar upSign = [1, -1, 1, 1, 1, 1];\n\t\t\tvar forwardSign = [1, 1, 1, -1, -1, -1];\n\t\t\tvar renderer = this._renderer;\n\t\t\tvar originalAutoClear = renderer.autoClear;\n\t\t\tvar outputEncoding = renderer.outputEncoding;\n\t\t\tvar toneMapping = renderer.toneMapping;\n\t\t\trenderer.getClearColor(_clearColor);\n\t\t\trenderer.toneMapping = NoToneMapping;\n\t\t\trenderer.outputEncoding = LinearEncoding;\n\t\t\trenderer.autoClear = false;\n\t\t\tvar useSolidColor = false;\n\t\t\tvar background = scene.background;\n\n\t\t\tif (background) {\n\t\t\t\tif (background.isColor) {\n\t\t\t\t\tbackgroundMaterial.color.copy(background).convertSRGBToLinear();\n\t\t\t\t\tscene.background = null;\n\t\t\t\t\tvar alpha = convertLinearToRGBE(backgroundMaterial.color);\n\t\t\t\t\tbackgroundMaterial.opacity = alpha;\n\t\t\t\t\tuseSolidColor = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbackgroundMaterial.color.copy(_clearColor).convertSRGBToLinear();\n\n\t\t\t\tvar _alpha = convertLinearToRGBE(backgroundMaterial.color);\n\n\t\t\t\tbackgroundMaterial.opacity = _alpha;\n\t\t\t\tuseSolidColor = true;\n\t\t\t}\n\n\t\t\tfor (var i = 0; i < 6; i++) {\n\t\t\t\tvar col = i % 3;\n\n\t\t\t\tif (col == 0) {\n\t\t\t\t\tcubeCamera.up.set(0, upSign[i], 0);\n\t\t\t\t\tcubeCamera.lookAt(forwardSign[i], 0, 0);\n\t\t\t\t} else if (col == 1) {\n\t\t\t\t\tcubeCamera.up.set(0, 0, upSign[i]);\n\t\t\t\t\tcubeCamera.lookAt(0, forwardSign[i], 0);\n\t\t\t\t} else {\n\t\t\t\t\tcubeCamera.up.set(0, upSign[i], 0);\n\t\t\t\t\tcubeCamera.lookAt(0, 0, forwardSign[i]);\n\t\t\t\t}\n\n\t\t\t\t_setViewport(cubeUVRenderTarget, col * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX);\n\n\t\t\t\trenderer.setRenderTarget(cubeUVRenderTarget);\n\n\t\t\t\tif (useSolidColor) {\n\t\t\t\t\trenderer.render(backgroundBox, cubeCamera);\n\t\t\t\t}\n\n\t\t\t\trenderer.render(scene, cubeCamera);\n\t\t\t}\n\n\t\t\trenderer.toneMapping = toneMapping;\n\t\t\trenderer.outputEncoding = outputEncoding;\n\t\t\trenderer.autoClear = originalAutoClear;\n\t\t};\n\n\t\t_proto._textureToCubeUV = function _textureToCubeUV(texture, cubeUVRenderTarget) {\n\t\t\tvar renderer = this._renderer;\n\n\t\t\tif (texture.isCubeTexture) {\n\t\t\t\tif (this._cubemapShader == null) {\n\t\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._equirectShader == null) {\n\t\t\t\t\tthis._equirectShader = _getEquirectShader();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar material = texture.isCubeTexture ? this._cubemapShader : this._equirectShader;\n\t\t\tvar mesh = new Mesh(_lodPlanes[0], material);\n\t\t\tvar uniforms = material.uniforms;\n\t\t\tuniforms['envMap'].value = texture;\n\n\t\t\tif (!texture.isCubeTexture) {\n\t\t\t\tuniforms['texelSize'].value.set(1.0 / texture.image.width, 1.0 / texture.image.height);\n\t\t\t}\n\n\t\t\tuniforms['inputEncoding'].value = ENCODINGS[texture.encoding];\n\t\t\tuniforms['outputEncoding'].value = ENCODINGS[cubeUVRenderTarget.texture.encoding];\n\n\t\t\t_setViewport(cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX);\n\n\t\t\trenderer.setRenderTarget(cubeUVRenderTarget);\n\t\t\trenderer.render(mesh, _flatCamera);\n\t\t};\n\n\t\t_proto._applyPMREM = function _applyPMREM(cubeUVRenderTarget) {\n\t\t\tvar renderer = this._renderer;\n\t\t\tvar autoClear = renderer.autoClear;\n\t\t\trenderer.autoClear = false;\n\n\t\t\tfor (var i = 1; i < TOTAL_LODS; i++) {\n\t\t\t\tvar sigma = Math.sqrt(_sigmas[i] * _sigmas[i] - _sigmas[i - 1] * _sigmas[i - 1]);\n\t\t\t\tvar poleAxis = _axisDirections[(i - 1) % _axisDirections.length];\n\n\t\t\t\tthis._blur(cubeUVRenderTarget, i - 1, i, sigma, poleAxis);\n\t\t\t}\n\n\t\t\trenderer.autoClear = autoClear;\n\t\t}\n\t\t/**\n\t\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t\t * accurate at the poles, but still does a decent job.\n\t\t */\n\t\t;\n\n\t\t_proto._blur = function _blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {\n\t\t\tvar pingPongRenderTarget = this._pingPongRenderTarget;\n\n\t\t\tthis._halfBlur(cubeUVRenderTarget, pingPongRenderTarget, lodIn, lodOut, sigma, 'latitudinal', poleAxis);\n\n\t\t\tthis._halfBlur(pingPongRenderTarget, cubeUVRenderTarget, lodOut, lodOut, sigma, 'longitudinal', poleAxis);\n\t\t};\n\n\t\t_proto._halfBlur = function _halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis) {\n\t\t\tvar renderer = this._renderer;\n\t\t\tvar blurMaterial = this._blurMaterial;\n\n\t\t\tif (direction !== 'latitudinal' && direction !== 'longitudinal') {\n\t\t\t\tconsole.error('blur direction must be either latitudinal or longitudinal!');\n\t\t\t} // Number of standard deviations at which to cut off the discrete approximation.\n\n\n\t\t\tvar STANDARD_DEVIATIONS = 3;\n\t\t\tvar blurMesh = new Mesh(_lodPlanes[lodOut], blurMaterial);\n\t\t\tvar blurUniforms = blurMaterial.uniforms;\n\t\t\tvar pixels = _sizeLods[lodIn] - 1;\n\t\t\tvar radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);\n\t\t\tvar sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\t\tvar samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;\n\n\t\t\tif (samples > MAX_SAMPLES) {\n\t\t\t\tconsole.warn(\"sigmaRadians, \" + sigmaRadians + \", is too large and will clip, as it requested \" + samples + \" samples when the maximum is set to \" + MAX_SAMPLES);\n\t\t\t}\n\n\t\t\tvar weights = [];\n\t\t\tvar sum = 0;\n\n\t\t\tfor (var i = 0; i < MAX_SAMPLES; ++i) {\n\t\t\t\tvar _x = i / sigmaPixels;\n\n\t\t\t\tvar weight = Math.exp(-_x * _x / 2);\n\t\t\t\tweights.push(weight);\n\n\t\t\t\tif (i == 0) {\n\t\t\t\t\tsum += weight;\n\t\t\t\t} else if (i < samples) {\n\t\t\t\t\tsum += 2 * weight;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var _i = 0; _i < weights.length; _i++) {\n\t\t\t\tweights[_i] = weights[_i] / sum;\n\t\t\t}\n\n\t\t\tblurUniforms['envMap'].value = targetIn.texture;\n\t\t\tblurUniforms['samples'].value = samples;\n\t\t\tblurUniforms['weights'].value = weights;\n\t\t\tblurUniforms['latitudinal'].value = direction === 'latitudinal';\n\n\t\t\tif (poleAxis) {\n\t\t\t\tblurUniforms['poleAxis'].value = poleAxis;\n\t\t\t}\n\n\t\t\tblurUniforms['dTheta'].value = radiansPerPixel;\n\t\t\tblurUniforms['mipInt'].value = LOD_MAX - lodIn;\n\t\t\tblurUniforms['inputEncoding'].value = ENCODINGS[targetIn.texture.encoding];\n\t\t\tblurUniforms['outputEncoding'].value = ENCODINGS[targetIn.texture.encoding];\n\t\t\tvar outputSize = _sizeLods[lodOut];\n\t\t\tvar x = 3 * Math.max(0, SIZE_MAX - 2 * outputSize);\n\t\t\tvar y = (lodOut === 0 ? 0 : 2 * SIZE_MAX) + 2 * outputSize * (lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0);\n\n\t\t\t_setViewport(targetOut, x, y, 3 * outputSize, 2 * outputSize);\n\n\t\t\trenderer.setRenderTarget(targetOut);\n\t\t\trenderer.render(blurMesh, _flatCamera);\n\t\t};\n\n\t\treturn PMREMGenerator;\n\t}();\n\n\tfunction _isLDR(texture) {\n\t\tif (texture === undefined || texture.type !== UnsignedByteType) return false;\n\t\treturn texture.encoding === LinearEncoding || texture.encoding === sRGBEncoding || texture.encoding === GammaEncoding;\n\t}\n\n\tfunction _createPlanes() {\n\t\tvar _lodPlanes = [];\n\t\tvar _sizeLods = [];\n\t\tvar _sigmas = [];\n\t\tvar lod = LOD_MAX;\n\n\t\tfor (var i = 0; i < TOTAL_LODS; i++) {\n\t\t\tvar sizeLod = Math.pow(2, lod);\n\n\t\t\t_sizeLods.push(sizeLod);\n\n\t\t\tvar sigma = 1.0 / sizeLod;\n\n\t\t\tif (i > LOD_MAX - LOD_MIN) {\n\t\t\t\tsigma = EXTRA_LOD_SIGMA[i - LOD_MAX + LOD_MIN - 1];\n\t\t\t} else if (i == 0) {\n\t\t\t\tsigma = 0;\n\t\t\t}\n\n\t\t\t_sigmas.push(sigma);\n\n\t\t\tvar texelSize = 1.0 / (sizeLod - 1);\n\t\t\tvar min = -texelSize / 2;\n\t\t\tvar max = 1 + texelSize / 2;\n\t\t\tvar uv1 = [min, min, max, min, max, max, min, min, max, max, min, max];\n\t\t\tvar cubeFaces = 6;\n\t\t\tvar vertices = 6;\n\t\t\tvar positionSize = 3;\n\t\t\tvar uvSize = 2;\n\t\t\tvar faceIndexSize = 1;\n\t\t\tvar position = new Float32Array(positionSize * vertices * cubeFaces);\n\t\t\tvar uv = new Float32Array(uvSize * vertices * cubeFaces);\n\t\t\tvar faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);\n\n\t\t\tfor (var face = 0; face < cubeFaces; face++) {\n\t\t\t\tvar x = face % 3 * 2 / 3 - 1;\n\t\t\t\tvar y = face > 2 ? 0 : -1;\n\t\t\t\tvar coordinates = [x, y, 0, x + 2 / 3, y, 0, x + 2 / 3, y + 1, 0, x, y, 0, x + 2 / 3, y + 1, 0, x, y + 1, 0];\n\t\t\t\tposition.set(coordinates, positionSize * vertices * face);\n\t\t\t\tuv.set(uv1, uvSize * vertices * face);\n\t\t\t\tvar fill = [face, face, face, face, face, face];\n\t\t\t\tfaceIndex.set(fill, faceIndexSize * vertices * face);\n\t\t\t}\n\n\t\t\tvar planes = new BufferGeometry();\n\t\t\tplanes.setAttribute('position', new BufferAttribute(position, positionSize));\n\t\t\tplanes.setAttribute('uv', new BufferAttribute(uv, uvSize));\n\t\t\tplanes.setAttribute('faceIndex', new BufferAttribute(faceIndex, faceIndexSize));\n\n\t\t\t_lodPlanes.push(planes);\n\n\t\t\tif (lod > LOD_MIN) {\n\t\t\t\tlod--;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\t_lodPlanes: _lodPlanes,\n\t\t\t_sizeLods: _sizeLods,\n\t\t\t_sigmas: _sigmas\n\t\t};\n\t}\n\n\tfunction _createRenderTarget(params) {\n\t\tvar cubeUVRenderTarget = new WebGLRenderTarget(3 * SIZE_MAX, 3 * SIZE_MAX, params);\n\t\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\t\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\t\tcubeUVRenderTarget.scissorTest = true;\n\t\treturn cubeUVRenderTarget;\n\t}\n\n\tfunction _setViewport(target, x, y, width, height) {\n\t\ttarget.viewport.set(x, y, width, height);\n\t\ttarget.scissor.set(x, y, width, height);\n\t}\n\n\tfunction _getBlurShader(maxSamples) {\n\t\tvar weights = new Float32Array(maxSamples);\n\t\tvar poleAxis = new Vector3(0, 1, 0);\n\t\tvar shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'SphericalGaussianBlur',\n\t\t\tdefines: {\n\t\t\t\t'n': maxSamples\n\t\t\t},\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'samples': {\n\t\t\t\t\tvalue: 1\n\t\t\t\t},\n\t\t\t\t'weights': {\n\t\t\t\t\tvalue: weights\n\t\t\t\t},\n\t\t\t\t'latitudinal': {\n\t\t\t\t\tvalue: false\n\t\t\t\t},\n\t\t\t\t'dTheta': {\n\t\t\t\t\tvalue: 0\n\t\t\t\t},\n\t\t\t\t'mipInt': {\n\t\t\t\t\tvalue: 0\n\t\t\t\t},\n\t\t\t\t'poleAxis': {\n\t\t\t\t\tvalue: poleAxis\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t\\tuniform sampler2D envMap;\\n\\t\\t\\tuniform int samples;\\n\\t\\t\\tuniform float weights[ n ];\\n\\t\\t\\tuniform bool latitudinal;\\n\\t\\t\\tuniform float dTheta;\\n\\t\\t\\tuniform float mipInt;\\n\\t\\t\\tuniform vec3 poleAxis;\\n\\n\\t\\t\\t\" + _getEncodings() + \"\\n\\n\\t\\t\\t#define ENVMAP_TYPE_CUBE_UV\\n\\t\\t\\t#include <cube_uv_reflection_fragment>\\n\\n\\t\\t\\tvec3 getSample( float theta, vec3 axis ) {\\n\\n\\t\\t\\t\\tfloat cosTheta = cos( theta );\\n\\t\\t\\t\\t// Rodrigues' axis-angle rotation\\n\\t\\t\\t\\tvec3 sampleDirection = vOutputDirection * cosTheta\\n\\t\\t\\t\\t\\t+ cross( axis, vOutputDirection ) * sin( theta )\\n\\t\\t\\t\\t\\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\\n\\n\\t\\t\\t\\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\\n\\n\\t\\t\\t\\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\\n\\n\\t\\t\\t\\t\\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\taxis = normalize( axis );\\n\\n\\t\\t\\t\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\t\\t\\t\\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\\n\\n\\t\\t\\t\\tfor ( int i = 1; i < n; i++ ) {\\n\\n\\t\\t\\t\\t\\tif ( i >= samples ) {\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tfloat theta = dTheta * float( i );\\n\\t\\t\\t\\t\\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\\n\\t\\t\\t\\t\\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tgl_FragColor = linearToOutputTexel( gl_FragColor );\\n\\n\\t\\t\\t}\\n\\t\\t\",\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getEquirectShader() {\n\t\tvar texelSize = new Vector2(1, 1);\n\t\tvar shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'EquirectangularToCubeUV',\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'texelSize': {\n\t\t\t\t\tvalue: texelSize\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t\\tuniform sampler2D envMap;\\n\\t\\t\\tuniform vec2 texelSize;\\n\\n\\t\\t\\t\" + _getEncodings() + \"\\n\\n\\t\\t\\t#include <common>\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\n\\t\\t\\t\\tvec3 outputDirection = normalize( vOutputDirection );\\n\\t\\t\\t\\tvec2 uv = equirectUv( outputDirection );\\n\\n\\t\\t\\t\\tvec2 f = fract( uv / texelSize - 0.5 );\\n\\t\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\t\\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\t\\t\\t\\tuv.x += texelSize.x;\\n\\t\\t\\t\\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\t\\t\\t\\tuv.y += texelSize.y;\\n\\t\\t\\t\\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\t\\t\\t\\tuv.x -= texelSize.x;\\n\\t\\t\\t\\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\n\\t\\t\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\t\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\t\\t\\tgl_FragColor.rgb = mix( tm, bm, f.y );\\n\\n\\t\\t\\t\\tgl_FragColor = linearToOutputTexel( gl_FragColor );\\n\\n\\t\\t\\t}\\n\\t\\t\",\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getCubemapShader() {\n\t\tvar shaderMaterial = new RawShaderMaterial({\n\t\t\tname: 'CubemapToCubeUV',\n\t\t\tuniforms: {\n\t\t\t\t'envMap': {\n\t\t\t\t\tvalue: null\n\t\t\t\t},\n\t\t\t\t'inputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t},\n\t\t\t\t'outputEncoding': {\n\t\t\t\t\tvalue: ENCODINGS[LinearEncoding]\n\t\t\t\t}\n\t\t\t},\n\t\t\tvertexShader: _getCommonVertexShader(),\n\t\t\tfragmentShader:\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t\\tuniform samplerCube envMap;\\n\\n\\t\\t\\t\" + _getEncodings() + \"\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\t\\t\\t\\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\\n\\t\\t\\t\\tgl_FragColor = linearToOutputTexel( gl_FragColor );\\n\\n\\t\\t\\t}\\n\\t\\t\",\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false\n\t\t});\n\t\treturn shaderMaterial;\n\t}\n\n\tfunction _getCommonVertexShader() {\n\t\treturn (\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\tprecision mediump float;\\n\\t\\tprecision mediump int;\\n\\n\\t\\tattribute vec3 position;\\n\\t\\tattribute vec2 uv;\\n\\t\\tattribute float faceIndex;\\n\\n\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t// RH coordinate system; PMREM face-indexing convention\\n\\t\\tvec3 getDirection( vec2 uv, float face ) {\\n\\n\\t\\t\\tuv = 2.0 * uv - 1.0;\\n\\n\\t\\t\\tvec3 direction = vec3( uv, 1.0 );\\n\\n\\t\\t\\tif ( face == 0.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.zyx; // ( 1, v, u ) pos x\\n\\n\\t\\t\\t} else if ( face == 1.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.xzy;\\n\\t\\t\\t\\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\\n\\n\\t\\t\\t} else if ( face == 2.0 ) {\\n\\n\\t\\t\\t\\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\\n\\n\\t\\t\\t} else if ( face == 3.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.zyx;\\n\\t\\t\\t\\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\\n\\n\\t\\t\\t} else if ( face == 4.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.xzy;\\n\\t\\t\\t\\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\\n\\n\\t\\t\\t} else if ( face == 5.0 ) {\\n\\n\\t\\t\\t\\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn direction;\\n\\n\\t\\t}\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvOutputDirection = getDirection( uv, faceIndex );\\n\\t\\t\\tgl_Position = vec4( position, 1.0 );\\n\\n\\t\\t}\\n\\t\"\n\t\t);\n\t}\n\n\tfunction _getEncodings() {\n\t\treturn (\n\t\t\t/* glsl */\n\t\t\t\"\\n\\n\\t\\tuniform int inputEncoding;\\n\\t\\tuniform int outputEncoding;\\n\\n\\t\\t#include <encodings_pars_fragment>\\n\\n\\t\\tvec4 inputTexelToLinear( vec4 value ) {\\n\\n\\t\\t\\tif ( inputEncoding == 0 ) {\\n\\n\\t\\t\\t\\treturn value;\\n\\n\\t\\t\\t} else if ( inputEncoding == 1 ) {\\n\\n\\t\\t\\t\\treturn sRGBToLinear( value );\\n\\n\\t\\t\\t} else if ( inputEncoding == 2 ) {\\n\\n\\t\\t\\t\\treturn RGBEToLinear( value );\\n\\n\\t\\t\\t} else if ( inputEncoding == 3 ) {\\n\\n\\t\\t\\t\\treturn RGBMToLinear( value, 7.0 );\\n\\n\\t\\t\\t} else if ( inputEncoding == 4 ) {\\n\\n\\t\\t\\t\\treturn RGBMToLinear( value, 16.0 );\\n\\n\\t\\t\\t} else if ( inputEncoding == 5 ) {\\n\\n\\t\\t\\t\\treturn RGBDToLinear( value, 256.0 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\treturn GammaToLinear( value, 2.2 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvec4 linearToOutputTexel( vec4 value ) {\\n\\n\\t\\t\\tif ( outputEncoding == 0 ) {\\n\\n\\t\\t\\t\\treturn value;\\n\\n\\t\\t\\t} else if ( outputEncoding == 1 ) {\\n\\n\\t\\t\\t\\treturn LinearTosRGB( value );\\n\\n\\t\\t\\t} else if ( outputEncoding == 2 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBE( value );\\n\\n\\t\\t\\t} else if ( outputEncoding == 3 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBM( value, 7.0 );\\n\\n\\t\\t\\t} else if ( outputEncoding == 4 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBM( value, 16.0 );\\n\\n\\t\\t\\t} else if ( outputEncoding == 5 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBD( value, 256.0 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\treturn LinearToGamma( value, 2.2 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvec4 envMapTexelToLinear( vec4 color ) {\\n\\n\\t\\t\\treturn inputTexelToLinear( color );\\n\\n\\t\\t}\\n\\t\"\n\t\t);\n\t}\n\n\tvar LineStrip = 0;\n\tvar LinePieces = 1;\n\tvar NoColors = 0;\n\tvar FaceColors = 1;\n\tvar VertexColors = 2;\n\tfunction MeshFaceMaterial(materials) {\n\t\tconsole.warn('THREE.MeshFaceMaterial has been removed. Use an Array instead.');\n\t\treturn materials;\n\t}\n\tfunction MultiMaterial(materials) {\n\t\tif (materials === void 0) {\n\t\t\tmaterials = [];\n\t\t}\n\n\t\tconsole.warn('THREE.MultiMaterial has been removed. Use an Array instead.');\n\t\tmaterials.isMultiMaterial = true;\n\t\tmaterials.materials = materials;\n\n\t\tmaterials.clone = function () {\n\t\t\treturn materials.slice();\n\t\t};\n\n\t\treturn materials;\n\t}\n\tfunction PointCloud(geometry, material) {\n\t\tconsole.warn('THREE.PointCloud has been renamed to THREE.Points.');\n\t\treturn new Points(geometry, material);\n\t}\n\tfunction Particle(material) {\n\t\tconsole.warn('THREE.Particle has been renamed to THREE.Sprite.');\n\t\treturn new Sprite(material);\n\t}\n\tfunction ParticleSystem(geometry, material) {\n\t\tconsole.warn('THREE.ParticleSystem has been renamed to THREE.Points.');\n\t\treturn new Points(geometry, material);\n\t}\n\tfunction PointCloudMaterial(parameters) {\n\t\tconsole.warn('THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction ParticleBasicMaterial(parameters) {\n\t\tconsole.warn('THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction ParticleSystemMaterial(parameters) {\n\t\tconsole.warn('THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.');\n\t\treturn new PointsMaterial(parameters);\n\t}\n\tfunction Vertex(x, y, z) {\n\t\tconsole.warn('THREE.Vertex has been removed. Use THREE.Vector3 instead.');\n\t\treturn new Vector3(x, y, z);\n\t} //\n\n\tfunction DynamicBufferAttribute(array, itemSize) {\n\t\tconsole.warn('THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.');\n\t\treturn new BufferAttribute(array, itemSize).setUsage(DynamicDrawUsage);\n\t}\n\tfunction Int8Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.');\n\t\treturn new Int8BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint8Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.');\n\t\treturn new Uint8BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint8ClampedAttribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.');\n\t\treturn new Uint8ClampedBufferAttribute(array, itemSize);\n\t}\n\tfunction Int16Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.');\n\t\treturn new Int16BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint16Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.');\n\t\treturn new Uint16BufferAttribute(array, itemSize);\n\t}\n\tfunction Int32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.');\n\t\treturn new Int32BufferAttribute(array, itemSize);\n\t}\n\tfunction Uint32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.');\n\t\treturn new Uint32BufferAttribute(array, itemSize);\n\t}\n\tfunction Float32Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.');\n\t\treturn new Float32BufferAttribute(array, itemSize);\n\t}\n\tfunction Float64Attribute(array, itemSize) {\n\t\tconsole.warn('THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.');\n\t\treturn new Float64BufferAttribute(array, itemSize);\n\t} //\n\n\tCurve.create = function (construct, getPoint) {\n\t\tconsole.log('THREE.Curve.create() has been deprecated');\n\t\tconstruct.prototype = Object.create(Curve.prototype);\n\t\tconstruct.prototype.constructor = construct;\n\t\tconstruct.prototype.getPoint = getPoint;\n\t\treturn construct;\n\t}; //\n\n\n\tPath.prototype.fromPoints = function (points) {\n\t\tconsole.warn('THREE.Path: .fromPoints() has been renamed to .setFromPoints().');\n\t\treturn this.setFromPoints(points);\n\t}; //\n\n\n\tfunction AxisHelper(size) {\n\t\tconsole.warn('THREE.AxisHelper has been renamed to THREE.AxesHelper.');\n\t\treturn new AxesHelper(size);\n\t}\n\tfunction BoundingBoxHelper(object, color) {\n\t\tconsole.warn('THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.');\n\t\treturn new BoxHelper(object, color);\n\t}\n\tfunction EdgesHelper(object, hex) {\n\t\tconsole.warn('THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.');\n\t\treturn new LineSegments(new EdgesGeometry(object.geometry), new LineBasicMaterial({\n\t\t\tcolor: hex !== undefined ? hex : 0xffffff\n\t\t}));\n\t}\n\n\tGridHelper.prototype.setColors = function () {\n\t\tconsole.error('THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.');\n\t};\n\n\tSkeletonHelper.prototype.update = function () {\n\t\tconsole.error('THREE.SkeletonHelper: update() no longer needs to be called.');\n\t};\n\n\tfunction WireframeHelper(object, hex) {\n\t\tconsole.warn('THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.');\n\t\treturn new LineSegments(new WireframeGeometry(object.geometry), new LineBasicMaterial({\n\t\t\tcolor: hex !== undefined ? hex : 0xffffff\n\t\t}));\n\t} //\n\n\tLoader.prototype.extractUrlBase = function (url) {\n\t\tconsole.warn('THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.');\n\t\treturn LoaderUtils.extractUrlBase(url);\n\t};\n\n\tLoader.Handlers = {\n\t\tadd: function add()\n\t\t/* regex, loader */\n\t\t{\n\t\t\tconsole.error('THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.');\n\t\t},\n\t\tget: function get()\n\t\t/* file */\n\t\t{\n\t\t\tconsole.error('THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.');\n\t\t}\n\t};\n\tfunction XHRLoader(manager) {\n\t\tconsole.warn('THREE.XHRLoader has been renamed to THREE.FileLoader.');\n\t\treturn new FileLoader(manager);\n\t}\n\tfunction BinaryTextureLoader(manager) {\n\t\tconsole.warn('THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.');\n\t\treturn new DataTextureLoader(manager);\n\t} //\n\n\tBox2.prototype.center = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box2: .center() has been renamed to .getCenter().');\n\t\treturn this.getCenter(optionalTarget);\n\t};\n\n\tBox2.prototype.empty = function () {\n\t\tconsole.warn('THREE.Box2: .empty() has been renamed to .isEmpty().');\n\t\treturn this.isEmpty();\n\t};\n\n\tBox2.prototype.isIntersectionBox = function (box) {\n\t\tconsole.warn('THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\treturn this.intersectsBox(box);\n\t};\n\n\tBox2.prototype.size = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box2: .size() has been renamed to .getSize().');\n\t\treturn this.getSize(optionalTarget);\n\t}; //\n\n\n\tBox3.prototype.center = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box3: .center() has been renamed to .getCenter().');\n\t\treturn this.getCenter(optionalTarget);\n\t};\n\n\tBox3.prototype.empty = function () {\n\t\tconsole.warn('THREE.Box3: .empty() has been renamed to .isEmpty().');\n\t\treturn this.isEmpty();\n\t};\n\n\tBox3.prototype.isIntersectionBox = function (box) {\n\t\tconsole.warn('THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\treturn this.intersectsBox(box);\n\t};\n\n\tBox3.prototype.isIntersectionSphere = function (sphere) {\n\t\tconsole.warn('THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n\t\treturn this.intersectsSphere(sphere);\n\t};\n\n\tBox3.prototype.size = function (optionalTarget) {\n\t\tconsole.warn('THREE.Box3: .size() has been renamed to .getSize().');\n\t\treturn this.getSize(optionalTarget);\n\t}; //\n\n\n\tSphere.prototype.empty = function () {\n\t\tconsole.warn('THREE.Sphere: .empty() has been renamed to .isEmpty().');\n\t\treturn this.isEmpty();\n\t}; //\n\n\n\tFrustum.prototype.setFromMatrix = function (m) {\n\t\tconsole.warn('THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().');\n\t\treturn this.setFromProjectionMatrix(m);\n\t}; //\n\n\n\tLine3.prototype.center = function (optionalTarget) {\n\t\tconsole.warn('THREE.Line3: .center() has been renamed to .getCenter().');\n\t\treturn this.getCenter(optionalTarget);\n\t}; //\n\n\n\tMathUtils.random16 = function () {\n\t\tconsole.warn('THREE.Math: .random16() has been deprecated. Use Math.random() instead.');\n\t\treturn Math.random();\n\t};\n\n\tMathUtils.nearestPowerOfTwo = function (value) {\n\t\tconsole.warn('THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().');\n\t\treturn MathUtils.floorPowerOfTwo(value);\n\t};\n\n\tMathUtils.nextPowerOfTwo = function (value) {\n\t\tconsole.warn('THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().');\n\t\treturn MathUtils.ceilPowerOfTwo(value);\n\t}; //\n\n\n\tMatrix3.prototype.flattenToArrayOffset = function (array, offset) {\n\t\tconsole.warn('THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');\n\t\treturn this.toArray(array, offset);\n\t};\n\n\tMatrix3.prototype.multiplyVector3 = function (vector) {\n\t\tconsole.warn('THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.');\n\t\treturn vector.applyMatrix3(this);\n\t};\n\n\tMatrix3.prototype.multiplyVector3Array = function ()\n\t/* a */\n\t{\n\t\tconsole.error('THREE.Matrix3: .multiplyVector3Array() has been removed.');\n\t};\n\n\tMatrix3.prototype.applyToBufferAttribute = function (attribute) {\n\t\tconsole.warn('THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.');\n\t\treturn attribute.applyMatrix3(this);\n\t};\n\n\tMatrix3.prototype.applyToVector3Array = function ()\n\t/* array, offset, length */\n\t{\n\t\tconsole.error('THREE.Matrix3: .applyToVector3Array() has been removed.');\n\t};\n\n\tMatrix3.prototype.getInverse = function (matrix) {\n\t\tconsole.warn('THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');\n\t\treturn this.copy(matrix).invert();\n\t}; //\n\n\n\tMatrix4.prototype.extractPosition = function (m) {\n\t\tconsole.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().');\n\t\treturn this.copyPosition(m);\n\t};\n\n\tMatrix4.prototype.flattenToArrayOffset = function (array, offset) {\n\t\tconsole.warn('THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.');\n\t\treturn this.toArray(array, offset);\n\t};\n\n\tMatrix4.prototype.getPosition = function () {\n\t\tconsole.warn('THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.');\n\t\treturn new Vector3().setFromMatrixColumn(this, 3);\n\t};\n\n\tMatrix4.prototype.setRotationFromQuaternion = function (q) {\n\t\tconsole.warn('THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().');\n\t\treturn this.makeRotationFromQuaternion(q);\n\t};\n\n\tMatrix4.prototype.multiplyToArray = function () {\n\t\tconsole.warn('THREE.Matrix4: .multiplyToArray() has been removed.');\n\t};\n\n\tMatrix4.prototype.multiplyVector3 = function (vector) {\n\t\tconsole.warn('THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\treturn vector.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.multiplyVector4 = function (vector) {\n\t\tconsole.warn('THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\treturn vector.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.multiplyVector3Array = function ()\n\t/* a */\n\t{\n\t\tconsole.error('THREE.Matrix4: .multiplyVector3Array() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateAxis = function (v) {\n\t\tconsole.warn('THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.');\n\t\tv.transformDirection(this);\n\t};\n\n\tMatrix4.prototype.crossVector = function (vector) {\n\t\tconsole.warn('THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n\t\treturn vector.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.translate = function () {\n\t\tconsole.error('THREE.Matrix4: .translate() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateX = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateX() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateY = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateY() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateZ = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateZ() has been removed.');\n\t};\n\n\tMatrix4.prototype.rotateByAxis = function () {\n\t\tconsole.error('THREE.Matrix4: .rotateByAxis() has been removed.');\n\t};\n\n\tMatrix4.prototype.applyToBufferAttribute = function (attribute) {\n\t\tconsole.warn('THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.');\n\t\treturn attribute.applyMatrix4(this);\n\t};\n\n\tMatrix4.prototype.applyToVector3Array = function ()\n\t/* array, offset, length */\n\t{\n\t\tconsole.error('THREE.Matrix4: .applyToVector3Array() has been removed.');\n\t};\n\n\tMatrix4.prototype.makeFrustum = function (left, right, bottom, top, near, far) {\n\t\tconsole.warn('THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.');\n\t\treturn this.makePerspective(left, right, top, bottom, near, far);\n\t};\n\n\tMatrix4.prototype.getInverse = function (matrix) {\n\t\tconsole.warn('THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.');\n\t\treturn this.copy(matrix).invert();\n\t}; //\n\n\n\tPlane.prototype.isIntersectionLine = function (line) {\n\t\tconsole.warn('THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().');\n\t\treturn this.intersectsLine(line);\n\t}; //\n\n\n\tQuaternion.prototype.multiplyVector3 = function (vector) {\n\t\tconsole.warn('THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.');\n\t\treturn vector.applyQuaternion(this);\n\t};\n\n\tQuaternion.prototype.inverse = function () {\n\t\tconsole.warn('THREE.Quaternion: .inverse() has been renamed to invert().');\n\t\treturn this.invert();\n\t}; //\n\n\n\tRay.prototype.isIntersectionBox = function (box) {\n\t\tconsole.warn('THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().');\n\t\treturn this.intersectsBox(box);\n\t};\n\n\tRay.prototype.isIntersectionPlane = function (plane) {\n\t\tconsole.warn('THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().');\n\t\treturn this.intersectsPlane(plane);\n\t};\n\n\tRay.prototype.isIntersectionSphere = function (sphere) {\n\t\tconsole.warn('THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n\t\treturn this.intersectsSphere(sphere);\n\t}; //\n\n\n\tTriangle.prototype.area = function () {\n\t\tconsole.warn('THREE.Triangle: .area() has been renamed to .getArea().');\n\t\treturn this.getArea();\n\t};\n\n\tTriangle.prototype.barycoordFromPoint = function (point, target) {\n\t\tconsole.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');\n\t\treturn this.getBarycoord(point, target);\n\t};\n\n\tTriangle.prototype.midpoint = function (target) {\n\t\tconsole.warn('THREE.Triangle: .midpoint() has been renamed to .getMidpoint().');\n\t\treturn this.getMidpoint(target);\n\t};\n\n\tTriangle.prototypenormal = function (target) {\n\t\tconsole.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');\n\t\treturn this.getNormal(target);\n\t};\n\n\tTriangle.prototype.plane = function (target) {\n\t\tconsole.warn('THREE.Triangle: .plane() has been renamed to .getPlane().');\n\t\treturn this.getPlane(target);\n\t};\n\n\tTriangle.barycoordFromPoint = function (point, a, b, c, target) {\n\t\tconsole.warn('THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().');\n\t\treturn Triangle.getBarycoord(point, a, b, c, target);\n\t};\n\n\tTriangle.normal = function (a, b, c, target) {\n\t\tconsole.warn('THREE.Triangle: .normal() has been renamed to .getNormal().');\n\t\treturn Triangle.getNormal(a, b, c, target);\n\t}; //\n\n\n\tShape.prototype.extractAllPoints = function (divisions) {\n\t\tconsole.warn('THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.');\n\t\treturn this.extractPoints(divisions);\n\t};\n\n\tShape.prototype.extrude = function (options) {\n\t\tconsole.warn('THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.');\n\t\treturn new ExtrudeGeometry(this, options);\n\t};\n\n\tShape.prototype.makeGeometry = function (options) {\n\t\tconsole.warn('THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.');\n\t\treturn new ShapeGeometry(this, options);\n\t}; //\n\n\n\tVector2.prototype.fromAttribute = function (attribute, index, offset) {\n\t\tconsole.warn('THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t};\n\n\tVector2.prototype.distanceToManhattan = function (v) {\n\t\tconsole.warn('THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');\n\t\treturn this.manhattanDistanceTo(v);\n\t};\n\n\tVector2.prototype.lengthManhattan = function () {\n\t\tconsole.warn('THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\treturn this.manhattanLength();\n\t}; //\n\n\n\tVector3.prototype.setEulerFromRotationMatrix = function () {\n\t\tconsole.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');\n\t};\n\n\tVector3.prototype.setEulerFromQuaternion = function () {\n\t\tconsole.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');\n\t};\n\n\tVector3.prototype.getPositionFromMatrix = function (m) {\n\t\tconsole.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');\n\t\treturn this.setFromMatrixPosition(m);\n\t};\n\n\tVector3.prototype.getScaleFromMatrix = function (m) {\n\t\tconsole.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');\n\t\treturn this.setFromMatrixScale(m);\n\t};\n\n\tVector3.prototype.getColumnFromMatrix = function (index, matrix) {\n\t\tconsole.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');\n\t\treturn this.setFromMatrixColumn(matrix, index);\n\t};\n\n\tVector3.prototype.applyProjection = function (m) {\n\t\tconsole.warn('THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.');\n\t\treturn this.applyMatrix4(m);\n\t};\n\n\tVector3.prototype.fromAttribute = function (attribute, index, offset) {\n\t\tconsole.warn('THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t};\n\n\tVector3.prototype.distanceToManhattan = function (v) {\n\t\tconsole.warn('THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().');\n\t\treturn this.manhattanDistanceTo(v);\n\t};\n\n\tVector3.prototype.lengthManhattan = function () {\n\t\tconsole.warn('THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\treturn this.manhattanLength();\n\t}; //\n\n\n\tVector4.prototype.fromAttribute = function (attribute, index, offset) {\n\t\tconsole.warn('THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().');\n\t\treturn this.fromBufferAttribute(attribute, index, offset);\n\t};\n\n\tVector4.prototype.lengthManhattan = function () {\n\t\tconsole.warn('THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().');\n\t\treturn this.manhattanLength();\n\t}; //\n\n\n\tObject3D.prototype.getChildByName = function (name) {\n\t\tconsole.warn('THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().');\n\t\treturn this.getObjectByName(name);\n\t};\n\n\tObject3D.prototype.renderDepth = function () {\n\t\tconsole.warn('THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.');\n\t};\n\n\tObject3D.prototype.translate = function (distance, axis) {\n\t\tconsole.warn('THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.');\n\t\treturn this.translateOnAxis(axis, distance);\n\t};\n\n\tObject3D.prototype.getWorldRotation = function () {\n\t\tconsole.error('THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.');\n\t};\n\n\tObject3D.prototype.applyMatrix = function (matrix) {\n\t\tconsole.warn('THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().');\n\t\treturn this.applyMatrix4(matrix);\n\t};\n\n\tObject.defineProperties(Object3D.prototype, {\n\t\teulerOrder: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n\t\t\t\treturn this.rotation.order;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n\t\t\t\tthis.rotation.order = value;\n\t\t\t}\n\t\t},\n\t\tuseQuaternion: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n\t\t\t}\n\t\t}\n\t});\n\n\tMesh.prototype.setDrawMode = function () {\n\t\tconsole.error('THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');\n\t};\n\n\tObject.defineProperties(Mesh.prototype, {\n\t\tdrawMode: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.');\n\t\t\t\treturn TrianglesDrawMode;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.error('THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.');\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(LOD.prototype, {\n\t\tobjects: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.LOD: .objects has been renamed to .levels.');\n\t\t\t\treturn this.levels;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperty(Skeleton.prototype, 'useVertexTexture', {\n\t\tget: function get() {\n\t\t\tconsole.warn('THREE.Skeleton: useVertexTexture has been removed.');\n\t\t},\n\t\tset: function set() {\n\t\t\tconsole.warn('THREE.Skeleton: useVertexTexture has been removed.');\n\t\t}\n\t});\n\n\tSkinnedMesh.prototype.initBones = function () {\n\t\tconsole.error('THREE.SkinnedMesh: initBones() has been removed.');\n\t};\n\n\tObject.defineProperty(Curve.prototype, '__arcLengthDivisions', {\n\t\tget: function get() {\n\t\t\tconsole.warn('THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.');\n\t\t\treturn this.arcLengthDivisions;\n\t\t},\n\t\tset: function set(value) {\n\t\t\tconsole.warn('THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.');\n\t\t\tthis.arcLengthDivisions = value;\n\t\t}\n\t}); //\n\n\tPerspectiveCamera.prototype.setLens = function (focalLength, filmGauge) {\n\t\tconsole.warn('THREE.PerspectiveCamera.setLens is deprecated. ' + 'Use .setFocalLength and .filmGauge for a photographic setup.');\n\t\tif (filmGauge !== undefined) this.filmGauge = filmGauge;\n\t\tthis.setFocalLength(focalLength);\n\t}; //\n\n\n\tObject.defineProperties(Light.prototype, {\n\t\tonlyShadow: {\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Light: .onlyShadow has been removed.');\n\t\t\t}\n\t\t},\n\t\tshadowCameraFov: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.');\n\t\t\t\tthis.shadow.camera.fov = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraLeft: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraLeft is now .shadow.camera.left.');\n\t\t\t\tthis.shadow.camera.left = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraRight: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraRight is now .shadow.camera.right.');\n\t\t\t\tthis.shadow.camera.right = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraTop: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.');\n\t\t\t\tthis.shadow.camera.top = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraBottom: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.');\n\t\t\t\tthis.shadow.camera.bottom = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraNear: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraNear is now .shadow.camera.near.');\n\t\t\t\tthis.shadow.camera.near = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraFar: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.');\n\t\t\t\tthis.shadow.camera.far = value;\n\t\t\t}\n\t\t},\n\t\tshadowCameraVisible: {\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.');\n\t\t\t}\n\t\t},\n\t\tshadowBias: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowBias is now .shadow.bias.');\n\t\t\t\tthis.shadow.bias = value;\n\t\t\t}\n\t\t},\n\t\tshadowDarkness: {\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Light: .shadowDarkness has been removed.');\n\t\t\t}\n\t\t},\n\t\tshadowMapWidth: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.');\n\t\t\t\tthis.shadow.mapSize.width = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapHeight: {\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.');\n\t\t\t\tthis.shadow.mapSize.height = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tObject.defineProperties(BufferAttribute.prototype, {\n\t\tlength: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .length has been deprecated. Use .count instead.');\n\t\t\t\treturn this.array.length;\n\t\t\t}\n\t\t},\n\t\tdynamic: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\t\t\t},\n\t\t\tset: function set()\n\t\t\t/* value */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.');\n\t\t\t\tthis.setUsage(DynamicDrawUsage);\n\t\t\t}\n\t\t}\n\t});\n\n\tBufferAttribute.prototype.setDynamic = function (value) {\n\t\tconsole.warn('THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.');\n\t\tthis.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);\n\t\treturn this;\n\t};\n\n\tBufferAttribute.prototype.copyIndicesArray = function ()\n\t/* indices */\n\t{\n\t\tconsole.error('THREE.BufferAttribute: .copyIndicesArray() has been removed.');\n\t}, BufferAttribute.prototype.setArray = function ()\n\t/* array */\n\t{\n\t\tconsole.error('THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');\n\t}; //\n\n\tBufferGeometry.prototype.addIndex = function (index) {\n\t\tconsole.warn('THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().');\n\t\tthis.setIndex(index);\n\t};\n\n\tBufferGeometry.prototype.addAttribute = function (name, attribute) {\n\t\tconsole.warn('THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().');\n\n\t\tif (!(attribute && attribute.isBufferAttribute) && !(attribute && attribute.isInterleavedBufferAttribute)) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).');\n\t\t\treturn this.setAttribute(name, new BufferAttribute(arguments[1], arguments[2]));\n\t\t}\n\n\t\tif (name === 'index') {\n\t\t\tconsole.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.');\n\t\t\tthis.setIndex(attribute);\n\t\t\treturn this;\n\t\t}\n\n\t\treturn this.setAttribute(name, attribute);\n\t};\n\n\tBufferGeometry.prototype.addDrawCall = function (start, count, indexOffset) {\n\t\tif (indexOffset !== undefined) {\n\t\t\tconsole.warn('THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.');\n\t\t}\n\n\t\tconsole.warn('THREE.BufferGeometry: .addDrawCall() is now .addGroup().');\n\t\tthis.addGroup(start, count);\n\t};\n\n\tBufferGeometry.prototype.clearDrawCalls = function () {\n\t\tconsole.warn('THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().');\n\t\tthis.clearGroups();\n\t};\n\n\tBufferGeometry.prototype.computeOffsets = function () {\n\t\tconsole.warn('THREE.BufferGeometry: .computeOffsets() has been removed.');\n\t};\n\n\tBufferGeometry.prototype.removeAttribute = function (name) {\n\t\tconsole.warn('THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().');\n\t\treturn this.deleteAttribute(name);\n\t};\n\n\tBufferGeometry.prototype.applyMatrix = function (matrix) {\n\t\tconsole.warn('THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().');\n\t\treturn this.applyMatrix4(matrix);\n\t};\n\n\tObject.defineProperties(BufferGeometry.prototype, {\n\t\tdrawcalls: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.error('THREE.BufferGeometry: .drawcalls has been renamed to .groups.');\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t},\n\t\toffsets: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.BufferGeometry: .offsets has been renamed to .groups.');\n\t\t\t\treturn this.groups;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(InstancedBufferGeometry.prototype, {\n\t\tmaxInstancedCount: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.');\n\t\t\t\treturn this.instanceCount;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount.');\n\t\t\t\tthis.instanceCount = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(Raycaster.prototype, {\n\t\tlinePrecision: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.');\n\t\t\t\treturn this.params.Line.threshold;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead.');\n\t\t\t\tthis.params.Line.threshold = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(InterleavedBuffer.prototype, {\n\t\tdynamic: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.');\n\t\t\t\treturn this.usage === DynamicDrawUsage;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.');\n\t\t\t\tthis.setUsage(value);\n\t\t\t}\n\t\t}\n\t});\n\n\tInterleavedBuffer.prototype.setDynamic = function (value) {\n\t\tconsole.warn('THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.');\n\t\tthis.setUsage(value === true ? DynamicDrawUsage : StaticDrawUsage);\n\t\treturn this;\n\t};\n\n\tInterleavedBuffer.prototype.setArray = function ()\n\t/* array */\n\t{\n\t\tconsole.error('THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers');\n\t}; //\n\n\n\tExtrudeGeometry.prototype.getArrays = function () {\n\t\tconsole.error('THREE.ExtrudeGeometry: .getArrays() has been removed.');\n\t};\n\n\tExtrudeGeometry.prototype.addShapeList = function () {\n\t\tconsole.error('THREE.ExtrudeGeometry: .addShapeList() has been removed.');\n\t};\n\n\tExtrudeGeometry.prototype.addShape = function () {\n\t\tconsole.error('THREE.ExtrudeGeometry: .addShape() has been removed.');\n\t}; //\n\n\n\tScene.prototype.dispose = function () {\n\t\tconsole.error('THREE.Scene: .dispose() has been removed.');\n\t}; //\n\n\n\tObject.defineProperties(Uniform.prototype, {\n\t\tdynamic: {\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.');\n\t\t\t}\n\t\t},\n\t\tonUpdate: {\n\t\t\tvalue: function value() {\n\t\t\t\tconsole.warn('THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.');\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tObject.defineProperties(Material.prototype, {\n\t\twrapAround: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Material: .wrapAround has been removed.');\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Material: .wrapAround has been removed.');\n\t\t\t}\n\t\t},\n\t\toverdraw: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Material: .overdraw has been removed.');\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Material: .overdraw has been removed.');\n\t\t\t}\n\t\t},\n\t\twrapRGB: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.Material: .wrapRGB has been removed.');\n\t\t\t\treturn new Color();\n\t\t\t}\n\t\t},\n\t\tshading: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.error('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.');\n\t\t\t\tthis.flatShading = value === FlatShading;\n\t\t\t}\n\t\t},\n\t\tstencilMask: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');\n\t\t\t\treturn this.stencilFuncMask;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.');\n\t\t\t\tthis.stencilFuncMask = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(MeshPhongMaterial.prototype, {\n\t\tmetal: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead');\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(MeshPhysicalMaterial.prototype, {\n\t\ttransparency: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.');\n\t\t\t\treturn this.transmission;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission.');\n\t\t\t\tthis.transmission = value;\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(ShaderMaterial.prototype, {\n\t\tderivatives: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n\t\t\t\treturn this.extensions.derivatives;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n\t\t\t\tthis.extensions.derivatives = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tWebGLRenderer.prototype.clearTarget = function (renderTarget, color, depth, stencil) {\n\t\tconsole.warn('THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.');\n\t\tthis.setRenderTarget(renderTarget);\n\t\tthis.clear(color, depth, stencil);\n\t};\n\n\tWebGLRenderer.prototype.animate = function (callback) {\n\t\tconsole.warn('THREE.WebGLRenderer: .animate() is now .setAnimationLoop().');\n\t\tthis.setAnimationLoop(callback);\n\t};\n\n\tWebGLRenderer.prototype.getCurrentRenderTarget = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().');\n\t\treturn this.getRenderTarget();\n\t};\n\n\tWebGLRenderer.prototype.getMaxAnisotropy = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().');\n\t\treturn this.capabilities.getMaxAnisotropy();\n\t};\n\n\tWebGLRenderer.prototype.getPrecision = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.');\n\t\treturn this.capabilities.precision;\n\t};\n\n\tWebGLRenderer.prototype.resetGLState = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .resetGLState() is now .state.reset().');\n\t\treturn this.state.reset();\n\t};\n\n\tWebGLRenderer.prototype.supportsFloatTextures = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).');\n\t\treturn this.extensions.get('OES_texture_float');\n\t};\n\n\tWebGLRenderer.prototype.supportsHalfFloatTextures = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).');\n\t\treturn this.extensions.get('OES_texture_half_float');\n\t};\n\n\tWebGLRenderer.prototype.supportsStandardDerivatives = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).');\n\t\treturn this.extensions.get('OES_standard_derivatives');\n\t};\n\n\tWebGLRenderer.prototype.supportsCompressedTextureS3TC = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).');\n\t\treturn this.extensions.get('WEBGL_compressed_texture_s3tc');\n\t};\n\n\tWebGLRenderer.prototype.supportsCompressedTexturePVRTC = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).');\n\t\treturn this.extensions.get('WEBGL_compressed_texture_pvrtc');\n\t};\n\n\tWebGLRenderer.prototype.supportsBlendMinMax = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).');\n\t\treturn this.extensions.get('EXT_blend_minmax');\n\t};\n\n\tWebGLRenderer.prototype.supportsVertexTextures = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.');\n\t\treturn this.capabilities.vertexTextures;\n\t};\n\n\tWebGLRenderer.prototype.supportsInstancedArrays = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).');\n\t\treturn this.extensions.get('ANGLE_instanced_arrays');\n\t};\n\n\tWebGLRenderer.prototype.enableScissorTest = function (boolean) {\n\t\tconsole.warn('THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().');\n\t\tthis.setScissorTest(boolean);\n\t};\n\n\tWebGLRenderer.prototype.initMaterial = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .initMaterial() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.addPrePlugin = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .addPrePlugin() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.addPostPlugin = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .addPostPlugin() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.updateShadowMap = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .updateShadowMap() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setFaceCulling = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setFaceCulling() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.allocTextureUnit = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .allocTextureUnit() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setTexture = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setTexture() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setTexture2D = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setTexture2D() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.setTextureCube = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .setTextureCube() has been removed.');\n\t};\n\n\tWebGLRenderer.prototype.getActiveMipMapLevel = function () {\n\t\tconsole.warn('THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().');\n\t\treturn this.getActiveMipmapLevel();\n\t};\n\n\tObject.defineProperties(WebGLRenderer.prototype, {\n\t\tshadowMapEnabled: {\n\t\t\tget: function get() {\n\t\t\t\treturn this.shadowMap.enabled;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.');\n\t\t\t\tthis.shadowMap.enabled = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapType: {\n\t\t\tget: function get() {\n\t\t\t\treturn this.shadowMap.type;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.');\n\t\t\t\tthis.shadowMap.type = value;\n\t\t\t}\n\t\t},\n\t\tshadowMapCullFace: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function set()\n\t\t\t/* value */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\tcontext: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.');\n\t\t\t\treturn this.getContext();\n\t\t\t}\n\t\t},\n\t\tvr: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .vr has been renamed to .xr');\n\t\t\t\treturn this.xr;\n\t\t\t}\n\t\t},\n\t\tgammaInput: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.');\n\t\t\t}\n\t\t},\n\t\tgammaOutput: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.');\n\t\t\t\tthis.outputEncoding = value === true ? sRGBEncoding : LinearEncoding;\n\t\t\t}\n\t\t},\n\t\ttoneMappingWhitePoint: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');\n\t\t\t\treturn 1.0;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.');\n\t\t\t}\n\t\t}\n\t});\n\tObject.defineProperties(WebGLShadowMap.prototype, {\n\t\tcullFace: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function set()\n\t\t\t/* cullFace */\n\t\t\t{\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\trenderReverseSided: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t},\n\t\trenderSingleSided: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.');\n\t\t\t}\n\t\t}\n\t});\n\tfunction WebGLRenderTargetCube(width, height, options) {\n\t\tconsole.warn('THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).');\n\t\treturn new WebGLCubeRenderTarget(width, options);\n\t} //\n\n\tObject.defineProperties(WebGLRenderTarget.prototype, {\n\t\twrapS: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n\t\t\t\treturn this.texture.wrapS;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n\t\t\t\tthis.texture.wrapS = value;\n\t\t\t}\n\t\t},\n\t\twrapT: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n\t\t\t\treturn this.texture.wrapT;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n\t\t\t\tthis.texture.wrapT = value;\n\t\t\t}\n\t\t},\n\t\tmagFilter: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n\t\t\t\treturn this.texture.magFilter;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n\t\t\t\tthis.texture.magFilter = value;\n\t\t\t}\n\t\t},\n\t\tminFilter: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n\t\t\t\treturn this.texture.minFilter;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n\t\t\t\tthis.texture.minFilter = value;\n\t\t\t}\n\t\t},\n\t\tanisotropy: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n\t\t\t\treturn this.texture.anisotropy;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n\t\t\t\tthis.texture.anisotropy = value;\n\t\t\t}\n\t\t},\n\t\toffset: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n\t\t\t\treturn this.texture.offset;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n\t\t\t\tthis.texture.offset = value;\n\t\t\t}\n\t\t},\n\t\trepeat: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n\t\t\t\treturn this.texture.repeat;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n\t\t\t\tthis.texture.repeat = value;\n\t\t\t}\n\t\t},\n\t\tformat: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n\t\t\t\treturn this.texture.format;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n\t\t\t\tthis.texture.format = value;\n\t\t\t}\n\t\t},\n\t\ttype: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n\t\t\t\treturn this.texture.type;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n\t\t\t\tthis.texture.type = value;\n\t\t\t}\n\t\t},\n\t\tgenerateMipmaps: {\n\t\t\tget: function get() {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n\t\t\t\treturn this.texture.generateMipmaps;\n\t\t\t},\n\t\t\tset: function set(value) {\n\t\t\t\tconsole.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n\t\t\t\tthis.texture.generateMipmaps = value;\n\t\t\t}\n\t\t}\n\t}); //\n\n\tObject.defineProperties(Audio.prototype, {\n\t\tload: {\n\t\t\tvalue: function value(file) {\n\t\t\t\tconsole.warn('THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.');\n\t\t\t\tvar scope = this;\n\t\t\t\tvar audioLoader = new AudioLoader();\n\t\t\t\taudioLoader.load(file, function (buffer) {\n\t\t\t\t\tscope.setBuffer(buffer);\n\t\t\t\t});\n\t\t\t\treturn this;\n\t\t\t}\n\t\t},\n\t\tstartTime: {\n\t\t\tset: function set() {\n\t\t\t\tconsole.warn('THREE.Audio: .startTime is now .play( delay ).');\n\t\t\t}\n\t\t}\n\t});\n\n\tAudioAnalyser.prototype.getData = function () {\n\t\tconsole.warn('THREE.AudioAnalyser: .getData() is now .getFrequencyData().');\n\t\treturn this.getFrequencyData();\n\t}; //\n\n\n\tCubeCamera.prototype.updateCubeMap = function (renderer, scene) {\n\t\tconsole.warn('THREE.CubeCamera: .updateCubeMap() is now .update().');\n\t\treturn this.update(renderer, scene);\n\t};\n\n\tCubeCamera.prototype.clear = function (renderer, color, depth, stencil) {\n\t\tconsole.warn('THREE.CubeCamera: .clear() is now .renderTarget.clear().');\n\t\treturn this.renderTarget.clear(renderer, color, depth, stencil);\n\t};\n\n\tImageUtils.crossOrigin = undefined;\n\n\tImageUtils.loadTexture = function (url, mapping, onLoad, onError) {\n\t\tconsole.warn('THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.');\n\t\tvar loader = new TextureLoader();\n\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\tvar texture = loader.load(url, onLoad, undefined, onError);\n\t\tif (mapping) texture.mapping = mapping;\n\t\treturn texture;\n\t};\n\n\tImageUtils.loadTextureCube = function (urls, mapping, onLoad, onError) {\n\t\tconsole.warn('THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.');\n\t\tvar loader = new CubeTextureLoader();\n\t\tloader.setCrossOrigin(this.crossOrigin);\n\t\tvar texture = loader.load(urls, onLoad, undefined, onError);\n\t\tif (mapping) texture.mapping = mapping;\n\t\treturn texture;\n\t};\n\n\tImageUtils.loadCompressedTexture = function () {\n\t\tconsole.error('THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.');\n\t};\n\n\tImageUtils.loadCompressedTextureCube = function () {\n\t\tconsole.error('THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.');\n\t}; //\n\n\n\tfunction CanvasRenderer() {\n\t\tconsole.error('THREE.CanvasRenderer has been removed');\n\t} //\n\n\tfunction JSONLoader() {\n\t\tconsole.error('THREE.JSONLoader has been removed.');\n\t} //\n\n\tvar SceneUtils = {\n\t\tcreateMultiMaterialObject: function createMultiMaterialObject()\n\t\t/* geometry, materials */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t},\n\t\tdetach: function detach()\n\t\t/* child, parent, scene */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t},\n\t\tattach: function attach()\n\t\t/* child, scene, parent */\n\t\t{\n\t\t\tconsole.error('THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js');\n\t\t}\n\t}; //\n\n\tfunction LensFlare() {\n\t\tconsole.error('THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js');\n\t}\n\n\tif (typeof __THREE_DEVTOOLS__ !== 'undefined') {\n\t\t/* eslint-disable no-undef */\n\t\t__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent('register', {\n\t\t\tdetail: {\n\t\t\t\trevision: REVISION\n\t\t\t}\n\t\t}));\n\t\t/* eslint-enable no-undef */\n\n\t}\n\n\tif (typeof window !== 'undefined') {\n\t\tif (window.__THREE__) {\n\t\t\tconsole.warn('WARNING: Multiple instances of Three.js being imported.');\n\t\t} else {\n\t\t\twindow.__THREE__ = REVISION;\n\t\t}\n\t}\n\n\texports.ACESFilmicToneMapping = ACESFilmicToneMapping;\n\texports.AddEquation = AddEquation;\n\texports.AddOperation = AddOperation;\n\texports.AdditiveAnimationBlendMode = AdditiveAnimationBlendMode;\n\texports.AdditiveBlending = AdditiveBlending;\n\texports.AlphaFormat = AlphaFormat;\n\texports.AlwaysDepth = AlwaysDepth;\n\texports.AlwaysStencilFunc = AlwaysStencilFunc;\n\texports.AmbientLight = AmbientLight;\n\texports.AmbientLightProbe = AmbientLightProbe;\n\texports.AnimationClip = AnimationClip;\n\texports.AnimationLoader = AnimationLoader;\n\texports.AnimationMixer = AnimationMixer;\n\texports.AnimationObjectGroup = AnimationObjectGroup;\n\texports.AnimationUtils = AnimationUtils;\n\texports.ArcCurve = ArcCurve;\n\texports.ArrayCamera = ArrayCamera;\n\texports.ArrowHelper = ArrowHelper;\n\texports.Audio = Audio;\n\texports.AudioAnalyser = AudioAnalyser;\n\texports.AudioContext = AudioContext;\n\texports.AudioListener = AudioListener;\n\texports.AudioLoader = AudioLoader;\n\texports.AxesHelper = AxesHelper;\n\texports.AxisHelper = AxisHelper;\n\texports.BackSide = BackSide;\n\texports.BasicDepthPacking = BasicDepthPacking;\n\texports.BasicShadowMap = BasicShadowMap;\n\texports.BinaryTextureLoader = BinaryTextureLoader;\n\texports.Bone = Bone;\n\texports.BooleanKeyframeTrack = BooleanKeyframeTrack;\n\texports.BoundingBoxHelper = BoundingBoxHelper;\n\texports.Box2 = Box2;\n\texports.Box3 = Box3;\n\texports.Box3Helper = Box3Helper;\n\texports.BoxBufferGeometry = BoxGeometry;\n\texports.BoxGeometry = BoxGeometry;\n\texports.BoxHelper = BoxHelper;\n\texports.BufferAttribute = BufferAttribute;\n\texports.BufferGeometry = BufferGeometry;\n\texports.BufferGeometryLoader = BufferGeometryLoader;\n\texports.ByteType = ByteType;\n\texports.Cache = Cache;\n\texports.Camera = Camera;\n\texports.CameraHelper = CameraHelper;\n\texports.CanvasRenderer = CanvasRenderer;\n\texports.CanvasTexture = CanvasTexture;\n\texports.CatmullRomCurve3 = CatmullRomCurve3;\n\texports.CineonToneMapping = CineonToneMapping;\n\texports.CircleBufferGeometry = CircleGeometry;\n\texports.CircleGeometry = CircleGeometry;\n\texports.ClampToEdgeWrapping = ClampToEdgeWrapping;\n\texports.Clock = Clock;\n\texports.Color = Color;\n\texports.ColorKeyframeTrack = ColorKeyframeTrack;\n\texports.CompressedTexture = CompressedTexture;\n\texports.CompressedTextureLoader = CompressedTextureLoader;\n\texports.ConeBufferGeometry = ConeGeometry;\n\texports.ConeGeometry = ConeGeometry;\n\texports.CubeCamera = CubeCamera;\n\texports.CubeReflectionMapping = CubeReflectionMapping;\n\texports.CubeRefractionMapping = CubeRefractionMapping;\n\texports.CubeTexture = CubeTexture;\n\texports.CubeTextureLoader = CubeTextureLoader;\n\texports.CubeUVReflectionMapping = CubeUVReflectionMapping;\n\texports.CubeUVRefractionMapping = CubeUVRefractionMapping;\n\texports.CubicBezierCurve = CubicBezierCurve;\n\texports.CubicBezierCurve3 = CubicBezierCurve3;\n\texports.CubicInterpolant = CubicInterpolant;\n\texports.CullFaceBack = CullFaceBack;\n\texports.CullFaceFront = CullFaceFront;\n\texports.CullFaceFrontBack = CullFaceFrontBack;\n\texports.CullFaceNone = CullFaceNone;\n\texports.Curve = Curve;\n\texports.CurvePath = CurvePath;\n\texports.CustomBlending = CustomBlending;\n\texports.CustomToneMapping = CustomToneMapping;\n\texports.CylinderBufferGeometry = CylinderGeometry;\n\texports.CylinderGeometry = CylinderGeometry;\n\texports.Cylindrical = Cylindrical;\n\texports.DataTexture = DataTexture;\n\texports.DataTexture2DArray = DataTexture2DArray;\n\texports.DataTexture3D = DataTexture3D;\n\texports.DataTextureLoader = DataTextureLoader;\n\texports.DataUtils = DataUtils;\n\texports.DecrementStencilOp = DecrementStencilOp;\n\texports.DecrementWrapStencilOp = DecrementWrapStencilOp;\n\texports.DefaultLoadingManager = DefaultLoadingManager;\n\texports.DepthFormat = DepthFormat;\n\texports.DepthStencilFormat = DepthStencilFormat;\n\texports.DepthTexture = DepthTexture;\n\texports.DirectionalLight = DirectionalLight;\n\texports.DirectionalLightHelper = DirectionalLightHelper;\n\texports.DiscreteInterpolant = DiscreteInterpolant;\n\texports.DodecahedronBufferGeometry = DodecahedronGeometry;\n\texports.DodecahedronGeometry = DodecahedronGeometry;\n\texports.DoubleSide = DoubleSide;\n\texports.DstAlphaFactor = DstAlphaFactor;\n\texports.DstColorFactor = DstColorFactor;\n\texports.DynamicBufferAttribute = DynamicBufferAttribute;\n\texports.DynamicCopyUsage = DynamicCopyUsage;\n\texports.DynamicDrawUsage = DynamicDrawUsage;\n\texports.DynamicReadUsage = DynamicReadUsage;\n\texports.EdgesGeometry = EdgesGeometry;\n\texports.EdgesHelper = EdgesHelper;\n\texports.EllipseCurve = EllipseCurve;\n\texports.EqualDepth = EqualDepth;\n\texports.EqualStencilFunc = EqualStencilFunc;\n\texports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;\n\texports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;\n\texports.Euler = Euler;\n\texports.EventDispatcher = EventDispatcher;\n\texports.ExtrudeBufferGeometry = ExtrudeGeometry;\n\texports.ExtrudeGeometry = ExtrudeGeometry;\n\texports.FaceColors = FaceColors;\n\texports.FileLoader = FileLoader;\n\texports.FlatShading = FlatShading;\n\texports.Float16BufferAttribute = Float16BufferAttribute;\n\texports.Float32Attribute = Float32Attribute;\n\texports.Float32BufferAttribute = Float32BufferAttribute;\n\texports.Float64Attribute = Float64Attribute;\n\texports.Float64BufferAttribute = Float64BufferAttribute;\n\texports.FloatType = FloatType;\n\texports.Fog = Fog;\n\texports.FogExp2 = FogExp2;\n\texports.Font = Font;\n\texports.FontLoader = FontLoader;\n\texports.FrontSide = FrontSide;\n\texports.Frustum = Frustum;\n\texports.GLBufferAttribute = GLBufferAttribute;\n\texports.GLSL1 = GLSL1;\n\texports.GLSL3 = GLSL3;\n\texports.GammaEncoding = GammaEncoding;\n\texports.GreaterDepth = GreaterDepth;\n\texports.GreaterEqualDepth = GreaterEqualDepth;\n\texports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;\n\texports.GreaterStencilFunc = GreaterStencilFunc;\n\texports.GridHelper = GridHelper;\n\texports.Group = Group;\n\texports.HalfFloatType = HalfFloatType;\n\texports.HemisphereLight = HemisphereLight;\n\texports.HemisphereLightHelper = HemisphereLightHelper;\n\texports.HemisphereLightProbe = HemisphereLightProbe;\n\texports.IcosahedronBufferGeometry = IcosahedronGeometry;\n\texports.IcosahedronGeometry = IcosahedronGeometry;\n\texports.ImageBitmapLoader = ImageBitmapLoader;\n\texports.ImageLoader = ImageLoader;\n\texports.ImageUtils = ImageUtils;\n\texports.ImmediateRenderObject = ImmediateRenderObject;\n\texports.IncrementStencilOp = IncrementStencilOp;\n\texports.IncrementWrapStencilOp = IncrementWrapStencilOp;\n\texports.InstancedBufferAttribute = InstancedBufferAttribute;\n\texports.InstancedBufferGeometry = InstancedBufferGeometry;\n\texports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;\n\texports.InstancedMesh = InstancedMesh;\n\texports.Int16Attribute = Int16Attribute;\n\texports.Int16BufferAttribute = Int16BufferAttribute;\n\texports.Int32Attribute = Int32Attribute;\n\texports.Int32BufferAttribute = Int32BufferAttribute;\n\texports.Int8Attribute = Int8Attribute;\n\texports.Int8BufferAttribute = Int8BufferAttribute;\n\texports.IntType = IntType;\n\texports.InterleavedBuffer = InterleavedBuffer;\n\texports.InterleavedBufferAttribute = InterleavedBufferAttribute;\n\texports.Interpolant = Interpolant;\n\texports.InterpolateDiscrete = InterpolateDiscrete;\n\texports.InterpolateLinear = InterpolateLinear;\n\texports.InterpolateSmooth = InterpolateSmooth;\n\texports.InvertStencilOp = InvertStencilOp;\n\texports.JSONLoader = JSONLoader;\n\texports.KeepStencilOp = KeepStencilOp;\n\texports.KeyframeTrack = KeyframeTrack;\n\texports.LOD = LOD;\n\texports.LatheBufferGeometry = LatheGeometry;\n\texports.LatheGeometry = LatheGeometry;\n\texports.Layers = Layers;\n\texports.LensFlare = LensFlare;\n\texports.LessDepth = LessDepth;\n\texports.LessEqualDepth = LessEqualDepth;\n\texports.LessEqualStencilFunc = LessEqualStencilFunc;\n\texports.LessStencilFunc = LessStencilFunc;\n\texports.Light = Light;\n\texports.LightProbe = LightProbe;\n\texports.Line = Line;\n\texports.Line3 = Line3;\n\texports.LineBasicMaterial = LineBasicMaterial;\n\texports.LineCurve = LineCurve;\n\texports.LineCurve3 = LineCurve3;\n\texports.LineDashedMaterial = LineDashedMaterial;\n\texports.LineLoop = LineLoop;\n\texports.LinePieces = LinePieces;\n\texports.LineSegments = LineSegments;\n\texports.LineStrip = LineStrip;\n\texports.LinearEncoding = LinearEncoding;\n\texports.LinearFilter = LinearFilter;\n\texports.LinearInterpolant = LinearInterpolant;\n\texports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;\n\texports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;\n\texports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;\n\texports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;\n\texports.LinearToneMapping = LinearToneMapping;\n\texports.Loader = Loader;\n\texports.LoaderUtils = LoaderUtils;\n\texports.LoadingManager = LoadingManager;\n\texports.LogLuvEncoding = LogLuvEncoding;\n\texports.LoopOnce = LoopOnce;\n\texports.LoopPingPong = LoopPingPong;\n\texports.LoopRepeat = LoopRepeat;\n\texports.LuminanceAlphaFormat = LuminanceAlphaFormat;\n\texports.LuminanceFormat = LuminanceFormat;\n\texports.MOUSE = MOUSE;\n\texports.Material = Material;\n\texports.MaterialLoader = MaterialLoader;\n\texports.Math = MathUtils;\n\texports.MathUtils = MathUtils;\n\texports.Matrix3 = Matrix3;\n\texports.Matrix4 = Matrix4;\n\texports.MaxEquation = MaxEquation;\n\texports.Mesh = Mesh;\n\texports.MeshBasicMaterial = MeshBasicMaterial;\n\texports.MeshDepthMaterial = MeshDepthMaterial;\n\texports.MeshDistanceMaterial = MeshDistanceMaterial;\n\texports.MeshFaceMaterial = MeshFaceMaterial;\n\texports.MeshLambertMaterial = MeshLambertMaterial;\n\texports.MeshMatcapMaterial = MeshMatcapMaterial;\n\texports.MeshNormalMaterial = MeshNormalMaterial;\n\texports.MeshPhongMaterial = MeshPhongMaterial;\n\texports.MeshPhysicalMaterial = MeshPhysicalMaterial;\n\texports.MeshStandardMaterial = MeshStandardMaterial;\n\texports.MeshToonMaterial = MeshToonMaterial;\n\texports.MinEquation = MinEquation;\n\texports.MirroredRepeatWrapping = MirroredRepeatWrapping;\n\texports.MixOperation = MixOperation;\n\texports.MultiMaterial = MultiMaterial;\n\texports.MultiplyBlending = MultiplyBlending;\n\texports.MultiplyOperation = MultiplyOperation;\n\texports.NearestFilter = NearestFilter;\n\texports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;\n\texports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;\n\texports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;\n\texports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;\n\texports.NeverDepth = NeverDepth;\n\texports.NeverStencilFunc = NeverStencilFunc;\n\texports.NoBlending = NoBlending;\n\texports.NoColors = NoColors;\n\texports.NoToneMapping = NoToneMapping;\n\texports.NormalAnimationBlendMode = NormalAnimationBlendMode;\n\texports.NormalBlending = NormalBlending;\n\texports.NotEqualDepth = NotEqualDepth;\n\texports.NotEqualStencilFunc = NotEqualStencilFunc;\n\texports.NumberKeyframeTrack = NumberKeyframeTrack;\n\texports.Object3D = Object3D;\n\texports.ObjectLoader = ObjectLoader;\n\texports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;\n\texports.OctahedronBufferGeometry = OctahedronGeometry;\n\texports.OctahedronGeometry = OctahedronGeometry;\n\texports.OneFactor = OneFactor;\n\texports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;\n\texports.OneMinusDstColorFactor = OneMinusDstColorFactor;\n\texports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;\n\texports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;\n\texports.OrthographicCamera = OrthographicCamera;\n\texports.PCFShadowMap = PCFShadowMap;\n\texports.PCFSoftShadowMap = PCFSoftShadowMap;\n\texports.PMREMGenerator = PMREMGenerator;\n\texports.ParametricBufferGeometry = ParametricGeometry;\n\texports.ParametricGeometry = ParametricGeometry;\n\texports.Particle = Particle;\n\texports.ParticleBasicMaterial = ParticleBasicMaterial;\n\texports.ParticleSystem = ParticleSystem;\n\texports.ParticleSystemMaterial = ParticleSystemMaterial;\n\texports.Path = Path;\n\texports.PerspectiveCamera = PerspectiveCamera;\n\texports.Plane = Plane;\n\texports.PlaneBufferGeometry = PlaneGeometry;\n\texports.PlaneGeometry = PlaneGeometry;\n\texports.PlaneHelper = PlaneHelper;\n\texports.PointCloud = PointCloud;\n\texports.PointCloudMaterial = PointCloudMaterial;\n\texports.PointLight = PointLight;\n\texports.PointLightHelper = PointLightHelper;\n\texports.Points = Points;\n\texports.PointsMaterial = PointsMaterial;\n\texports.PolarGridHelper = PolarGridHelper;\n\texports.PolyhedronBufferGeometry = PolyhedronGeometry;\n\texports.PolyhedronGeometry = PolyhedronGeometry;\n\texports.PositionalAudio = PositionalAudio;\n\texports.PropertyBinding = PropertyBinding;\n\texports.PropertyMixer = PropertyMixer;\n\texports.QuadraticBezierCurve = QuadraticBezierCurve;\n\texports.QuadraticBezierCurve3 = QuadraticBezierCurve3;\n\texports.Quaternion = Quaternion;\n\texports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;\n\texports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;\n\texports.REVISION = REVISION;\n\texports.RGBADepthPacking = RGBADepthPacking;\n\texports.RGBAFormat = RGBAFormat;\n\texports.RGBAIntegerFormat = RGBAIntegerFormat;\n\texports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;\n\texports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;\n\texports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;\n\texports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;\n\texports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;\n\texports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;\n\texports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;\n\texports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;\n\texports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;\n\texports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;\n\texports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;\n\texports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;\n\texports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;\n\texports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;\n\texports.RGBA_BPTC_Format = RGBA_BPTC_Format;\n\texports.RGBA_ETC2_EAC_Format = RGBA_ETC2_EAC_Format;\n\texports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;\n\texports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;\n\texports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;\n\texports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;\n\texports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;\n\texports.RGBDEncoding = RGBDEncoding;\n\texports.RGBEEncoding = RGBEEncoding;\n\texports.RGBEFormat = RGBEFormat;\n\texports.RGBFormat = RGBFormat;\n\texports.RGBIntegerFormat = RGBIntegerFormat;\n\texports.RGBM16Encoding = RGBM16Encoding;\n\texports.RGBM7Encoding = RGBM7Encoding;\n\texports.RGB_ETC1_Format = RGB_ETC1_Format;\n\texports.RGB_ETC2_Format = RGB_ETC2_Format;\n\texports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;\n\texports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;\n\texports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;\n\texports.RGFormat = RGFormat;\n\texports.RGIntegerFormat = RGIntegerFormat;\n\texports.RawShaderMaterial = RawShaderMaterial;\n\texports.Ray = Ray;\n\texports.Raycaster = Raycaster;\n\texports.RectAreaLight = RectAreaLight;\n\texports.RedFormat = RedFormat;\n\texports.RedIntegerFormat = RedIntegerFormat;\n\texports.ReinhardToneMapping = ReinhardToneMapping;\n\texports.RepeatWrapping = RepeatWrapping;\n\texports.ReplaceStencilOp = ReplaceStencilOp;\n\texports.ReverseSubtractEquation = ReverseSubtractEquation;\n\texports.RingBufferGeometry = RingGeometry;\n\texports.RingGeometry = RingGeometry;\n\texports.SRGB8_ALPHA8_ASTC_10x10_Format = SRGB8_ALPHA8_ASTC_10x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x5_Format = SRGB8_ALPHA8_ASTC_10x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x6_Format = SRGB8_ALPHA8_ASTC_10x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_10x8_Format = SRGB8_ALPHA8_ASTC_10x8_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x10_Format = SRGB8_ALPHA8_ASTC_12x10_Format;\n\texports.SRGB8_ALPHA8_ASTC_12x12_Format = SRGB8_ALPHA8_ASTC_12x12_Format;\n\texports.SRGB8_ALPHA8_ASTC_4x4_Format = SRGB8_ALPHA8_ASTC_4x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x4_Format = SRGB8_ALPHA8_ASTC_5x4_Format;\n\texports.SRGB8_ALPHA8_ASTC_5x5_Format = SRGB8_ALPHA8_ASTC_5x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x5_Format = SRGB8_ALPHA8_ASTC_6x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_6x6_Format = SRGB8_ALPHA8_ASTC_6x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x5_Format = SRGB8_ALPHA8_ASTC_8x5_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x6_Format = SRGB8_ALPHA8_ASTC_8x6_Format;\n\texports.SRGB8_ALPHA8_ASTC_8x8_Format = SRGB8_ALPHA8_ASTC_8x8_Format;\n\texports.Scene = Scene;\n\texports.SceneUtils = SceneUtils;\n\texports.ShaderChunk = ShaderChunk;\n\texports.ShaderLib = ShaderLib;\n\texports.ShaderMaterial = ShaderMaterial;\n\texports.ShadowMaterial = ShadowMaterial;\n\texports.Shape = Shape;\n\texports.ShapeBufferGeometry = ShapeGeometry;\n\texports.ShapeGeometry = ShapeGeometry;\n\texports.ShapePath = ShapePath;\n\texports.ShapeUtils = ShapeUtils;\n\texports.ShortType = ShortType;\n\texports.Skeleton = Skeleton;\n\texports.SkeletonHelper = SkeletonHelper;\n\texports.SkinnedMesh = SkinnedMesh;\n\texports.SmoothShading = SmoothShading;\n\texports.Sphere = Sphere;\n\texports.SphereBufferGeometry = SphereGeometry;\n\texports.SphereGeometry = SphereGeometry;\n\texports.Spherical = Spherical;\n\texports.SphericalHarmonics3 = SphericalHarmonics3;\n\texports.SplineCurve = SplineCurve;\n\texports.SpotLight = SpotLight;\n\texports.SpotLightHelper = SpotLightHelper;\n\texports.Sprite = Sprite;\n\texports.SpriteMaterial = SpriteMaterial;\n\texports.SrcAlphaFactor = SrcAlphaFactor;\n\texports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;\n\texports.SrcColorFactor = SrcColorFactor;\n\texports.StaticCopyUsage = StaticCopyUsage;\n\texports.StaticDrawUsage = StaticDrawUsage;\n\texports.StaticReadUsage = StaticReadUsage;\n\texports.StereoCamera = StereoCamera;\n\texports.StreamCopyUsage = StreamCopyUsage;\n\texports.StreamDrawUsage = StreamDrawUsage;\n\texports.StreamReadUsage = StreamReadUsage;\n\texports.StringKeyframeTrack = StringKeyframeTrack;\n\texports.SubtractEquation = SubtractEquation;\n\texports.SubtractiveBlending = SubtractiveBlending;\n\texports.TOUCH = TOUCH;\n\texports.TangentSpaceNormalMap = TangentSpaceNormalMap;\n\texports.TetrahedronBufferGeometry = TetrahedronGeometry;\n\texports.TetrahedronGeometry = TetrahedronGeometry;\n\texports.TextBufferGeometry = TextGeometry;\n\texports.TextGeometry = TextGeometry;\n\texports.Texture = Texture;\n\texports.TextureLoader = TextureLoader;\n\texports.TorusBufferGeometry = TorusGeometry;\n\texports.TorusGeometry = TorusGeometry;\n\texports.TorusKnotBufferGeometry = TorusKnotGeometry;\n\texports.TorusKnotGeometry = TorusKnotGeometry;\n\texports.Triangle = Triangle;\n\texports.TriangleFanDrawMode = TriangleFanDrawMode;\n\texports.TriangleStripDrawMode = TriangleStripDrawMode;\n\texports.TrianglesDrawMode = TrianglesDrawMode;\n\texports.TubeBufferGeometry = TubeGeometry;\n\texports.TubeGeometry = TubeGeometry;\n\texports.UVMapping = UVMapping;\n\texports.Uint16Attribute = Uint16Attribute;\n\texports.Uint16BufferAttribute = Uint16BufferAttribute;\n\texports.Uint32Attribute = Uint32Attribute;\n\texports.Uint32BufferAttribute = Uint32BufferAttribute;\n\texports.Uint8Attribute = Uint8Attribute;\n\texports.Uint8BufferAttribute = Uint8BufferAttribute;\n\texports.Uint8ClampedAttribute = Uint8ClampedAttribute;\n\texports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;\n\texports.Uniform = Uniform;\n\texports.UniformsLib = UniformsLib;\n\texports.UniformsUtils = UniformsUtils;\n\texports.UnsignedByteType = UnsignedByteType;\n\texports.UnsignedInt248Type = UnsignedInt248Type;\n\texports.UnsignedIntType = UnsignedIntType;\n\texports.UnsignedShort4444Type = UnsignedShort4444Type;\n\texports.UnsignedShort5551Type = UnsignedShort5551Type;\n\texports.UnsignedShort565Type = UnsignedShort565Type;\n\texports.UnsignedShortType = UnsignedShortType;\n\texports.VSMShadowMap = VSMShadowMap;\n\texports.Vector2 = Vector2;\n\texports.Vector3 = Vector3;\n\texports.Vector4 = Vector4;\n\texports.VectorKeyframeTrack = VectorKeyframeTrack;\n\texports.Vertex = Vertex;\n\texports.VertexColors = VertexColors;\n\texports.VideoTexture = VideoTexture;\n\texports.WebGL1Renderer = WebGL1Renderer;\n\texports.WebGLCubeRenderTarget = WebGLCubeRenderTarget;\n\texports.WebGLMultisampleRenderTarget = WebGLMultisampleRenderTarget;\n\texports.WebGLRenderTarget = WebGLRenderTarget;\n\texports.WebGLRenderTargetCube = WebGLRenderTargetCube;\n\texports.WebGLRenderer = WebGLRenderer;\n\texports.WebGLUtils = WebGLUtils;\n\texports.WireframeGeometry = WireframeGeometry;\n\texports.WireframeHelper = WireframeHelper;\n\texports.WrapAroundEnding = WrapAroundEnding;\n\texports.XHRLoader = XHRLoader;\n\texports.ZeroCurvatureEnding = ZeroCurvatureEnding;\n\texports.ZeroFactor = ZeroFactor;\n\texports.ZeroSlopeEnding = ZeroSlopeEnding;\n\texports.ZeroStencilOp = ZeroStencilOp;\n\texports.sRGBEncoding = sRGBEncoding;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nTHREE.OrbitControls = function ( object, domElement ) {\n\n\tif ( domElement === undefined ) console.warn( 'THREE.OrbitControls: The second parameter \"domElement\" is now mandatory.' );\n\tif ( domElement === document ) console.error( 'THREE.OrbitControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.' );\n\n\tthis.object = object;\n\tthis.domElement = domElement;\n\n\t// Set to false to disable this control\n\tthis.enabled = true;\n\n\t// \"target\" sets the location of focus, where the object orbits around\n\tthis.target = new THREE.Vector3();\n\n\t// How far you can dolly in and out ( PerspectiveCamera only )\n\tthis.minDistance = 0;\n\tthis.maxDistance = Infinity;\n\n\t// How far you can zoom in and out ( OrthographicCamera only )\n\tthis.minZoom = 0;\n\tthis.maxZoom = Infinity;\n\n\t// How far you can orbit vertically, upper and lower limits.\n\t// Range is 0 to Math.PI radians.\n\tthis.minPolarAngle = 0; // radians\n\tthis.maxPolarAngle = Math.PI; // radians\n\n\t// How far you can orbit horizontally, upper and lower limits.\n\t// If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )\n\tthis.minAzimuthAngle = - Infinity; // radians\n\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t// Set to true to enable damping (inertia)\n\t// If damping is enabled, you must call controls.update() in your animation loop\n\tthis.enableDamping = false;\n\tthis.dampingFactor = 0.05;\n\n\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t// Set to false to disable zooming\n\tthis.enableZoom = true;\n\tthis.zoomSpeed = 1.0;\n\n\t// Set to false to disable rotating\n\tthis.enableRotate = true;\n\tthis.rotateSpeed = 1.0;\n\n\t// Set to false to disable panning\n\tthis.enablePan = true;\n\tthis.panSpeed = 1.0;\n\tthis.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t// Set to true to automatically rotate around the target\n\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\tthis.autoRotate = false;\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\n\n\t// The four arrow keys\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t// Mouse buttons\n\tthis.mouseButtons = { LEFT: THREE.MOUSE.ROTATE, MIDDLE: THREE.MOUSE.DOLLY, RIGHT: THREE.MOUSE.PAN };\n\n\t// Touch fingers\n\tthis.touches = { ONE: THREE.TOUCH.ROTATE, TWO: THREE.TOUCH.DOLLY_PAN };\n\n\t// for reset\n\tthis.target0 = this.target.clone();\n\tthis.position0 = this.object.position.clone();\n\tthis.zoom0 = this.object.zoom;\n\n\t// the target DOM element for key events\n\tthis._domElementKeyEvents = null;\n\n\t//\n\t// public methods\n\t//\n\n\tthis.getPolarAngle = function () {\n\n\t\treturn spherical.phi;\n\n\t};\n\n\tthis.getAzimuthalAngle = function () {\n\n\t\treturn spherical.theta;\n\n\t};\n\n\tthis.listenToKeyEvents = function ( domElement ) {\n\n\t\tdomElement.addEventListener( 'keydown', onKeyDown );\n\t\tthis._domElementKeyEvents = domElement;\n\n\t};\n\n\tthis.saveState = function () {\n\n\t\tscope.target0.copy( scope.target );\n\t\tscope.position0.copy( scope.object.position );\n\t\tscope.zoom0 = scope.object.zoom;\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tscope.target.copy( scope.target0 );\n\t\tscope.object.position.copy( scope.position0 );\n\t\tscope.object.zoom = scope.zoom0;\n\n\t\tscope.object.updateProjectionMatrix();\n\t\tscope.dispatchEvent( changeEvent );\n\n\t\tscope.update();\n\n\t\tstate = STATE.NONE;\n\n\t};\n\n\t// this method is exposed, but perhaps it would be better if we can make it private...\n\tthis.update = function () {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\t// so camera.up is the orbit axis\n\t\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\n\t\tvar quatInverse = quat.clone().invert();\n\n\t\tvar lastPosition = new THREE.Vector3();\n\t\tvar lastQuaternion = new THREE.Quaternion();\n\n\t\tvar twoPI = 2 * Math.PI;\n\n\t\treturn function update() {\n\n\t\t\tvar position = scope.object.position;\n\n\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t// angle from z-axis around y-axis\n\t\t\tspherical.setFromVector3( offset );\n\n\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t}\n\n\t\t\tif ( scope.enableDamping ) {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta * scope.dampingFactor;\n\t\t\t\tspherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n\t\t\t} else {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t}\n\n\t\t\t// restrict theta to be between desired limits\n\n\t\t\tvar min = scope.minAzimuthAngle;\n\t\t\tvar max = scope.maxAzimuthAngle;\n\n\t\t\tif ( isFinite( min ) && isFinite( max ) ) {\n\n\t\t\t\tif ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\n\n\t\t\t\tif ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\n\n\t\t\t\tif ( min <= max ) {\n\n\t\t\t\t\tspherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tspherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\n\t\t\t\t\t\tMath.max( min, spherical.theta ) :\n\t\t\t\t\t\tMath.min( max, spherical.theta );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// restrict phi to be between desired limits\n\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\tspherical.makeSafe();\n\n\n\t\t\tspherical.radius *= scale;\n\n\t\t\t// restrict radius to be between desired limits\n\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t// move target to panned location\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tscope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tscope.target.add( panOffset );\n\n\t\t\t}\n\n\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t\tpanOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\tscale = 1;\n\n\t\t\t// update condition is:\n\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\tif ( zoomChanged ||\n\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\tzoomChanged = false;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t};\n\n\t}();\n\n\tthis.dispose = function () {\n\n\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu );\n\n\t\tscope.domElement.removeEventListener( 'pointerdown', onPointerDown );\n\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel );\n\n\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart );\n\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd );\n\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove );\n\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointermove', onPointerMove );\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointerup', onPointerUp );\n\n\n\t\tif ( scope._domElementKeyEvents !== null ) {\n\n\t\t\tscope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n\n\t\t}\n\n\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t};\n\n\t//\n\t// internals\n\t//\n\n\tvar scope = this;\n\n\tvar changeEvent = { type: 'change' };\n\tvar startEvent = { type: 'start' };\n\tvar endEvent = { type: 'end' };\n\n\tvar STATE = {\n\t\tNONE: - 1,\n\t\tROTATE: 0,\n\t\tDOLLY: 1,\n\t\tPAN: 2,\n\t\tTOUCH_ROTATE: 3,\n\t\tTOUCH_PAN: 4,\n\t\tTOUCH_DOLLY_PAN: 5,\n\t\tTOUCH_DOLLY_ROTATE: 6\n\t};\n\n\tvar state = STATE.NONE;\n\n\tvar EPS = 0.000001;\n\n\t// current position in spherical coordinates\n\tvar spherical = new THREE.Spherical();\n\tvar sphericalDelta = new THREE.Spherical();\n\n\tvar scale = 1;\n\tvar panOffset = new THREE.Vector3();\n\tvar zoomChanged = false;\n\n\tvar rotateStart = new THREE.Vector2();\n\tvar rotateEnd = new THREE.Vector2();\n\tvar rotateDelta = new THREE.Vector2();\n\n\tvar panStart = new THREE.Vector2();\n\tvar panEnd = new THREE.Vector2();\n\tvar panDelta = new THREE.Vector2();\n\n\tvar dollyStart = new THREE.Vector2();\n\tvar dollyEnd = new THREE.Vector2();\n\tvar dollyDelta = new THREE.Vector2();\n\n\tfunction getAutoRotationAngle() {\n\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t}\n\n\tfunction getZoomScale() {\n\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t}\n\n\tfunction rotateLeft( angle ) {\n\n\t\tsphericalDelta.theta -= angle;\n\n\t}\n\n\tfunction rotateUp( angle ) {\n\n\t\tsphericalDelta.phi -= angle;\n\n\t}\n\n\tvar panLeft = function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\tv.multiplyScalar( - distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\tvar panUp = function () {\n\n\t\tvar v = new THREE.Vector3();\n\n\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\tif ( scope.screenSpacePanning === true ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 );\n\t\t\t\tv.crossVectors( scope.object.up, v );\n\n\t\t\t}\n\n\t\t\tv.multiplyScalar( distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\t// deltaX and deltaY are in pixels; right and down are positive\n\tvar pan = function () {\n\n\t\tvar offset = new THREE.Vector3();\n\n\t\treturn function pan( deltaX, deltaY ) {\n\n\t\t\tvar element = scope.domElement;\n\n\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\t// perspective\n\t\t\t\tvar position = scope.object.position;\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t// we use only clientHeight here so aspect ratio does not distort speed\n\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\t// orthographic\n\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else {\n\n\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\tscope.enablePan = false;\n\n\t\t\t}\n\n\t\t};\n\n\t}();\n\n\tfunction dollyOut( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale /= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\tfunction dollyIn( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale *= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\t//\n\t// event callbacks - update the object state\n\t//\n\n\tfunction handleMouseDownRotate( event ) {\n\n\t\trotateStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownDolly( event ) {\n\n\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownPan( event ) {\n\n\t\tpanStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseMoveRotate( event ) {\n\n\t\trotateEnd.set( event.clientX, event.clientY );\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMoveDolly( event ) {\n\n\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t}\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMovePan( event ) {\n\n\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseUp( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\tfunction handleMouseWheel( event ) {\n\n\t\tif ( event.deltaY < 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t}\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleKeyDown( event ) {\n\n\t\tvar needsUpdate = false;\n\n\t\tswitch ( event.keyCode ) {\n\n\t\t\tcase scope.keys.UP:\n\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.LEFT:\n\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.RIGHT:\n\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( needsUpdate ) {\n\n\t\t\t// prevent the browser from scrolling on cursor keys\n\t\t\tevent.preventDefault();\n\n\t\t\tscope.update();\n\n\t\t}\n\n\n\t}\n\n\tfunction handleTouchStartRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartPan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyStart.set( 0, distance );\n\n\t}\n\n\tfunction handleTouchStartDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchStartPan( event );\n\n\t}\n\n\tfunction handleTouchStartDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchStartRotate( event );\n\n\t}\n\n\tfunction handleTouchMoveRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateEnd.set( x, y );\n\n\t\t}\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t}\n\n\tfunction handleTouchMovePan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanEnd.set( x, y );\n\n\t\t}\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t}\n\n\tfunction handleTouchMoveDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyEnd.set( 0, distance );\n\n\t\tdollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n\t\tdollyOut( dollyDelta.y );\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t}\n\n\tfunction handleTouchMoveDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchMovePan( event );\n\n\t}\n\n\tfunction handleTouchMoveDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n\t}\n\n\tfunction handleTouchEnd( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\t//\n\t// event handlers - FSM: listen for events and reset state\n\t//\n\n\tfunction onPointerDown( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tswitch ( event.pointerType ) {\n\n\t\t\tcase 'mouse':\n\t\t\tcase 'pen':\n\t\t\t\tonMouseDown( event );\n\t\t\t\tbreak;\n\n\t\t\t// TODO touch\n\n\t\t}\n\n\t}\n\n\tfunction onPointerMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tswitch ( event.pointerType ) {\n\n\t\t\tcase 'mouse':\n\t\t\tcase 'pen':\n\t\t\t\tonMouseMove( event );\n\t\t\t\tbreak;\n\n\t\t\t// TODO touch\n\n\t\t}\n\n\t}\n\n\tfunction onPointerUp( event ) {\n\n\t\tswitch ( event.pointerType ) {\n\n\t\t\tcase 'mouse':\n\t\t\tcase 'pen':\n\t\t\t\tonMouseUp( event );\n\t\t\t\tbreak;\n\n\t\t\t// TODO touch\n\n\t\t}\n\n\t}\n\n\tfunction onMouseDown( event ) {\n\n\t\t// Prevent the browser from scrolling.\n\t\tevent.preventDefault();\n\n\t\t// Manually set the focus since calling preventDefault above\n\t\t// prevents the browser from setting it automatically.\n\n\t\tscope.domElement.focus ? scope.domElement.focus() : window.focus();\n\n\t\tvar mouseAction;\n\n\t\tswitch ( event.button ) {\n\n\t\t\tcase 0:\n\n\t\t\t\tmouseAction = scope.mouseButtons.LEFT;\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\n\t\t\t\tmouseAction = scope.mouseButtons.MIDDLE;\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tmouseAction = scope.mouseButtons.RIGHT;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tmouseAction = - 1;\n\n\t\t}\n\n\t\tswitch ( mouseAction ) {\n\n\t\t\tcase THREE.MOUSE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseDownDolly( event );\n\n\t\t\t\tstate = STATE.DOLLY;\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.MOUSE.ROTATE:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase THREE.MOUSE.PAN:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.domElement.ownerDocument.addEventListener( 'pointermove', onPointerMove );\n\t\t\tscope.domElement.ownerDocument.addEventListener( 'pointerup', onPointerUp );\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onMouseMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseMoveRotate( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseMoveDolly( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseMovePan( event );\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction onMouseUp( event ) {\n\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointermove', onPointerMove );\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointerup', onPointerUp );\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleMouseUp( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onMouseWheel( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tscope.dispatchEvent( startEvent );\n\n\t\thandleMouseWheel( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t}\n\n\tfunction onKeyDown( event ) {\n\n\t\tif ( scope.enabled === false || scope.enablePan === false ) return;\n\n\t\thandleKeyDown( event );\n\n\t}\n\n\tfunction onTouchStart( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault(); // prevent scrolling\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1:\n\n\t\t\t\tswitch ( scope.touches.ONE ) {\n\n\t\t\t\t\tcase THREE.TOUCH.ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.TOUCH.PAN:\n\n\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tswitch ( scope.touches.TWO ) {\n\n\t\t\t\t\tcase THREE.TOUCH.DOLLY_PAN:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase THREE.TOUCH.DOLLY_ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onTouchMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault(); // prevent scrolling\n\t\tevent.stopPropagation();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.TOUCH_ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMovePan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_PAN:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMoveDollyPan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_ROTATE:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveDollyRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t}\n\n\tfunction onTouchEnd( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleTouchEnd( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onContextMenu( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t}\n\n\t//\n\n\tscope.domElement.addEventListener( 'contextmenu', onContextMenu );\n\n\tscope.domElement.addEventListener( 'pointerdown', onPointerDown );\n\tscope.domElement.addEventListener( 'wheel', onMouseWheel );\n\n\tscope.domElement.addEventListener( 'touchstart', onTouchStart );\n\tscope.domElement.addEventListener( 'touchend', onTouchEnd );\n\tscope.domElement.addEventListener( 'touchmove', onTouchMove );\n\n\t// force an update at start\n\n\tthis.update();\n\n};\n\nTHREE.OrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\nTHREE.OrbitControls.prototype.constructor = THREE.OrbitControls;\n\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n// This is very similar to OrbitControls, another set of touch behavior\n//\n//    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - left mouse, or arrow keys / touch: one-finger move\n\nTHREE.MapControls = function ( object, domElement ) {\n\n\tTHREE.OrbitControls.call( this, object, domElement );\n\n\tthis.screenSpacePanning = false; // pan orthogonal to world-space direction camera.up\n\n\tthis.mouseButtons.LEFT = THREE.MOUSE.PAN;\n\tthis.mouseButtons.RIGHT = THREE.MOUSE.ROTATE;\n\n\tthis.touches.ONE = THREE.TOUCH.PAN;\n\tthis.touches.TWO = THREE.TOUCH.DOLLY_ROTATE;\n\n};\n\nTHREE.MapControls.prototype = Object.create( THREE.EventDispatcher.prototype );\nTHREE.MapControls.prototype.constructor = THREE.MapControls;\n","module.exports = \"#define GLSLIFY 1\\nvarying vec2 vUv;\\nvarying float vDepth;\\nvarying float vHidden;\\n\\nfloat hue2rgb(float f1, float f2, float hue) {\\n    if (hue < 0.0)\\n        hue += 1.0;\\n    else if (hue > 1.0)\\n        hue -= 1.0;\\n    float res;\\n    if ((6.0 * hue) < 1.0)\\n        res = f1 + (f2 - f1) * 6.0 * hue;\\n    else if ((2.0 * hue) < 1.0)\\n        res = f2;\\n    else if ((3.0 * hue) < 2.0)\\n        res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;\\n    else\\n        res = f1;\\n    return res;\\n}\\n\\nvec3 hsl2rgb(vec3 hsl) {\\n    vec3 rgb;\\n    \\n    if (hsl.y == 0.0) {\\n        rgb = vec3(hsl.z); // Luminance\\n    } else {\\n        float f2;\\n        \\n        if (hsl.z < 0.5)\\n            f2 = hsl.z * (1.0 + hsl.y);\\n        else\\n            f2 = hsl.z + hsl.y - hsl.y * hsl.z;\\n            \\n        float f1 = 2.0 * hsl.z - f2;\\n        \\n        rgb.r = hue2rgb(f1, f2, hsl.x + (1.0/3.0));\\n        rgb.g = hue2rgb(f1, f2, hsl.x);\\n        rgb.b = hue2rgb(f1, f2, hsl.x - (1.0/3.0));\\n    }   \\n    return rgb;\\n}\\n\\nvec3 hsl2rgb(float h, float s, float l) {\\n    return hsl2rgb(vec3(h, s, l));\\n}\\nvoid main() {\\n\\n  float width = 0.03;\\n\\n  float prec = 0.001;\\n\\n  float borderx = max(\\n    smoothstep(width+prec , width-prec, vUv.x),\\n    smoothstep(width+prec , width-prec, 1. - vUv.x)\\n  );\\n\\n  float bordery = max(\\n    smoothstep(width+prec , width-prec, vUv.y),\\n    smoothstep(width+prec , width-prec, 1. - vUv.y)\\n  );\\n\\n  float border = max(borderx, bordery);\\n \\n  vec3 finalColor = mix(hsl2rgb(vDepth,vDepth * 3. , vDepth ), vec3(0.9), border);\\n\\n  if(vHidden < 0.5) discard;\\n\\n  gl_FragColor = vec4(finalColor, 1.);\\n}\";","module.exports = \"#define GLSLIFY 1\\nuniform float time;\\nvarying vec2 vUv;\\nvarying vec4 vPosition;\\nuniform vec2 pixels;\\nattribute float random;\\nattribute vec3 pos;\\nattribute float depth;\\nvarying float vDepth;\\nvarying float vHidden;\\n\\n//\\tSimplex 4D Noise \\n//\\tby Ian McEwan, Ashima Arts\\n//\\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\\nfloat permute(float x){return floor(mod(((x*34.0)+1.0)*x, 289.0));}\\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\\nfloat taylorInvSqrt(float r){return 1.79284291400159 - 0.85373472095314 * r;}\\n\\nvec4 grad4(float j, vec4 ip){\\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\\n  vec4 p,s;\\n\\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\\n  s = vec4(lessThan(p, vec4(0.0)));\\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; \\n\\n  return p;\\n}\\n\\nfloat snoise(vec4 v){\\n  const vec2  C = vec2( 0.138196601125010504,  // (5 - sqrt(5))/20  G4\\n                        0.309016994374947451); // (sqrt(5) - 1)/4   F4\\n// First corner\\n  vec4 i  = floor(v + dot(v, C.yyyy) );\\n  vec4 x0 = v -   i + dot(i, C.xxxx);\\n\\n// Other corners\\n\\n// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\\n  vec4 i0;\\n\\n  vec3 isX = step( x0.yzw, x0.xxx );\\n  vec3 isYZ = step( x0.zww, x0.yyz );\\n//  i0.x = dot( isX, vec3( 1.0 ) );\\n  i0.x = isX.x + isX.y + isX.z;\\n  i0.yzw = 1.0 - isX;\\n\\n//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\\n  i0.y += isYZ.x + isYZ.y;\\n  i0.zw += 1.0 - isYZ.xy;\\n\\n  i0.z += isYZ.z;\\n  i0.w += 1.0 - isYZ.z;\\n\\n  // i0 now contains the unique values 0,1,2,3 in each channel\\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\\n\\n  //  x0 = x0 - 0.0 + 0.0 * C \\n  vec4 x1 = x0 - i1 + 1.0 * C.xxxx;\\n  vec4 x2 = x0 - i2 + 2.0 * C.xxxx;\\n  vec4 x3 = x0 - i3 + 3.0 * C.xxxx;\\n  vec4 x4 = x0 - 1.0 + 4.0 * C.xxxx;\\n\\n// Permutations\\n  i = mod(i, 289.0); \\n  float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\\n  vec4 j1 = permute( permute( permute( permute (\\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\\n// Gradients\\n// ( 7*7*6 points uniformly over a cube, mapped onto a 4-octahedron.)\\n// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\\n\\n  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\\n\\n  vec4 p0 = grad4(j0,   ip);\\n  vec4 p1 = grad4(j1.x, ip);\\n  vec4 p2 = grad4(j1.y, ip);\\n  vec4 p3 = grad4(j1.z, ip);\\n  vec4 p4 = grad4(j1.w, ip);\\n\\n// Normalise gradients\\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n  p4 *= taylorInvSqrt(dot(p4,p4));\\n\\n// Mix contributions from the five corners\\n  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\\n  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\\n  m0 = m0 * m0;\\n  m1 = m1 * m1;\\n  return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\\n\\n}\\n\\nvoid main() {\\n  vUv = uv;\\n  vDepth = depth;\\n\\n  float niose = snoise(vec4(pos*4., time/2.));\\n  niose = step(niose, 0.2);\\n\\n  vHidden = niose;\\n  // vec3 newpos = position*abs(sin(pos.x*10. + pos.y*10. + pos.z*3. + time/4.));\\n  vec3 newpos = position;\\n\\n  gl_Position = projectionMatrix * modelViewMatrix * instanceMatrix * vec4(newpos, 1.0);\\n}\";","\nglobal.CANVAS_SKETCH_DEFAULT_STORAGE_KEY = window.location.href;\n"]}